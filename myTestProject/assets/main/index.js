System.register("chunks:///_virtual/ActionInfo.ts", ['cc', './GameConst.ts'], function (exports) {
  var cclegacy, GameConst;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      GameConst = module.GameConst;
    }],
    execute: function () {
      cclegacy._RF.push({}, "ecd0a7U7pNKd4z66FlS7gFN", "ActionInfo", undefined);

      /**
       * @fileName ActionInfo.ts
       * @author zhangqiong
       * @date 2025/01/04 20:39:19"
       * @description
       */
      var ActionInfo = exports('ActionInfo', function ActionInfo(name, handler, times, endName) {
        if (handler === void 0) {
          handler = null;
        }
        if (times === void 0) {
          times = -1;
        }
        if (endName === void 0) {
          endName = GameConst.Idle;
        }
        this.name = void 0;
        this.handler = void 0;
        this.times = -1;
        this.endActionName = GameConst.Idle;
        this.name = name;
        this.handler = handler;
        this.times = times;
        this.endActionName = endName;
      });
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/AFKGame.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './BaseView.ts', './ViewRegisterMgr.ts', './PanelEnum.ts', './LayerManager.ts', './GameScene.ts', './ViewConst.ts', './HashMap.ts', './FightHeroInfo.ts', './GameConst.ts', './FightRoleEntity.ts', './Utils.ts', './FightMgr.ts', './FightConfig.ts'], function (exports) {
  var _inheritsLoose, _asyncToGenerator, _regeneratorRuntime, cclegacy, _decorator, math, resources, JsonAsset, BaseView, registerView, PanelType, LayerType, GameScene, ViewConst, HashMap, FightHeroInfo, GameConst, FightRoleEntity, Utils, FightMgr, FightConfig;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _asyncToGenerator = module.asyncToGenerator;
      _regeneratorRuntime = module.regeneratorRuntime;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      math = module.math;
      resources = module.resources;
      JsonAsset = module.JsonAsset;
    }, function (module) {
      BaseView = module.default;
    }, function (module) {
      registerView = module.registerView;
    }, function (module) {
      PanelType = module.PanelType;
    }, function (module) {
      LayerType = module.LayerType;
    }, function (module) {
      GameScene = module.GameScene;
    }, function (module) {
      ViewConst = module.default;
    }, function (module) {
      HashMap = module.HashMap;
    }, function (module) {
      FightHeroInfo = module.FightHeroInfo;
    }, function (module) {
      GameConst = module.GameConst;
    }, function (module) {
      FightRoleEntity = module.FightRoleEntity;
    }, function (module) {
      Utils = module.default;
    }, function (module) {
      FightMgr = module.FightMgr;
    }, function (module) {
      FightConfig = module.FightConfig;
    }],
    execute: function () {
      var _dec, _class;
      cclegacy._RF.push({}, "86e896MaEBGsp9GQ8s3/bXj", "AFKGame", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var AFKGame = exports('AFKGame', (_dec = ccclass('AFKGame'), _dec(_class = /*#__PURE__*/function (_BaseView) {
        _inheritsLoose(AFKGame, _BaseView);
        function AFKGame() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _BaseView.call.apply(_BaseView, [this].concat(args)) || this;
          _this.scene = void 0;
          _this.gameConfig = void 0;
          _this.heroMap = void 0;
          _this.enmeyMap = void 0;
          _this.positionMap = void 0;
          _this.isInit = false;
          return _this;
        }
        var _proto = AFKGame.prototype;
        _proto.start = function start() {};
        _proto.update = function update(deltaTime) {
          if (!this.isInit) {
            return;
          }
          FightMgr.instance.doFrameHandler();
        };
        _proto.init = function init() {
          this.heroMap = new HashMap();
          this.enmeyMap = new HashMap();
          this.positionMap = new HashMap();
          this.isInit = false;
        };
        _proto.onOpen = /*#__PURE__*/function () {
          var _onOpen = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(fromUI) {
            var i, leftNodeName, rightNodeName, leftNode, rightNode, leftMap, rightMap, heros, enmeys, index, element, _index, _element;
            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) switch (_context.prev = _context.next) {
                case 0:
                  _context.next = 2;
                  return this.loadConfig();
                case 2:
                  this.scene = new GameScene();
                  this.scene.init();
                  this.scene.name = "afkScene";
                  this.node.addChild(this.scene);
                  for (i = 0; i < 5; i++) {
                    leftNodeName = "left" + i;
                    rightNodeName = "right" + i;
                    leftNode = Utils.FindChildByName(this.node, leftNodeName);
                    rightNode = Utils.FindChildByName(this.node, rightNodeName);
                    leftMap = this.positionMap.get(0);
                    if (!leftMap) {
                      leftMap = new HashMap();
                    }
                    rightMap = this.positionMap.get(1);
                    if (!rightMap) {
                      rightMap = new HashMap();
                    }
                    leftNode.active = rightNode.active = false;
                    leftMap.put(i + 1, leftNode.position.clone());
                    rightMap.put(i + 1, rightNode.position.clone());
                    this.positionMap.put(0, leftMap);
                    this.positionMap.put(1, rightMap);
                  }
                  heros = this.heroMap.values();
                  enmeys = this.enmeyMap.values();
                  index = 0;
                case 10:
                  if (!(index < heros.length)) {
                    _context.next = 17;
                    break;
                  }
                  element = heros[index];
                  _context.next = 14;
                  return this.createHero(element);
                case 14:
                  index++;
                  _context.next = 10;
                  break;
                case 17:
                  _index = 0;
                case 18:
                  if (!(_index < enmeys.length)) {
                    _context.next = 25;
                    break;
                  }
                  _element = enmeys[_index];
                  _context.next = 22;
                  return this.createHero(_element);
                case 22:
                  _index++;
                  _context.next = 18;
                  break;
                case 25:
                  FightMgr.instance.setRandomSeed(99856269);
                  this.isInit = true;
                case 27:
                case "end":
                  return _context.stop();
              }
            }, _callee, this);
          }));
          function onOpen(_x) {
            return _onOpen.apply(this, arguments);
          }
          return onOpen;
        }();
        _proto.loadConfig = /*#__PURE__*/function () {
          var _loadConfig = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {
            var _this2 = this;
            return _regeneratorRuntime().wrap(function _callee2$(_context2) {
              while (1) switch (_context2.prev = _context2.next) {
                case 0:
                  return _context2.abrupt("return", new Promise(function (resolve, reject) {
                    resources.load("afk/afkGameConfg", JsonAsset, function (err, data) {
                      if (err) {
                        reject(err);
                        return;
                      }
                      _this2.gameConfig = data.json;
                      FightConfig.instance.init(_this2.gameConfig);
                      var heros = _this2.gameConfig.heros;
                      for (var key in heros) {
                        if (Object.prototype.hasOwnProperty.call(heros, key)) {
                          var element = heros[key];
                          var hid = Number(key);
                          var hero = _this2.setFightHeroInfo(1000, element);
                          if (element.comp == 0) {
                            _this2.heroMap.put(hid, hero);
                          } else {
                            _this2.enmeyMap.put(hid, hero);
                          }
                        }
                      }
                      resolve();
                    });
                  }));
                case 1:
                case "end":
                  return _context2.stop();
              }
            }, _callee2);
          }));
          function loadConfig() {
            return _loadConfig.apply(this, arguments);
          }
          return loadConfig;
        }();
        _proto.setFightHeroInfo = function setFightHeroInfo(playerId, data) {
          var heroInfo = new FightHeroInfo();
          heroInfo.setData(playerId, data);
          return heroInfo;
        };
        _proto.getPosition = function getPosition(info) {
          var comp = info.camp;
          var site = info.site;
          var posMap = this.positionMap.get(comp);
          if (!posMap) {
            return math.v3(0, 0);
          }
          return posMap.get(site);
        };
        _proto.createHero = function createHero(fightHero) {
          var _this3 = this;
          return new Promise(function (resolve, reject) {
            _this3.create(FightRoleEntity, fightHero, _this3.scene, fightHero.camp == 0 ? GameConst.RIGHT : GameConst.LEFT).then(function (entity) {
              var position = _this3.getPosition(fightHero);
              entity.setLocation(position.x, position.y);
              entity.initHeadBar().then(function (e) {
                FightMgr.instance.addEntity(entity);
                console.log("hero_" + fightHero.spineId, entity.getBounds());
                resolve();
              })["catch"](function (bErr) {
                reject(bErr);
              });
            })["catch"](function (err) {
              reject(err);
            });
          });
        };
        _proto.create = function create(c, info, scene, dir, action) {
          if (dir === void 0) {
            dir = GameConst.RIGHT;
          }
          if (action === void 0) {
            action = GameConst.Idle;
          }
          return new Promise(function (reslove, reject) {
            var entity = new c();
            entity.setData(info);
            if (!scene.getUnitById(entity.getId())) {
              scene.addUnit(entity);
            }
            entity.setRole(info.heroConfig.spineId).then(function (value) {
              entity.changeActionAndDirection(action, dir);
              reslove(entity);
            })["catch"](function (err) {
              reject(err);
            });
          });
        };
        return AFKGame;
      }(BaseView)) || _class));
      registerView({
        viewCls: AFKGame,
        id: PanelType.AFKGame,
        layer: LayerType.view,
        prefabPathPrefix: ViewConst.defaultPrefabPathPrefix + "afk/"
      });
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/AFKGameConfigVo.ts", ['cc'], function (exports) {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "bee34vsZcpM2J1haGSe2RYX", "AFKGameConfigVo", undefined);
      /**
       * @fileName AFKGameConfigVo.ts
       * @author zhangqiong
       * @date 2024/12/26 20:17:19"
       * @description
       */
      var AFKGameConfigVo = exports('AFKGameConfigVo', function AFKGameConfigVo() {
        this.heros = void 0;
        this.skills = void 0;
      });
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/AFKResultPanel.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './BaseView.ts', './ViewRegisterMgr.ts', './PanelEnum.ts', './LayerManager.ts', './ViewConst.ts', './Utils.ts', './ViewManager.ts', './Enum2.ts', './FightMgr.ts'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, Button, sp, BaseView, registerView, PanelType, LayerType, ViewConst, Utils, viewManager, ViewShowTypes, FightMgr;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Button = module.Button;
      sp = module.sp;
    }, function (module) {
      BaseView = module.default;
    }, function (module) {
      registerView = module.registerView;
    }, function (module) {
      PanelType = module.PanelType;
    }, function (module) {
      LayerType = module.LayerType;
    }, function (module) {
      ViewConst = module.default;
    }, function (module) {
      Utils = module.default;
    }, function (module) {
      viewManager = module.viewManager;
    }, function (module) {
      ViewShowTypes = module.ViewShowTypes;
    }, function (module) {
      FightMgr = module.FightMgr;
    }],
    execute: function () {
      var _dec, _class;
      cclegacy._RF.push({}, "d07402x9N1DjZYR2sCnp7gT", "AFKResultPanel", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;

      /**
       * @fileName AFKResultPanel.ts
       * @author zhangqiong
       * @date 2025/01/07 15:10:00"
       * @description
       */
      var AFKResultPanel = exports('AFKResultPanel', (_dec = ccclass('AFKResultPanel'), _dec(_class = /*#__PURE__*/function (_BaseView) {
        _inheritsLoose(AFKResultPanel, _BaseView);
        function AFKResultPanel() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _BaseView.call.apply(_BaseView, [this].concat(args)) || this;
          _this.showType = ViewShowTypes.ViewAddition;
          _this.btn = void 0;
          _this.spine = void 0;
          return _this;
        }
        var _proto = AFKResultPanel.prototype;
        _proto.init = function init() {
          this.btn = Utils.FindChildByName(this.node, "tryBtn").getComponent(Button);
          this.spine = Utils.FindChildByName(this.node, "spineNode").getComponent(sp.Skeleton);
          if (this.btn) {
            this.btn.node.on(Button.EventType.CLICK, this.onClickBtn, this);
          }
        };
        _proto.onClickBtn = function onClickBtn() {
          viewManager.close(this);
          FightMgr.instance.reset();
          viewManager.open(PanelType.AFKGame);
        };
        _proto.onOpen = function onOpen(fromUI) {
          var isWin = arguments.length <= 1 ? undefined : arguments[1];
          var actionName = isWin ? "animation_2" : "animation_3";
          if (this.spine) {
            this.spine.animation = actionName;
          }
        };
        _proto.onLoad = function onLoad() {};
        _proto.start = function start() {};
        _proto.update = function update(deltaTime) {};
        return AFKResultPanel;
      }(BaseView)) || _class));
      registerView({
        viewCls: AFKResultPanel,
        id: PanelType.AFKResultPanel,
        layer: LayerType.view,
        prefabPathPrefix: ViewConst.defaultPrefabPathPrefix + "afk/"
      });
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/AnimationPath.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './TowerLauncher.ts'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, Animation, Graphics, resources, Color, math, Component, TowerLauncher;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Animation = module.Animation;
      Graphics = module.Graphics;
      resources = module.resources;
      Color = module.Color;
      math = module.math;
      Component = module.Component;
    }, function (module) {
      TowerLauncher = module.TowerLauncher;
    }],
    execute: function () {
      var _dec, _class;
      cclegacy._RF.push({}, "85731V2OvZAdZqz5Y5lYAJZ", "AnimationPath", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var AnimationPath = exports('AnimationPath', (_dec = ccclass('AnimationPath'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(AnimationPath, _Component);
        function AnimationPath() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.animation = void 0;
          _this.graphics = void 0;
          _this.p2pDistance = 25;
          return _this;
        }
        var _proto = AnimationPath.prototype;
        _proto.onLoad = function onLoad() {
          this.animation = this.getComponent(Animation);
          if (!this.animation) {
            this.animation = this.node.addComponent(Animation);
          }
          this.graphics = this.node.getComponent(Graphics);
          if (!this.graphics) {
            this.graphics = this.node.addComponent(Graphics);
          }
          // this.graphics.fillColor = math.color(255,0,0,255)
        };

        _proto.start = function start() {
          // this.getWorldPath()
          this.getWorldPathByMapId(1);
        };
        _proto.update = function update(deltaTime) {};
        _proto.getWorldPathByMapId = function getWorldPathByMapId(mapId, themeId) {
          var _this2 = this;
          if (themeId === void 0) {
            themeId = TowerLauncher.instance.theme;
          }
          return new Promise(function (resolve, reject) {
            var path = "anim/map/map" + themeId + "_" + mapId;
            resources.load(path, function (err, data) {
              if (err) {
                console.error(err);
                reject(err);
                return;
              }
              console.log(data);
              var path = _this2.getNodePath(data);
              _this2.drawPoint(path, Color.RED);
              resolve(path);
            });
          });
        }

        /**
         * Gets world path
         *
         * @returns world path
         */;
        _proto.getWorldPath = function getWorldPath() {
          var clips = this.animation.clips;
          var path = this.getNodePath(clips[0]);
          console.log(path);
          this.drawPoint(path, Color.RED);
          return path;
          // for (let i = 0; i < path.length; i++)
          //     path[i] = this.node.getWorldPosition(path[i]);
          // return path;
        }

        /**
         *
         * @returns 节点坐标
         */;
        _proto.getNodePath = function getNodePath(clip) {
          var track = clip.tracks[0];
          var channels = track.channels();
          var xcurve = channels[0].curve;
          var ycurve = channels[1].curve;
          var xkeyFrame = xcurve.values();
          var ykeyFrame = ycurve.values();
          // let paths =  clip.curves//clip.curveData.paths; //动画路径数组
          // let frameArray = paths[pathName].props.position; //关键帧数组即为一条路径
          var bezierPartArray = this.getBezierPartArray(xkeyFrame, ykeyFrame);
          // let path: Vec2[] = this._getPath(bezierPartArray);

          return bezierPartArray;
        }

        /**
         * 得到点路径
         * @param bezierPartArray 曲线数组
         * @returns path 不含路径起点坐标
         */;
        _proto._getPath = function _getPath(bezierPartArray) {
          var pArray = [];
          var bezier;
          for (var i = 0; i < bezierPartArray.length; i++) {
            bezier = bezierPartArray[i];
            bezier.createPosArray(16);
            pArray = pArray.concat(bezier.posArray);
          }
          return pArray;
        }

        /**
         * 由关键帧数组 得到 曲线段数组
         * @param xframeArray
         * @param yframeArray
         */;
        _proto.getBezierPartArray = function getBezierPartArray(xframeArray, yframeArray) {
          var bezierPartArray = [];
          var maxLength = Math.max(xframeArray.length, yframeArray.length);
          //两个关键帧组成一条路径
          for (var j = 0; j < maxLength - 1; j++) {
            var xKeyFrame = xframeArray[j];
            var yKeyFrame = yframeArray[j];
            var nextXKeyFrame = xframeArray[j + 1];
            var nextYKeyFrame = yframeArray[j + 1];
            var arr = this.createBezierPartArray(xKeyFrame, yKeyFrame, nextXKeyFrame, nextYKeyFrame);
            bezierPartArray = bezierPartArray.concat(arr);
          }
          return bezierPartArray;
        }

        /**
         * 由两个关键帧 生成 它们构成的贝塞尔曲线段数组
         * @param startXKeyFrame
         * @param startYKeyFrame
         * @param endXKeyFrame
         * @param endYKeyFrame
         */;
        _proto.createBezierPartArray = function createBezierPartArray(startXKeyFrame, startYKeyFrame, endXKeyFrame, endYKeyFrame) {
          var startPoint = math.v2(startXKeyFrame.value, startYKeyFrame.value);
          var endPoint = math.v2(endXKeyFrame.value, endYKeyFrame.value);
          var direction = endPoint.subtract(startPoint);
          var distance = direction.length(); //Vec2.distance(startPoint,endPoint);
          var numSegments = distance / this.p2pDistance;
          var dx = direction.x / numSegments; // x轴方向的每段增量
          var dy = direction.y / numSegments; // y轴方向的每段增量

          var result = [];
          for (var i = 0; i <= numSegments; i++) {
            var x = startPoint.x + i * dx;
            var y = startPoint.y + i * dy;
            result.push(math.v2(x, y));
          }
          return result;

          // let startP: Vec2, cP1: Vec2, cP2: Vec2, endP: Vec2;
          // let motionPath = startKeyFrame.motionPath; //移动路径数组即主控制点数组
          // let moPathSP, moPathEP; //一段曲线上的首尾端主控制点
          //
          // //第一段
          // startP = math.v2(startKeyFrame.value[0], startKeyFrame.value[1]);
          // moPathEP = motionPath[0];
          // cP1 = cP2 = math.v2(moPathEP[2], moPathEP[3]);
          // endP = math.v2(moPathEP[0], moPathEP[1]);
          // bezierPartArray.push(new BezierPart(startP, cP1, cP2, endP));
          //
          // for (let i = 0; i < motionPath.length - 1; i++) { //0 - len - 1, len - 3 len - 2 len -1
          //     moPathSP = motionPath[i];
          //     moPathEP = motionPath[i + 1]
          //     startP = math.v2(moPathSP[0], moPathSP[1]);
          //     cP1 = math.v2(moPathSP[4], moPathSP[5]);
          //     cP2 = math.v2(moPathEP[2], moPathEP[3]);
          //     endP = math.v2(moPathEP[0], moPathEP[1]);
          //     bezierPartArray.push(new BezierPart(startP, cP1, cP2, endP));
          // }
          //
          // //最后一段
          // moPathSP = motionPath[motionPath.length - 1];
          // startP = math.v2(moPathSP[0], moPathSP[1]);
          // cP1 = cP2 = math.v2(moPathSP[4], moPathSP[5]);
          // endP = math.v2(endKeyFrame.value[0], endKeyFrame.value[1]);
          // bezierPartArray.push(new BezierPart(startP, cP1, cP2, endP));

          // return bezierPartArray;
        }

        /**
         * Draws point
         * @param point 点坐标
         * @param color 默认颜色为红色
         */;
        _proto.drawPoint = function drawPoint(point, color) {
          if (color === void 0) {
            color = null;
          }
          this.graphics.clear();
          if (color === null) this.graphics.strokeColor = Color.RED;else this.graphics.strokeColor = color;

          // this.graphics.strokeColor = cc.Color.RED;
          this.graphics.fillColor = Color.RED;
          this.graphics.lineWidth = 1;
          if (point.length) {
            for (var i = 0; i < point.length; i++) {
              this.graphics.circle(point[i].x, point[i].y, 2);
              // this.graphics.stroke();
              this.graphics.fill();
            }
          } else {
            this.graphics.circle(point.x, point.y, 2);
            this.graphics.fill();
          }
        };
        return AnimationPath;
      }(Component)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/AreaType.ts", ['cc'], function (exports) {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "c5be0bRepNF2YyFPUHoUaZK", "AreaType", undefined);
      var AreaType = exports('AreaType', function AreaType() {});
      /// <summary>
      /// 左上
      /// </summary>
      AreaType.LT = 0x0001;
      /// <summary>
      /// 右上
      /// </summary>
      AreaType.RT = 0x0010;
      /// <summary>
      /// 左下
      /// </summary>
      AreaType.LB = 0x0100;
      /// <summary>
      /// 右下
      /// </summary>
      AreaType.RB = 0x1000;
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ArrayUtils.ts", ['cc'], function (exports) {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "881a3GBmmtBJLOMpwSDzNlQ", "ArrayUtils", undefined);
      /**
       * @class: ArrayUtils
       * @description: 数组工具类
       * @author: Ran
       * @time: 2024-08-12 20:05:00
       */
      var ArrayUtils = exports('default', /*#__PURE__*/function () {
        function ArrayUtils() {}
        /**
         * 随机下标
         * @param len ：数组长度
         * @param count ：需要的下标个数
         * @param repetition ：下标是否可以重复，缺省为false
         * @returns 下标数组(未排序)
         */
        ArrayUtils.randomIndex = function randomIndex(len, count, repetition) {
          if (repetition === void 0) {
            repetition = false;
          }
          var ret = [];
          var key = {};
          var i = 0;
          while (i < count) {
            var _i = Math.floor(Math.random() * len * 100 % len);
            if (key[_i] != null && !repetition) continue;
            ret.push(_i);
            key[_i] = _i;
            i++;
          }
          return ret;
        }

        /**
         * 获取一个范围内的随机数，[min, max]
         * @param min - 最小值
         * @param max - 最大值
         * @param integer - 是否取整，缺省为true
         * @returns 
         */;
        ArrayUtils.randomRange = function randomRange(min, max, integer) {
          if (integer === void 0) {
            integer = true;
          }
          return integer ? Math.floor(Math.random() * (max - min + 1)) + min : Math.random() * (max - min) + min;
        };
        ArrayUtils.removeItem = function removeItem(array, item) {
          var i = array.length;
          while (i > 0) {
            i--;
            if (array[i] === item) {
              array.splice(i, 1);
              return true;
            }
          }
          return false;
        }

        /**
         * 对数组的进行NUMBER排序
         * @param _arr1 
         * @param re true升序 false降序
         * @param isNew 是否创建新的数组
         * @returns 
         */;
        ArrayUtils.sortBy = function sortBy(_arr1, re, isNew) {
          if (re === void 0) {
            re = false;
          }
          if (isNew === void 0) {
            isNew = true;
          }
          var arr = isNew ? _arr1.concat() : _arr1;
          arr.sort(sortFun);
          return arr;
          function sortFun(a, b) {
            if (a < b) {
              if (re) return -1;
              return 1;
            }
            if (a == b) return 0;
            if (re) return 1;

            //添加垃圾代码

            return -1;
          }
        }

        /**
         * 
         * @param _arr1 对象数组
         * @param p 属性名
         * @param re false降序 true升序
         * @param isNew 是否创建新的数组
         * @returns 
         */;
        ArrayUtils.sortBy2 = function sortBy2(_arr1, p, re, isNew) {
          if (re === void 0) {
            re = false;
          }
          if (isNew === void 0) {
            isNew = true;
          }
          var arr = isNew ? _arr1.concat() : _arr1;
          arr.sort(sortFun);
          function sortFun(a, b) {
            if (a[p] < b[p]) {
              if (re) return -1;

              //添加垃圾代码

              return 1;
            }
            if (a[p] == b[p]) return 0;
            if (re) return 1;
            return -1;
          }
          return arr;
        }

        /**
         * 对数组的某些属性排序
         * @param _arr1 对象数组
         * @param p 属性名
         * @param re false 升序 true 降序
         * @param isNew 是否创建新的数组
         * @returns 
         */;
        ArrayUtils.sortBy3 = function sortBy3(_arr1, p, re, isNew) {
          if (re === void 0) {
            re = false;
          }
          if (isNew === void 0) {
            isNew = true;
          }
          var arr = isNew ? _arr1.concat() : _arr1;
          arr.sort(sortFun);

          //添加垃圾代码
          return arr;
          function sortFun(a, b) {
            var i = 0;
            while (true) {
              if (a[p[i]] < b[p[i]]) {
                if (re) return 1;
                return -1;
              } else if (a[p[i]] > b[p[i]]) {
                if (re) return -1;
                return 1;
              }
              if (a[p[i]] == b[p[i]]) {
                i++;
                if (i >= p.length) {
                  break;
                }
              }
            }
            return 0;
          }
        }

        /**
         * 
         * @param _arr1 
         * @param _arr2 
         * @param reArr 
         * @param isNew 
         * @returns 
         */;
        ArrayUtils.sortBy4 = function sortBy4(_arr1, _arr2, reArr, isNew) {
          if (isNew === void 0) {
            isNew = true;
          }
          var arr = isNew ? _arr1.concat() : _arr1;
          if (!arr || arr.length == 0) return [];
          arr.sort(sortFun);

          //添加垃圾代码

          return arr;
          function sortFun(a, b) {
            var i;
            var aa = a;
            var bb = b;
            var re = false;
            for (var j = 0; j < _arr2.length; j++) {
              a = aa;
              b = bb;
              re = reArr[j];
              for (i = 0; i < _arr2[j].length; i++) {
                a = a[_arr2[j][i]];
              }
              for (i = 0; i < _arr2[j].length; i++) {
                b = b[_arr2[j][i]];
              }
              if (a != b) {
                break;
              }
            }
            if (a < b) {
              if (re) return -1;
              return 1;
            }
            if (a == b) return 0;
            if (re) return 1;
            return -1;
          }
        }

        /**
         * 
         * @param _arr1 
         * @param p 属性名
         * @param reArr false 升序 true 降序
         * @param isNew 是否创建新的数组
         *  例子:sortBy5(list,["type","id"],[fales,true],false);//对type升序排完再对id降序排
         * @returns 
         */;
        ArrayUtils.sortBy5 = function sortBy5(_arr1, p, reArr, isNew) {
          if (reArr === void 0) {
            reArr = [];
          }
          if (isNew === void 0) {
            isNew = true;
          }
          var arr = isNew ? _arr1.concat() : _arr1;
          arr.sort(sortFun);

          //添加垃圾代码

          return arr;
          function sortFun(a, b) {
            var i = 0;
            while (true) {
              var re = reArr[i];
              if (a[p[i]] < b[p[i]]) {
                if (re) return 1;
                return -1;
              } else if (a[p[i]] > b[p[i]]) {
                if (re) return -1;
                return 1;
              }
              if (a[p[i]] == b[p[i]]) {
                i++;
                if (i >= p.length) {
                  break;
                }
              }
            }
            return 0;
          }
        }

        // class end
        ;

        return ArrayUtils;
      }());
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/AssetMgr.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _createClass, _asyncToGenerator, _regeneratorRuntime, cclegacy, assetManager, instantiate;
  return {
    setters: [function (module) {
      _createClass = module.createClass;
      _asyncToGenerator = module.asyncToGenerator;
      _regeneratorRuntime = module.regeneratorRuntime;
    }, function (module) {
      cclegacy = module.cclegacy;
      assetManager = module.assetManager;
      instantiate = module.instantiate;
    }],
    execute: function () {
      cclegacy._RF.push({}, "0ab7eWf9V9HAqiDU1r3bcOH", "AssetMgr", undefined);

      /**
       * @class name : AssetManager
       * @description : 资源管理类
       * @author : Ran
       * @time : 2022.07.20
       */
      var AssetMgr = exports('default', /*#__PURE__*/function () {
        function AssetMgr() {}
        var _proto = AssetMgr.prototype;
        /**
         * 获取bundle，如果未加载则加载该bundle
         * @param nameOrUrl - bundle路径
         * @returns bundle对象
         */
        _proto.getBundle = function getBundle(nameOrUrl) {
          if (!nameOrUrl || nameOrUrl === "") return Promise.reject(" ***** ERROR Bundle name ***** ");
          var bundle = assetManager.getBundle(nameOrUrl);
          if (bundle) {
            return Promise.resolve(bundle);
          }
          return new Promise(function (resolve, reject) {
            assetManager.loadBundle(nameOrUrl, function (err, bundle) {
              if (err) {
                console.error(" ***** load bundle " + nameOrUrl + " error: " + err + " ***** ");
                reject(err);
              }
              resolve(bundle);
            });
          });
        }

        /**
         * 加载文件
         * @template T extends cc.Asset - 资源类型
         * @param path - 资源路径，规则为: bundleName://assetName，缺省bundleName为resources
         * @returns 资源对象
         */;
        _proto.load = /*#__PURE__*/
        function () {
          var _load = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(path, cb) {
            var pathResult, bundleName, assetName, bundle, asset;
            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) switch (_context.prev = _context.next) {
                case 0:
                  pathResult = this.parseAssetPath(path);
                  if (!(pathResult == null)) {
                    _context.next = 3;
                    break;
                  }
                  return _context.abrupt("return", Promise.reject(" ***** ERROR Bundle: " + path + " ***** "));
                case 3:
                  bundleName = pathResult.bundleName, assetName = pathResult.assetName;
                  _context.next = 6;
                  return this.getBundle(bundleName);
                case 6:
                  bundle = _context.sent;
                  if (bundle) {
                    _context.next = 10;
                    break;
                  }
                  if (cb) {
                    cb(" ***** ERROR Bundle: " + bundleName + " ***** ", null);
                  }
                  return _context.abrupt("return", Promise.reject(" ***** ERROR Bundle: " + bundleName + " ***** "));
                case 10:
                  asset = bundle.get(assetName);
                  if (!asset) {
                    _context.next = 14;
                    break;
                  }
                  if (cb) {
                    cb(null, asset);
                  }
                  return _context.abrupt("return", Promise.resolve(asset));
                case 14:
                  if (!cb) {
                    _context.next = 17;
                    break;
                  }
                  bundle.load(assetName, function (err, asset) {
                    cb(err, asset);
                  });
                  return _context.abrupt("return");
                case 17:
                  return _context.abrupt("return", new Promise(function (resolve, reject) {
                    bundle.load(assetName, function (err, resource) {
                      if (err) {
                        console.error(" ***** load asset " + path + " error: " + err + " ***** ");
                        reject(err);
                      }
                      resolve(resource);
                    });
                  }));
                case 18:
                case "end":
                  return _context.stop();
              }
            }, _callee, this);
          }));
          function load(_x, _x2) {
            return _load.apply(this, arguments);
          }
          return load;
        }()
        /**
         * 预加载资源
         * @param path - 资源路径，规则为: bundleName://assetName，缺省bundleName为resources
         */;

        _proto.preload = /*#__PURE__*/
        function () {
          var _preload = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(path) {
            var pathResult, bundleName, assetName, bundle;
            return _regeneratorRuntime().wrap(function _callee2$(_context2) {
              while (1) switch (_context2.prev = _context2.next) {
                case 0:
                  pathResult = this.parseAssetPath(path);
                  if (!(pathResult == null)) {
                    _context2.next = 3;
                    break;
                  }
                  return _context2.abrupt("return", Promise.reject(" ***** ERROR Bundle: " + path + " ***** "));
                case 3:
                  bundleName = pathResult.bundleName, assetName = pathResult.assetName;
                  _context2.next = 6;
                  return this.getBundle(bundleName);
                case 6:
                  bundle = _context2.sent;
                  if (bundle) {
                    _context2.next = 9;
                    break;
                  }
                  return _context2.abrupt("return");
                case 9:
                  bundle.preload(assetName);
                case 10:
                case "end":
                  return _context2.stop();
              }
            }, _callee2, this);
          }));
          function preload(_x3) {
            return _preload.apply(this, arguments);
          }
          return preload;
        }()
        /**
         * 解析资源路径
         * @param path - 资源路径，规则为: bundleName://assetName，缺省bundleName为resources
         * @returns 资源路径中的bundleName和assetName
         */;

        _proto.parseAssetPath = function parseAssetPath(path) {
          var bundleName, assetName;
          if (path.indexOf(":") != -1) {
            var regex = /(.*):\/\/(.*)/;
            var regexArr = path.match(regex);
            if (regexArr == null || regexArr.length <= 0) return null;
            bundleName = regexArr[1];
            assetName = regexArr[2];
          } else {
            bundleName = "resources";
            assetName = path;
          }
          return {
            bundleName: bundleName,
            assetName: assetName
          };
        }

        /**
         * 释放资源
         * @param path - 资源路径，规则为: bundleName://assetName，缺省bundleName为resources
         * @param releaseBundle - 是否释放bundle，缺省为false
         */;
        _proto.release = function release(path, releaseBundle) {
          if (releaseBundle === void 0) {
            releaseBundle = false;
          }
          var pathResult = this.parseAssetPath(path);
          if (pathResult == null) return Promise.reject(" ***** ERROR Bundle: " + path + " ***** ");
          var bundleName = pathResult.bundleName,
            assetName = pathResult.assetName;
          var bundle = assetManager.getBundle(bundleName);
          if (!bundle) return;
          if (!releaseBundle) {
            bundle.release(assetName);
          } else {
            this.releaseBundle(bundle);
          }
        }

        /**
         * 释放bundle
         * @param bundle - bundle名字或bundle对象
         */;
        _proto.releaseBundle = function releaseBundle(bundle) {
          if (typeof bundle === "string") {
            var b = assetManager.getBundle(bundle);
            if (!b) return;
            b.releaseAll();
            assetManager.removeBundle(b);
          } else {
            if (!bundle) return;
            bundle.releaseAll();
            assetManager.removeBundle(bundle);
          }
        }

        /* 释放所有资源 */;
        _proto.releaseAll = function releaseAll() {
          assetManager.releaseAll();
        }

        /**
         * 创建预制体
         * @param prefabPath ：预制体路径，规则为: bundleName://assetName，缺省bundleName为resources
         */;
        _proto.createPrefab = /*#__PURE__*/
        function () {
          var _createPrefab = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(prefabPath) {
            var p, node;
            return _regeneratorRuntime().wrap(function _callee3$(_context3) {
              while (1) switch (_context3.prev = _context3.next) {
                case 0:
                  _context3.next = 2;
                  return this.load(prefabPath);
                case 2:
                  p = _context3.sent;
                  node = instantiate(p);
                  return _context3.abrupt("return", node);
                case 5:
                case "end":
                  return _context3.stop();
              }
            }, _callee3, this);
          }));
          function createPrefab(_x4) {
            return _createPrefab.apply(this, arguments);
          }
          return createPrefab;
        }()
        /**
         * base64转纹理
         * @param data - base64编码的字符串
         * @returns 纹理
         */;

        _proto.base64ToTexture = /*#__PURE__*/
        function () {
          var _base64ToTexture = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(data) {
            return _regeneratorRuntime().wrap(function _callee4$(_context4) {
              while (1) switch (_context4.prev = _context4.next) {
                case 0:
                case "end":
                  return _context4.stop();
              }
            }, _callee4);
          }));
          function base64ToTexture(_x5) {
            return _base64ToTexture.apply(this, arguments);
          }
          return base64ToTexture;
        }()
        /**
         * base64转精灵
         * @param data - base64编码的字符串
         * @returns 精灵数据
         */;

        _proto.base64ToSpriteFrame = /*#__PURE__*/
        function () {
          var _base64ToSpriteFrame = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(data) {
            return _regeneratorRuntime().wrap(function _callee5$(_context5) {
              while (1) switch (_context5.prev = _context5.next) {
                case 0:
                case "end":
                  return _context5.stop();
              }
            }, _callee5);
          }));
          function base64ToSpriteFrame(_x6) {
            return _base64ToSpriteFrame.apply(this, arguments);
          }
          return base64ToSpriteFrame;
        }() // class end
        ;

        _createClass(AssetMgr, null, [{
          key: "instance",
          get: function get() {
            this._instance || (this._instance = new AssetMgr());
            return this._instance;
          }
        }]);
        return AssetMgr;
      }()); // export const assetManager = AssetMgr.instance;
      // window["assetManager"] = assetManager;
      AssetMgr._instance = void 0;
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/AStarRoadSeeker.ts", ['cc', './Enum3.ts', './BinaryTreeNode.ts'], function (exports) {
  var cclegacy, PathQuadSeek, PathOptimize, BinaryTreeNode;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      PathQuadSeek = module.PathQuadSeek;
      PathOptimize = module.PathOptimize;
    }, function (module) {
      BinaryTreeNode = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "70b6f336f1Bn5hqVuXLEGek", "AStarRoadSeeker", undefined);
      var AStarRoadSeeker = exports('default', /*#__PURE__*/function () {
        function AStarRoadSeeker(roadNodes) {
          /**
           * 横向移动一个格子的代价
           */
          this.COST_STRAIGHT = 10;
          /**
           * 斜向移动一个格子的代价
           */
          this.COST_DIAGONAL = 14;
          /**
           *最大搜寻步骤数，超过这个值时表示找不到目标 
           */
          this.maxStep = 1000;
          /** 
           * 开启列表
           */
          this._openList = void 0;
          /**
           * 关闭列表
           */
          this._closeList = void 0;
          this._binaryTreeNode = new BinaryTreeNode();
          this._startNode = void 0;
          this._currentNode = void 0;
          this._targetNode = void 0;
          this._roadNodes = void 0;
          /**
           * 用于检索一个节点周围上下左右4个点的向量数组 
           */
          this._round1 = [[0, -1], [1, 0], [0, 1], [-1, 0]];
          /**
           * 用于检索一个节点周围8个点的向量数组 
           */
          this._round2 = [[0, -1], [1, -1], [1, 0], [1, 1], [0, 1], [-1, 1], [-1, 0], [-1, -1]];
          /**
           *用于检索一个节点周围n个点的向量数组，默认8方向
          */
          this._round = this._round2;
          this.handle = -1;
          /**
           * 优化类型，默认使用最短路径的优化
           */
          this._pathOptimize = PathOptimize.best;
          /**
           * 默认使用8方向寻路
           */
          this._pathQuadSeek = PathQuadSeek.path_dire_8;
          /**
           * 定义一个路点是否能通过，如果是null，则用默认判断条件
           */
          this._isPassCallBack = null;
          this._roadNodes = roadNodes;
        }
        var _proto = AStarRoadSeeker.prototype;
        _proto.seekPath = function seekPath(startNode, targetNode) {
          this._startNode = startNode;
          this._targetNode = targetNode;
          this._currentNode = startNode;
          if (!this._startNode || !this._targetNode) {
            return [];
          }
          if (this._startNode == this._targetNode) {
            return [this._targetNode];
          }
          if (!this.isPassNode(this._targetNode)) {
            console.error("目标不可达到");
            return [];
          }
          this._startNode.g = 0;
          this._startNode.resetTree();
          this._binaryTreeNode.refleshTag();
          var step = 0;
          while (true) {
            if (step > this.maxStep) {
              console.error("没有找到计算目标", step);
              return [];
            }
            step++;
            this.searchRoundNodes(this._currentNode);
            if (this._binaryTreeNode.isTreeNull()) {
              console.error("没有找到目标", step);
              return [];
            }
            this._currentNode = this._binaryTreeNode.getMinFNode();
            if (this._currentNode == this._targetNode) {
              console.error("找到目标了", step);
              return this.getPath();
              // return [];
            } else {
              this._binaryTreeNode.setRoadNodeInCloseList(this._currentNode);
            }
          }
        };
        _proto.seekPath2 = function seekPath2(startNode, targetNode) {
          this._startNode = startNode;
          this._currentNode = startNode;
          this._targetNode = targetNode;
          if (!this._startNode || !this._targetNode) return [];
          if (this._startNode == this._targetNode) {
            return [this._targetNode];
          }
          var newMaxStep = this.maxStep;
          if (!this.isPassNode(this._targetNode)) {
            //如果不能直达目标，最大寻路步骤 = 为两点间的预估距离的3倍
            newMaxStep = (Math.abs(this._targetNode.cx - this._startNode.cx) + Math.abs(this._targetNode.cy - this._startNode.cy)) * 3;
            if (newMaxStep > this.maxStep) {
              newMaxStep = this.maxStep;
            }
          }
          this._startNode.g = 0; //重置起始节点的g值
          this._startNode.resetTree(); //清除起始节点原有的二叉堆关联关系

          this._binaryTreeNode.refleshTag(); //刷新二叉堆tag，用于后面判断是不是属于当前次的寻路
          //this._binaryTreeNode.addTreeNode(this._startNode); //把起始节点设置为二叉堆结构的根节点

          var step = 0;
          var closestNode = null; //距离目标最近的路点

          while (true) {
            if (step > newMaxStep) {
              console.error("没找到目标计算步骤为：", step);
              return this.seekPath(startNode, closestNode);
            }
            step++;
            this.searchRoundNodes(this._currentNode);
            if (this._binaryTreeNode.isTreeNull())
              //二叉堆树里已经没有任何可搜寻的点了，则寻路结束，没找到目标
              {
                console.error("没找到目标计算步骤为：", step);
                return this.seekPath(startNode, closestNode);
              }
            this._currentNode = this._binaryTreeNode.getMinFNode();
            if (closestNode == null) {
              closestNode = this._currentNode;
            } else {
              if (this._currentNode.h < closestNode.h) {
                closestNode = this._currentNode;
              }
            }
            if (this._currentNode == this._targetNode) {
              console.error("找到目标计算步骤为：", step);
              // return [];
              return this.getPath();
            } else {
              this._binaryTreeNode.setRoadNodeInCloseList(this._currentNode); //打入关闭列表标记
            }
          }
        };

        _proto.testSeekPathStep = function testSeekPathStep(startNode, targetNode, callback, target, time) {
          throw new Error("Method not implemented.");
        };
        _proto.isArriveBetweenTwoNodes = function isArriveBetweenTwoNodes(startNode, targetNode) {
          if (startNode == targetNode) {
            return false;
          }
          var disX = Math.abs(targetNode.cx - startNode.cx);
          var disY = Math.abs(targetNode.cy - startNode.cy);
          var dirX = 0;
          if (targetNode.cx > startNode.cx) {
            dirX = 1;
          } else if (targetNode.cx < startNode.cx) {
            dirX = -1;
          }
          var dirY = 0;
          if (targetNode.cy > startNode.cy) {
            dirY = 1;
          } else if (targetNode.cy < startNode.cy) {
            dirY = -1;
          }
          var rx = 0;
          var ry = 0;
          var intNum = 0;
          var decimal = 0;
          if (disX > disY) {
            var rate = disY / disX;
            for (var i = 0; i < disX; i++) {
              ry = startNode.cy + i * dirY * rate;
              intNum = Math.floor(ry);
              decimal = ry % 1;
              var cx1 = startNode.cx + i * dirX;
              var cy1 = decimal <= 0.5 ? intNum : intNum + 1;
              ry = startNode.cy + (i + 1) * dirY * rate;
              intNum = Math.floor(ry);
              decimal = ry % 1;
              var cx2 = startNode.cx + (i + 1) * dirX;
              var cy2 = decimal <= 0.5 ? intNum : intNum + 1;
              var node1 = this.getRoadNode(cx1, cy1);
              var node2 = this.getRoadNode(cx2, cy2);

              //cc.log(i + "  :: " + node1.cy," yy ",startNode.cy + i * rate,ry % 1);

              if (!this.isCrossAtAdjacentNodes(node1, node2)) {
                return false;
              }
            }
          } else {
            var rate = disX / disY;
            for (var i = 0; i < disY; i++) {
              rx = i * dirX * rate;
              intNum = dirX > 0 ? Math.floor(startNode.cx + rx) : Math.ceil(startNode.cx + rx);
              decimal = Math.abs(rx % 1);
              var cx1 = decimal <= 0.5 ? intNum : intNum + 1 * dirX;
              var cy1 = startNode.cy + i * dirY;
              rx = (i + 1) * dirX * rate;
              intNum = dirX > 0 ? Math.floor(startNode.cx + rx) : Math.ceil(startNode.cx + rx);
              decimal = Math.abs(rx % 1);
              var cx2 = decimal <= 0.5 ? intNum : intNum + 1 * dirX;
              var cy2 = startNode.cy + (i + 1) * dirY;
              var node1 = this.getRoadNode(cx1, cy1);
              var node2 = this.getRoadNode(cx2, cy2);
              if (!this.isCrossAtAdjacentNodes(node1, node2)) {
                return false;
              }
            }
          }
          return true;
        }

        /**
         * 判断两个相邻的点是否可通过
         * @param node1 
         * @param node2 
         */;
        _proto.isCrossAtAdjacentNodes = function isCrossAtAdjacentNodes(node1, node2) {
          if (node1 == node2) {
            return false;
          }

          //两个点只要有一个点不能通过就不能通过
          if (!this.isPassNode(node1) || !this.isPassNode(node2)) {
            return false;
          }
          var dirX = node2.cx - node1.cx;
          var dirY = node2.cy - node1.cy;

          //如果不是相邻的两个点 则不能通过
          if (Math.abs(dirX) > 1 || Math.abs(dirY) > 1) {
            return false;
          }

          //如果相邻的点是在同一行，或者同一列，则判定为可通过
          if (node1.cx == node2.cx || node1.cy == node2.cy) {
            return true;
          }

          //只剩对角情况了
          if (this.isPassNode(this.getRoadNode(node1.cx, node1.cy + dirY)) && this.isPassNode(this.getRoadNode(node1.cx + dirX, node1.cy))) {
            return true;
          }
          return false;
        };
        _proto.isPassNode = function isPassNode(node) {
          if (this._isPassCallBack != null) {
            return this._isPassCallBack(node);
          }
          if (node == null || node.value == 1) {
            return false;
          }
          return true;
        };
        _proto.getRoadNode = function getRoadNode(cx, cy) {
          var key = cx + "_" + cy;
          return this._roadNodes[key];
        };
        _proto.setMaxSeekStep = function setMaxSeekStep(maxStep) {
          this.maxStep = maxStep;
        };
        _proto.setPathOptimize = function setPathOptimize(optimize) {
          this._pathOptimize = optimize;
        };
        _proto.setPathQuadSeek = function setPathQuadSeek(pathQuadSeek) {
          this._pathQuadSeek = pathQuadSeek;
          if (this._pathQuadSeek == PathQuadSeek.path_dire_4) {
            this._round = this._round1;
          } else if (this._pathQuadSeek == PathQuadSeek.path_dire_8) {
            this._round = this._round2;
          }
        };
        _proto.setRoadNodePassCondition = function setRoadNodePassCondition(callback) {
          this._isPassCallBack = callback;
        };
        _proto.searchRoundNodes = function searchRoundNodes(node) {
          for (var i = 0; i < this._round.length; i++) {
            var cx = node.cx + this._round[i][0];
            var cy = node.cy + this._round[i][1];
            var node2 = this.getRoadNode(cx, cy);
            if (this.isPassNode(node2) && node2 != this._startNode && !this.isInCloseList(node2) && !this.isInCorner(node2)) {
              this.setNodeFValue(node2);
            }
          }
        };
        _proto.getPath = function getPath() {
          var result = [];
          var node = this._targetNode;
          while (node != this._startNode) {
            result.unshift(node);
            node = node.parent;
          }
          result.unshift(this._startNode);
          if (this._pathOptimize == PathOptimize.none) {
            return result;
          }
          //第一阶段优化： 对横，竖，正斜进行优化
          //把多个节点连在一起的，横向或者斜向的一连串点，除两边的点保留
          for (var i = 1; i < result.length - 1; i++) {
            var preNode = result[i - 1];
            var midNode = result[i];
            var nextNode = result[i + 1];
            var bool1 = midNode.cx == preNode.cx && midNode.cx == nextNode.cx;
            var bool2 = midNode.cy == preNode.cy && midNode.cy == nextNode.cy;
            var bool3 = false;
            if (this._pathQuadSeek == PathQuadSeek.path_dire_8)
              //寻路类型是8方向时才考虑正斜角路径优化
              {
                bool3 = (midNode.cx - preNode.cx) / (midNode.cy - preNode.cy) * ((nextNode.cx - midNode.cx) / (nextNode.cy - midNode.cy)) == 1;
              }
            if (bool1 || bool2 || bool3) {
              result.splice(i, 1);
              i--;
            }
          }

          //如果寻路类型是4方向寻路，则直接返回第一阶段的优化结果。
          //（因为4方向寻路是用不到第二阶段优化的，否则进入第二阶段优化的话，路径就不按上下左右相连了，这并不是4方寻路想要的结果）
          if (this._pathQuadSeek == PathQuadSeek.path_dire_4) {
            return result;
          }

          //如果只需要优化到第一阶段，则直接返回第一阶段的优化结果
          if (this._pathOptimize == PathOptimize.better) {
            return result;
          }

          //第二阶段优化：对不在横，竖，正斜的格子进行优化
          for (var i = 0; i < result.length - 2; i++) {
            var startNode = result[i];
            var optimizeNode = null;

            //优先从尾部对比，如果能直达就把中间多余的路点删掉
            for (var j = result.length - 1; j > i + 1; j--) {
              var targetNode = result[j];

              //在第一阶段优已经优化过横，竖，正斜了，所以再出现是肯定不能优化的，可以忽略
              if (startNode.cx == targetNode.cx || startNode.cy == targetNode.cy || Math.abs(targetNode.cx - startNode.cx) == Math.abs(targetNode.cy - startNode.cy)) {
                continue;
              }
              if (this.isArriveBetweenTwoNodes(startNode, targetNode)) {
                optimizeNode = targetNode;
                break;
              }
            }
            if (optimizeNode) {
              var optimizeLen = j - i - 1;
              result.splice(i + 1, optimizeLen);
            }
          }
          return result;
        };
        _proto.setNodeFValue = function setNodeFValue(node) {
          var g;
          if (node.cx == this._currentNode.cx || node.cy == this._currentNode.cy) {
            g = this._currentNode.g + this.COST_STRAIGHT;
          } else {
            g = this._currentNode.g + this.COST_DIAGONAL;
          }
          if (this.isInOpenList(node)) {
            if (g < node.g) {
              node.g = g;
              node.parent = this._currentNode;
              node.h = (Math.abs(this._targetNode.cx - node.cx) + Math.abs(this._targetNode.cy - node.cy)) * this.COST_STRAIGHT;
              node.f = node.g + node.h;

              //节点的g值已经改变，把节点先从二堆叉树结构中删除，再重新添加进二堆叉树
              this._binaryTreeNode.removeTreeNode(node);
              this._binaryTreeNode.addTreeNode(node);
            }
          } else {
            node.g = g;
            this._binaryTreeNode.setRoadNodeInOpenList(node); //给节点打入开放列表的标志
            node.resetTree();
            node.parent = this._currentNode;
            node.h = (Math.abs(this._targetNode.cx - node.cx) + Math.abs(this._targetNode.cy - node.cy)) * this.COST_STRAIGHT;
            node.f = node.g + node.h;
            this._binaryTreeNode.addTreeNode(node);
          }
        };
        _proto.isInCloseList = function isInCloseList(node) {
          return this._binaryTreeNode.isInCloseList(node);
        };
        _proto.isInOpenList = function isInOpenList(node) {
          return this._binaryTreeNode.isInOpenList(node);
        };
        _proto.isInCorner = function isInCorner(node) {
          if (this._pathQuadSeek == PathQuadSeek.path_dire_4) {
            return false;
          }
          if (node.cx == this._currentNode.cx || node.cy == this._currentNode.cy) {
            return false;
          }
          var node1 = this.getRoadNode(this._currentNode.cx, node.cy);
          var node2 = this.getRoadNode(node.cx, this._currentNode.cy);
          if (this.isPassNode(node1) && this.isPassNode(node2)) {
            return false;
          }
          return true;
        };
        return AStarRoadSeeker;
      }());
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Background.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './config.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, SpriteFrame, Node, Sprite, UITransform, math, Component, config;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      SpriteFrame = module.SpriteFrame;
      Node = module.Node;
      Sprite = module.Sprite;
      UITransform = module.UITransform;
      math = module.math;
      Component = module.Component;
    }, function (module) {
      config = module.config;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;
      cclegacy._RF.push({}, "8c523QmY1BGjJbstFHJdR36", "Background", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var Background = exports('Background', (_dec = ccclass('Background'), _dec2 = property(SpriteFrame), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(Background, _Component);
        function Background() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "itemSpriteFrame", _descriptor, _assertThisInitialized(_this));
          _this.itemArray = [];
          return _this;
        }
        var _proto = Background.prototype;
        _proto.onLoad = function onLoad() {
          this.init();
        };
        _proto.init = function init() {
          this.itemArray = [];
          var height = config.row * config.blockHeight;
          var width = config.col * config.blockWidth;
          for (var i = 0; i < config.row; i++) {
            this.itemArray[i] = [];
            for (var j = 0; j < config.col; j++) {
              var x = -width / 2 + config.blockWidth / 2 + j * config.blockWidth;
              var y = height / 2 - config.blockHeight / 2 - i * config.blockHeight;
              var item = this.createItem(x, y);
              this.itemArray[i][j] = item;
            }
          }
          console.log(this.itemArray);
        };
        _proto.createItem = function createItem(x, y) {
          var item = new Node();
          var sprite = item.addComponent(Sprite);
          sprite.spriteFrame = this.itemSpriteFrame;
          sprite.sizeMode = Sprite.SizeMode.CUSTOM;
          this.node.addChild(item);
          item.setPosition(x, y);
          item.addComponent(UITransform).contentSize = math.size(config.blockWidth, config.blockHeight);
          return item;
        };
        _proto.onDestroy = function onDestroy() {
          for (var i = 0; i < this.itemArray.length; i++) {
            var items = this.itemArray[i];
            for (var j = 0; j < items.length; j++) {
              var element = items[j];
              if (element) {
                element.destroy();
              }
            }
          }
          this.itemArray = [];
        };
        return Background;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "itemSpriteFrame", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return undefined;
        }
      }), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/BackgroundAdapter.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, UITransform, view, Component;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      UITransform = module.UITransform;
      view = module.view;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class;
      cclegacy._RF.push({}, "55c1dwxkCVFz7lJMX80srOS", "BackgroundAdapter", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;

      /**
       * @fileName BackgroundAdapter.ts
       * @author zhangqiong
       * @date 2025/01/17 19:55:16"
       * @description
       */
      var BackgroundAdapter = exports('BackgroundAdapter', (_dec = ccclass('BackgroundAdapter'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(BackgroundAdapter, _Component);
        function BackgroundAdapter() {
          return _Component.apply(this, arguments) || this;
        }
        var _proto = BackgroundAdapter.prototype;
        _proto.onLoad = function onLoad() {
          // 1. 先找到 SHOW_ALL 模式适配之后，本节点的实际宽高以及初始缩放值
          var uiTr = this.node.getComponent(UITransform);
          var size = view.getCanvasSize();
          var srcScaleForShowAll = Math.min(size.width / uiTr.width, size.height / uiTr.height);
          var realWidth = uiTr.width * srcScaleForShowAll;
          var realHeight = uiTr.height * srcScaleForShowAll;

          // 2. 基于第一步的数据，再做缩放适配
          var scale = Math.max(size.width / realWidth, size.height / realHeight);
          this.node.setScale(scale, scale);
        };
        _proto.start = function start() {};
        _proto.update = function update(deltaTime) {};
        return BackgroundAdapter;
      }(Component)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/BackToMainPanel.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './ViewManager.ts', './PanelEnum.ts'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, NodeEventType, Component, viewManager, PanelType;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      NodeEventType = module.NodeEventType;
      Component = module.Component;
    }, function (module) {
      viewManager = module.viewManager;
    }, function (module) {
      PanelType = module.PanelType;
    }],
    execute: function () {
      var _dec, _class;
      cclegacy._RF.push({}, "2eb96phOnBNs7Wn+UHuktzN", "BackToMainPanel", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var BackToMainPanel = exports('BackToMainPanel', (_dec = ccclass('BackToMainPanel'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(BackToMainPanel, _Component);
        function BackToMainPanel() {
          return _Component.apply(this, arguments) || this;
        }
        var _proto = BackToMainPanel.prototype;
        _proto.start = function start() {
          this.node.on(NodeEventType.MOUSE_DOWN, this.onClickBack, this);
        };
        _proto.onClickBack = function onClickBack() {
          viewManager.open(PanelType.MainPanel);
        };
        _proto.update = function update(deltaTime) {};
        return BackToMainPanel;
      }(Component)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/BaseView.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Enum2.ts', './Behaviour.ts'], function (exports) {
  var _inheritsLoose, cclegacy, ViewShowTypes, Behaviour;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      ViewShowTypes = module.ViewShowTypes;
    }, function (module) {
      Behaviour = module.Behaviour;
    }],
    execute: function () {
      cclegacy._RF.push({}, "db7c5MaGkBBtrvyGxinAVPh", "BaseView", undefined);
      /**
       * UIView界面基础类
       * 
       * 1. 快速关闭与屏蔽点击的选项配置
       * 2. 界面缓存设置（开启后界面关闭不会被释放，以便下次快速打开）
       * 3. 界面显示类型配置
       * 
       * 4. 加载资源接口（随界面释放自动释放），this.loadRes(xxx)
       * 5. 由UIManager释放
       * 
       * 5. 界面初始化回调（只调用一次）
       * 6. 界面打开回调（每次打开回调）
       * 7. 界面打开动画播放结束回调（动画播放完回调）
       * 8. 界面关闭回调
       * 9. 界面置顶回调
       */
      var BaseView = exports('default', /*#__PURE__*/function (_Behaviour) {
        _inheritsLoose(BaseView, _Behaviour);
        function BaseView() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Behaviour.call.apply(_Behaviour, [this].concat(args)) || this;
          _this.quickClose = false;
          /** 屏蔽点击选项 在UIConf设置屏蔽点击*/
          // @property
          // preventTouch: boolean = true;
          _this.cache = false;
          _this.showType = ViewShowTypes.ViewSingle;
          /** 界面id */
          _this.UIid = 0;
          return _this;
        }
        var _proto = BaseView.prototype;
        /********************** UI的回调 ***********************/
        /**
         * 当界面被创建时回调，生命周期内只调用
         * @param args 可变参数
         */
        _proto.init = function init() {}

        /**
         * 当界面被打开时回调，每次调用Open时回调
         * @param fromUI 从哪个UI打开的
         * @param args 可变参数
         */;
        _proto.onOpen = function onOpen(fromUI) {}

        /**
         * 每次界面Open动画播放完毕时回调
         */;
        _proto.onOpenAniOver = function onOpenAniOver() {}

        /**
         * 当界面被关闭时回调，每次调用Close时回调
         * 返回值会传递给下一个界面
         */;
        _proto.onClose = function onClose() {}

        /**
         * 当界面被置顶时回调，Open时并不会回调该函数
         * @param preID 前一个ui
         * @param args 可变参数，
         */;
        _proto.onTop = function onTop(preID) {};
        return BaseView;
      }(Behaviour));
      /**  静态变量，用于区分相同界面的不同实例 */
      BaseView.uiIndex = 0;
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Behaviour.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './QuadTree.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, cclegacy, _decorator, Collider2D, Contact2DType, Collider, UITransform, UIOpacity, Component, QuadTreeRect;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Collider2D = module.Collider2D;
      Contact2DType = module.Contact2DType;
      Collider = module.Collider;
      UITransform = module.UITransform;
      UIOpacity = module.UIOpacity;
      Component = module.Component;
    }, function (module) {
      QuadTreeRect = module.QuadTreeRect;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;
      cclegacy._RF.push({}, "78837+997RN1Yv+tqVlWR8Q", "Behaviour", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;

      /**
       * 行为组件
       */
      var Behaviour = exports('Behaviour', (_dec = ccclass("Behaviour"), _dec2 = property({
        tooltip: "对象标识"
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(Behaviour, _Component);
        function Behaviour() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          /**
           * 对象标识
           */
          _initializerDefineProperty(_this, "tag", _descriptor, _assertThisInitialized(_this));
          _this.colliders_2D = null;
          _this.colliders_3D = null;
          _this._transform = null;
          _this._gameObject = null;
          _this._uiTransform = null;
          _this._uiOpacity = null;
          //--------------------------------设置宽高 end---------------------------------------------
          //--------------------------------设置透明度 begin---------------------------------------------
          _this._alpha = 1;
          _this._opacity = 255;
          return _this;
        }
        var _proto = Behaviour.prototype;
        //--------------------------------世界坐标 end----------------------------------------------
        _proto.onLoad = function onLoad() {
          this.addColliderEventListener();
        }

        /**
         * 监听碰撞事件
         */;
        _proto.addColliderEventListener = function addColliderEventListener() {
          this.add2DColliderEventListener();
          this.add3DColliderEventListener();
        }

        /**
         * 2D 触发器进入函数
         * @param selfCollider 自己的碰撞体
         * @param otherCollider 对方的碰撞体
         * @param contact
         * @protected
         */;
        _proto.onTriggerEnter2D = function onTriggerEnter2D(selfCollider, otherCollider, contact) {}

        /**
         * 2D 触发器结束函数
         * @param selfCollider
         * @param otherCollider
         * @param contact
         * @protected
         */;
        _proto.onTriggerExit2D = function onTriggerExit2D(selfCollider, otherCollider, contact) {}

        /**
         * 2D 碰撞器进入函数
         * @param selfCollider
         * @param otherCollider
         * @param contact
         * @protected
         */;
        _proto.onCollisionEnter2D = function onCollisionEnter2D(selfCollider, otherCollider, contact) {}

        /**
         * 2D 碰撞器退出函数
         * @param selfCollider
         * @param otherCollider
         * @param contact
         * @protected
         */;
        _proto.onCollisionExit2D = function onCollisionExit2D(selfCollider, otherCollider, contact) {}

        /**
         * 监听2d碰撞事件
         */;
        _proto.add2DColliderEventListener = function add2DColliderEventListener() {
          var i;
          this.colliders_2D = this.getComponents(Collider2D);
          for (i = 0; i < this.colliders_2D.length; i++) {
            this.colliders_2D[i].on(Contact2DType.BEGIN_CONTACT, this.onTriggerEnter2D, this);
          }
          for (i = 0; i < this.colliders_2D.length; i++) {
            this.colliders_2D[i].on(Contact2DType.END_CONTACT, this.onTriggerExit2D, this);
          }
          for (i = 0; i < this.colliders_2D.length; i++) {
            this.colliders_2D[i].on(Contact2DType.BEGIN_CONTACT, this.onCollisionEnter2D, this);
          }
          for (i = 0; i < this.colliders_2D.length; i++) {
            this.colliders_2D[i].on(Contact2DType.END_CONTACT, this.onCollisionExit2D, this);
          }
        }

        /**
         * 3D 触发器进入函数
         * @param event
         * @protected
         */;
        _proto.onTriggerEnter = function onTriggerEnter(event) {}

        /**
         * 3D 触发器持续函数
         * @param event
         * @private
         */;
        _proto.onTriggerStay = function onTriggerStay(event) {}

        /**
         * 3D 触发器退出函数
         * @param event
         * @private
         */;
        _proto.onTriggerExit = function onTriggerExit(event) {}

        /**
         * 3D 碰撞器进入函数
         * @param event
         * @private
         */;
        _proto.onCollisionEnter = function onCollisionEnter(event) {}

        /**
         * 3D 碰撞器持续函数
         * @param event
         * @private
         */;
        _proto.onCollisionStay = function onCollisionStay(event) {}

        /**
         * 3D 碰撞器退出函数
         * @param event
         * @private
         */;
        _proto.onCollisionExit = function onCollisionExit(event) {}

        /**
         * 监听3d碰撞事件
         */;
        _proto.add3DColliderEventListener = function add3DColliderEventListener() {
          this.colliders_3D = this.getComponents(Collider);
          for (var _i = 0; _i < this.colliders_3D.length; _i++) {
            this.colliders_3D[_i].on("onTriggerEnter", this.onTriggerEnter, this);
          }
          for (var _i2 = 0; _i2 < this.colliders_3D.length; _i2++) {
            this.colliders_3D[_i2].on("onTriggerStay", this.onTriggerStay, this);
          }
          for (var _i3 = 0; _i3 < this.colliders_3D.length; _i3++) {
            this.colliders_3D[_i3].on("onTriggerExit", this.onTriggerExit, this);
          }
          for (var _i4 = 0; _i4 < this.colliders_3D.length; _i4++) {
            this.colliders_3D[_i4].on("onCollisionEnter", this.onCollisionEnter, this);
          }
          for (var _i5 = 0; _i5 < this.colliders_3D.length; _i5++) {
            this.colliders_3D[_i5].on("onCollisionStay", this.onCollisionStay, this);
          }
          for (var i = 0; i < this.colliders_3D.length; i++) {
            this.colliders_3D[i].on("onCollisionExit", this.onCollisionExit, this);
          }
        }

        /**
         * 注销所有碰撞事件
         */;
        _proto.removeAllColliderEventListener = function removeAllColliderEventListener() {
          if (this.colliders_2D) {
            for (var i = 0; i < this.colliders_2D.length; i++) {
              this.colliders_2D[i].off(Contact2DType.BEGIN_CONTACT, this.onTriggerEnter2D, this);
              this.colliders_2D[i].off(Contact2DType.END_CONTACT, this.onTriggerExit2D, this);
              this.colliders_2D[i].off(Contact2DType.BEGIN_CONTACT, this.onCollisionEnter2D, this);
              this.colliders_2D[i].off(Contact2DType.END_CONTACT, this.onCollisionExit2D, this);
            }
          }
          if (this.colliders_3D) {
            for (var _i6 = 0; _i6 < this.colliders_3D.length; _i6++) {
              this.colliders_3D[_i6].off("onTriggerEnter", this.onTriggerEnter, this);
              this.colliders_3D[_i6].off("onTriggerStay", this.onTriggerStay, this);
              this.colliders_3D[_i6].off("onTriggerExit", this.onTriggerExit, this);
              this.colliders_3D[_i6].off("onCollisionEnter", this.onCollisionEnter, this);
              this.colliders_3D[_i6].off("onCollisionStay", this.onCollisionStay, this);
              this.colliders_3D[_i6].off("onCollisionExit", this.onCollisionExit, this);
            }
          }
        };
        _proto.onDestroy = function onDestroy() {
          this.removeAllColliderEventListener();
        };
        _createClass(Behaviour, [{
          key: "rect",
          get: function get() {
            var postioion = this.node.position.clone();
            return new QuadTreeRect(postioion.x, postioion.y, this.width, this.height);
          }
        }, {
          key: "transform",
          get: function get() {
            if (!this._transform) {
              this._transform = this.node;
            }
            return this._transform;
          }
        }, {
          key: "gameObject",
          get: function get() {
            if (!this._gameObject) {
              this._gameObject = this.node;
            }
            return this._gameObject;
          }
        }, {
          key: "uiTransform",
          get: function get() {
            if (!this._uiTransform) {
              this._uiTransform = this.node.getComponent(UITransform);
            }
            return this._uiTransform;
          }
        }, {
          key: "uiOpacity",
          get: function get() {
            if (!this._uiOpacity) {
              this._uiOpacity = this.node.getComponent(UIOpacity);
            }
            return this._uiOpacity;
          }

          //--------------------------------设置宽高 begin---------------------------------------------
        }, {
          key: "width",
          get: function get() {
            if (this.uiTransform) {
              return this.uiTransform.width;
            }
            return 0;
          },
          set: function set(value) {
            if (this.uiTransform) {
              this.uiTransform.width = value;
            }
          }
        }, {
          key: "height",
          get: function get() {
            if (this.uiTransform) {
              return this.uiTransform.height;
            }
            return 0;
          },
          set: function set(value) {
            if (this.uiTransform) {
              this.uiTransform.height = value;
            }
          }
        }, {
          key: "alpha",
          get: function get() {
            return this._alpha;
          }
          /**alpha值的范围是 0-1 */,
          set: function set(value) {
            this._alpha = value;
            if (this._alpha < 0) {
              this._alpha = 0;
            } else if (this._alpha > 1) {
              this._alpha = 1;
            }
            if (this.uiOpacity != null) {
              this.uiOpacity.opacity = 255 * (this._alpha / 1);
            }
          }
        }, {
          key: "opacity",
          get: function get() {
            return this._opacity;
          }
          /**opacity值的范围是 0-255 */,
          set: function set(value) {
            this._opacity = value;
            if (this._opacity < 0) {
              this._opacity = 0;
            } else if (this._opacity > 255) {
              this._opacity = 255;
            }
            if (this.uiOpacity != null) {
              this.uiOpacity.opacity = this._opacity;
            }
          }
          //--------------------------------设置透明度 end---------------------------------------------

          //--------------------------------局部坐标 begin---------------------------------------------
        }, {
          key: "x",
          get: function get() {
            return this.transform.position.x;
          },
          set: function set(value) {
            var pos = this.transform.position;
            pos.x = value;
            this.transform.position = pos;
          }
        }, {
          key: "y",
          get: function get() {
            return this.transform.position.y;
          },
          set: function set(value) {
            var pos = this.transform.position;
            pos.y = value;
            this.transform.position = pos;
          }
        }, {
          key: "z",
          get: function get() {
            return this.transform.position.z;
          },
          set: function set(value) {
            var pos = this.transform.position;
            pos.z = value;
            this.transform.position = pos;
          }
          //---------------------------------局部坐标 end-----------------------------------------------

          //--------------------------------世界坐标 begin----------------------------------------------
        }, {
          key: "wx",
          get: function get() {
            return this.transform.worldPosition.x;
          },
          set: function set(value) {
            var pos = this.transform.worldPosition;
            pos.x = value;
            this.transform.worldPosition = pos;
          }
        }, {
          key: "wy",
          get: function get() {
            return this.transform.worldPosition.y;
          },
          set: function set(value) {
            var pos = this.transform.transform.worldPosition;
            pos.y = value;
            this.transform.worldPosition = pos;
          }
        }, {
          key: "wz",
          get: function get() {
            return this.transform.worldPosition.z;
          },
          set: function set(value) {
            var pos = this.transform.worldPosition;
            pos.z = value;
            this.transform.worldPosition = pos;
          }
        }]);
        return Behaviour;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "tag", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return "";
        }
      }), _class2)) || _class));

      //Behaviour.prototype.onLoad = function(){this.onLoad(); console.log("执行了behaviour的 onload")};
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/BezierPart.ts", ['cc'], function (exports) {
  var cclegacy, _decorator, math;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      math = module.math;
    }],
    execute: function () {
      var _dec, _class;
      cclegacy._RF.push({}, "3f432xl0ENMxZF0TrIni9z0", "BezierPart", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var BezierPart = exports('BezierPart', (_dec = ccclass('BezierPart'), _dec(_class = /*#__PURE__*/function () {
        function BezierPart(startP, cP1, cP2, endP) {
          this.startPos = void 0;
          this.cPos1 = void 0;
          this.cPos2 = void 0;
          this.endPos = void 0;
          /**
           * 将贝塞尔曲线分成多个点，不包含开始端点
           */
          this.posArray = [];
          this.lenght = null;
          this.startPos = startP;
          this.cPos1 = cP1;
          this.cPos2 = cP2;
          this.endPos = endP;
          this.lenght = this.getBezierLen();
        }

        /**
         * 每隔len个像素生成一个点,曲线开始的端点不生成点
         * @param len
         */
        var _proto = BezierPart.prototype;
        _proto.createPosArray = function createPosArray(len) {
          var fn = Math.floor(this.lenght / len);
          var i = 1 / fn;
          for (var t = i; t <= 1; t += i) {
            var x = this.bezier(this.startPos.x, this.cPos1.x, this.cPos2.x, this.endPos.x, t);
            var y = this.bezier(this.startPos.y, this.cPos1.y, this.cPos2.y, this.endPos.y, t);
            this.posArray.push(math.v2(x, y));
          }
          if (this.posArray.length < fn) {
            //补上结束端点
            this.posArray.push(this.endPos);
          }
        }

        /**
         * 获得曲线长度
         * @param f 将一段曲线分为多少份来求长度,默认20
         */;
        _proto.getBezierLen = function getBezierLen(f) {
          var t = 1 / 20;
          var l = 0;
          var i;
          var cP;
          var lastP = math.v2(0, 0);
          for (i = 0; i <= 1; i += t) {
            var x = this.bezier(this.startPos.x, this.cPos1.x, this.cPos2.x, this.endPos.x, i);
            var y = this.bezier(this.startPos.y, this.cPos1.y, this.cPos2.y, this.endPos.y, i);
            cP = math.v2(x, y);
            l += cP.subtract(lastP).length();
            lastP = cP;
          }
          return l;
        };
        _proto.bezier = function bezier(v1, v2, v3, v4, t) {
          return v1 * Math.pow(1 - t, 3) + 3 * v2 * t * Math.pow(1 - t, 2) + 3 * v3 * t * t * (1 - t) + v4 * Math.pow(t, 3);
        };
        return BezierPart;
      }()) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/BinaryTreeNode.ts", ['cc'], function (exports) {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "656f9y+lfxGjINj0fvyGiQy", "BinaryTreeNode", undefined);
      var BinaryTreeNode = exports('default', /*#__PURE__*/function () {
        function BinaryTreeNode() {
          this.seekTag = 0;
          this.openNode = null;
          this.count = 0;
        }
        var _proto = BinaryTreeNode.prototype;
        _proto.refleshTag = function refleshTag() {
          this.openNode = null;
          this.count = 0;
          this.seekTag++;
          if (this.seekTag > 1000000000) {
            this.seekTag = 0;
          }
        };
        _proto.isTreeNull = function isTreeNull() {
          return this.openNode == null;
        };
        _proto.addTreeNode = function addTreeNode(roadNode, head) {
          if (head === void 0) {
            head = null;
          }
          this.count++;
          if (head == null) {
            if (this.isTreeNull()) {
              this.openNode = roadNode;
              return;
            } else {
              head = this.openNode;
            }
          }
          if (head == roadNode) {
            return;
          }
          if (roadNode.f >= head.f) {
            if (head.right == null) {
              head.right = roadNode;
              roadNode.treeParent = head;
            } else {
              this.addTreeNode(roadNode, head.right);
            }
          } else {
            if (head.left == null) {
              head.left = roadNode;
              roadNode.treeParent = head;
            } else {
              this.addTreeNode(roadNode, head.left);
            }
          }
        };
        _proto.removeTreeNode = function removeTreeNode(roadNode) {
          this.count++;
          if (roadNode.treeParent == null && roadNode.left == null && roadNode.right == null) {
            if (roadNode == this.openNode) {
              this.openNode = null;
            }
            return;
          }
          if (roadNode.treeParent == null) {
            if (roadNode.left) {
              this.openNode = roadNode.left;
              roadNode.left.treeParent = null;
              if (roadNode.right) {
                roadNode.right.treeParent = null;
                this.addTreeNode(roadNode.right, this.openNode);
              }
            } else if (roadNode.right) {
              this.openNode = roadNode.right;
              roadNode.right.treeParent = null;
            }
          } else {
            if (roadNode.treeParent.left == roadNode) {
              if (roadNode.right) {
                roadNode.treeParent.left = roadNode.right;
                roadNode.right.treeParent = roadNode.treeParent;
                if (roadNode.left) {
                  roadNode.left.treeParent = null;
                  this.addTreeNode(roadNode.left, roadNode.right);
                }
              } else {
                roadNode.treeParent.left = roadNode.left;
                if (roadNode.left) {
                  roadNode.left.treeParent = roadNode.treeParent;
                }
              }
            } else if (roadNode.treeParent.right == roadNode) {
              if (roadNode.left) {
                roadNode.treeParent.right = roadNode.left;
                roadNode.left.treeParent = roadNode.treeParent;
                if (roadNode.right) {
                  roadNode.right.treeParent = null;
                  this.addTreeNode(roadNode.right, roadNode.left);
                }
              } else {
                roadNode.treeParent.right = roadNode.right;
                if (roadNode.right) {
                  roadNode.right.treeParent = roadNode.treeParent;
                }
              }
            }
          }
          roadNode.resetTree();
        };
        _proto.getMinFNode = function getMinFNode(head) {
          if (head === void 0) {
            head = null;
          }
          this.count++;
          if (head == null) {
            if (this.openNode == null) {
              return null;
            } else {
              head = this.openNode;
            }
          }
          if (head.left == null) {
            var minNode = head;
            if (head.treeParent == null) {
              this.openNode = head.right;
              if (this.openNode) {
                this.openNode.treeParent = null;
              }
            } else {
              head.treeParent.left = head.right;
              if (head.right) {
                head.right.treeParent = head.treeParent;
              }
            }
            return minNode;
          } else {
            return this.getMinFNode(head.left);
          }
        };
        _proto.setRoadNodeInOpenList = function setRoadNodeInOpenList(node) {
          node.openTag = this.seekTag;
          node.closeTag = 0;
        };
        _proto.setRoadNodeInCloseList = function setRoadNodeInCloseList(node) {
          node.openTag = 0;
          node.closeTag = this.seekTag;
        };
        _proto.isInOpenList = function isInOpenList(node) {
          return node.openTag == this.seekTag;
        };
        _proto.isInCloseList = function isInCloseList(node) {
          return node.closeTag == this.seekTag;
        };
        _proto.getOpenList = function getOpenList() {
          var openList = [];
          this.seachTree(this.openNode, openList);
          return openList;
        };
        _proto.seachTree = function seachTree(head, openList) {
          if (head == null) {
            return;
          }
          openList.push(head);
          if (head.left) {
            this.seachTree(head.left, openList);
          }
          if (head.right) {
            this.seachTree(head.right, openList);
          }
        };
        return BinaryTreeNode;
      }());
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Block.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, Animation, Component;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Animation = module.Animation;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class;
      cclegacy._RF.push({}, "5c597v9Ai9GhZ6PDvUITBI9", "Block", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var Block = exports('Block', (_dec = ccclass('Block'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(Block, _Component);
        function Block() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.animation = void 0;
          return _this;
        }
        var _proto = Block.prototype;
        _proto.onLoad = function onLoad() {
          this.animation = this.node.getComponent(Animation);
        };
        _proto.playEff = function playEff() {
          var _this2 = this;
          return new Promise(function (resolve, rejecet) {
            if (!_this2.animation) {
              rejecet("动画组件未挂载");
              return;
            }
            _this2.animation.play("block");
            _this2.animation.on(Animation.EventType.FINISHED, function () {
              resolve(true);
            }, _this2);
          });
        };
        return Block;
      }(Component)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Boss.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Character.ts', './TowerLauncher.ts'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, ProgressBar, Vec3, Character, TowerLauncher;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      ProgressBar = module.ProgressBar;
      Vec3 = module.Vec3;
    }, function (module) {
      Character = module.default;
    }, function (module) {
      TowerLauncher = module.TowerLauncher;
    }],
    execute: function () {
      var _dec, _class;
      cclegacy._RF.push({}, "0327cg14fpLKrTPJG+gbfGL", "Boss", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var Boss = exports('Boss', (_dec = ccclass('Boss'), _dec(_class = /*#__PURE__*/function (_Character) {
        _inheritsLoose(Boss, _Character);
        function Boss() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Character.call.apply(_Character, [this].concat(args)) || this;
          _this.progress = void 0;
          _this._currentHp = 10;
          _this._maxHp = 10;
          return _this;
        }
        var _proto = Boss.prototype;
        _proto.onLoad = function onLoad() {
          _Character.prototype.onLoad.call(this);
          this.progress = this.node.getChildByName("ProgressBar").getComponent(ProgressBar);
        };
        _proto.start = function start() {};
        _proto.update = function update(deltaTime) {};
        _proto.initEditData = function initEditData(editData) {
          this.node.position = new Vec3(editData.x, editData.y);
          this.updateHp(this._currentHp);
        };
        _proto.updateHp = function updateHp(hp) {
          if (this.progress) {
            this._currentHp = hp;
            this.progress.progress = this._currentHp / this._maxHp;
          }
        };
        _proto.bleeding = function bleeding() {
          var _this2 = this;
          this._currentHp -= 1;
          this.updateHp(this._currentHp);
          if (this._currentHp <= 0) {
            this.scheduleOnce(function () {
              _this2.node.removeFromParent();
            }, 0);
            // this.destroy();
            console.error("失败了");
            TowerLauncher.instance.gameOver = true;
            TowerLauncher.instance.doGameOver();
          }
        };
        _proto.init = function init() {};
        return Boss;
      }(Character)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Bullet.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Character.ts', './BulletManager.ts', './TowerLauncher.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, CCInteger, Vec3, view, Animation, Character, BulletManager, TowerLauncher;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      CCInteger = module.CCInteger;
      Vec3 = module.Vec3;
      view = module.view;
      Animation = module.Animation;
    }, function (module) {
      Character = module.default;
    }, function (module) {
      BulletManager = module.BulletManager;
    }, function (module) {
      TowerLauncher = module.TowerLauncher;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;
      cclegacy._RF.push({}, "9af87CBFw5C3I5xbYJSoQXb", "Bullet", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var Bullet = exports('Bullet', (_dec = ccclass('Bullet'), _dec2 = property(Node), _dec3 = property(CCInteger), _dec(_class = (_class2 = /*#__PURE__*/function (_Character) {
        _inheritsLoose(Bullet, _Character);
        function Bullet() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Character.call.apply(_Character, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "targetNode", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "speed", _descriptor2, _assertThisInitialized(_this));
          _this.direction2 = Vec3.ZERO;
          _this.body = void 0;
          _this.harm = 10;
          _this.targetPosition = void 0;
          _this.view = void 0;
          _this.towerLevel = void 0;
          _this.tower = null;
          _this.animation = null;
          return _this;
        }
        var _proto = Bullet.prototype;
        _proto.onLoad = function onLoad() {
          _Character.prototype.onLoad.call(this);
          this.body = this.node.getChildByName("body");
          this.view = view.getVisibleSize();
          this.animation = this.node.getComponent(Animation);
          // if (this.targetNode) {
          //     // 计算子弹的移动方向
          //     const targetPos = this.targetNode.position;
          //     const currentPos = this.node.position;
          //     this.direction2 = math.v2(targetPos.x,targetPos.y).subtract(math.v2(currentPos.x,currentPos.y)).normalize(); //targetPos.subtract(currentPos).normalize();  // 计算方向向量
          // }
          // const rig = this.node.getComponent(RigidBody2D);
          // rig.applyForceToCenter(this.direction2.multiply(math.v2(0,this.speed)),true);
        };

        _proto.start = function start() {};
        _proto.update = function update(dt) {
          if (TowerLauncher.instance && (TowerLauncher.instance.gameOver || TowerLauncher.instance.pause)) {
            this.node.removeFromParent();
            BulletManager.instance.release(this);
            return;
          }
          if (this.direction2) {
            var radian = Math.atan2(this.direction2.y, this.direction2.x);
            var direction = this.direction2.clone().normalize();
            var angle = radian / Math.PI * 180;
            this.node.angle = angle; //- 90

            var displacement = direction.multiplyScalar(this.speed * dt);
            this.node.position = this.node.position.clone().add(displacement);
          }

          // 如果子弹飞出了场景，可以设置回收
          if (Math.abs(this.node.position.x) > this.view.width || Math.abs(this.node.position.y) > this.view.height || Math.abs(this.node.position.x) < 0 || Math.abs(this.node.position.y) < 0) {
            this.node.removeFromParent();
            BulletManager.instance.release(this);
          }
        };
        _proto["short"] = function short(direction, tower) {
          this.direction2 = direction;
          this.tower = tower;
          if (tower) {
            this.towerLevel = tower.level;
            this.playBulletAnimation();
            this.speed = tower.towerData.speed;
            this.harm = tower.towerData.harm;
          }
          // this.speed = speed;
        };

        _proto.playBulletAnimation = function playBulletAnimation() {
          if (this.animation) {
            var clips = this.animation.clips;
            var names = clips.map(function (clip) {
              return clip.name;
            }, this);
            this.animation.on(Animation.EventType.FINISHED, this.onAnimationFinished, this);
            this.animation.play(names[Math.max(0, this.towerLevel - 1)]);
            return true;
          }
          return false;
        };
        _proto.onAnimationFinished = function onAnimationFinished() {};
        return Bullet;
      }(Character), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "targetNode", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "speed", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0;
        }
      })), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/BulletManager.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Bullet.ts'], function (exports) {
  var _createClass, cclegacy, _decorator, NodePool, instantiate, Bullet;
  return {
    setters: [function (module) {
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      NodePool = module.NodePool;
      instantiate = module.instantiate;
    }, function (module) {
      Bullet = module.Bullet;
    }],
    execute: function () {
      var _dec, _class, _class2;
      cclegacy._RF.push({}, "c87ecJWPIZNaIXzqNH5cDtE", "BulletManager", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var BulletManager = exports('BulletManager', (_dec = ccclass('BulletManager'), _dec(_class = (_class2 = /*#__PURE__*/function () {
        function BulletManager() {
          this._bulletPool = null;
          this.bulletList = [];
          this._bulletPool = {};
          this.bulletList = [];
        }
        var _proto = BulletManager.prototype;
        _proto.create = function create(prefab) {
          if (!prefab) {
            return null;
          }
          var node = null;
          var pool = this._bulletPool[prefab.data.name];
          if (!pool) {
            pool = new NodePool();
          }
          if (pool.size() > 0) {
            node = pool.get();
          } else {
            node = instantiate(prefab);
          }
          var bullet = node.getComponent(Bullet);
          // TowerLauncher.instance.quadTree.insert(bullet);
          this.bulletList.push(bullet);
          return bullet;
        };
        _proto.release = function release(bullet) {
          if (!bullet) {
            return;
          }
          // TowerLauncher.instance.quadTree.remove(bullet);
          var index = this.bulletList.indexOf(bullet);
          if (index > -1) {
            this.bulletList.splice(index, 1);
          }
          var pool = this._bulletPool[bullet.node.name];
          if (pool) {
            pool.put(bullet.node);
          }
        };
        _proto.releaseAll = function releaseAll() {
          if (this.bulletList.length > 0) {
            for (var index = 0; index < this.bulletList.length; index++) {
              var bullet = this.bulletList[index];
              bullet.node.removeFromParent();
              this.release(bullet);
              this.bulletList.splice(index, 1);
              index--;
            }
          }
        };
        _proto.update = function update(deltaTime) {};
        _createClass(BulletManager, null, [{
          key: "instance",
          get: function get() {
            if (!BulletManager._instance) {
              BulletManager._instance = new BulletManager();
            }
            return BulletManager._instance;
          }
        }]);
        return BulletManager;
      }(), _class2._instance = null, _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Character.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Behaviour.ts', './PathFindingAgent.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, cclegacy, _decorator, Label, view, math, sp, Behaviour, PathFindingAgent;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      view = module.view;
      math = module.math;
      sp = module.sp;
    }, function (module) {
      Behaviour = module.Behaviour;
    }, function (module) {
      PathFindingAgent = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;
      cclegacy._RF.push({}, "47c79NPDE1Obqtin1lh3e7r", "Character", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;

      /**
       * 角色状态
       */
      var CharacterState = exports('CharacterState', /*#__PURE__*/function (CharacterState) {
        CharacterState[CharacterState["idle"] = 0] = "idle";
        CharacterState[CharacterState["walk"] = 1] = "walk";
        CharacterState[CharacterState["sitdown"] = 2] = "sitdown";
        CharacterState[CharacterState["sitdown_walk"] = 3] = "sitdown_walk";
        return CharacterState;
      }({}));

      /**
       * 场景角色基类 
       * @author 
       * 
       */
      var Character = exports('default', (_dec = ccclass('Character'), _dec2 = property(Label), _dec(_class = (_class2 = /*#__PURE__*/function (_Behaviour) {
        _inheritsLoose(Character, _Behaviour);
        function Character() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Behaviour.call.apply(_Behaviour, [this].concat(args)) || this;
          /**
           * 单位名字文本
           */
          _initializerDefineProperty(_this, "nameTxt", _descriptor, _assertThisInitialized(_this));
          /**
           * 用于显示角色名字的接口
           */
          _this._objName = "";
          _this._skeleton = null;
          /**
           * 设置单位方向
           * 
           * 方向值范围为 0-7，方向值设定如下，0是下，1是左下，2是左，3是左上，4是上，5是右上，6是右，7是右下
           * 
           *        4
           *      3   5
           *    2   *   6
           *      1   7
           *        0
           * 
           */
          _this._direction = 0;
          _this._state = 0;
          /**
           *角色最近一次所站在的地图节点 
           */
          _this._lastRoadNode = null;
          /**
           *玩家当前所站在的地图节点 
           */
          _this._currentNode = void 0;
          //public isScrollScene:boolean = false;
          _this.moving = false;
          _this.moveSpeed = 200;
          _this._moveAngle = 0;
          _this._roadNodeArr = [];
          _this._roadNodeVec2 = [];
          _this._nodeIndex = 0;
          // LIFE-CYCLE CALLBACKS:
          // onLoad () {}
          _this.speedX = 100;
          // 水平速度，单位：像素/秒
          _this.speedY = 100;
          // 垂直速度，单位：像素/秒
          _this.directionX = 1;
          // 水平方向，1为向右，-1为向左
          _this.directionY = 1;
          // 垂直方向，1为向上，-1为向下
          _this.screenWidth = 0;
          // 屏幕宽度
          _this.screenHeight = 0;
          return _this;
        }
        var _proto = Character.prototype;
        // 屏幕高度
        _proto.onLoad = function onLoad() {
          _Behaviour.prototype.onLoad.call(this);
          var visibleSize = view.getVisibleSize();
          this.screenWidth = visibleSize.width;
          this.screenHeight = visibleSize.height;
        };
        _proto.start = function start() {
          this.state = CharacterState.idle; //默认待机状态
        };

        _proto.update = function update(dt) {
          if (this.moving) {
            var nextVec = this._roadNodeVec2[this._nodeIndex];
            var pos = this.node.position;
            var posX = pos.x;
            var posY = pos.y;
            var dx = nextVec.x - posX;
            var dy = nextVec.y - posY;
            var speed = this.moveSpeed * dt;
            if (dx * dx + dy * dy > speed * speed) {
              if (this._moveAngle == 0) {
                this._moveAngle = Math.atan2(dy, dx);
                var dire = Math.round((-this._moveAngle + Math.PI) / (Math.PI / 4));
                this.direction = dire > 5 ? dire - 6 : dire + 2;
              }
              var xspeed = Math.cos(this._moveAngle) * speed;
              var yspeed = Math.sin(this._moveAngle) * speed;
              posX += xspeed;
              posY += yspeed;
            } else {
              this._moveAngle = 0;
              if (this._nodeIndex == this._roadNodeArr.length - 1) {
                posX = nextVec.x;
                posY = nextVec.y;
                this.stop();
              } else {
                this.walk();
              }
            }

            // console.log("移动坐标", pos.x, pos.y);
            this.node.setPosition(posX, posY);
            // this.node.position = pos;
            // console.log("当前节点坐标", this.node.position.x, this.node.position.y);
            // this.node.setPosition(pos);
            // this.node.setPosition(pos.x, pos.y);
          }

          this.updateCharaterStateByNode();
        }

        // protected lateUpdate(dt: number): void {
        //     if (this.moving && this.movePos) { 
        //         this.node.position = this.movePos;
        //     }
        // }

        /**
         * 根据角色所在的路节点信息更新自身的信息
         * @returns 
         */;
        _proto.updateCharaterStateByNode = function updateCharaterStateByNode() {
          var roadNode = this.roadNode;
          if (roadNode == this._lastRoadNode) {
            //如果角色所站的路节点没有发生变化，不处理
            return;
          }
          this._lastRoadNode = roadNode;
          if (this._lastRoadNode) {
            switch (this._lastRoadNode.value) {
              case 2:
                //如果是透明节点时
                if (this.alpha != 0.4) {
                  this.alpha = 0.4;
                }
                break;
              case 3:
                //如果是隐藏节点时
                //this.alpha < 1 && (this.alpha = 1);
                this.alpha > 0 && (this.alpha = 0);
                break;
              default:
                this.alpha < 1 && (this.alpha = 1);
            }
          }
        }

        /**
         * 根据路节点路径行走
         * @param roadNodeArr 
         */;
        _proto.walkByRoad = function walkByRoad(roadNodeArr) {
          this._roadNodeArr = roadNodeArr;
          var nodeVec2Array = this._roadNodeArr.map(function (e) {
            return math.v2(e.px, e.py);
          }, this);
          this.wolkByVec2(nodeVec2Array);
        };
        _proto.wolkByVec2 = function wolkByVec2(vec2Array) {
          this._roadNodeVec2 = vec2Array;
          this._nodeIndex = 0;
          this._moveAngle = 0;
          this.walk();
          this.move();
        };
        _proto.walk = function walk() {
          if (this._nodeIndex < this._roadNodeVec2.length - 1) {
            this._nodeIndex++;
          }
        };
        _proto.move = function move() {
          this.moving = true;
          this.state = CharacterState.walk;
        };
        _proto.stop = function stop() {
          this.moving = false;
          this.state = CharacterState.idle;
        }

        /**
         * 导航角色到目标点
         * @param targetX 
         * @param targetY 
         */;
        _proto.navTo = function navTo(targetX, targetY) {
          // this.node.setPosition(targetX, targetY);
          var roadNodeArr = PathFindingAgent.instance.seekPath(math.v2(this.node.position.x, this.node.position.y), math.v2(targetX, targetY)); //如果目标点是障碍，则寻路失败                               //按需求自选
          // var roadNodeArr:RoadNode[] = PathFindingAgent.instance.seekPath2(this.node.position.x,this.node.position.y,targetX,targetY);  //如果目标点是障碍，则寻路到里目标点最近的一个非障碍点         //按需求自选

          if (roadNodeArr.length > 0) {
            console.log(roadNodeArr);
            this.walkByRoad(roadNodeArr);
          }
        };
        _createClass(Character, [{
          key: "objName",
          get: function get() {
            return this._objName;
          },
          set: function set(value) {
            this._objName = value;
            if (this.nameTxt == null) {
              var _this$node$getChildBy;
              this.nameTxt = (_this$node$getChildBy = this.node.getChildByName("NameTxt")) == null ? void 0 : _this$node$getChildBy.getComponent(Label);
            }
            if (this.nameTxt) {
              this.nameTxt.string = this._objName;
            }
          }
        }, {
          key: "skeleton",
          get: function get() {
            if (!this._skeleton) {
              this._skeleton = this.node.getComponentInChildren(sp.Skeleton);
            }
            return this._skeleton;
          }
        }, {
          key: "direction",
          get: function get() {
            return this._direction;
          },
          set: function set(value) {
            this._direction = value;
            if (value == 2) {
              var _scale = this.skeleton.node.scale.clone();
              var _scaleX = _scale.x;
              _scale.x = -_scaleX;
              this.skeleton.node.scale = _scale;
              return;
            }
            var scale = this.skeleton.node.scale.clone();
            var scaleX = scale.x;
            scale.x = scaleX;
            this.skeleton.node.scale = scale;

            // if(value > 4)
            // {
            //     // this.skeleton.rowIndex = 4 - value % 4;
            //     let scale = this.skeleton.node.scale.clone();
            //     let scaleX: number = scale.x;
            //     scale.x = scaleX;
            //     this.skeleton.node.scale = scale;
            // }else
            // {
            //     // this.movieClip.rowIndex = value;
            //     let scale: Vec3 = this.skeleton.node.scale.clone();
            //     let scaleX: number = scale.x;
            //     scale.x = -scaleX;
            //     this.skeleton.node.scale = scale;
            // }
          }
        }, {
          key: "state",
          get: function get() {
            return this._state;
          },
          set: function set(value) {
            // this._state = value;

            // var halfCol:number = this.movieClip.col / 2;

            // switch(this._state)
            // {
            //     case CharacterState.idle: 
            //         this.movieClip.begin = 0;
            //         this.movieClip.end = halfCol;
            //     break;

            //     case CharacterState.walk: 
            //         this.movieClip.begin = halfCol;
            //         this.movieClip.end = this.movieClip.col;
            //     break;
            // }
          }

          /**
           * 单位当前所站在的路点
           */
        }, {
          key: "roadNode",
          get: function get() {
            return PathFindingAgent.instance.getRoadNodeByPixel(this.node.position.x, this.node.position.y);
          }
        }]);
        return Character;
      }(Behaviour), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "nameTxt", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/config.ts", ['cc'], function (exports) {
  var cclegacy, Vec2;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      Vec2 = module.Vec2;
    }],
    execute: function () {
      cclegacy._RF.push({}, "c6c25PlK05J7Zxjenr5Qj17", "config", undefined);

      /** 游戏配置 */
      var config = exports('config', {
        sceneWidth: 740,
        sceneHeight: 1200,
        /** 方格宽 */
        blockWidth: 90,
        /** 方格高 */
        blockHeight: 90,
        /** 小动物宽 */
        itemWidth: 78,
        /** 小动物高 */
        itemHeight: 67,
        /** 行数 */
        row: 20,
        /** 列数 */
        col: 10,
        /** 每次新生成形状时的中心位置 */
        startPos: new Vec2(1, 3),
        // 形状数据,以（1，1）为中心参考
        /** 长条形 */
        shape1: [[new Vec2(0, -1), new Vec2(0, 0), new Vec2(0, 1), new Vec2(0, 2)], [new Vec2(-1, 0), new Vec2(0, 0), new Vec2(1, 0), new Vec2(2, 0)], [new Vec2(0, -1), new Vec2(0, 0), new Vec2(0, 1), new Vec2(0, 2)], [new Vec2(-1, 0), new Vec2(0, 0), new Vec2(1, 0), new Vec2(2, 0)]],
        /** 方形 */
        shape2: [[new Vec2(-1, -1), new Vec2(-1, 0), new Vec2(0, -1), new Vec2(0, 0)], [new Vec2(-1, -1), new Vec2(-1, 0), new Vec2(0, -1), new Vec2(0, 0)], [new Vec2(-1, -1), new Vec2(-1, 0), new Vec2(0, -1), new Vec2(0, 0)], [new Vec2(-1, -1), new Vec2(-1, 0), new Vec2(0, -1), new Vec2(0, 0)]],
        /** T形 */
        shape3: [[new Vec2(0, -1), new Vec2(-1, 0), new Vec2(0, 0), new Vec2(0, 1)], [new Vec2(1, 0), new Vec2(-1, 0), new Vec2(0, 0), new Vec2(0, 1)], [new Vec2(0, -1), new Vec2(1, 0), new Vec2(0, 0), new Vec2(0, 1)], [new Vec2(0, -1), new Vec2(-1, 0), new Vec2(0, 0), new Vec2(1, 0)]],
        /** L形 */
        shape4: [[new Vec2(-1, 0), new Vec2(0, 0), new Vec2(1, 0), new Vec2(1, 1)], [new Vec2(1, -1), new Vec2(0, -1), new Vec2(0, 0), new Vec2(0, 1)], [new Vec2(-1, -1), new Vec2(-1, 0), new Vec2(0, 0), new Vec2(1, 0)], [new Vec2(-1, 1), new Vec2(0, -1), new Vec2(0, 0), new Vec2(0, 1)]],
        /** 翻转L */
        shape5: [[new Vec2(-1, 0), new Vec2(0, 0), new Vec2(1, 0), new Vec2(1, -1)], [new Vec2(-1, -1), new Vec2(0, -1), new Vec2(0, 0), new Vec2(0, 1)], [new Vec2(-1, 0), new Vec2(-1, 1), new Vec2(0, 0), new Vec2(1, 0)], [new Vec2(0, -1), new Vec2(0, 0), new Vec2(0, 1), new Vec2(1, 1)]],
        /** S形 */
        shape6: [[new Vec2(-1, 0), new Vec2(-1, 1), new Vec2(0, -1), new Vec2(0, 0)], [new Vec2(-1, -1), new Vec2(0, -1), new Vec2(0, 0), new Vec2(1, 0)], [new Vec2(-1, 0), new Vec2(-1, 1), new Vec2(0, -1), new Vec2(0, 0)], [new Vec2(-1, -1), new Vec2(0, -1), new Vec2(0, 0), new Vec2(1, 0)]],
        /** 翻转S */
        shape7: [[new Vec2(-1, -1), new Vec2(-1, 0), new Vec2(0, 0), new Vec2(0, 1)], [new Vec2(1, -1), new Vec2(-1, 0), new Vec2(0, 0), new Vec2(0, -1)], [new Vec2(-1, -1), new Vec2(-1, 0), new Vec2(0, 0), new Vec2(0, 1)], [new Vec2(1, -1), new Vec2(-1, 0), new Vec2(0, 0), new Vec2(0, -1)]]
      });
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Containers.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './HashMap.ts', './NodeFactory.ts', './GameObject.ts', './GameConst.ts', './EntityLayer.ts'], function (exports) {
  var _inheritsLoose, cclegacy, HashMap, NodeFactory, GameObject, GameConst, EntityLayer;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      HashMap = module.HashMap;
    }, function (module) {
      NodeFactory = module.NodeFactory;
    }, function (module) {
      GameObject = module.GameObject;
    }, function (module) {
      GameConst = module.GameConst;
    }, function (module) {
      EntityLayer = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "406abiLprxDE6tPkrsWB920", "Containers", undefined);

      /**
       * @fileName Containers.ts
       * @author zhangqiong
       * @date 2024/12/18 16:21:40"
       * @description
       */
      var Containers = exports('Containers', /*#__PURE__*/function (_GameObject) {
        _inheritsLoose(Containers, _GameObject);
        function Containers() {
          var _this;
          _this = _GameObject.call(this) || this;
          _this.containerMap = void 0;
          _this.containerMap = new HashMap();
          return _this;
        }
        var _proto = Containers.prototype;
        _proto.onLoad = function onLoad() {};
        _proto.getChildContainer = function getChildContainer(names) {
          if (this.containerMap.hasKey(names)) {
            return this.containerMap.get(names);
          }
          var container = NodeFactory.instance.createNode();
          this.addChild(container);
          this.containerMap.put(names, container);
          return container;
        };
        _proto.setContainers = function setContainers(names) {
          for (var i = 0; i < names.length; i++) {
            var container = NodeFactory.instance.createNode();
            container.name = names[i];
            this.addChild(container);
            if (names[i] == GameConst.ROLE_LAYER) {
              container.addComponent(EntityLayer);
            }
            this.containerMap.put(names[i], container);
          }
        };
        _proto.addContainer = function addContainer(name, container, depth) {
          if (container === void 0) {
            container = null;
          }
          if (depth === void 0) {
            depth = -1;
          }
          if (this.containerMap.get(name) == null) {
            if (!container) {
              container = NodeFactory.instance.createNode();
            }
            if (depth == -1) {
              this.addChild(container);
            } else {
              container.setSiblingIndex(depth);
              this.addChild(container);
            }
            this.containerMap.put(name, container);
          }
        };
        _proto.removeContainer = function removeContainer(name) {
          var container = this.containerMap.get(name);
          if (container) {
            this.containerMap.remove(name);
            this.removeChild(container);
            return container;
          }
          return null;
        };
        _proto.remove = function remove() {
          if (this.parent) this.parent.removeChild(this);
        };
        return Containers;
      }(GameObject));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ContentAdapter.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, UITransform, view, Widget, Component;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      UITransform = module.UITransform;
      view = module.view;
      Widget = module.Widget;
      Component = module.Component;
    }],
    execute: function () {
      var _class;
      cclegacy._RF.push({}, "ea6aa8APXdNIJjvxkF8QQIe", "ContentAdapter", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;

      /**
       * @classdesc  游戏主内容节点自适应所有分辨率的脚本
       * @author caizhitao
       * @version 0.1.0
       * @since 2018-11-30
       * @description
       *
       * 用法：
       *      1. 将本组件挂载在节点上即可
       *
       * 适配原理：
       *      1. 将游戏主内容节点的宽高调整为画布的大小，以进行Size适配
       *
       * 注意：
       *      1. 挂载这个脚本的节点不能加入Widget组件，不然这个适配是没有效果的
       *      2. 目前只支持 SHOW_ALL 模式下的背景缩放适配，不支持其他模式的背景缩放
       *
       *  @example
          ```
          // e.g.
          // 代码中设置 SHOW_ALL 模式的参考代码
          cc.view.setDesignResolutionSize(720, 1280, cc.ResolutionPolicy.SHOW_ALL);
           // 或者 Canvas 组件中，同时勾选 Fit Width 和 Fit Height 
          ```
       */
      var ContentAdapter = exports('default', ccclass(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(ContentAdapter, _Component);
        function ContentAdapter() {
          return _Component.apply(this, arguments) || this;
        }
        var _proto = ContentAdapter.prototype;
        _proto.onLoad = function onLoad() {
          // if (CC_DEBUG) {
          //     cc.log("调整前");
          //     cc.log(`屏幕分辨率: ${cc.view.getCanvasSize().width} x ${cc.view.getCanvasSize().height}`);
          //     cc.log(`视图窗口可见区域分辨率: ${cc.view.getVisibleSize().width} x ${cc.view.getVisibleSize().height}`);
          //     cc.log(`视图中边框尺寸: ${cc.view.getFrameSize().width} x ${cc.view.getFrameSize().height}`);
          //     cc.log(`设备或浏览器像素比例: ${cc.view.getDevicePixelRatio()}`);
          //     cc.log(`节点宽高: ${this.node.width} x ${this.node.height}`);
          // }

          // 1. 先找到 SHOW_ALL 模式适配之后，本节点的实际宽高以及初始缩放值
          var nodeUITr = this.node.getComponent(UITransform);
          var nodeWidth = nodeUITr.width;
          var nodeHight = nodeUITr.height;
          var size = view.getCanvasSize();
          var srcScaleForShowAll = Math.min(size.width / nodeWidth, size.height / nodeHight);
          var realWidth = nodeWidth * srcScaleForShowAll;
          var realHeight = nodeHight * srcScaleForShowAll;

          // 2. 基于第一步的数据，再做节点宽高适配

          nodeUITr.width = nodeWidth * (size.width / realWidth);
          nodeUITr.height = nodeHight * (size.height / realHeight);

          // // 3. 因为本节点的宽高发生了改变，所以要手动更新剩下子节点的宽高
          this._updateAllChildNodeWidget(this.node);

          // if (CC_DEBUG) {
          //     cc.log(`节点在SHOW_ALL模式下展示的宽高: ${realWidth} x ${realHeight}`);
          //     cc.log(`节点在SHOW_ALL模式下展示的缩放: ${srcScaleForShowAll}`);
          //     cc.log(
          //         `节点在SHOW_ALL模式下做全屏处理后的实际宽高（${cc.view.getCanvasSize().width}x${
          //             cc.view.getCanvasSize().height
          //         }）等价于于原节点的宽高(${this.node.width}x${this.node.height})`
          //     );
          // }
        };

        _proto._updateAllChildNodeWidget = function _updateAllChildNodeWidget(parentNode) {
          var _this = this;
          if (parentNode == null) {
            return;
          }
          var widget = parentNode.getComponent(Widget);
          if (widget != null) {
            widget.updateAlignment();
          }
          if (parentNode.children.length == 0) {
            return;
          }
          parentNode.children.forEach(function (childNode) {
            _this._updateAllChildNodeWidget(childNode);
          });
        };
        return ContentAdapter;
      }(Component)) || _class);
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/DepthHelper.ts", ['cc'], function () {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "717d9+EQtdDM7KUvmMmxVwF", "DepthHelper", undefined);
      /**
       * @fileName DepthHelper.ts
       * @author zhangqiong
       * @date 2024/12/23 16:45:54"
       * @description
       */
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/DestroyUtils.ts", ['cc'], function (exports) {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "148efdAHCROIaJCUDI1S35L", "DestroyUtils", undefined);
      /**
       * @fileName DestroyUtils.ts
       * @author zhangqiong
       * @date 2024/12/27 20:19:14"
       * @description
       */
      var DestroyUtils = exports('DestroyUtils', /*#__PURE__*/function () {
        function DestroyUtils() {}
        DestroyUtils.destroy = function destroy(obj) {
          if (obj instanceof Array) {
            for (var i = 0; i < obj.length; i++) {
              this.destroy(obj[i]);
            }
            return;
          }
          for (var i = 0; i < this.keyNames.length; i++) {
            if (obj[this.keyNames[i]]) {
              obj[this.keyNames[i]]();
              return;
            }
          }
        };
        return DestroyUtils;
      }());
      DestroyUtils.keyNames = ["destroy", "dispose"];
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/EditObjData.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _inheritsLoose, cclegacy;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "4b613uVFoVGBLPJihnr8m8F", "EditObjData", undefined);
      /**
       * 地图编辑物体对象的数据结构 （基类）
       */
      var EditObjData = exports('default', function EditObjData() {
        /**
         * 物体Id
         */
        this.objId = "";
        /**
         * 物体名称
         */
        this.objName = "";
        /**
         * 物体类型
         */
        this.objType = "";
        /**
         * 物体皮肤
         */
        this.skin = "";
        /**
         * x坐标
         */
        this.x = 0;
        /**
         * y坐标
         */
        this.y = 0;
        /**
         * 世界坐标x轴
         */
        this.cx = 0;
        /**
         * 世界坐标y轴
         */
        this.cy = 0;
        /**
         * 自定义参数
         */
        this.params = "";
      });
      var EditNpcData = exports('EditNpcData', /*#__PURE__*/function (_EditObjData) {
        _inheritsLoose(EditNpcData, _EditObjData);
        function EditNpcData() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _EditObjData.call.apply(_EditObjData, [this].concat(args)) || this;
          /**
           * 角色方向,值为 0-7
           */
          _this.direction = 0;
          /**
           * 是否巡逻
           */
          _this.isPatrol = false;
          /**
           * 对话id
           */
          _this.dialogueId = 0;
          /**
           * 任务id
           */
          _this.taskId = 0;
          /**
           * 功能id
           */
          _this.funcId = 0;
          /**
           * npc类型
           */
          _this.npcType = 0;
          return _this;
        }
        return EditNpcData;
      }(EditObjData));

      /**
       * 编辑怪物的数据
       */
      var EditMonsterData = exports('EditMonsterData', /*#__PURE__*/function (_EditObjData2) {
        _inheritsLoose(EditMonsterData, _EditObjData2);
        function EditMonsterData() {
          var _this2;
          for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            args[_key2] = arguments[_key2];
          }
          _this2 = _EditObjData2.call.apply(_EditObjData2, [this].concat(args)) || this;
          /**
           * 角色方向,值为 0-7
           */
          _this2.direction = 0;
          /**
           * 是否巡逻
           */
          _this2.isPatrol = false;
          /**
           * 对话id
           */
          _this2.dialogueId = 0;
          /**
           * 战斗id
           */
          _this2.fightId = 0;
          /**
           * 怪物类型
           */
          _this2.monsterType = 0;
          return _this2;
        }
        return EditMonsterData;
      }(EditObjData));

      /**
       * 编辑传送门的数据
       */
      var EditTransferData = exports('EditTransferData', /*#__PURE__*/function (_EditObjData3) {
        _inheritsLoose(EditTransferData, _EditObjData3);
        function EditTransferData() {
          var _this3;
          for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
            args[_key3] = arguments[_key3];
          }
          _this3 = _EditObjData3.call.apply(_EditObjData3, [this].concat(args)) || this;
          /**
           * 传送到目标地图Id
           */
          _this3.targetMapId = "";
          /**
           * 目标地图的出生点Id
           */
          _this3.targetMapSpawnId = 0;
          /**
           * 传送门类型
           */
          _this3.transferType = 0;
          return _this3;
        }
        return EditTransferData;
      }(EditObjData));

      /**
       * 编辑出生点的位置
       */
      var EditSpawnPointData = exports('EditSpawnPointData', /*#__PURE__*/function (_EditObjData4) {
        _inheritsLoose(EditSpawnPointData, _EditObjData4);
        function EditSpawnPointData() {
          var _this4;
          for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
            args[_key4] = arguments[_key4];
          }
          _this4 = _EditObjData4.call.apply(_EditObjData4, [this].concat(args)) || this;
          /**
           * 出生点Id
           */
          _this4.spawnId = 0;
          /**
           * 是否是默认出生点
           */
          _this4.defaultSpawn = false;
          return _this4;
        }
        return EditSpawnPointData;
      }(EditObjData));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/EditPlot.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, CCBoolean, SpriteFrame, Component;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      CCBoolean = module.CCBoolean;
      SpriteFrame = module.SpriteFrame;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;
      cclegacy._RF.push({}, "06729MDWzRCfZXpI15JTffo", "EditPlot", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var EditPlot = exports('EditPlot', (_dec = ccclass('EditPlot'), _dec2 = property(CCBoolean), _dec3 = property(SpriteFrame), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(EditPlot, _Component);
        function EditPlot() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "canBuild", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "defaultObj", _descriptor2, _assertThisInitialized(_this));
          return _this;
        }
        var _proto = EditPlot.prototype;
        _proto.start = function start() {};
        _proto.update = function update(deltaTime) {};
        return EditPlot;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "canBuild", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return true;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "defaultObj", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/EffectManager.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './ViewConst.ts', './AssetMgr.ts'], function (exports) {
  var _asyncToGenerator, _regeneratorRuntime, _createClass, cclegacy, Animation, NodePool, ViewConst, AssetMgr;
  return {
    setters: [function (module) {
      _asyncToGenerator = module.asyncToGenerator;
      _regeneratorRuntime = module.regeneratorRuntime;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      Animation = module.Animation;
      NodePool = module.NodePool;
    }, function (module) {
      ViewConst = module.default;
    }, function (module) {
      AssetMgr = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "f74ef144S1HvKrHDo8Ygtmd", "EffectManager", undefined);
      var EffectManager = exports('EffectManager', /*#__PURE__*/function () {
        function EffectManager() {
          this._nodePool = void 0;
          this._effectLayer = void 0;
          this._nodePool = new NodePool();
        }
        var _proto = EffectManager.prototype;
        _proto.initEffectLayer = function initEffectLayer(layer) {
          this._effectLayer = layer;
        };
        _proto.getNode = /*#__PURE__*/function () {
          var _getNode = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
            var prefabPath, node;
            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) switch (_context.prev = _context.next) {
                case 0:
                  if (!(this._nodePool && this._nodePool.size() > 0)) {
                    _context.next = 4;
                    break;
                  }
                  return _context.abrupt("return", this._nodePool.get());
                case 4:
                  prefabPath = ViewConst.defaultPrefabPathPrefix + "tower/effect";
                  _context.next = 7;
                  return AssetMgr.instance.createPrefab(prefabPath);
                case 7:
                  node = _context.sent;
                  return _context.abrupt("return", node);
                case 9:
                case "end":
                  return _context.stop();
              }
            }, _callee, this);
          }));
          function getNode() {
            return _getNode.apply(this, arguments);
          }
          return getNode;
        }();
        _proto.showEffect = function showEffect(name, position) {
          var _this = this;
          return new Promise( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(resolve, reject) {
            var node, animation, clips, effectNames, playClip;
            return _regeneratorRuntime().wrap(function _callee2$(_context2) {
              while (1) switch (_context2.prev = _context2.next) {
                case 0:
                  _context2.next = 2;
                  return _this.getNode();
                case 2:
                  node = _context2.sent;
                  if (node) {
                    _context2.next = 7;
                    break;
                  }
                  console.error(" ***** tower/effect is not exist ***** ");
                  resolve(null);
                  return _context2.abrupt("return");
                case 7:
                  node.setPosition(position);
                  if (_this._effectLayer) {
                    _this._effectLayer.addChild(node);
                  }
                  animation = node.getComponent(Animation);
                  if (animation) {
                    _context2.next = 13;
                    break;
                  }
                  reject("***** animation is not exist ***** ");
                  return _context2.abrupt("return");
                case 13:
                  clips = animation.clips;
                  effectNames = clips.map(function (clip) {
                    return clip.name;
                  });
                  if (!(!effectNames.length || effectNames.indexOf(name) === -1)) {
                    _context2.next = 18;
                    break;
                  }
                  reject("***** effect name is not exist ***** ");
                  return _context2.abrupt("return");
                case 18:
                  playClip = clips.find(function (clip) {
                    return clip.name === name;
                  });
                  if (playClip) {
                    _context2.next = 22;
                    break;
                  }
                  reject("***** playClip is not exist ***** ");
                  return _context2.abrupt("return");
                case 22:
                  if (playClip.wrapMode == 1) {
                    animation.on(Animation.EventType.FINISHED, function () {
                      _this._nodePool.put(node);
                      node.removeFromParent();
                      resolve();
                    }, _this);
                  }
                  animation.play(name);
                  if (playClip.wrapMode == 2) {
                    resolve();
                  }
                case 25:
                case "end":
                  return _context2.stop();
              }
            }, _callee2);
          })));
        };
        _createClass(EffectManager, null, [{
          key: "instance",
          get: function get() {
            if (!this._instance) {
              this._instance = new EffectManager();
            }
            return this._instance;
          }
        }]);
        return EffectManager;
      }());
      EffectManager._instance = void 0;
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Enemy.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Character.ts', './TowerLauncher.ts', './EffectManager.ts'], function (exports) {
  var _inheritsLoose, _createClass, cclegacy, _decorator, ProgressBar, Character, TowerLauncher, EffectManager;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      ProgressBar = module.ProgressBar;
    }, function (module) {
      Character = module.default;
    }, function (module) {
      TowerLauncher = module.TowerLauncher;
    }, function (module) {
      EffectManager = module.EffectManager;
    }],
    execute: function () {
      var _dec, _class;
      cclegacy._RF.push({}, "76911HV09VC7YhNBD9FE13i", "Enemy", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var Enemy = exports('Enemy', (_dec = ccclass('Enemy'), _dec(_class = /*#__PURE__*/function (_Character) {
        _inheritsLoose(Enemy, _Character);
        function Enemy() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Character.call.apply(_Character, [this].concat(args)) || this;
          _this.progress = void 0;
          _this._currentHp = 100;
          _this._maxHp = 100;
          _this.price = 50;
          return _this;
        }
        var _proto = Enemy.prototype;
        _proto.start = function start() {};
        _proto.damage = function damage(value) {
          this._currentHp -= value;
          this.updateHp();
          EffectManager.instance.showEffect("tower1_eff", this.node.position.clone()).then(function (value) {})["catch"](function (err) {
            console.error(err);
          });
          if (this._currentHp <= 0) {
            this.die();
            TowerLauncher.instance.value += this.price;
            TowerLauncher.instance.popEnemyCount++;
            EffectManager.instance.showEffect("EnemyDie", this.node.position.clone());
          }
        };
        _proto.die = function die() {
          var _this2 = this;
          this._currentHp = 0;
          this.scheduleOnce(function () {
            TowerLauncher.instance.removeEnemy(_this2);
            _this2.node.removeFromParent();
          }, 0);
        };
        _proto.updateHp = function updateHp() {
          if (this.progress) {
            this.progress.progress = this._currentHp / this._maxHp;
          }
        };
        _proto.onLoad = function onLoad() {
          _Character.prototype.onLoad.call(this);
          this.progress = this.node.getChildByName("ProgressBar").getComponent(ProgressBar);
          this.updateHp();
        };
        _proto.navigationByPath = function navigationByPath(paths) {
          if (paths.length > 0) {
            this.wolkByVec2(paths);
          }
        };
        _proto.init = function init() {};
        _proto.onTriggerEnter2D = function onTriggerEnter2D(selfCollider, otherCollider, contact) {
          // console.log("onTriggerEnter2D");
          // const target = otherCollider.node.getComponent(Boss);
          // if(target){
          //     target.bleeding();
          //     this.node.removeFromParent();
          // }
        };
        _proto.onTriggerExit2D = function onTriggerExit2D(selfCollider, otherCollider, contact) {
          // console.log("onTriggerExit2D");
        };
        _proto.onCollisionEnter2D = function onCollisionEnter2D(selfCollider, otherCollider, contact) {
          // console.log("onCollisionEnter2D");
          // const target = otherCollider.node.getComponent(Boss);
          // if(target){
          //     target.bleeding();
          //     this.die();
          // }
        };
        _proto.onCollisionExit2D = function onCollisionExit2D(selfCollider, otherCollider, contact) {
          // console.log("onCollisionExit2D");
        };
        _createClass(Enemy, [{
          key: "hp",
          get: function get() {
            return this._currentHp;
          }
        }]);
        return Enemy;
      }(Character)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Entity.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Unit.ts', './GameConst.ts', './SpineSkeleton.ts', './FightUtil.ts', './ActionInfo.ts'], function (exports) {
  var _inheritsLoose, _createClass, cclegacy, Vec3, Unit, GameConst, SpineSkeleton, FightUtil, ActionInfo;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      Vec3 = module.Vec3;
    }, function (module) {
      Unit = module.Unit;
    }, function (module) {
      GameConst = module.GameConst;
    }, function (module) {
      SpineSkeleton = module.SpineSkeleton;
    }, function (module) {
      FightUtil = module.FightUtil;
    }, function (module) {
      ActionInfo = module.ActionInfo;
    }],
    execute: function () {
      cclegacy._RF.push({}, "177d2BJmcdFAaRAa6yopDHs", "Entity", undefined);

      /**
       * @fileName Entity.ts
       * @author zhangqiong
       * @date 2024/12/24 15:49:24"
       * @description
       */
      var Entity = exports('Entity', /*#__PURE__*/function (_Unit) {
        _inheritsLoose(Entity, _Unit);
        function Entity() {
          var _this;
          _this = _Unit.call(this) || this;
          _this.mScene = void 0;
          _this.speed = 12;
          _this.url = void 0;
          _this.role = void 0;
          // todo
          _this.direction = 0;
          _this.action = void 0;
          _this.dirMode = void 0;
          _this.roleSpine = void 0;
          _this.dx = void 0;
          _this.dy = void 0;
          _this.dist = void 0;
          _this.moveAngle = void 0;
          _this.oldAngle = -1;
          _this.oldMoveAngle = -1;
          _this.xSpeed = 0;
          _this.ySpeed = 0;
          return _this;
        }
        var _proto = Entity.prototype;
        _proto.init = function init() {};
        _proto.changeDirByAngle = function changeDirByAngle(angle) {
          this.setDirection(FightUtil.instance.getDirectionByAngle(angle));
        };
        _proto.setRole = function setRole(id) {
          if (!this.roleSpine) {
            this.roleSpine = this.getComponent(SpineSkeleton);
            if (!this.roleSpine) {
              this.roleSpine = this.addComponent(SpineSkeleton);
            }
          }
          return this.roleSpine.setSpineId(id);
        };
        _proto.stopAction = function stopAction() {
          this.setAction(GameConst.Idle);
        };
        _proto.setAction = function setAction(action, times, handler, oper, isForce) {
          if (times === void 0) {
            times = -1;
          }
          if (handler === void 0) {
            handler = null;
          }
          if (isForce === void 0) {
            isForce = false;
          }
          if (action == this.action && !isForce) {
            return;
          }
          this.action = action;
          this.action = action;
          var info = new ActionInfo(action, handler, times);
          return this.roleSpine.setAnimation(info);
        };
        _proto.getCurrentAction = function getCurrentAction() {
          if (this.roleSpine) {
            return this.roleSpine.currentAnimation;
          }
          return this.action;
        };
        _proto.setSpineKeyFrameHandler = function setSpineKeyFrameHandler(handler) {
          if (this.roleSpine) {
            this.roleSpine.keyFrameHandler = handler;
          }
        };
        _proto.setDirection = function setDirection(direction, isForce, times) {
          if (isForce === void 0) {
            isForce = false;
          }
          if (direction == this.direction && !isForce) {
            return;
          }
          this.direction = direction;
          var scale = new Vec3();
          this.getScale(scale);
          var realyscaleX = FightUtil.instance.getScaleXByDirection(direction);
          var scaleX = Math.abs(scale.x) * realyscaleX;
          this.setScale(scaleX, scale.y);
        };
        _proto.changeActionAndDirection = function changeActionAndDirection(action, direction, times, handler, isForce) {
          if (direction === void 0) {
            direction = -1;
          }
          if (times === void 0) {
            times = -1;
          }
          if (handler === void 0) {
            handler = null;
          }
          if (isForce === void 0) {
            isForce = false;
          }
          this.setDirection(direction, isForce);
          this.setAction(action, times, handler);
        };
        _proto.setSpeed = function setSpeed(speed) {
          this.speed = Math.floor(speed);
          this.oldAngle = -1;
        };
        _proto.getSize = function getSize() {
          return 50;
        };
        _proto.move = function move(targetMovePoint) {
          this.setAction(GameConst.Move);
          var pos = this.getLocation();
          this.dx = targetMovePoint.x - pos.x;
          this.dy = targetMovePoint.y - pos.y;
          this.dist = Math.sqrt(this.dx * this.dx + this.dy * this.dy);
          if (this.dist < this.speed) {
            this.onMoveEnd(targetMovePoint);
            return;
          }
          this.toMove(this.moveAngle, -1);
        };
        _proto.onMoveEnd = function onMoveEnd(targetMovePoint) {
          this.oldAngle = -1;
          this.setLocation(targetMovePoint.x, targetMovePoint.y);
          this.setAction(GameConst.Idle);
        };
        _proto.setSpeedXY = function setSpeedXY(angle, endSpeed, tickIndex) {
          if (endSpeed === void 0) {
            endSpeed = -1;
          }
          if (endSpeed == -1) {
            this.xSpeed = this.speed * Math.cos(angle * Math.PI / 180) * tickIndex;
            this.ySpeed = this.speed * Math.sin(angle * Math.PI / 180) * tickIndex;
          } else {
            this.xSpeed = endSpeed * Math.cos(angle * Math.PI / 180);
            this.ySpeed = endSpeed * Math.sin(angle * Math.PI / 180);
          }
        };
        _proto.toMove = function toMove(angle, endSpeed) {
          if (endSpeed === void 0) {
            endSpeed = -1;
          }
          if (this.oldAngle != angle) {
            this.setSpeedXY(angle, endSpeed, 1);
          }
          this.oldAngle = angle;
          var pos = this.getLocation();
          var newX = pos.x + this.xSpeed;
          var newY = pos.y + this.ySpeed;
          this.setLocation(newX, newY);
          this.updateHeadPos();
        };
        _proto.updateHeadPos = function updateHeadPos() {};
        _createClass(Entity, [{
          key: "x",
          get: function get() {
            var pos = this.getLocation();
            return pos ? pos.x : 0;
          }
        }, {
          key: "y",
          get: function get() {
            var pos = this.getLocation();
            return pos ? pos.y : 0;
          }
        }]);
        return Entity;
      }(Unit));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/EntityInfo.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _createClass, cclegacy;
  return {
    setters: [function (module) {
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "5ee61g4pjlEU4+HcWD289Ep", "EntityInfo", undefined);
      /**
       * @fileName EntityInfo.ts
       * @author zhangqiong
       * @date 2024/12/26 19:42:50"
       * @description
       */
      var EntityInfo = exports('EntityInfo', /*#__PURE__*/function () {
        function EntityInfo() {
          this._name = void 0;
          this._entityId = void 0;
          this.onlyId = void 0;
          this.type = void 0;
          this.insId = void 0;
        }
        var _proto = EntityInfo.prototype;
        _proto.setEntityId = function setEntityId(id, type) {
          this.type = type;
          this.onlyId = id;
          this._entityId = "s" + id + "_" + (arguments.length <= 2 ? undefined : arguments[2]);
        };
        _proto.getEntityId = function getEntityId() {
          return this._entityId;
        };
        _createClass(EntityInfo, [{
          key: "name",
          get: function get() {
            return this._name;
          },
          set: function set(v) {
            this._name = v;
          }
        }]);
        return EntityInfo;
      }());
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/EntityLayer.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, Component;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class;
      cclegacy._RF.push({}, "f8428h81G1PqoDcFwlkxzA9", "EntityLayer", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var EntityLayer = exports('default', (_dec = ccclass("EntityLayer"), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(EntityLayer, _Component);
        function EntityLayer() {
          return _Component.apply(this, arguments) || this;
        }
        var _proto = EntityLayer.prototype;
        _proto.update = function update(dt) {
          this.sortZindex();
        };
        _proto.sortZindex = function sortZindex() {
          var allEntityNodes = this.node.children.slice();
          allEntityNodes.sort(function (node1, node2) {
            if (node1.position.y > node2.position.y) {
              return -1;
            } else if (node1.position.y < node2.position.y) {
              return 1;
            }
            return 0;
          });
          var entiryCount = allEntityNodes.length;
          for (var i = 0; i < entiryCount; i++) {
            //allEntityNodes[i].zIndex = i;
            allEntityNodes[i].setSiblingIndex(i);
          }
        };
        return EntityLayer;
      }(Component)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/enum.ts", ['cc'], function (exports) {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "2233fzhdj5DyrXxiL5WmwqT", "enum", undefined);
      /** 不渲染与7个颜色 */
      var ItemColor = exports('ItemColor', /*#__PURE__*/function (ItemColor) {
        ItemColor[ItemColor["NULL"] = 0] = "NULL";
        ItemColor[ItemColor["Color1"] = 1] = "Color1";
        ItemColor[ItemColor["Color2"] = 2] = "Color2";
        ItemColor[ItemColor["Color3"] = 3] = "Color3";
        ItemColor[ItemColor["Color4"] = 4] = "Color4";
        ItemColor[ItemColor["Color5"] = 5] = "Color5";
        ItemColor[ItemColor["Color6"] = 6] = "Color6";
        ItemColor[ItemColor["Color7"] = 7] = "Color7";
        return ItemColor;
      }({}));

      /** 触摸事件-上下左右滑动 */
      var TouchEvent = exports('TouchEvent', /*#__PURE__*/function (TouchEvent) {
        TouchEvent["UP"] = "touch-up";
        TouchEvent["DOWN"] = "touch-down";
        TouchEvent["LEFT"] = "touch-left";
        TouchEvent["RIGHT"] = "touch-right";
        return TouchEvent;
      }({}));

      /** 音效事件 */
      var MusicEvent = exports('MusicEvent', /*#__PURE__*/function (MusicEvent) {
        MusicEvent["BGM"] = "bgm";
        MusicEvent["ACTION"] = "action";
        MusicEvent["GAME_OVER"] = "over";
        MusicEvent["ELIMINATE"] = "eliminate";
        return MusicEvent;
      }({}));

      /** 节点路径 */
      var NodeUrl = exports('NodeUrl', /*#__PURE__*/function (NodeUrl) {
        NodeUrl["Canvas"] = "Canvas";
        NodeUrl["Music"] = "Music";
        return NodeUrl;
      }({}));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Enum2.ts", ['cc'], function (exports) {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "33eadHkwjBM0ZpN3gEUmHSL", "Enum", undefined);
      var TouchEvent = exports('TouchEvent', /*#__PURE__*/function (TouchEvent) {
        TouchEvent["UP"] = "touch_up";
        TouchEvent["RIGHT"] = "touch_right";
        TouchEvent["DOWN"] = "touch_down";
        TouchEvent["LEFT"] = "touch_left";
        return TouchEvent;
      }({}));

      /** 界面展示类型 */
      var ViewShowTypes = exports('ViewShowTypes', /*#__PURE__*/function (ViewShowTypes) {
        ViewShowTypes[ViewShowTypes["ViewFullScreen"] = 0] = "ViewFullScreen";
        ViewShowTypes[ViewShowTypes["ViewAddition"] = 1] = "ViewAddition";
        ViewShowTypes[ViewShowTypes["ViewSingle"] = 2] = "ViewSingle";
        return ViewShowTypes;
      }({})); // 单界面显示，只显示当前界面和背景界面，性能较好
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Enum3.ts", ['cc'], function (exports) {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "6d9f4TPX1RN17SPhyI25mzw", "Enum", undefined);
      var RPGModelAnimName = exports('RPGModelAnimName', /*#__PURE__*/function (RPGModelAnimName) {
        RPGModelAnimName["Idel"] = "steady";
        RPGModelAnimName["Attack"] = "attack1";
        RPGModelAnimName["Jump"] = "jump";
        RPGModelAnimName["Walk"] = "walk";
        RPGModelAnimName["Walk2"] = "walk2";
        return RPGModelAnimName;
      }({}));
      var RPGModelDirection = exports('RPGModelDirection', /*#__PURE__*/function (RPGModelDirection) {
        RPGModelDirection[RPGModelDirection["Left"] = 0] = "Left";
        RPGModelDirection[RPGModelDirection["Right"] = 1] = "Right";
        return RPGModelDirection;
      }({}));
      var MapType = exports('MapType', /*#__PURE__*/function (MapType) {
        MapType[MapType["Angle45"] = 0] = "Angle45";
        MapType[MapType["Angle90"] = 1] = "Angle90";
        return MapType;
      }({}));
      var MapLoadModel = exports('MapLoadModel', /*#__PURE__*/function (MapLoadModel) {
        MapLoadModel[MapLoadModel["single"] = 0] = "single";
        MapLoadModel[MapLoadModel["split"] = 1] = "split";
        return MapLoadModel;
      }({}));
      var PathOptimize = exports('PathOptimize', /*#__PURE__*/function (PathOptimize) {
        PathOptimize[PathOptimize["none"] = 0] = "none";
        PathOptimize[PathOptimize["better"] = 1] = "better";
        PathOptimize[PathOptimize["best"] = 2] = "best";
        return PathOptimize;
      }({}));
      var PathQuadSeek = exports('PathQuadSeek', /*#__PURE__*/function (PathQuadSeek) {
        PathQuadSeek[PathQuadSeek["path_dire_4"] = 0] = "path_dire_4";
        PathQuadSeek[PathQuadSeek["path_dire_8"] = 1] = "path_dire_8";
        return PathQuadSeek;
      }({}));
      var MapItemType = exports('MapItemType', /*#__PURE__*/function (MapItemType) {
        MapItemType["Npc"] = "npc";
        MapItemType["Monster"] = "monster";
        MapItemType["Transfer"] = "transfer";
        MapItemType["SpawnPoint"] = "spawnPoint";
        return MapItemType;
      }({}));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/FairyBirdConst.ts", ['cc'], function (exports) {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "b6b32pUGMdBL52SQSLtd9+1", "FairyBirdConst", undefined);
      /**
       * @fileName FairyBirdConst.ts
       * @author zhangqiong
       * @date 2025/01/09 20:43:10"
       * @description
       */
      var FairyBirdConst = exports('FairyBirdConst', function FairyBirdConst() {});
      FairyBirdConst.TAG_LAND = 10;
      FairyBirdConst.TAG_PIPE = 20;
      FairyBirdConst.TAG_COIN = 30;
      FairyBirdConst.STATE_READING = 1;
      FairyBirdConst.STATE_GAMEING = 2;
      FairyBirdConst.STATE_GAMEOVER = 3;
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/FairyBirdGameManger.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './FairyBirdConst.ts', './Utils.ts', './FairyBirdPipeManger.ts', './ViewManager.ts', './PanelEnum.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, cclegacy, _decorator, CCInteger, Node, Label, NodeEventType, Vec3, Component, FairyBirdConst, Utils, FairyBirdPipeManger, viewManager, PanelType;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      CCInteger = module.CCInteger;
      Node = module.Node;
      Label = module.Label;
      NodeEventType = module.NodeEventType;
      Vec3 = module.Vec3;
      Component = module.Component;
    }, function (module) {
      FairyBirdConst = module.FairyBirdConst;
    }, function (module) {
      Utils = module.default;
    }, function (module) {
      FairyBirdPipeManger = module.FairyBirdPipeManger;
    }, function (module) {
      viewManager = module.viewManager;
    }, function (module) {
      PanelType = module.PanelType;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _class3;
      cclegacy._RF.push({}, "0cca7wA41VCl7tdU/twDYnk", "FairyBirdGameManger", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;

      /**
       * @fileName FairyBirdGameManger.ts
       * @author zhangqiong
       * @date 2025/01/09 15:59:19"
       * @description
       */
      var FairyBirdGameManger = exports('FairyBirdGameManger', (_dec = ccclass('FairyBirdGameManger'), _dec2 = property(CCInteger), _dec3 = property(Node), _dec4 = property(Node), _dec5 = property(Label), _dec6 = property(Label), _dec7 = property(Node), _dec(_class = (_class2 = (_class3 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(FairyBirdGameManger, _Component);
        function FairyBirdGameManger() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "moveSpeed", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "gameReadyNode", _descriptor2, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "gameOverNode", _descriptor3, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "goldLabel", _descriptor4, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "silverLabel", _descriptor5, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "bird", _descriptor6, _assertThisInitialized(_this));
          _this.gameState = FairyBirdConst.STATE_READING;
          _this._readyPosition = null;
          _this._gold = 0;
          _this._silver = 0;
          return _this;
        }
        var _proto = FairyBirdGameManger.prototype;
        _proto.onLoad = function onLoad() {
          FairyBirdGameManger._instance = this;
          this._readyPosition = this.bird.position;
        };
        _proto.start = function start() {};
        _proto.update = function update(deltaTime) {};
        _proto.transformGameState = function transformGameState(state) {
          this.gameReadyNode.active = state == FairyBirdConst.STATE_READING;
          this.gameOverNode.active = state == FairyBirdConst.STATE_GAMEOVER;
          this.gameState = state;
          if (state == FairyBirdConst.STATE_READING) {
            var startBtn = Utils.FindChildByName(this.gameReadyNode, "startBtn");
            if (startBtn) {
              startBtn.on(NodeEventType.TOUCH_START, this.onClickStartBtn, this);
            }
            var backBtn = Utils.FindChildByName(this.gameReadyNode, "backBtn");
            if (backBtn) {
              backBtn.on(NodeEventType.TOUCH_START, this.onClickBackBtn, this);
            }
            this.bird.setPosition(Vec3.ZERO);
          } else if (state == FairyBirdConst.STATE_GAMEOVER) {
            FairyBirdPipeManger.instance.removeAllPipe();
            var _startBtn = Utils.FindChildByName(this.gameOverNode, "startBtn");
            if (_startBtn) {
              _startBtn.on(NodeEventType.TOUCH_START, this.onClickReStart, this);
            }
            var _backBtn = Utils.FindChildByName(this.gameOverNode, "backBtn");
            if (_backBtn) {
              _backBtn.on(NodeEventType.TOUCH_START, this.onClickBackBtn, this);
            }
          }
        };
        _proto.onClickBackBtn = function onClickBackBtn() {
          viewManager.open(PanelType.MainPanel);
        };
        _proto.onClickStartBtn = function onClickStartBtn() {
          this.transformGameState(FairyBirdConst.STATE_GAMEING);
        };
        _proto.onClickReStart = function onClickReStart() {
          this.transformGameState(FairyBirdConst.STATE_READING);
        };
        _createClass(FairyBirdGameManger, [{
          key: "gold",
          get: function get() {
            return this._gold;
          },
          set: function set(value) {
            this._gold = value;
            if (this.goldLabel) {
              this.goldLabel.string = "" + value;
            }
          }
        }, {
          key: "silver",
          get: function get() {
            return this._silver;
          },
          set: function set(value) {
            this._silver = value;
            if (this.silverLabel) {
              this.silverLabel.string = "" + value;
            }
          }
        }], [{
          key: "instance",
          get: function get() {
            return this._instance;
          }
        }]);
        return FairyBirdGameManger;
      }(Component), _class3._instance = null, _class3), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "moveSpeed", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 200;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "gameReadyNode", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "gameOverNode", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "goldLabel", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "silverLabel", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "bird", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/FairybirdMainPanel.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './BaseView.ts', './ViewRegisterMgr.ts', './PanelEnum.ts', './LayerManager.ts', './FairyBirdGameManger.ts', './FairyBirdConst.ts'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, BaseView, registerView, PanelType, LayerType, FairyBirdGameManger, FairyBirdConst;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }, function (module) {
      BaseView = module.default;
    }, function (module) {
      registerView = module.registerView;
    }, function (module) {
      PanelType = module.PanelType;
    }, function (module) {
      LayerType = module.LayerType;
    }, function (module) {
      FairyBirdGameManger = module.FairyBirdGameManger;
    }, function (module) {
      FairyBirdConst = module.FairyBirdConst;
    }],
    execute: function () {
      var _dec, _class;
      cclegacy._RF.push({}, "2bc56J0gMNEi5Xf0wn9QzrS", "FairybirdMainPanel", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var FairybirdMainPanel = exports('FairybirdMainPanel', (_dec = ccclass('FairybirdMainPanel'), _dec(_class = /*#__PURE__*/function (_BaseView) {
        _inheritsLoose(FairybirdMainPanel, _BaseView);
        function FairybirdMainPanel() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _BaseView.call.apply(_BaseView, [this].concat(args)) || this;
          _this.seed = 5;
          _this.initSeed = 5;
          _this.logRandomArray = [];
          return _this;
        }
        var _proto = FairybirdMainPanel.prototype;
        _proto.onOpen = function onOpen(fromUI) {
          for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
            args[_key2 - 1] = arguments[_key2];
          }
          console.log("成功打开了", fromUI, args);
          var count = 10;
          for (var i = 0; i < count; i++) {
            console.log("random value:" + this.seedRandom());
          }
          FairyBirdGameManger.instance.transformGameState(FairyBirdConst.STATE_READING);
        };
        _proto.setRandomSeed = function setRandomSeed(seed) {
          this.initSeed = seed;
          console.error("收到随机数", this.initSeed);
        };
        _proto.seedRandom = function seedRandom() {
          if (this.logRandomArray.length < 30) {
            this.logRandomArray.push(this.seed);
          }
          this.seed = (this.seed * 9301 + 49297) % 233280;
          var value = this.seed / 233280.0;
          return value;
        };
        _proto.onClose = function onClose() {};
        _proto.start = function start() {};
        _proto.update = function update(deltaTime) {
          // console.log("long deltatime",deltaTime)
        };
        return FairybirdMainPanel;
      }(BaseView)) || _class));
      registerView({
        viewCls: FairybirdMainPanel,
        id: PanelType.FairybirdMainPanel,
        layer: LayerType.view
      });
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/FairyBirdPipe.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './FairyBirdGameManger.ts', './FairyBirdPipeManger.ts', './FairyBirdConst.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Prefab, instantiate, Component, FairyBirdGameManger, FairyBirdPipeManger, FairyBirdConst;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Prefab = module.Prefab;
      instantiate = module.instantiate;
      Component = module.Component;
    }, function (module) {
      FairyBirdGameManger = module.FairyBirdGameManger;
    }, function (module) {
      FairyBirdPipeManger = module.FairyBirdPipeManger;
    }, function (module) {
      FairyBirdConst = module.FairyBirdConst;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;
      cclegacy._RF.push({}, "179e91xHLFMw5T3SJJnqC/p", "FairyBirdPipe", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var FairyBirdPipe = exports('FairyBirdPipe', (_dec = ccclass('FairyBirdPipe'), _dec2 = property(Prefab), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(FairyBirdPipe, _Component);
        function FairyBirdPipe() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "coin", _descriptor, _assertThisInitialized(_this));
          _this.coinNode = null;
          return _this;
        }
        var _proto = FairyBirdPipe.prototype;
        _proto.start = function start() {};
        _proto.instanceCoin = function instanceCoin() {
          if (!this.coinNode) {
            var node = instantiate(this.coin);
            this.node.addChild(node);
            this.coinNode = node;
          } else if (this.coinNode && !this.coinNode.parent) {
            this.node.addChild(this.coinNode);
          }
        };
        _proto.update = function update(deltaTime) {
          var _this2 = this;
          if (FairyBirdGameManger.instance.gameState != FairyBirdConst.STATE_GAMEING) {
            return;
          }
          var p = this.node.getPosition();
          this.node.setPosition(p.x - FairyBirdGameManger.instance.moveSpeed * deltaTime, p.y);
          var p2 = this.node.getPosition();
          if (p2.x < -1440) {
            this.scheduleOnce(function () {
              _this2.node.removeFromParent();
              FairyBirdPipeManger.instance.relasePipe(_this2.node);
            }, 0);
          }
        };
        return FairyBirdPipe;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "coin", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/FairyBirdPipeManger.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './FairyBirdPipe.ts', './FairyBirdConst.ts', './FairyBirdGameManger.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, cclegacy, _decorator, Prefab, CCInteger, NodePool, instantiate, math, Component, FairyBirdPipe, FairyBirdConst, FairyBirdGameManger;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Prefab = module.Prefab;
      CCInteger = module.CCInteger;
      NodePool = module.NodePool;
      instantiate = module.instantiate;
      math = module.math;
      Component = module.Component;
    }, function (module) {
      FairyBirdPipe = module.FairyBirdPipe;
    }, function (module) {
      FairyBirdConst = module.FairyBirdConst;
    }, function (module) {
      FairyBirdGameManger = module.FairyBirdGameManger;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2, _class3;
      cclegacy._RF.push({}, "b66fcw4ACNGHbny7wJ7NKrB", "FairyBirdPipeManger", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;

      /**
       * @fileName FairyBirdPipeManger.ts
       * @author zhangqiong
       * @date 2025/01/09 16:05:46"
       * @description
       */
      var FairyBirdPipeManger = exports('FairyBirdPipeManger', (_dec = ccclass('FairyBirdPipeManger'), _dec2 = property(Prefab), _dec3 = property(CCInteger), _dec(_class = (_class2 = (_class3 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(FairyBirdPipeManger, _Component);
        function FairyBirdPipeManger() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "prafab", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "rate", _descriptor2, _assertThisInitialized(_this));
          _this._timer = 0;
          _this._nodePool = void 0;
          return _this;
        }
        var _proto = FairyBirdPipeManger.prototype;
        _proto.onLoad = function onLoad() {
          FairyBirdPipeManger._instance = this;
        };
        _proto.start = function start() {
          this._nodePool = new NodePool();
        };
        _proto.cratePipe = function cratePipe() {
          var node = instantiate(this.prafab);
          return node;
        };
        _proto.update = function update(deltaTime) {
          if (FairyBirdGameManger.instance.gameState != FairyBirdConst.STATE_GAMEING) {
            return;
          }
          this._timer += deltaTime;
          if (this._timer >= this.rate) {
            this._timer = 0;
            var pipe = this.cratePipe();
            this.node.addChild(pipe);
            var p = this.node.getWorldPosition();
            var y = math.randomRangeInt(-100, 120);
            pipe.setWorldPosition(p);
            pipe.getComponent(FairyBirdPipe).instanceCoin();
            // let p2 = this.node.getPosition();
            pipe.setPosition(0, y);
          }
        };
        _proto.removeAllPipe = function removeAllPipe() {
          var _this2 = this;
          this.scheduleOnce(function () {
            _this2.node.removeAllChildren();
          }, 0);
        };
        _proto.relasePipe = function relasePipe(node) {
          if (this._nodePool) {
            this._nodePool.put(node);
            return true;
          }
          return false;
        };
        _createClass(FairyBirdPipeManger, null, [{
          key: "instance",
          get: function get() {
            return this._instance;
          }
        }]);
        return FairyBirdPipeManger;
      }(Component), _class3._instance = null, _class3), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "prafab", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "rate", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 2;
        }
      })), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/FBird.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Behaviour.ts', './FairyBirdConst.ts', './FairyBirdGameManger.ts', './FCoin.ts'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, RigidBody2D, input, Input, math, Behaviour, FairyBirdConst, FairyBirdGameManger, FCoin;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      RigidBody2D = module.RigidBody2D;
      input = module.input;
      Input = module.Input;
      math = module.math;
    }, function (module) {
      Behaviour = module.Behaviour;
    }, function (module) {
      FairyBirdConst = module.FairyBirdConst;
    }, function (module) {
      FairyBirdGameManger = module.FairyBirdGameManger;
    }, function (module) {
      FCoin = module.FCoin;
    }],
    execute: function () {
      var _dec, _class;
      cclegacy._RF.push({}, "202366LCRVGrYoUfx+6SY0R", "FBird", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;

      /**
       * @fileName FBird.ts
       * @author zhangqiong
       * @date 2025/01/09 20:15:26"
       * @description
       */
      var FBird = exports('FBird', (_dec = ccclass('FBird'), _dec(_class = /*#__PURE__*/function (_Behaviour) {
        _inheritsLoose(FBird, _Behaviour);
        function FBird() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Behaviour.call.apply(_Behaviour, [this].concat(args)) || this;
          _this.rig2d = void 0;
          _this.rotateSpeed = 30;
          return _this;
        }
        var _proto = FBird.prototype;
        _proto.onLoad = function onLoad() {
          _Behaviour.prototype.onLoad.call(this);
          this.rig2d = this.getComponent(RigidBody2D);
        };
        _proto.start = function start() {
          input.on(Input.EventType.TOUCH_START, this.onTouchStart, this);
        };
        _proto.onDestroy = function onDestroy() {
          _Behaviour.prototype.onDestroy.call(this);
          input.off(Input.EventType.TOUCH_START, this.onTouchStart, this);
        };
        _proto.onTouchStart = function onTouchStart() {
          this.rig2d.linearVelocity = math.v2(0, 10);
          this.node.angle = 30;
        };
        _proto.update = function update(deltaTime) {
          if (FairyBirdGameManger.instance.gameState != FairyBirdConst.STATE_GAMEING) {
            this.rig2d.enabled = false;
            return;
          }
          this.rig2d.enabled = true;
          this.node.angle -= this.rotateSpeed * deltaTime;
          if (this.node.angle < -60) {
            this.node.angle = -60;
          }
        };
        _proto.onCollisionEnter2D = function onCollisionEnter2D(selfCollider, otherCollider, contact) {
          if (otherCollider.tag == FairyBirdConst.TAG_LAND) {
            console.log("游戏结束");
            FairyBirdGameManger.instance.transformGameState(FairyBirdConst.STATE_GAMEOVER);
          } else if (otherCollider.tag == FairyBirdConst.TAG_PIPE) {
            console.log("游戏结束");
            FairyBirdGameManger.instance.transformGameState(FairyBirdConst.STATE_GAMEOVER);
          } else if (otherCollider.tag == FairyBirdConst.TAG_COIN) {
            var fcoin = otherCollider.node.getComponent(FCoin);
            if (fcoin) {
              if (fcoin.type == 0) {
                console.log("吃到金币了");
                FairyBirdGameManger.instance.gold += 10;
              } else if (fcoin.type == 1) {
                console.log("吃到银币了");
                FairyBirdGameManger.instance.silver += 5;
              }
            }
            this.scheduleOnce(function () {
              otherCollider.node.removeFromParent();
              console.log("吃到金币了");
            }, 0);
          }
        };
        return FBird;
      }(Behaviour)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/FBMoveBg.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './FairyBirdGameManger.ts', './FairyBirdConst.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, Component, FairyBirdGameManger, FairyBirdConst;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Component = module.Component;
    }, function (module) {
      FairyBirdGameManger = module.FairyBirdGameManger;
    }, function (module) {
      FairyBirdConst = module.FairyBirdConst;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;
      cclegacy._RF.push({}, "abf56q2Fv1Jo5omKRjW+B8G", "FBMoveBg", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var FBMoveBg = exports('FBMoveBg', (_dec = ccclass('FBMoveBg'), _dec2 = property(Node), _dec3 = property(Node), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(FBMoveBg, _Component);
        function FBMoveBg() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "obj1", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "obj2", _descriptor2, _assertThisInitialized(_this));
          _this.moveDistance = 0;
          return _this;
        }
        var _proto = FBMoveBg.prototype;
        _proto.start = function start() {
          this.moveDistance = FairyBirdGameManger.instance.moveSpeed;
        };
        _proto.update = function update(deltaTime) {
          if (FairyBirdGameManger.instance.gameState != FairyBirdConst.STATE_GAMEING) {
            return;
          }
          var p1 = this.obj1.getPosition();
          var p2 = this.obj2.getPosition();
          this.obj1.setPosition(p1.x - this.moveDistance * deltaTime, p1.y);
          this.obj2.setPosition(p2.x - this.moveDistance * deltaTime, p2.y);
          p1 = this.obj1.getPosition();
          if (p1.x < -750) {
            p2 = this.obj2.getPosition();
            this.obj1.setPosition(p2.x + 750, p2.y);
          }
          p2 = this.obj2.getPosition();
          if (p2.x < -750) {
            p1 = this.obj1.getPosition();
            this.obj2.setPosition(p1.x + 750, p1.y);
          }
        };
        return FBMoveBg;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "obj1", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "obj2", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/FCoin.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, SpriteFrame, math, Sprite, Component;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      SpriteFrame = module.SpriteFrame;
      math = module.math;
      Sprite = module.Sprite;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;
      cclegacy._RF.push({}, "038c5dA7nJHGY+QR/NI5gow", "FCoin", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;

      /**
       * @fileName FCoin.ts
       * @author zhangqiong
       * @date 2025/01/09 20:48:57"
       * @description
       */
      var FCoin = exports('FCoin', (_dec = ccclass('FCoin'), _dec2 = property([SpriteFrame]), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(FCoin, _Component);
        function FCoin() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "spriteFrames", _descriptor, _assertThisInitialized(_this));
          _this.type = 0;
          return _this;
        }
        var _proto = FCoin.prototype;
        _proto.start = function start() {
          this.type = math.randomRangeInt(0, 2);
          this.node.getComponent(Sprite).spriteFrame = this.spriteFrames[this.type];
        };
        _proto.update = function update(deltaTime) {};
        return FCoin;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "spriteFrames", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/FightConfig.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './HashMap.ts'], function (exports) {
  var _createClass, cclegacy, HashMap;
  return {
    setters: [function (module) {
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      HashMap = module.HashMap;
    }],
    execute: function () {
      cclegacy._RF.push({}, "bfe12ULREpFUZPGSLT1sec7", "FightConfig", undefined);
      /**
       * @fileName FightConfig.ts
       * @author zhangqiong
       * @date 2024/12/31 19:41:34"
       * @description
       */
      var FightConfig = exports('FightConfig', /*#__PURE__*/function () {
        function FightConfig() {
          this._heroMap = void 0;
          this._skilsMap = void 0;
          this._gameConfigObj = void 0;
          this._heroMap = new HashMap();
          this._skilsMap = new HashMap();
        }
        var _proto = FightConfig.prototype;
        _proto.init = function init(config) {
          this._gameConfigObj = config;
          var heros = config.heros;
          for (var key in heros) {
            if (Object.prototype.hasOwnProperty.call(heros, key)) {
              var element = heros[key];
              var hid = Number(key);
              this._heroMap.put(hid, element);
            }
          }
          var skills = config.skills;
          for (var _key in skills) {
            var skillConfig = skills[_key];
            this._skilsMap.put(skillConfig.skillId, skillConfig);
          }
        };
        _proto.getSkillConfigs = function getSkillConfigs() {
          if (!this._skilsMap) {
            return [];
          }
          return this._skilsMap.values();
        };
        _proto.getSkillConfig = function getSkillConfig(skillId) {
          if (!this._skilsMap) {
            return null;
          }
          return this._skilsMap.get(skillId);
        };
        _proto.getHeroConfigs = function getHeroConfigs() {
          if (!this._heroMap) {
            return [];
          }
          return this._heroMap.values();
        };
        _proto.getHeroConfig = function getHeroConfig(hid) {
          if (!this._heroMap) {
            return null;
          }
          return this._heroMap.get(hid);
        };
        _createClass(FightConfig, null, [{
          key: "instance",
          get: function get() {
            if (!this._instance) {
              this._instance = new FightConfig();
            }
            return this._instance;
          }
        }]);
        return FightConfig;
      }());
      FightConfig._instance = void 0;
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/FightHeroInfo.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './FightConfig.ts', './EntityInfo.ts', './FightSkillGroupInfo.ts', './FightSkillInfo.ts', './FightMgr.ts'], function (exports) {
  var _inheritsLoose, _createClass, cclegacy, FightConfig, EntityInfo, FightSkillGroupInfo, FightSkillInfo, FightMgr;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      FightConfig = module.FightConfig;
    }, function (module) {
      EntityInfo = module.EntityInfo;
    }, function (module) {
      FightSkillGroupInfo = module.FightSkillGroupInfo;
    }, function (module) {
      FightSkillInfo = module.FightSkillInfo;
    }, function (module) {
      FightMgr = module.FightMgr;
    }],
    execute: function () {
      cclegacy._RF.push({}, "fa0c1FkfBZNF683OP8bYNeb", "FightHeroInfo", undefined);

      /**
       * @fileName FightHeroInfo.ts
       * @author zhangqiong
       * @date 2024/12/26 19:43:10"
       * @description
       */
      var FightHeroInfo = exports('FightHeroInfo', /*#__PURE__*/function (_EntityInfo) {
        _inheritsLoose(FightHeroInfo, _EntityInfo);
        function FightHeroInfo() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _EntityInfo.call.apply(_EntityInfo, [this].concat(args)) || this;
          _this.playerId = 0;
          _this.spineId = 0;
          _this.camp = 0;
          _this.site = 0;
          _this.hp = 0;
          _this.normalMaxHp = 0;
          _this._maxHp = 0;
          _this.mp = 0;
          _this.maxMp = 1000;
          _this.shield = 0;
          _this.shieldMax = 0;
          _this.heroConfig = void 0;
          _this.fightSkills = void 0;
          return _this;
        }
        var _proto = FightHeroInfo.prototype;
        _proto.setData = function setData(playerId, data, type) {
          if (type === void 0) {
            type = 1;
          }
          this.playerId = playerId;
          this.heroConfig = data;
          this.normalMaxHp = data.maxHp;
          this.hp = data.maxHp;
          this.maxMp = data.maxMp;
          this.camp = data.comp;
          this.site = data.site;
          this.setEntityId(playerId, type, data.spineId);
          this.spineId = data.spineId;
          this.fightSkills = new FightSkillGroupInfo();
          var skillIds = data.skillIds;
          var skillInfos = [];
          for (var i = 0; i < skillIds.length; i++) {
            var id = skillIds[i];
            var skillConfigVo = FightConfig.instance.getSkillConfig(id);
            var skillInfo = new FightSkillInfo();
            skillInfo.setData(skillConfigVo);
            skillInfos.push(skillInfo);
          }
          this.fightSkills.add(skillInfos);
        }

        /***上限的血条 */;
        /***恢复MP */
        _proto.addMp = function addMp(mp) {
          this.mp += mp;
          this.mp = Math.max(Math.min(this.mp, this.maxMp), 0);
        }

        /***使用MP */;
        _proto.useMp = function useMp() {
          if (!FightMgr.instance.isEnd) this.mp = 0;
        };
        _createClass(FightHeroInfo, [{
          key: "maxHp",
          get: /**获取总血量，包括BUFF的 */
          function get() {
            return Math.max(this.normalMaxHp + this._maxHp, 1);
          },
          set: function set(hp) {
            this._maxHp = hp;
          }
        }]);
        return FightHeroInfo;
      }(EntityInfo));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/FightMgr.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './FindTargetInfo.ts', './GameConst.ts', './FightUtil.ts', './ViewManager.ts', './PanelEnum.ts'], function (exports) {
  var _createClass, cclegacy, FindTargetInfo, GameConst, FightUtil, viewManager, PanelType;
  return {
    setters: [function (module) {
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      FindTargetInfo = module.FindTargetInfo;
    }, function (module) {
      GameConst = module.GameConst;
    }, function (module) {
      FightUtil = module.FightUtil;
    }, function (module) {
      viewManager = module.viewManager;
    }, function (module) {
      PanelType = module.PanelType;
    }],
    execute: function () {
      cclegacy._RF.push({}, "804beaJBcJAnZ3TmGa2HePe", "FightMgr", undefined);

      /**
       * @fileName FightMgr.ts
       * @author zhangqiong
       * @date 2024/12/27 19:50:35"
       * @description
       */
      var FightMgr = exports('FightMgr', /*#__PURE__*/function () {
        function FightMgr() {
          this.fightTime = 0;
          this.entitys = [];
          /***死亡实体顺序表 */
          this.dieEntitys = [];
          this.fightEnd = null;
          this.isEnd = false;
          this.seed = 5;
          this.initSeed = 5;
          this.index = 0;
          this.logRandomArr = [];
        }
        var _proto = FightMgr.prototype;
        _proto.reset = function reset() {
          this.dieEntitys = [];
          this.entitys = [];
          this.fightTime = 0;
          this.isEnd = false;
        };
        _proto.setRandomSeed = function setRandomSeed(seed) {
          this.initSeed = seed;
        };
        _proto.resRandomSeed = function resRandomSeed() {
          this.seed = this.initSeed;
        };
        _proto.seedRandom = function seedRandom() {
          if (this.logRandomArr.length < 30) {
            this.logRandomArr.push(this.seed);
          }
          this.seed == (this.seed * 9301 + 49297) % 233280;
          var r = this.seed / 2333280.0;
          return r;
        };
        _proto.randomInt = function randomInt(min, max, stpeLen) {
          if (max === void 0) {
            max = 0;
          }
          if (stpeLen === void 0) {
            stpeLen = 1;
          }
          if (min > max) {
            var temp = min;
            min = max;
            max = temp;
          }
          var deltaRange = max - min + 1 * stpeLen;
          var randomNum = this.seedRandom() * deltaRange;
          return Math.floor(randomNum / stpeLen) * stpeLen;
        };
        _proto.isRandTrue = function isRandTrue(rate) {
          var random = this.randomInt(0, 10000);
          return random <= rate;
        };
        _proto.randomProbability = function randomProbability(array) {
          var sum = 0;
          var temp = [];
          for (var i = 0; i < array.length; i++) {
            sum += array[i];
            temp.push(sum);
          }
          if (sum == 0) {
            return 0;
          }
          var a;
          do {
            a = this.randomInt(0, sum);
          } while (a == 0);
          for (var j = 0; j < temp.length; j++) {
            if (a > temp[j]) {
              continue;
            }
            return j;
          }
        };
        _proto.randomArray = function randomArray(array) {
          var cloneArray = array.concat();
          var leng = cloneArray.length;
          for (var i = 0; i < leng; i++) {
            var index = Math.floor(this.seedRandom() * cloneArray.length);
            var temp = cloneArray[index];
            cloneArray[index] = cloneArray[i];
            cloneArray[i] = temp;
          }
          return cloneArray;
        };
        _proto.addEntity = function addEntity(entity) {
          entity.isRemoveTime = false;
          this.entitys.push(entity);
        };
        _proto.removeEntity = function removeEntity(entity) {
          entity.isRemoveTime = true;
        };
        _proto.getEntitys = function getEntitys() {
          return this.entitys;
        }

        /**实体死亡 */;
        _proto.entityToDie = function entityToDie(e) {
          this.addDieEntity(e);
        }

        /***增加死亡实体 */;
        _proto.addDieEntity = function addDieEntity(e) {
          e.isRemoveTime = true;
          if (this.dieEntitys.indexOf(e) == -1) {
            this.dieEntitys.push(e);
          }
        };
        _proto.start = function start(fightEnd) {
          this.fightEnd = fightEnd;
          for (var i = 0; i < this.entitys.length; i++) {
            var element = this.entitys[i];
          }
        };
        _proto.doActiveSkillStopHandler = function doActiveSkillStopHandler() {
          return this.isEnd;
        };
        _proto.doFrameHandler = function doFrameHandler() {
          var enemyNum = 0;
          var heroNum = 0;
          if (!this.doActiveSkillStopHandler()) {
            this.index++;
            for (var index = 0; index < this.entitys.length; index++) {
              var element = this.entitys[index];
              var isMustActiveSkill = false;
              if (!element.isRemoveTime) {
                if (element.checkNextFrame()) {
                  element.check(isMustActiveSkill);
                }
                if (element.data.camp == 0) {
                  heroNum++;
                } else {
                  enemyNum++;
                }
              }
            }
          }
          if (enemyNum == 0 && heroNum > 0) {
            this.isEnd = true;
            for (var _index = 0; _index < this.entitys.length; _index++) {
              var _element = this.entitys[_index];
              if (!_element.isRemoveTime) {
                _element.setIsWin(true);
              }
            }
            console.error("赢了");
            viewManager.open(PanelType.AFKResultPanel, true);
          } else if (heroNum == 0 && enemyNum > 0) {
            this.isEnd = true;
            for (var _index2 = 0; _index2 < this.entitys.length; _index2++) {
              var _element2 = this.entitys[_index2];
              if (!_element2.isRemoveTime) {
                _element2.setIsWin(true);
              }
            }
            console.error("输了");
            viewManager.open(PanelType.AFKResultPanel, false);
          }
          return 0;
        };
        _proto.getCanSelectEntitys = function getCanSelectEntitys() {
          var results = [];
          var checkEntitys = this.entitys.concat();
          for (var index = 0; index < checkEntitys.length; index++) {
            var element = checkEntitys[index];
            if (element.canSelect() && !element.isRemoveTime) {
              results.push(element);
            }
          }
          return results;
        };
        _proto.findMainEntity = function findMainEntity(from, targetType, isPaichuNotSelect) {
          if (isPaichuNotSelect === void 0) {
            isPaichuNotSelect = 0;
          }
          var arr = [];
          var entitys = this.getCanSelectEntitys();
          var findInfo = new FindTargetInfo();
          findInfo.enemys = entitys;
          findInfo.form = from;
          // findInfo.summon = 1
          findInfo.type = 1;
          findInfo.isPaiChuNotSelect = isPaichuNotSelect;
          switch (targetType) {
            case GameConst.Main_JuLiZuiJin:
              arr = FightUtil.instance.findLatelyOrFarEntity(true, findInfo);
              break;
            case GameConst.Main_JuLiZuiYuan:
              arr = FightUtil.instance.findLatelyOrFarEntity(false, findInfo);
              break;
            case GameConst.Main_XueBaiFenZuiDi:
              arr = FightUtil.instance.findLowHpEntity(true, findInfo);
              break;
            case GameConst.Main_XueBaiFenZuiGao:
              arr = FightUtil.instance.findLowHpEntity(false, findInfo);
              break;
            case GameConst.Main_ChuShiDuiChengWeiZhi:
              arr = FightUtil.instance.findDuiChenEntity(findInfo);
              break;
            case GameConst.Main_DangQianMuBiao:
              //默认选最近
              arr = FightUtil.instance.findLatelyOrFarEntity(true, findInfo);
              break;
          }

          //没目标找最近
          if (arr.length == 0) arr = FightUtil.instance.findLatelyOrFarEntity(true, findInfo);
          return arr;
        };
        _proto.findEntity = function findEntity(form, targetTypes) {
          var results = [];
          var entitys = this.getCanSelectEntitys();
          var findInfo = new FindTargetInfo();
          findInfo.enemys = entitys;
          findInfo.form = form;
          findInfo.type = targetTypes[1];
          findInfo.num = targetTypes[2];
          var targetType = targetTypes[0];
          switch (targetType) {
            case GameConst.JuLiZuiJin:
              results = FightUtil.instance.findLatelyOrFarEntity(false, findInfo);
              break;
            case GameConst.JuLiZuiYuan:
              results = FightUtil.instance.findLatelyOrFarEntity(true, findInfo);
              break;
            case GameConst.SuiJiBuKeChongFu:
              results = FightUtil.instance.findRandomEntity(false, findInfo);
              break;
            case GameConst.SuiJiKeChongFu:
              results = FightUtil.instance.findRandomEntity(true, findInfo);
              break;
            case GameConst.ChuShiDuiChengWeiZhi:
              results = FightUtil.instance.findDuiChenEntity(findInfo);
              break;
            case GameConst.XueZuiDi:
              results = FightUtil.instance.findLowHpEntity(true, findInfo, false);
              break;
            case GameConst.XueZuiGao:
              results = FightUtil.instance.findLowHpEntity(false, findInfo, false);
              break;
          }

          // let enemys: FightRoleEntity[] = [];
          // for (let i: number = 0; i < entitys.length; i++) {
          //     let entity: FightRoleEntity = entitys[i];
          //     if (form.data.camp == 0) {
          //         if (entity.data.camp == 1) {
          //             enemys.push(entity)
          //         }
          //     } else if (form.data.camp == 1) {
          //         if (entity.data.camp == 0) {
          //             enemys.push(entity);
          //         }
          //     }
          // }
          // let index: number = randomRangeInt(0, enemys.length - 1) //this.randomInt(0, enemys.length - 1);
          // results = [enemys[index]];

          return results;
        };
        _createClass(FightMgr, null, [{
          key: "instance",
          get: function get() {
            if (!this._instance) {
              this._instance = new FightMgr();
            }
            return this._instance;
          }
        }]);
        return FightMgr;
      }());
      FightMgr._instance = null;
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/FightRoleEntity.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './RoleEntity2.ts', './FightMgr.ts', './FightUtil.ts', './GameConst.ts', './HeadBar.ts', './AssetMgr.ts', './ViewConst.ts', './Handler.ts'], function (exports) {
  var _inheritsLoose, _asyncToGenerator, _regeneratorRuntime, cclegacy, math, RoleEntity, FightMgr, FightUtil, GameConst, HeadBar, AssetMgr, ViewConst, Handler;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _asyncToGenerator = module.asyncToGenerator;
      _regeneratorRuntime = module.regeneratorRuntime;
    }, function (module) {
      cclegacy = module.cclegacy;
      math = module.math;
    }, function (module) {
      RoleEntity = module.RoleEntity;
    }, function (module) {
      FightMgr = module.FightMgr;
    }, function (module) {
      FightUtil = module.FightUtil;
    }, function (module) {
      GameConst = module.GameConst;
    }, function (module) {
      HeadBar = module.HeadBar;
    }, function (module) {
      AssetMgr = module.default;
    }, function (module) {
      ViewConst = module.default;
    }, function (module) {
      Handler = module.Handler;
    }],
    execute: function () {
      cclegacy._RF.push({}, "937ce0DwwZEgI3DXHqJi4/L", "FightRoleEntity", undefined);

      /**
       * @fileName FightRoleEntity.ts
       * @author zhangqiong
       * @date 2024/12/26 20:40:29"
       * @description
       */
      var FightRoleEntity = exports('FightRoleEntity', /*#__PURE__*/function (_RoleEntity) {
        _inheritsLoose(FightRoleEntity, _RoleEntity);
        function FightRoleEntity() {
          var _this;
          _this = _RoleEntity.call(this) || this;
          _this.isAI = false;
          _this.isDie = false;
          _this.isFight = false;
          _this.selectTargets = [];
          _this.selectMainTarget = null;
          _this.skillInfo = null;
          _this.isUseCtrSkill = false;
          _this.headBar = null;
          _this.isWin = false;
          return _this;
        }
        var _proto = FightRoleEntity.prototype;
        _proto.updateHeadPos = function updateHeadPos() {
          if (this.headBar) {
            var pos = this.getLocation();
            var bounds = this.getBounds();
            var x = pos.x;
            var y = pos.y;
            var height = bounds[3];
            var yy = height + y;
            this.headBar.node.setPosition(x, yy);
            // this.head.y = yy + this.role.y;
          }
        };

        _proto.initHeadBar = /*#__PURE__*/function () {
          var _initHeadBar = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
            var node, container;
            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) switch (_context.prev = _context.next) {
                case 0:
                  _context.next = 2;
                  return AssetMgr.instance.createPrefab(ViewConst.defaultPrefabPathPrefix + "afk/headBar");
                case 2:
                  node = _context.sent;
                  if (node) {
                    _context.next = 6;
                    break;
                  }
                  console.log("加载预制体失败");
                  return _context.abrupt("return");
                case 6:
                  this.headBar = node.getComponent(HeadBar);
                  container = this.mScene.getChildContainer(GameConst.ROLE_NAME_LAYER);
                  node.parent = container;
                  this.updateHeadPos();
                  this.updateHeadInfo();
                case 11:
                case "end":
                  return _context.stop();
              }
            }, _callee, this);
          }));
          function initHeadBar() {
            return _initHeadBar.apply(this, arguments);
          }
          return initHeadBar;
        }();
        _proto.updateHeadInfo = function updateHeadInfo() {
          if (this.data && this.headBar) {
            this.headBar.setName(this.data.site + "_" + (this.data.camp == 0 ? "队友" : "敌人") + "_" + this.data.heroConfig.spineId);
            this.headBar.setData(this.data);
          }
        };
        _proto.setData = /*#__PURE__*/function () {
          var _setData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(hero) {
            return _regeneratorRuntime().wrap(function _callee2$(_context2) {
              while (1) switch (_context2.prev = _context2.next) {
                case 0:
                  _RoleEntity.prototype.setData.call(this, hero);
                  this.isAI = true;
                // if (hero.camp == 1) {
                //     this.isAI = true;
                // }
                case 2:
                case "end":
                  return _context2.stop();
              }
            }, _callee2, this);
          }));
          function setData(_x) {
            return _setData.apply(this, arguments);
          }
          return setData;
        }();
        _proto.nextRoleFrame = function nextRoleFrame() {
          this.nextPlayerFrame();
          this.move();
        };
        _proto.move = function move() {
          this.setSpeed(this.data.heroConfig.speed);
          _RoleEntity.prototype.move.call(this);
        };
        _proto.check = function check(isMustActiveSkill) {
          if (isMustActiveSkill === void 0) {
            isMustActiveSkill = false;
          }
          this.nextRoleFrame();
          if (this.isDie || this.isWin) {
            return;
          }
          this.data.fightSkills.nextFrame();
          //攻击中而且无按到释放主动技能的标记就不执行下面的动作
          if (this.isFight && !this.isUseCtrSkill && !isMustActiveSkill) {
            return;
          }
          if (isMustActiveSkill) {
            //强制手动主动技的话，强制设置一下
            this.isUseCtrSkill = true;
            this.isFight = true;
          }
          this.checkSkill(isMustActiveSkill);
          this.checkSelectTarget();
          this.attack();
        };
        _proto.canSelect = function canSelect() {
          return !this.isDie && !this.isRemoveTime;
        };
        _proto.canAttack = function canAttack() {
          return true;
        };
        _proto.checkSelectTarget = function checkSelectTarget() {
          if (this.skillInfo) {
            //有技能的时候才判断选择目标
            if (this.selectTargets.length == 0) {
              //无目标时选择最近的目标
              this.onNotSelectTarget();
            } else {
              this.onHasSelectTarget();
            }
          }
        }

        /***有目标时的选择方式*/;
        _proto.onHasSelectTarget = function onHasSelectTarget() {}

        /***无目标时的选择方式 */;
        _proto.onNotSelectTarget = function onNotSelectTarget() {
          //其他的话，则按照当前技能特效来变化目标\
          var targets = this.skillInfo.cfg.targetTypes;

          // let isSelect = this.skillInfo.skillEffects[0].skillEffCfg.pz_selectTarget;//是否忽略不可选中
          this.selectTargets = FightMgr.instance.findEntity(this, targets);
          if (this.selectTargets.length == 0) {
            if (targets[0] == GameConst.MiJi) {
              //最密集找不到就普攻
              this.skillInfo = this.data.fightSkills.getSkillByIndex(0);
            } else if (targets[0] != GameConst.MaxMp) {
              //无目标的时候，选最近的
              var tempTargets = targets.concat();
              tempTargets[0] = GameConst.DangQianMuBiao;
              this.selectTargets = FightMgr.instance.findEntity(this, tempTargets);
            }
            if (this.selectTargets.length == 0) {
              this.onSelectTargetNull();
            }
          }
        }

        /***在技能选中后还是找不到目标，默认是处理使用掉这个技能 */;
        _proto.onSelectTargetNull = function onSelectTargetNull() {
          //还是空的，那就当使用了这个技能了
          this.data.fightSkills.useSkill(this.skillInfo.skillId);
          this.skillInfo = null;
        };
        _proto.checkSkillMainTarget = function checkSkillMainTarget() {
          if (this.selectTargets.length == 0) {
            if (this.selectMainTarget) {
              //有目标是要判断目标是否不可选中
              if (!this.selectMainTarget.canSelect()) this.clearMainTarget();
            }
            if (!this.selectMainTarget || this.skillInfo.cfg.target != GameConst.Main_DangQianMuBiao) {
              //当前无目标，或者技能要改变主目标的时候才会切换
              this.selectMainTarget = FightMgr.instance.findMainEntity(this, this.skillInfo.cfg.target)[0];
            }
          }
        };
        _proto.clearMainTarget = function clearMainTarget() {
          this.selectMainTarget = null;
        }

        /***是否能检测主动技能的释放条件 */;
        _proto.canCheckAngerSkill = function canCheckAngerSkill() {
          if (this.isUseCtrSkill || this.isAI) {
            return true;
          }
          return false;
        };
        _proto.canUseAngerSkill = function canUseAngerSkill() {
          if (!this.canMove()) return false;
          return this.data.mp >= this.data.maxMp;
        };
        _proto.selectAngerSkill = function selectAngerSkill() {
          return this.data.fightSkills.checkAiToCtrAngerSkill(this);
        };
        _proto.selectAngerCheckSelectTarget = function selectAngerCheckSelectTarget() {
          this.selectTargets.length = 0;
        };
        _proto.checkPassSkillBySkillCheck = function checkPassSkillBySkillCheck(from) {
          // FightFormula_SHM_0593.checkPassSkillCon(PassivitySkillType_SHM_8879.ConType_31, this, from_SHM_5537)
        };
        _proto.selectSkill = function selectSkill() {
          // return null;
          return this.data.fightSkills.selectSkill(this);
        }

        /***检测选中的技能 */;
        _proto.checkSkill = function checkSkill(isMustActiveSkill) {
          if (isMustActiveSkill === void 0) {
            isMustActiveSkill = false;
          }
          if (this.skillInfo && !this.isUseCtrSkill && !isMustActiveSkill) {
            //已经选择了技能就进行移动方式释放技能
            this.checkSkillMainTarget();
            return;
          }
          if (this.canCheckAngerSkill() || isMustActiveSkill) {
            //ai控制主动技能
            if (this.canUseAngerSkill() || isMustActiveSkill) {
              //mp足够
              this.skillInfo = this.selectAngerSkill();
              if (this.skillInfo) {
                this.selectAngerCheckSelectTarget();
              }
            }
          }
          if (!this.skillInfo) {
            //优先判断主动技能存在就跳过这个被动的检测了
            this.checkPassSkillBySkillCheck(this);

            //主动技能无选择才选择一个自动技能释放
            this.skillInfo = this.selectSkill();
            if (!this.skillInfo) return;
          }
          //选择技能后看情况重新锁定主要目标
          this.checkSkillMainTarget();
        };
        _proto.checkAttack = function checkAttack(isIgnoreDis) {
          if (isIgnoreDis === void 0) {
            isIgnoreDis = false;
          }
          if (!this.canMove()) {
            return false;
          }
          if (!this.canAttack()) {
            return false;
          }
          if (!isIgnoreDis) {
            var targetPos = this.selectTargets[0] ? this.selectTargets[0].getLocation() : math.v3(0, 0);
            // const targetPos: Vec3 = FightUtil.instance.getScenceRandomPosition();
            var formPos = this.getLocation();
            this.targetMovePoint = FightUtil.instance.getTargetPointByDis(targetPos, formPos, this.skillInfo.cfg.distance);
            if (this.targetMovePoint) {
              this.moveAngle = FightUtil.instance.getAngleByVec(this.x, this.y, this.targetMovePoint.x, this.targetMovePoint.y);
              this.changeDirByAngle(this.moveAngle);
              return false;
            }
          }
          return true;
        };
        _proto.attack = function attack() {
          if (this.selectTargets.length == 0) {
            // console.error(`${this.data.heroConfig.spineId}没有找到攻击对象`);
            return;
          }
          //没有技能
          if (!this.skillInfo) {
            // console.error(`${this.data.heroConfig.spineId}没有找到攻击对象`);
            return;
          }
          if (this.isFight && this.skillInfo.cfg.type != GameConst.Skill_Active)
            //攻击中就不执行下面的动作，主动技是可以打断的
            return;
          if (!this.checkAttack()) {
            return;
          }
          this.data.fightSkills.useSkill(this.skillInfo.skillId);
          if (this.skillInfo.cfg.type == GameConst.Skill_Active) {
            //AI控制的主动技能消耗MP
            this.data.useMp();
            this.headBar.updateMp(this.data.mp / this.data.maxMp);
            this.isUseCtrSkill = false;
          }
          this.stopAction();
          this.startAttackAction(this.skillInfo, this.selectTargets);
        };
        _proto.getTenThousandPlaceValue = function getTenThousandPlaceValue(num) {
          // 确保输入是数字
          if (typeof num !== 'number' || !Number.isFinite(num)) {
            throw new Error('请输入一个有效的数字');
          }

          // 转为整数并取万位值
          var tenThousandPlaceValue = Math.floor(Math.abs(num) / 10000) % 10;
          return tenThousandPlaceValue;
        };
        _proto.startAttackAction = /*#__PURE__*/function () {
          var _startAttackAction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(skillInfo, target) {
            var type, action, index, e;
            return _regeneratorRuntime().wrap(function _callee3$(_context3) {
              while (1) switch (_context3.prev = _context3.next) {
                case 0:
                  console.log("\u7B2C" + FightMgr.instance.index + "\u5E27,\u653B\u51FB\u8005\uFF1A" + this.data.spineId + "\u53D1\u8D77\u6280\u80FD" + skillInfo.skillId + "\u653B\u51FB\u4E86");
                  this.fightStart();
                  this.setSpineKeyFrameHandler(Handler.create(this.onSpineKeyFrame, this));
                  type = this.getTenThousandPlaceValue(skillInfo.skillId);
                  action = type == 1 ? GameConst.Attack : GameConst.Ultimateskill;
                  _context3.next = 7;
                  return this.setAction(action, 1);
                case 7:
                  for (index = 0; index < target.length; index++) {
                    e = target[index]; // await e.setAction(GameConst.BeHit, 1, null)
                    // e.fightEnd();
                    e.hurt(skillInfo.cfg.hurt, this);
                    e.recovery(skillInfo.cfg.recoveyAnger, this);
                  }
                  this.fightEnd();
                case 9:
                case "end":
                  return _context3.stop();
              }
            }, _callee3, this);
          }));
          function startAttackAction(_x2, _x3) {
            return _startAttackAction.apply(this, arguments);
          }
          return startAttackAction;
        }();
        _proto.onSpineKeyFrame = function onSpineKeyFrame(entry, event) {
          // console.log("触发事件", event.data.name, event.intValue, event.floatValue, event.stringValue)
        };
        _proto.fightStart = function fightStart() {
          this.isFight = true;
        };
        _proto.fightEnd = function fightEnd() {
          this.isFight = false;
          this.skillInfo = null;
          this.selectTargets.length = 0;
        };
        _proto.hurt = function hurt(hurtValue, form) {
          this.data.hp = this.data.hp - hurtValue;
          this.headBar.updateHp(this.data.hp / this.data.maxHp);
          if (this.data.hp <= 0) {
            this.die();
          }
        };
        _proto.recovery = function recovery(value, form) {
          this.data.mp += value;
          this.headBar.updateMp(this.data.mp / this.data.maxMp);
        };
        _proto.setIsWin = function setIsWin(win) {
          this.isWin = win;
          if (win) {
            this.setAction(GameConst.Win);
          }
        };
        _proto.die = /*#__PURE__*/function () {
          var _die = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {
            return _regeneratorRuntime().wrap(function _callee4$(_context4) {
              while (1) switch (_context4.prev = _context4.next) {
                case 0:
                  this.stopAction();
                  FightMgr.instance.entityToDie(this);
                  _context4.next = 4;
                  return this.setAction(GameConst.Death);
                case 4:
                  this.active = false;
                  if (this.headBar) this.headBar.node.active = false;
                  this.isDie = true;
                case 7:
                case "end":
                  return _context4.stop();
              }
            }, _callee4, this);
          }));
          function die() {
            return _die.apply(this, arguments);
          }
          return die;
        }();
        return FightRoleEntity;
      }(RoleEntity));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/FightSkillGroupInfo.ts", ['cc', './ArrayUtils.ts', './HashMap.ts', './GameConst.ts'], function (exports) {
  var cclegacy, ArrayUtils, HashMap, GameConst;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      ArrayUtils = module.default;
    }, function (module) {
      HashMap = module.HashMap;
    }, function (module) {
      GameConst = module.GameConst;
    }],
    execute: function () {
      cclegacy._RF.push({}, "4f07dGCsfFHepdBgnFR7yCI", "FightSkillGroupInfo", undefined);
      /**
       * @fileName FightSkillGroupInfo.ts
       * @author zhangqiong
       * @date 2024/12/31 19:29:06"
       * @description
       */
      var FightSkillGroupInfo = exports('FightSkillGroupInfo', /*#__PURE__*/function () {
        function FightSkillGroupInfo() {
          this.activeSkillIndex = -1;
          this.skillMap = void 0;
          this.cdArray = [];
          this.cdMaxArray = [];
          this.cdInitMaxArray = [];
          this.skillIds = [];
          this.skillMap = new HashMap();
        }
        var _proto = FightSkillGroupInfo.prototype;
        _proto.add = function add(skills) {
          for (var index = 0; index < skills.length; index++) {
            var skill = skills[index];
            this.skillMap.put(skill.skillId, skill);
            this.skillIds.push(skill.skillId);
            this.cdArray.push(skill.cfg.firstCd);
            this.cdMaxArray.push(skill.cfg.cd);
            if (skill.cfg.type == GameConst.Skill_Active) {
              this.activeSkillIndex = index;
            }
          }
        };
        _proto.getSkillBySkillId = function getSkillBySkillId(skillId) {
          return this.skillMap.get(skillId);
        };
        _proto.getSkillByIndex = function getSkillByIndex(index) {
          return this.skillMap.get(this.skillIds[index]);
        };
        _proto.nextFrame = function nextFrame() {
          for (var index = 0; index < this.cdArray.length; index++) {
            this.cdArray[index]--;
            if (this.cdArray[index] <= 0) {
              this.cdArray[index] = 0;
            }
          }
        }

        /***
             * 选择技能
             * 释放优先级：只处理自动技能，根据槽位顺序
             * skillSort 优先选择的技能位置-1是不指
             * checkFun 额外的检测方法
             *  */;
        _proto.selectSkill = function selectSkill(entity, skillSort, checkFun) {
          if (skillSort === void 0) {
            skillSort = -1;
          }
          var sk = [];
          for (var i = 0; i < this.cdArray.length; i++) {
            if (this.cdArray[i] == 0) {
              var skInfo = this.skillMap.get(this.skillIds[i]);
              if (!checkFun || checkFun.execute(skInfo)) {
                if (skInfo.cfg.type == GameConst.Skill_Auto) {
                  if (skInfo.cfg.skillType == 1) {
                    sk.push(skInfo);
                  }
                }
              }
            }
          }
          if (sk.length > 0) {
            //优先位置最后的
            ArrayUtils.sortBy2(sk, "skillSort", false, false);
            var choseSkill = sk[0];
            if (skillSort != -1) {
              //优先选择
              for (var i = 0; i < sk.length; i++) {
                if (sk[i].skillSort == skillSort) {
                  choseSkill = sk[i];
                  break;
                }
              }
            }
            return choseSkill;
          }
          return null;
        };
        _proto.checkAiToCtrAngerSkill = function checkAiToCtrAngerSkill(entity, skillSort) {
          if (skillSort === void 0) {
            skillSort = -1;
          }
          var isFirst = false;
          var skInfo = this.skillMap.get(this.skillIds[this.activeSkillIndex]);
          if (skillSort != -1) {
            var tempSkillInfo = this.skillMap.get(this.skillIds[skillSort]);
            if (tempSkillInfo && !this.isSkillCD(tempSkillInfo.skillId)) {
              skInfo = tempSkillInfo;
              isFirst = true;
            }
          }

          // skInfo = this.checkChangeSkill(skInfo, entity);//检查是否有转换
          // skInfo = this.checkChangeSkillRandom(skInfo, entity);//检查是否有转换

          if (isFirst || skInfo && skInfo.checkAiToCtrAngerSkill()) {
            return skInfo;
          }
          return null;
        };
        _proto.isSkillCD = function isSkillCD(skillId) {
          var index = this.skillIds.indexOf(skillId);
          return this.cdArray[index] > 0;
        };
        _proto.useSkill = function useSkill(skillId) {
          var index = this.skillIds.indexOf(skillId);
          this.cdArray[index] = this.cdMaxArray[index];
        };
        _proto.useAngerSkill = function useAngerSkill() {
          var skInfo = this.skillMap.get(this.skillIds[this.activeSkillIndex]);
          return skInfo;
        };
        return FightSkillGroupInfo;
      }());
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/FightSkillInfo.ts", ['cc'], function (exports) {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "c0d14T+zTtFLrOYLrMg5Cy8", "FightSkillInfo", undefined);
      /**
       * @fileName FightSkillInfo.ts
       * @author zhangqiong
       * @date 2024/12/31 15:36:47"
       * @description
       */
      var FightSkillInfo = exports('FightSkillInfo', /*#__PURE__*/function () {
        function FightSkillInfo() {
          this.skillId = void 0;
          this.cfg = void 0;
          /**位置0普攻，1主动，2,3,4其他槽位 */
          this.skillSort = void 0;
        }
        var _proto = FightSkillInfo.prototype;
        _proto.setData = function setData(config) {
          this.cfg = config;
          this.skillId = config.skillId;
        };
        _proto.checkAiToCtrAngerSkill = function checkAiToCtrAngerSkill() {
          return true;
        };
        return FightSkillInfo;
      }());
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/FightUtil.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './GameConst.ts', './ArrayUtils.ts', './FightMgr.ts'], function (exports) {
  var _createClass, cclegacy, math, Vec3, view, randomRangeInt, GameConst, ArrayUtils, FightMgr;
  return {
    setters: [function (module) {
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      math = module.math;
      Vec3 = module.Vec3;
      view = module.view;
      randomRangeInt = module.randomRangeInt;
    }, function (module) {
      GameConst = module.GameConst;
    }, function (module) {
      ArrayUtils = module.default;
    }, function (module) {
      FightMgr = module.FightMgr;
    }],
    execute: function () {
      cclegacy._RF.push({}, "835b0w6aMtI9aydb0ZR8uRY", "FightUtil", undefined);

      /**
       * @fileName FightUtil.ts
       * @author zhangqiong
       * @date 2024/12/28 17:08:26"
       * @description
       */
      var FightUtil = exports('FightUtil', /*#__PURE__*/function () {
        function FightUtil() {}
        var _proto = FightUtil.prototype;
        _proto.getTargetPointByDis = function getTargetPointByDis(target, form, dis) {
          var distance = this.distance(target, form);
          var trueDis = Math.floor(distance - dis);
          if (trueDis < 100) {
            return null;
          }
          var radian = this.radian(target, form);
          var y = Math.sin(radian) * trueDis;
          var x = Math.cos(radian) * trueDis;
          return math.v3(x, y);
        };
        _proto.distance = function distance(p1, p2) {
          var distance = Vec3.distance(p1, p2);
          return distance;
        };
        _proto.radian = function radian(e1, e2) {
          return Math.atan2(e1.y - e2.y, e1.x - e2.x);
        };
        _proto.getAngleByVec = function getAngleByVec(x, y, tx, ty) {
          var angle = Math.atan2(ty - y, tx - x) * 180 / Math.PI;
          if (angle < 0) {
            angle += 360;
          }
          return angle;
        };
        _proto.getScenceRandomPosition = function getScenceRandomPosition() {
          var size = view.getVisibleSize();
          var width = size.width;
          var height = size.height;
          var halfWidth = width / 2;
          var halfHeight = height / 2;
          var x = randomRangeInt(-halfWidth, halfWidth);
          var y = randomRangeInt(-halfHeight, halfHeight);
          return math.v3(x, y);
        };
        _proto.getDirectionByAngle = function getDirectionByAngle(angle) {
          var _dir = 0;
          if (angle > 67.5 && angle < 112.5) {
            _dir = GameConst.S;
          } else if (angle > 22.5 && angle <= 67.5) {
            _dir = GameConst.ES;
          } else if (angle < 22.5 || angle > 360 - 22.5) {
            _dir = GameConst.E;
          } else if (angle > 360 - 67.5 && angle <= 360 - 22.5) {
            _dir = GameConst.NE;
          } else if (angle > 270 - 22.5 && angle <= 360 - 67.5) {
            _dir = GameConst.N;
          } else if (angle > 270 - 67.5 && angle <= 270 - 22.5) {
            _dir = GameConst.WN;
          } else if (angle > 180 - 22.5 && angle <= 270 - 67.5) {
            _dir = GameConst.W;
          } else if (angle > 180 - 67.5 && angle <= 180 - 22.5) {
            _dir = GameConst.SW;
          }
          return _dir;
        };
        _proto.getScaleXByDirection = function getScaleXByDirection(direction) {
          var scaleX = -1;
          switch (direction) {
            case GameConst.RIGHT_UP:
            case GameConst.RIGHT:
            case GameConst.RIGHT_DOWN:
              scaleX = 1;
              break;
          }
          return scaleX;
        };
        _proto.checkSeduce = function checkSeduce(en, type) {
          return type;
        };
        _proto.findLatelyOrFarEntity = function findLatelyOrFarEntity(isLately, findData) {
          var en = findData.form;
          var ens = findData.enemys;
          var type = findData.type || 1;
          var num = findData.num == undefined ? 1 : findData.num;
          var isPaiChu = findData.isPaiChu;
          // let summon: number = findData.summon

          var oldType = type;
          type = this.checkSeduce(en, type);
          var rr = [];
          for (var i = 0; i < ens.length; i++) {
            if (findData.isPaiChuNotSelect == 1 || ens[i].canSelect()) {
              if (!isPaiChu || ens[i] != en) {
                if (type == 3 || type == 2 && ens[i].data.camp == en.data.camp || type == 1 && ens[i].data.camp != en.data.camp) {
                  var tarPos = ens[i].getLocation();
                  var enPos = en.getLocation();
                  var dis = this.distance(tarPos, enPos);
                  ens[i]["findLatelyEntity_dis"] = dis;
                  rr.push(ens[i]);
                }
              }
            }
          }
          if (oldType != type) {
            //打敌方变成打自己友的情况，就要排除自己
            ArrayUtils.removeItem(rr, en);
          }
          ArrayUtils.sortBy2(rr, "findLatelyEntity_dis", isLately, false);
          return rr.slice(0, num);
        }

        /**
         * 选择随机目标
         * @param isRepeat 是否可以重复
         * @param findData 
         * @returns 
         */;
        _proto.findRandomEntity = function findRandomEntity(isRepeat, findData) {
          var en = findData.form;
          var ens = findData.enemys;
          var type = findData.type || 1;
          var num = findData.num == undefined ? 1 : findData.num;
          var isPaiChu = findData.isPaiChu;
          var oldType = type;
          type = this.checkSeduce(en, type);
          var rr = [];
          for (var i = 0; i < ens.length; i++) {
            if (findData.isPaiChuNotSelect == 1 || ens[i].canSelect()) {
              if (!isPaiChu || ens[i] != en) {
                if (type == 3 || type == 2 && ens[i].data.camp == en.data.camp || type == 1 && ens[i].data.camp != en.data.camp) {
                  rr.push(ens[i]);
                }
              }
            }
          }
          var dd = [];
          if (rr.length > 0) {
            if (!isRepeat) {
              rr = FightMgr.instance.randomArray(rr);
              dd = rr.slice(0, num);
            } else {
              while (num > dd.length) {
                var index = FightMgr.instance.randomInt(0, rr.length - 1);
                dd.push(rr[index]);
              }
            }
          }
          if (oldType != type) {
            //打敌方变成打自己友的情况，就要排除自己
            ArrayUtils.removeItem(dd, en);
          }
          return dd;
        }

        /**
         * 选择生命低或高
         * @param isLow 是否低
         * @param findData 
         * @param isPercent 是否百分比
         * @returns 
         */;
        _proto.findLowHpEntity = function findLowHpEntity(isLow, findData, isPercent) {
          if (isPercent === void 0) {
            isPercent = true;
          }
          var en = findData.form;
          var ens = findData.enemys;
          var type = findData.type || 1;
          var num = findData.num == undefined ? 1 : findData.num;
          var isPaiChu = findData.isPaiChu;
          // let summon: number = findData.summon

          var oldType = type;
          type = this.checkSeduce(en, type);
          var rr = [];
          for (var i = 0; i < ens.length; i++) {
            if (findData.isPaiChuNotSelect == 1 || ens[i].canSelect()) {
              if (!isPaiChu || ens[i] != en) {
                if (type == 3 || type == 2 && ens[i].data.camp == en.data.camp || type == 1 && ens[i].data.camp != en.data.camp) {
                  var value = isPercent ? ens[i].data.hp / ens[i].data.maxHp * 10000 : ens[i].data.hp;
                  ens[i]["findLatelyEntity_hp"] = value;
                  rr.push(ens[i]);
                }
              }
            }
          }
          if (oldType != type) {
            //打敌方变成打自己友的情况，就要排除自己
            ArrayUtils.removeItem(rr, en);
          }
          ArrayUtils.sortBy2(rr, "findLatelyEntity_hp", isLow, false);
          return rr.slice(0, num);
        }

        /**
         * 对称位
         * @param findData 
         * @returns 
         */;
        _proto.findDuiChenEntity = function findDuiChenEntity(findData) {
          var en = findData.form;
          var ens = findData.enemys;
          var type = findData.type || 1;
          var num = findData.num == undefined ? 1 : findData.num;
          var isPaiChu = findData.isPaiChu;
          // let summon: number = findData.summon

          type = this.checkSeduce(en, type);
          var rr = [];
          for (var i = 0; i < ens.length; i++) {
            if (findData.isPaiChuNotSelect == 1 || ens[i].canSelect()) {
              if (!isPaiChu || ens[i] != en) {
                if (type == 3 || type == 2 && ens[i].data.camp == en.data.camp || type == 1 && ens[i].data.camp != en.data.camp) {
                  if (ens[i].data.site == en.data.site)
                    //同一位置
                    {
                      rr.push(ens[i]);
                      break;
                    }
                }
              }
            }
          }

          //对称位置无论如任何都要排除自己（被魅惑无可能攻击自己，没被魅惑一定攻击对方）
          if (rr.length > 0) ArrayUtils.removeItem(rr, en);
          return rr;
        };
        _createClass(FightUtil, null, [{
          key: "instance",
          get: function get() {
            if (!this._instance) {
              this._instance = new FightUtil();
            }
            return this._instance;
          }
        }]);
        return FightUtil;
      }());
      FightUtil._instance = void 0;
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/FindTargetInfo.ts", ['cc'], function (exports) {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "ed3b5XozOdITJc6MtUICcmM", "FindTargetInfo", undefined);
      /**
       * @fileName FindTargetInfo.ts
       * @author zhangqiong
       * @date 2024/12/30 19:19:22"
       * @description
       */
      var FindTargetInfo = exports('FindTargetInfo', function FindTargetInfo() {
        this.enemys = [];
        this.form = null;
        this.isPaiChu = false;
        this.isPaiChuNotSelect = 0;
        this.type = void 0;
        this.num = 1;
        this.skillType = 0;
        this.job = 0;
        this.maxMp = 0;
        this.guild = 0;
      });
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Game2048.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Grid.ts', './Game2048Enum.ts', './Tile.ts', './Enum2.ts'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, math, Component, Grid, DirectionType, config2048, Tile, TouchEvent;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      math = module.math;
      Component = module.Component;
    }, function (module) {
      Grid = module.Grid;
    }, function (module) {
      DirectionType = module.DirectionType;
      config2048 = module.config2048;
    }, function (module) {
      Tile = module.Tile;
    }, function (module) {
      TouchEvent = module.TouchEvent;
    }],
    execute: function () {
      var _dec, _class, _class2;
      cclegacy._RF.push({}, "094bfWv+LJIwITzglpKT3vc", "Game2048", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var Game2048 = exports('Game2048', (_dec = ccclass('Game'), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(Game2048, _Component);
        function Game2048() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.grid = void 0;
          _this.startTiles = void 0;
          _this.size = void 0;
          return _this;
        }
        var _proto = Game2048.prototype;
        _proto.onLoad = function onLoad() {
          var _this2 = this;
          Game2048._ins = this;
          this.node.on(TouchEvent.UP, function () {
            _this2.move(DirectionType.UP);
          }, this);
          this.node.on(TouchEvent.RIGHT, function () {
            _this2.move(DirectionType.RIGHT);
          }, this);
          this.node.on(TouchEvent.DOWN, function () {
            _this2.move(DirectionType.DOWN);
          }, this);
          this.node.on(TouchEvent.LEFT, function () {
            _this2.move(DirectionType.LEFT);
          }, this);
        };
        _proto.start = function start() {
          var _this3 = this;
          this.size = config2048.size;
          this.startTiles = config2048.startTiles;
          this.grid = this.node.addComponent(Grid);
          this.grid.setup(this.size);
          this.addStartTiles();
          this.grid.initNode().then(function () {
            _this3.grid.render();
            _this3.grid.printGrid();
          });
          // console.log(this.serialize());
        };

        _proto.update = function update(deltaTime) {};
        _proto.getVector = function getVector(direction) {
          var _map;
          var map = (_map = {}, _map[DirectionType.UP] = math.v2(0, -1), _map[DirectionType.DOWN] = math.v2(0, 1), _map[DirectionType.RIGHT] = math.v2(1, 0), _map[DirectionType.LEFT] = math.v2(-1, 0), _map);
          return map[direction];
        };
        _proto.buildTraversals = function buildTraversals(vector) {
          var traversals = {
            x: [],
            y: []
          };
          for (var pos = 0; pos < this.size; pos++) {
            traversals.x.push(pos);
            traversals.y.push(pos);
          }
          if (vector.x == 1) {
            traversals.x = traversals.x.reverse();
          }
          if (vector.y == 1) {
            traversals.y = traversals.y.reverse();
          }
          return traversals;
        };
        _proto.findFarthestPoint = function findFarthestPoint(cell, vector) {
          var previous;
          do {
            previous = cell;
            cell.set(previous.x + vector.x, previous.y + vector.y);
          } while (this.grid.withinBounds(cell) && this.grid.checkCellAvailable(cell));
          return {
            farthest: previous,
            next: cell
          };
        };
        _proto.prepareTiles = function prepareTiles() {
          this.grid.foreachCell(function (x, y, tile) {
            if (tile) {
              tile.megreFrom = null;
              tile.savePosition();
            }
          });
        }

        // private moveTile(tile: Node, cell: Vec2): void {
        //     this.grid.removeTile(tile);
        //     this.grid.insertTile(tile, cell);
        // }
        ;

        _proto.addStartTiles = function addStartTiles() {
          for (var i = 0; i < this.startTiles; i++) {
            this.addRandomTile();
          }
        };
        _proto.addRandomTile = function addRandomTile() {
          if (this.grid.checkCellsAvailable()) {
            var value = Math.random() < 0.9 ? 2 : 4;
            var tile = this.createTile(this.grid.randomAvailableCell(), value);
            this.grid.insertTile(tile);
          }
        };
        _proto.nextPos = function nextPos(vector, direction) {
          var _map2;
          var map = (_map2 = {}, _map2[DirectionType.UP] = function (v) {
            return math.v2(v.x + 1, v.y);
          }, _map2[DirectionType.DOWN] = function (v) {
            return math.v2(v.x - 1, v.y);
          }, _map2[DirectionType.LEFT] = function (v) {
            return math.v2(v.x, v.y + 1);
          }, _map2[DirectionType.RIGHT] = function (v) {
            return math.v2(v.x, v.y - 1);
          }, _map2);
          var pos = map[direction](vector);
          if (this.grid.withinBounds(pos)) {
            var value = this.grid.getCellValue(pos);
            return {
              pos: pos,
              value: value
            };
          }
          return null;
        };
        _proto.nextNonZore = function nextNonZore(cellPos, direction) {
          var nextPos = this.nextPos(cellPos, direction);
          if (!nextPos) {
            return null;
          }
          var pos = nextPos.pos,
            value = nextPos.value;
          if (!this.grid.withinBounds(pos)) {
            return null;
          }
          if (value == 0) {
            return this.nextNonZore(pos, direction);
          }
          return nextPos;
        };
        _proto.cale = function cale(cellPos, direction) {
          var cellValue = this.grid.getCellValue(cellPos);
          var next = this.nextNonZore(cellPos, direction);
          if (!next) {
            return;
          }
          var cellTile = this.grid.getCellContent(cellPos);
          var pos = next.pos,
            value = next.value;
          var nextTile = this.grid.getCellContent(pos);
          if (cellValue == 0) {
            // this.grid.cells[pos.x][pos.y] = cellNode;
            // this.grid.cells[cellPos.x][cellPos.y] = nextNode;
            this.grid.insertTile(cellTile, pos);
            this.grid.insertTile(nextTile, math.v2(cellPos.x, cellPos.y));
            this.cale(cellPos, direction);
          } else if (cellValue === value) {
            var mergedTile = this.createTile(pos, value * 2);
            // let mergedTile: Tile = mergedNode.getComponent(Tile);
            mergedTile.megreFrom = [cellTile, nextTile];
            // this.grid.cells[pos.x][pos.y] = null;
            // this.grid.cells[cellPos.x][cellPos.y] = mergedNode;
            this.grid.removeTile(null, pos);
            this.grid.insertTile(mergedTile, math.v2(cellPos.x, cellPos.y));
            // this.grid.removeTile()
          }

          var nextPos = this.nextPos(cellPos, direction);
          this.cale(nextPos.pos, direction);
        };
        _proto.move = function move(direction) {
          this.prepareTiles();
          if (direction == DirectionType.UP) {
            for (var i = 0; i < this.size; i++) {
              this.cale(math.v2(0, i), direction);
            }
          } else if (direction == DirectionType.DOWN) {
            for (var _i = 0; _i < this.size; _i++) {
              this.cale(math.v2(this.size - 1, _i), direction);
            }
          } else if (direction == DirectionType.LEFT) {
            for (var _i2 = 0; _i2 < this.size; _i2++) {
              this.cale(math.v2(_i2, 0), direction);
            }
          } else if (direction == DirectionType.RIGHT) {
            for (var _i3 = 0; _i3 < this.size; _i3++) {
              this.cale(math.v2(_i3, this.size - 1), direction);
            }
          }
          this.addRandomTile();
          this.grid.render();
          this.grid.printGrid();
        };
        _proto.positionsEqual = function positionsEqual(first, second) {
          return first.x === second.x && first.y === second.y;
        };
        _proto.createTile = function createTile(pos, value) {
          var tile = new Tile();
          tile.setup(pos, value);
          return tile;
        };
        _proto.serialize = function serialize() {
          return {
            grid: this.grid.serialize()
          };
        };
        return Game2048;
      }(Component), _class2._ins = void 0, _class2)) || _class));
      window["Game2048"] = Game2048;
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Game2048Enum.ts", ['cc'], function (exports) {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "e407aBiWc5Cpb/l/I62tqMx", "Game2048Enum", undefined);
      var DirectionType = exports('DirectionType', /*#__PURE__*/function (DirectionType) {
        DirectionType[DirectionType["UP"] = 0] = "UP";
        DirectionType[DirectionType["RIGHT"] = 1] = "RIGHT";
        DirectionType[DirectionType["DOWN"] = 2] = "DOWN";
        DirectionType[DirectionType["LEFT"] = 3] = "LEFT";
        return DirectionType;
      }({}));
      var config2048 = exports('config2048', {
        tileWidth: 100,
        tileHight: 100,
        size: 4,
        startTiles: 2
      });
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/GameCamera.ts", ['cc'], function (exports) {
  var cclegacy, UITransform;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      UITransform = module.UITransform;
    }],
    execute: function () {
      cclegacy._RF.push({}, "a3b88529T1KQoJSKfL0O65j", "GameCamera", undefined);
      var GameCamera = exports('GameCamera', /*#__PURE__*/function () {
        function GameCamera(viewPortNode, mapNode, roleNode) {
          this.viewPortNode = void 0;
          this.mapNode = void 0;
          this.roleNode = void 0;
          this.xRange = void 0;
          this.yRange = void 0;
          this.lastX = void 0;
          this.lastY = void 0;
          this.viewPortNode = viewPortNode;
          this.mapNode = mapNode;
          this.roleNode = roleNode;
          var viewPortUITrs = this.viewPortNode.getComponent(UITransform);
          var mapUITrs = this.mapNode.getComponent(UITransform);
          if (mapUITrs.width > viewPortUITrs.width) {
            this.xRange = (mapUITrs.width - viewPortUITrs.width) / 2;
          } else {
            this.xRange = 0;
          }
          if (mapUITrs.height > viewPortUITrs.height) {
            this.yRange = (mapUITrs.height - viewPortUITrs.height) / 2;
          } else {
            this.yRange = 0;
          }
          this.lastX = roleNode.position.x;
          this.lastY = roleNode.position.y;
        }
        var _proto = GameCamera.prototype;
        _proto.updatePosition = function updatePosition() {
          if (this.lastX === this.roleNode.position.x && this.lastY === this.roleNode.position.y) {
            return;
          }
          this.lastX = this.roleNode.position.x;
          this.lastX = this.roleNode.position.y;
          //人物和地图中点距离
          var distX = this.roleNode.position.x;
          var distY = this.roleNode.position.y;
          //地图根据距离反向移动，这样人物就能一直处于视口中间

          this.mapNode.setPosition(-distX, -distY);
          //地图边缘检测
          if (this.mapNode.position.x > this.xRange) {
            this.mapNode.setPosition(this.xRange, this.mapNode.position.y);
            console.log("摄像头超过右边界");
          } else if (this.mapNode.position.x < -this.xRange) {
            this.mapNode.setPosition(-this.xRange, this.mapNode.position.y);
            console.log("摄像头超过左边界");
          }
          if (this.mapNode.position.y > this.yRange) {
            this.mapNode.setPosition(this.mapNode.position.x, this.yRange);
            console.log("摄像头超过上边界");
          } else if (this.mapNode.position.y < -this.yRange) {
            this.mapNode.setPosition(this.mapNode.position.x, -this.yRange);
            console.log("摄像头超过下边界");
          }
        };
        return GameCamera;
      }());
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/GameConst.ts", ['cc'], function (exports) {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "08605JgqfRAzLt29kz51t36", "GameConst", undefined);
      /**
       * @fileName GameConst.ts
       * @author zhangqiong
       * @date 2024/12/26 15:19:25"
       * @description
       */
      var GameConst = exports('GameConst', function GameConst() {});
      GameConst.Attack = "att";
      GameConst.Idle = "holdon";
      GameConst.Move = "move";
      GameConst.Skill = "skill";
      GameConst.Ultimateskill = "ultimateskill";
      GameConst.BeHit = "behit";
      GameConst.Death = "death";
      GameConst.Win = "win";
      GameConst.UP = 0;
      GameConst.RIGHT_UP = 1;
      GameConst.RIGHT = 2;
      GameConst.RIGHT_DOWN = 3;
      GameConst.DOWN = 4;
      GameConst.LEFT_DOWN = 5;
      GameConst.LEFT = 6;
      GameConst.LEFT_UP = 7;
      /** 北 上 **/
      GameConst.N = 0;
      /** 右上**/
      GameConst.NE = 1;
      /** 东 右 **/
      GameConst.E = 2;
      /** 右下**/
      GameConst.ES = 3;
      /** 南  下**/
      GameConst.S = 4;
      /**左下**/
      GameConst.SW = 5;
      /** 西 左 **/
      GameConst.W = 6;
      /** 左上**/
      GameConst.WN = 7;
      /** 背景层 **/
      GameConst.BG_LAYER = "bgContainer";
      /** 地图层 **/
      GameConst.MAP_Bottom_Role_LAYER = "bottomRoleContainer";
      /** 地图层 **/
      GameConst.MAP_LAYER = "mapContainer";
      /** 地图装饰层 **/
      GameConst.DECORATE_LAYER = "decorateContainer";
      /** 影子层 **/
      GameConst.MAP_SHADOW_LAYER = "shadowContainer";
      /** 脚底特效层 **/
      GameConst.MAP_MAGIC_LAYER = "magicContainer";
      /** 地图特效层 **/
      GameConst.MAP_EFFECT_LAYER = "mapEffectContainer";
      /** 掉落层 **/
      GameConst.MAP_DROP_LAYER = "dropContainer";
      /** 特效层 **/
      GameConst.EFFECT_Bottom_LAYER = "effectBottomContainer";
      /** 红白特效层 **/
      GameConst.EFFECT_TOP_LAYER = "effectTopContainer";
      /** 角色层 **/
      GameConst.ROLE_LAYER = "roleContainer";
      /** 角色遮罩层 **/
      GameConst.ROLE_NAME_LAYER = "roleNameContainer";
      /** 特效层 **/
      GameConst.EFFECT_LAYER = "effectContainer";
      /** 受击特效层 **/
      GameConst.HIT_EFFECT_LAYER = "hitEffectLayer";
      /** 飘血层层 **/
      GameConst.HURT_EFFECT_LAYER = "hurtContainer";
      /** 中间层 **/
      GameConst.CENTER_LAYER = "centerContainer";
      /** 前景层 **/
      GameConst.TOP_LAYER = "topContainer";
      // 主目标
      /**当前主目标 */
      GameConst.Main_DangQianMuBiao = 1;
      /**血百分比最低主目标 */
      GameConst.Main_XueBaiFenZuiDi = 2;
      /**血百分比最高主目标 */
      GameConst.Main_XueBaiFenZuiGao = 3;
      /**距离最远主目标 */
      GameConst.Main_JuLiZuiYuan = 4;
      /**距离最近主目标 */
      GameConst.Main_JuLiZuiJin = 5;
      /**初始对称位置主目标 */
      GameConst.Main_ChuShiDuiChengWeiZhi = 6;
      //临时目标  一般配置在技能表中
      /**当前目标 */
      GameConst.DangQianMuBiao = 1;
      /**全体 */
      GameConst.QuanTi = 2;
      /**战力最高 */
      GameConst.ZhanLiZuiGao = 3;
      /**攻击最高 */
      GameConst.GongJiZuiGao = 4;
      /**血百分比最低 */
      GameConst.XueBaiFenZuiDi = 5;
      /**血百分比最高 */
      GameConst.XueBaiFenZuiGao = 6;
      /**距离最远 */
      GameConst.JuLiZuiYuan = 7;
      /**距离最近 */
      GameConst.JuLiZuiJin = 8;
      /**初始对称位置 */
      GameConst.ChuShiDuiChengWeiZhi = 9;
      /**最靠前 */
      GameConst.ZuiKaoQian = 10;
      /**最靠后 */
      GameConst.ZuiKaoHou = 11;
      /**前排 */
      GameConst.QianPai = 12;
      /**后排 */
      GameConst.HouPai = 13;
      /**随机不可重复 */
      GameConst.SuiJiBuKeChongFu = 14;
      /**随机可重复 */
      GameConst.SuiJiKeChongFu = 15;
      /**最密集的地方 */
      GameConst.MiJi = 16;
      /**最低防 */
      GameConst.FangYuDi = 17;
      /**指定英雄（光环） */
      GameConst.ZhiDingYingXiong = 18;
      /**最前没有盾 */
      GameConst.FontNotDun = 19;
      /**拥有某个BUFF */
      GameConst.Buff = 20;
      /**血量最低 */
      GameConst.XueZuiDi = 21;
      /**血量最高 */
      GameConst.XueZuiGao = 22;
      /**按攻击类型选取（1物理，2法术） */
      GameConst.GongJiLeiXing = 23;
      /**角度最小,取的纵坐标相差最小的绝对值 */
      GameConst.JiaoDuZuiXiao = 24;
      /**角度最小,指定职业 */
      GameConst.Job = 25;
      /**能量最高排除已满 */
      GameConst.MaxMp = 26;
      /**指定阵营 */
      GameConst.ZhiDingZhenYing = 27;
      /**自己 */
      GameConst.Ziji = 28;
      /**威胁最大 */
      GameConst.WeiXieZuiDa = 29;
      /**最靠近我方半场的横坐标最小的目标 */
      GameConst.ZuiKaoJinWoFangHouPai = 30;
      /**优先选择场上携带buff的目标，若没有携带buff的目标则选择防御最低的 */
      GameConst.BuffOrFangYuDi = 31;
      /**指定半场 1敌方 2我方 */
      GameConst.ZhiDingQuYu = 32;
      /**指定阵营攻击力最高，第4个值填阵营id */
      GameConst.ZhenYingGongJiLiZuiGao = 34;
      /**暴击率最高 */
      GameConst.BaoJiLvZuiGao = 35;
      /**主动技能 */
      GameConst.Skill_Active = 1;
      /**自动技能 */
      GameConst.Skill_Auto = 2;
      /**被动技能 */
      GameConst.Skill_Passive = 3;
      /**被动触发主动技能 */
      GameConst.Skill_PassiveToActive = 4;
      /**神器技能 */
      GameConst.Skill_GodWeapon = 5;
      /**圣龙技能 */
      GameConst.Skill_ShengLong = 6;
      GameConst.Action_Opre_One = 1;
      GameConst.Action_Opre_Quaue = 2;
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/GameElement.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './QuadTree.ts'], function (exports) {
  var _inheritsLoose, _createClass, cclegacy, _decorator, Label, UITransform, Sprite, Color, randomRange, math, Component, QuadTreeRect;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      UITransform = module.UITransform;
      Sprite = module.Sprite;
      Color = module.Color;
      randomRange = module.randomRange;
      math = module.math;
      Component = module.Component;
    }, function (module) {
      QuadTreeRect = module.QuadTreeRect;
    }],
    execute: function () {
      var _dec, _class;
      cclegacy._RF.push({}, "196be8lNWNNdb5ESOo35Ojk", "GameElement", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var GameElement = exports('GameElement', (_dec = ccclass('GameElement'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(GameElement, _Component);
        function GameElement() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this._x = void 0;
          _this._y = void 0;
          _this._width = void 0;
          _this._height = void 0;
          _this.size = void 0;
          _this.dir = void 0;
          _this.speed = 250;
          _this.nameLabel = void 0;
          _this.myself = false;
          return _this;
        }
        var _proto = GameElement.prototype;
        _proto.onLoad = function onLoad() {
          this.nameLabel = this.node.getChildByName("nameLable").getComponent(Label);
          if (this.nameLabel) {
            this.nameLabel.string = this.node.name;
          }
        };
        _proto.start = function start() {
          var uiTransform = this.getComponent(UITransform);
          this.width = uiTransform.width;
          this.height = uiTransform.height;
          // this.size = math.size(this.width, this.height);
        };

        _proto.update = function update(deltaTime) {
          this.UpdatePoint();
          // return
          if (this.myself) {
            return;
          }
          var v = this.dir.clone().multiplyScalar(this.speed * deltaTime);
          var _final = this.node.position.clone().add(v);
          if (_final.x - this.width / 2 < -this.size.width / 2) {
            // - this.width / 2
            this.dir.x = -this.dir.x;
          }
          if (_final.x + this.width / 2 > this.size.width / 2) {
            //+ this.width / 2
            this.dir.x = -this.dir.x;
          }
          if (_final.y - this.height / 2 < -this.size.height / 2) {
            // - this.height / 2
            this.dir.y = -this.dir.y;
          }
          if (_final.y + this.height / 2 > this.size.height / 2) {
            // + this.height / 2
            this.dir.y = -this.dir.y;
          }
          // const pos: Vec3 = this.node.position.clone();
          // this.node.position = this.node.position.clone().add(displacement);
          var newPs = this.node.position.clone().add(this.dir.clone().multiplyScalar(this.speed * deltaTime));
          this.node.setPosition(newPs);
        };
        _proto.UpdatePoint = function UpdatePoint() {
          this.x = this.node.position.x;
          this.y = this.node.position.y;
        };
        _proto.InitDir = function InitDir() {
          this.dir = this.randomInsideUnitCircle(); //Random.insideUnitCircle.normalized;
        };

        _proto.Init = function Init(size, isMyself) {
          if (isMyself === void 0) {
            isMyself = false;
          }
          this.UpdatePoint();
          this.InitDir();
          this.myself = isMyself;
          if (this.myself) {
            this.node.getComponent(Sprite).color = Color.BLACK;
          }
          // Width = Height = transform.localScale.x;
          this.width = this.node.getComponent(UITransform).width;
          this.height = this.node.getComponent(UITransform).height;
          this.size = size;
        };
        _proto.randomInsideUnitCircle = function randomInsideUnitCircle() {
          var angle = randomRange(1, 360) * 2 * Math.PI; // 随机角度
          var radius = Math.sqrt(Math.random()); // 随机半径，平方根保证均匀分布
          var x = Math.cos(angle) * radius;
          var y = Math.sin(angle) * radius;
          return math.v3(x, y, 0).normalize();
        };
        _proto.Click = function Click(off) {
          var sprite = this.node.getComponent(Sprite);
          sprite.color = off ? Color.RED : Color.WHITE;
        };
        _createClass(GameElement, [{
          key: "rect",
          get: function get() {
            return new QuadTreeRect(this.x, this.y, this.width, this.height);
          }
        }, {
          key: "x",
          get: function get() {
            return this._x;
          },
          set: function set(value) {
            this._x = value;
          }
        }, {
          key: "y",
          get: function get() {
            return this._y;
          },
          set: function set(value) {
            this._y = value;
          }
        }, {
          key: "width",
          get: function get() {
            return this._width;
          },
          set: function set(value) {
            this._width = value;
          }
        }, {
          key: "height",
          get: function get() {
            return this._height;
          },
          set: function set(value) {
            this._height = value;
          }
        }]);
        return GameElement;
      }(Component)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/GameEntity.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Entity.ts'], function (exports) {
  var _inheritsLoose, cclegacy, Entity;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      Entity = module.Entity;
    }],
    execute: function () {
      cclegacy._RF.push({}, "1097aDJjh1GrqGdab6KT6HP", "GameEntity", undefined);

      /**
       * @fileName GameEntity.ts
       * @author zhangqiong
       * @date 2024/12/27 17:06:41"
       * @description
       */
      var GameEntity = exports('GameEntity', /*#__PURE__*/function (_Entity) {
        _inheritsLoose(GameEntity, _Entity);
        function GameEntity() {
          var _this;
          _this = _Entity.call(this) || this;
          _this.maxIndex = 1;
          _this.index = 0;
          _this.isRemoveTime = false;
          _this.entityInfo = void 0;
          _this.targetMovePoint = void 0;
          _this.form = void 0;
          _this.oldMoveX = void 0;
          _this.oldMoveY = void 0;
          return _this;
        }
        var _proto = GameEntity.prototype;
        _proto.nextPlayerFrame = function nextPlayerFrame() {};
        _proto.checkNextFrame = function checkNextFrame() {
          this.index++;
          if (this.index >= this.maxIndex) {
            this.index = 0;
            return true;
          }
          return false;
        };
        _proto.canMove = function canMove() {
          return true;
        };
        _proto.move = function move() {
          if (this.canMove() && this.targetMovePoint) {
            this.oldMoveX = this.targetMovePoint.x;
            this.oldMoveY = this.targetMovePoint.y;
            _Entity.prototype.move.call(this, this.targetMovePoint);
          }
        };
        _proto.check = function check() {};
        return GameEntity;
      }(Entity));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/GameObject.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _inheritsLoose, _createClass, cclegacy, _decorator, Node, director;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      director = module.director;
    }],
    execute: function () {
      var _dec, _class;
      cclegacy._RF.push({}, "8f9d1AmxnVFlKR6f8Cx6a4k", "GameObject", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var GameObject = exports('GameObject', (_dec = ccclass('GameObject'), _dec(_class = /*#__PURE__*/function (_Node) {
        _inheritsLoose(GameObject, _Node);
        function GameObject() {
          return _Node.apply(this, arguments) || this;
        }
        var _proto = GameObject.prototype;
        _proto.setActive = function setActive(value)
        //用这个设置物体的显示与隐藏会安全点
        {
          if (this.active == value) {
            return;
          }
          this.active = value;
        };
        GameObject.Find = function Find(name) {
          var currentScene = director.getScene();
          return this.searchChildByName(currentScene, name);
        };
        GameObject.searchChildByName = function searchChildByName(node, name) {
          var targetNode = node.getChildByName(name);
          if (targetNode) {
            return targetNode;
          }
          var len = node.children.length;
          var searchNode = null;
          for (var i = 0; i < len; i++) {
            searchNode = node.children[i];
            if (searchNode.name == name) {
              targetNode = searchNode;
              return targetNode;
            } else {
              targetNode = this.searchChildByName(searchNode, name);
              if (targetNode) {
                return targetNode;
              }
            }
          }
          return targetNode;
        };
        GameObject.FindObjectOfType = function FindObjectOfType(type) {
          var t = type;
          var currentScene = director.getScene();
          return currentScene.getComponentInChildren(t);
        };
        GameObject.FindObjectsOfType = function FindObjectsOfType(type) {
          var t = type;
          var currentScene = director.getScene();
          return currentScene.getComponentsInChildren(t);
        };
        _createClass(GameObject, [{
          key: "transform",
          get: function get() {
            var node = this;
            return node;
          }
        }, {
          key: "gameObject",
          get: function get() {
            var node = this;
            return node;
          }
        }]);
        return GameObject;
      }(Node)) || _class));
      Node.prototype["setActive"] = GameObject.prototype.setActive;
      Node.prototype["gameObject"] = GameObject.prototype.gameObject;
      Node.prototype["transform"] = GameObject.prototype.transform;
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/GameOverOrWin.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './BaseView.ts', './ViewRegisterMgr.ts', './PanelEnum.ts', './LayerManager.ts', './ViewConst.ts', './Utils.ts', './ViewManager.ts', './AssetMgr.ts', './Enum2.ts', './TowerLauncher.ts', './TowerSceneMap.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _asyncToGenerator, _regeneratorRuntime, cclegacy, _decorator, SpriteFrame, Sprite, Button, BaseView, registerView, PanelType, LayerType, ViewConst, Utils, viewManager, AssetMgr, ViewShowTypes, TowerLauncher, TowerSceneMap;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _asyncToGenerator = module.asyncToGenerator;
      _regeneratorRuntime = module.regeneratorRuntime;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      SpriteFrame = module.SpriteFrame;
      Sprite = module.Sprite;
      Button = module.Button;
    }, function (module) {
      BaseView = module.default;
    }, function (module) {
      registerView = module.registerView;
    }, function (module) {
      PanelType = module.PanelType;
    }, function (module) {
      LayerType = module.LayerType;
    }, function (module) {
      ViewConst = module.default;
    }, function (module) {
      Utils = module.default;
    }, function (module) {
      viewManager = module.viewManager;
    }, function (module) {
      AssetMgr = module.default;
    }, function (module) {
      ViewShowTypes = module.ViewShowTypes;
    }, function (module) {
      TowerLauncher = module.TowerLauncher;
    }, function (module) {
      TowerSceneMap = module.TowerSceneMap;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;
      cclegacy._RF.push({}, "4085bx6yndKv5TD6BJzY4uB", "GameOverOrWin", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var GameOverOrWin = exports('GameOverOrWin', (_dec = ccclass('GameOverOrWin'), _dec2 = property(SpriteFrame), _dec3 = property(SpriteFrame), _dec(_class = (_class2 = /*#__PURE__*/function (_BaseView) {
        _inheritsLoose(GameOverOrWin, _BaseView);
        function GameOverOrWin() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _BaseView.call.apply(_BaseView, [this].concat(args)) || this;
          _this.bg = void 0;
          _this.tryBtn = void 0;
          _this.nextBtn = void 0;
          _initializerDefineProperty(_this, "winSpriteFrame", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "loseSpriteFrame", _descriptor2, _assertThisInitialized(_this));
          _this.showType = ViewShowTypes.ViewAddition;
          return _this;
        }
        var _proto = GameOverOrWin.prototype;
        _proto.onOpen = /*#__PURE__*/function () {
          var _onOpen = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(fromUI) {
            var isWin,
              lose,
              win,
              spriteframe,
              _args = arguments;
            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) switch (_context.prev = _context.next) {
                case 0:
                  isWin = _args.length <= 1 ? undefined : _args[1];
                  _context.next = 3;
                  return AssetMgr.instance.load("resources://tower/res/NormalMordel/GameOverAndWin/gameover0-hd_1/texture");
                case 3:
                  lose = _context.sent;
                  _context.next = 6;
                  return AssetMgr.instance.load("resources://tower/res/NormalMordel/GameOverAndWin/gameover0-hd_8/texture");
                case 6:
                  win = _context.sent;
                  if (this.bg) {
                    spriteframe = new SpriteFrame();
                    spriteframe.texture = isWin ? win : lose;
                    this.bg.spriteFrame = spriteframe;
                  }
                case 8:
                case "end":
                  return _context.stop();
              }
            }, _callee, this);
          }));
          function onOpen(_x) {
            return _onOpen.apply(this, arguments);
          }
          return onOpen;
        }();
        _proto.init = function init() {
          this.bg = Utils.FindChildByName(this.node, "bg").getComponent(Sprite);
          this.tryBtn = Utils.FindChildByName(this.node, "BtnTry").getComponent(Button);
          this.nextBtn = Utils.FindChildByName(this.node, "BtnContinue").getComponent(Button);
          if (this.tryBtn) {
            this.tryBtn.node.on(Button.EventType.CLICK, this.onClickTryAgain, this);
          }
          if (this.nextBtn) {
            this.nextBtn.node.on(Button.EventType.CLICK, this.onClickNext, this);
          }
        };
        _proto.onClickTryAgain = function onClickTryAgain() {
          // TowerLauncher.instance.onGameStar(TowerLauncher.instance.mapId);
          TowerLauncher.instance.restart();
          TowerSceneMap.instance.setMapId(TowerLauncher.instance.mapId);
          viewManager.close();
        };
        _proto.onClickNext = function onClickNext() {
          TowerLauncher.instance.restart();
          TowerSceneMap.instance.setMapId(TowerLauncher.instance.mapId + 1);
          viewManager.close();
        };
        _proto.start = function start() {};
        _proto.update = function update(deltaTime) {};
        return GameOverOrWin;
      }(BaseView), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "winSpriteFrame", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "loseSpriteFrame", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));
      registerView({
        viewCls: GameOverOrWin,
        id: PanelType.GameOverOrWin,
        layer: LayerType.window,
        prefabPathPrefix: ViewConst.defaultPrefabPathPrefix + "tower/"
      });
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/GameScene.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Scene.ts'], function (exports) {
  var _inheritsLoose, cclegacy, Scene;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      Scene = module.Scene;
    }],
    execute: function () {
      cclegacy._RF.push({}, "43ea6TpugBL16mddOSsKgx/", "GameScene", undefined);

      /**
       * @fileName GameScene.ts
       * @author zhangqiong
       * @date 2024/12/26 16:07:57"
       * @description
       */
      var GameScene = exports('GameScene', /*#__PURE__*/function (_Scene) {
        _inheritsLoose(GameScene, _Scene);
        function GameScene() {
          return _Scene.apply(this, arguments) || this;
        }
        return GameScene;
      }(Scene));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Grid.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Game2048Enum.ts', './AssetMgr.ts'], function (exports) {
  var _inheritsLoose, _asyncToGenerator, _regeneratorRuntime, cclegacy, _decorator, math, Label, Component, Sprite, UITransform, config2048, AssetMgr;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _asyncToGenerator = module.asyncToGenerator;
      _regeneratorRuntime = module.regeneratorRuntime;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      math = module.math;
      Label = module.Label;
      Component = module.Component;
      Sprite = module.Sprite;
      UITransform = module.UITransform;
    }, function (module) {
      config2048 = module.config2048;
    }, function (module) {
      AssetMgr = module.default;
    }],
    execute: function () {
      var _dec, _class;
      cclegacy._RF.push({}, "281eb3SsZ5CUL5yQpaRPi8c", "Grid", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var Grid = exports('Grid', (_dec = ccclass('Grid'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(Grid, _Component);
        function Grid() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.cells = void 0;
          _this.cellNodeArray = void 0;
          _this.size = void 0;
          return _this;
        }
        var _proto = Grid.prototype;
        _proto.setup = function setup(size) {
          this.size = size;
          this.cells = this.empty();
          // this.initNode()
        };

        _proto.initNode = /*#__PURE__*/function () {
          var _initNode = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
            var height, width, i, row, j, node, x, y;
            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) switch (_context.prev = _context.next) {
                case 0:
                  this.cellNodeArray = [];
                  if (!(!this.cells || !this.cells.length)) {
                    _context.next = 3;
                    break;
                  }
                  return _context.abrupt("return");
                case 3:
                  height = config2048.size * config2048.tileHight;
                  width = config2048.size * config2048.tileWidth;
                  i = 0;
                case 6:
                  if (!(i < this.cells.length)) {
                    _context.next = 25;
                    break;
                  }
                  row = this.cells[i];
                  this.cellNodeArray[i] = [];
                  j = 0;
                case 10:
                  if (!(j < row.length)) {
                    _context.next = 22;
                    break;
                  }
                  _context.next = 13;
                  return this.createNode(0);
                case 13:
                  node = _context.sent;
                  x = -width / 2 + config2048.tileWidth / 2 + j * config2048.tileWidth;
                  y = height / 2 - config2048.tileHight / 2 - i * config2048.tileHight;
                  node.setPosition(x, y);
                  node.parent = this.node;
                  this.cellNodeArray[i][j] = node;
                case 19:
                  j++;
                  _context.next = 10;
                  break;
                case 22:
                  i++;
                  _context.next = 6;
                  break;
                case 25:
                case "end":
                  return _context.stop();
              }
            }, _callee, this);
          }));
          function initNode() {
            return _initNode.apply(this, arguments);
          }
          return initNode;
        }()
        /**
         * 获取一个空的棋盘
         * @returns 
         */;

        _proto.empty = function empty() {
          var cells = [];
          for (var i = 0; i < this.size; i++) {
            var row = cells[i] = [];
            for (var j = 0; j < this.size; j++) {
              // tile.parent = this.node;
              row.push(null);
            }
          }
          return cells;
        };
        _proto.randomAvailableCell = function randomAvailableCell() {
          var availableCells = this.availableCells();
          if (availableCells.length) {
            return availableCells[Math.floor(Math.random() * availableCells.length)];
          }
          return null;
        }

        /**
         * 获取可用的格子坐标列表
         * @returns 
         */;
        _proto.availableCells = function availableCells() {
          var cells = [];
          this.foreachCell(function (x, y, tile) {
            if (!tile) {
              cells.push(math.v2(x, y));
            }
          });
          return cells;
        }

        /**
         * 遍历整个棋盘
         * @param callBack 
         */;
        _proto.foreachCell = function foreachCell(callBack) {
          for (var x = 0; x < this.size; x++) {
            for (var y = 0; y < this.size; y++) {
              if (callBack) {
                callBack(x, y, this.cells[x][y]);
              }
            }
          }
        }

        /**
         * 检测格子是否是可用状态
         * @param vector 
         * @returns 
         */;
        _proto.checkCellAvailable = function checkCellAvailable(vector) {
          return !this.getCellContent(vector);
        }

        /**
         * 检测格子是否已经被占领
         * @param vector 
         * @returns 
         */;
        _proto.checkCellOccupied = function checkCellOccupied(vector) {
          return !!this.getCellContent(vector);
        }

        /**
         * 检测棋盘是否有可用格子
         * @returns 
         */;
        _proto.checkCellsAvailable = function checkCellsAvailable() {
          return !!this.availableCells().length;
        };
        /**
         * 插入一个格子块
         * @param tile 
         */
        _proto.insertTile = function insertTile(tile, pos) {
          // const tp: Tile = tile.getComponent(Tile);
          var x = pos ? pos.x : tile.positionX;
          var y = pos ? pos.y : tile.positionY;
          this.cells[x][y] = tile;
        };
        /**
         * 移除一个格子块
         * @param tile 
         */
        _proto.removeTile = function removeTile(tile, pos) {
          if (!tile && !pos) {
            console.warn("移除格子时即没有传入格子对象也没有传位置。两个参数至少传一个");
            return;
          }
          var x = pos ? pos.x : tile.positionX;
          var y = pos ? pos.y : tile.positionY;
          this.cells[x][y] = null;
        }

        /**
         * 根据坐标获取格子内容
         * @param vector 
         * @returns 
         */;
        _proto.getCellContent = function getCellContent(vector) {
          if (this.withinBounds(vector)) {
            return this.cells[vector.x][vector.y];
          }
          return null;
        }

        // public getCellTile(vector: Vec2): Tile {
        //     const node: Node = this.getCellContent(vector);
        //     if (!node) {
        //         return null;
        //     }
        //     return node.getComponent(Tile);
        // }

        /**
         * 获取格子值
         * @param vector 
         * @returns 
         */;
        _proto.getCellValue = function getCellValue(vector) {
          var node = this.getCellContent(vector);
          if (!node) {
            return 0;
          }
          return node.value;
        }

        /**
         * 检查坐标是否在区间范围内
         * @param vector 
         * @returns 
         */;
        _proto.withinBounds = function withinBounds(vector) {
          return vector.x >= 0 && vector.x < this.size && vector.y >= 0 && vector.y < this.size;
        };
        _proto.serialize = function serialize() {
          var cellState = [];
          for (var x = 0; x < this.size; x++) {
            var row = cellState[x] = [];
            for (var y = 0; y < this.size; y++) {
              var _tile = this.cells[x][y];
              if (_tile) {
                row.push(_tile.serialize());
              } else {
                row.push(null);
              }
            }
          }
          return {
            size: this.size,
            cells: cellState
          };
        };
        _proto.printGrid = function printGrid() {
          var str = "";
          for (var x = 0; x < this.size; x++) {
            var lineValues = [];
            for (var y = 0; y < this.size; y++) {
              var value = this.getCellValue(math.v2(x, y));
              lineValues.push(value);
            }
            str += lineValues.join(",") + "\n";
          }
          console.log(str);
        };
        _proto.render = function render() {
          for (var i = 0; i < this.cells.length; i++) {
            var cells = this.cells[i];
            for (var j = 0; j < cells.length; j++) {
              var node = this.cellNodeArray[i][j];
              this.setNodeValue(node, this.getCellValue(math.v2(i, j)));
            }
          }
        };
        _proto.createNode = /*#__PURE__*/function () {
          var _createNode = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(value) {
            var path, node, lableNode, spNode, sp;
            return _regeneratorRuntime().wrap(function _callee2$(_context2) {
              while (1) switch (_context2.prev = _context2.next) {
                case 0:
                  path = "resources://prefabs/Title";
                  _context2.next = 3;
                  return AssetMgr.instance.createPrefab(path);
                case 3:
                  node = _context2.sent;
                  if (node) {
                    _context2.next = 6;
                    break;
                  }
                  return _context2.abrupt("return", null);
                case 6:
                  lableNode = node.getChildByName("Label");
                  if (lableNode) {
                    lableNode.getComponent(Label).string = "" + value;
                  }
                  spNode = node.getChildByName("Ghost");
                  if (spNode) {
                    sp = spNode.getComponent(Sprite);
                    sp.sizeMode = Sprite.SizeMode.CUSTOM;
                    sp.getComponent(UITransform).setContentSize(config2048.tileWidth, config2048.tileHight);
                  }
                  return _context2.abrupt("return", node);
                case 11:
                case "end":
                  return _context2.stop();
              }
            }, _callee2);
          }));
          function createNode(_x) {
            return _createNode.apply(this, arguments);
          }
          return createNode;
        }();
        _proto.setNodeValue = function setNodeValue(node, value) {
          if (!node) {
            return;
          }
          var lableNode = node.getChildByName("Label");
          if (lableNode) {
            lableNode.getComponent(Label).string = value > 0 ? "" + value : "";
          }
        };
        _proto.onLoad = function onLoad() {
          this.cells = [];
        };
        _proto.start = function start() {};
        _proto.update = function update(deltaTime) {};
        return Grid;
      }(Component)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Handler.ts", ['cc', './Pool.ts'], function (exports) {
  var cclegacy, Pool;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      Pool = module.Pool;
    }],
    execute: function () {
      cclegacy._RF.push({}, "42571OGuuRIwqH68/X8xnMc", "Handler", undefined);
      // import { Pool } from "./Pool";

      /**
       * @fileName Handler.ts
       * @author zhangqiong
       * @date 2024/12/25 20:41:58"
       * @description
       */
      var Handler = exports('Handler', /*#__PURE__*/function () {
        function Handler(fun, thisObj, param) {
          if (fun === void 0) {
            fun = null;
          }
          if (thisObj === void 0) {
            thisObj = null;
          }
          this.param = void 0;
          this.paramList = void 0;
          this.fun = void 0;
          this.thisObj = void 0;
          this.inPool = void 0;
          this.autoRelease = void 0;
          if (fun != null) {
            this.init(fun, thisObj, param);
          }
        }
        var _proto = Handler.prototype;
        _proto.init = function init(fun, thisObj, param) {
          this.fun = fun;
          this.param = param;
          this.thisObj = thisObj;
        };
        _proto.destroy = function destroy() {
          this.autoRelease = false;
          this.param = null;
          this.paramList = null;
          this.fun = null;
          this.thisObj = null;
        };
        Handler.create = function create(fun, thisObj, param, autoRelesea) {
          if (autoRelesea === void 0) {
            autoRelesea = false;
          }
          if (this.pool == null) this.pool = new Pool(Handler, 1000);

          //添加垃圾代码

          var callBack = this.pool.create();
          callBack.autoRelease = autoRelesea;
          callBack.inPool = false;
          callBack.init(fun, thisObj, param);
          return callBack;
        };
        Handler.relesea = function relesea(callBack) {
          //return;
          callBack.destroy();
          callBack.inPool = true;
          callBack.autoRelease = false;
          this.pool.release(callBack);
        };
        _proto.execute = function execute() {
          if (!this.fun) return;
          // var a: any[] = [];
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          if (this.param != null) {
            //附带的参数加在最前面
            args.unshift(this.param);
          }

          //添加垃圾代码

          var value = this.fun.apply(this.thisObj, args);
          //进行回调
          if (this.autoRelease) {
            if (this.inPool) throw new Error("需要多次调用CallBack的execute方法的，不能设置为自动释放autoRelese");
            this.destroy();
            Handler.relesea(this);
          }
          return value;
        };
        return Handler;
      }());
      Handler.pool = void 0;
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/HashMap.ts", ['cc'], function (exports) {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "d23850qKnNKp7VL8QWfgUXE", "HashMap", undefined);
      var HashMap = exports('HashMap', /*#__PURE__*/function () {
        function HashMap() {
          this.isDestroy = false;
          /** 长度 **/
          this._length = void 0;
          this.obj = void 0;
          this.clear();
        }
        var _proto = HashMap.prototype;
        _proto.clear = function clear() {
          this.obj = {};
          this._length = 0;
        };
        _proto.size = function size() {
          return this._length;
        };
        _proto.getContainer = function getContainer() {
          return this.obj;
        };
        _proto.onDestroy = function onDestroy(obj) {
          var keyNames = ["destroy", "dispose"];
          if (obj instanceof Array) {
            for (var i = 0; i < obj.length; i++) {
              this.destroy(obj[i]);
            }
            return;
          }
          for (var _i = 0; _i < keyNames.length; _i++) {
            if (obj[keyNames[_i]]) {
              obj[keyNames[_i]]();
              return;
            }
          }
        };
        _proto.destroy = function destroy(o) {
          this.isDestroy = true;
          for (var _key in this.obj) {
            this.onDestroy(this.obj[_key]);
          }
          this.obj = null;
        };
        _proto.isEmpty = function isEmpty() {
          return this._length == 0;
        };
        _proto.get = function get(key) {
          return this.obj[key];
        };
        _proto.put = function put(key, value) {
          if (this.obj[key] == null) {
            this._length++;
          }
          this.obj[key] = value;
        };
        _proto.remove = function remove(key) {
          var temp = this.obj[key];
          if (temp != null) {
            delete this.obj[key];
            this._length--;
          }
          return temp;
        };
        _proto.hasKey = function hasKey(key) {
          return this.obj[key] != null;
        };
        _proto.hasValue = function hasValue(value) {
          for (var _key2 in this.obj) {
            if (this.obj[_key2] == value) {
              return true;
            }
          }
          return false;
        };
        _proto.keys = function keys() {
          var ary = [];
          if (this._length != 0) {
            for (var _key3 in this.obj) {
              ary.push(_key3);
            }
            return ary;
          }
          return ary;
        };
        _proto.values = function values() {
          var ary = [];
          if (this._length != 0) {
            for (var _key4 in this.obj) {
              ary.push(this.obj[_key4]);
            }
            return ary;
          }
          return ary;
        };
        _proto.numKeys = function numKeys() {
          var ary = [];
          if (this._length != 0) {
            for (var _key5 in this.obj) {
              ary.push(Number(_key5));
            }
            return ary;
          }
          return ary;
        };
        _proto.forEach = function forEach(fun, thisObj) {
          for (var _key6 in this.obj) {
            fun.call(thisObj, _key6, this.obj[_key6]);
          }
        };
        return HashMap;
      }());
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/HeadBar.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Utils.ts'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, ProgressBar, Label, Component, Utils;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      ProgressBar = module.ProgressBar;
      Label = module.Label;
      Component = module.Component;
    }, function (module) {
      Utils = module.default;
    }],
    execute: function () {
      var _dec, _class;
      cclegacy._RF.push({}, "1d25e3coJ1HZKDDPRjZglvJ", "HeadBar", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var HeadBar = exports('HeadBar', (_dec = ccclass('HeadBar'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(HeadBar, _Component);
        function HeadBar() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.hpPro = void 0;
          _this.mpPro = void 0;
          _this.nameLabel = void 0;
          return _this;
        }
        var _proto = HeadBar.prototype;
        _proto.onLoad = function onLoad() {
          this.hpPro = Utils.FindChildByName(this.node, "hp").getComponent(ProgressBar);
          this.mpPro = Utils.FindChildByName(this.node, "mp").getComponent(ProgressBar);
          this.nameLabel = Utils.FindChildByName(this.node, "name").getComponent(Label);
        };
        _proto.start = function start() {};
        _proto.setName = function setName(name) {
          this.nameLabel.string = name;
        };
        _proto.setData = function setData(hero) {
          this.updateHp(hero.hp / hero.maxHp);
          this.updateMp(hero.mp / hero.maxMp);
        };
        _proto.updateHp = function updateHp(progress) {
          this.hpPro.progress = progress;
        };
        _proto.updateMp = function updateMp(progress) {
          this.mpPro.progress = progress;
        };
        _proto.update = function update(deltaTime) {};
        return HeadBar;
      }(Component)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/HeroConfigVo.ts", ['cc'], function (exports) {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "07a15b+27VNgIIpv+KDlv5t", "HeroConfigVo", undefined);
      /**
       * @fileName HeroConfigVo.ts
       * @author zhangqiong
       * @date 2024/12/26 20:05:23"
       * @description
       */
      var HeroConfigVo = exports('HeroConfigVo', function HeroConfigVo() {
        this.spineId = void 0;
        this.maxHp = void 0;
        this.maxMp = void 0;
        this.comp = void 0;
        this.layer = void 0;
        this.site = void 0;
        this.speed = void 0;
        this.skillIds = void 0;
      });
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/IRoadSeeker.ts", ['cc'], function () {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "99f90Ka5M5NLpeUVKN1UMRB", "IRoadSeeker", undefined);
      /**
       * 寻路接口
       * @author 落日故人 QQ 583051842
       * 
       */
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Joystick.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, cclegacy, _decorator, Node, Vec2, Vec3, math, NodeEventType, Graphics, Color, Component;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Vec2 = module.Vec2;
      Vec3 = module.Vec3;
      math = module.math;
      NodeEventType = module.NodeEventType;
      Graphics = module.Graphics;
      Color = module.Color;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3;
      cclegacy._RF.push({}, "6c02fb63zZKEI3rttdTkFsP", "Joystick", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var Joystick = exports('Joystick', (_dec = ccclass('Joystick'), _dec2 = property(Node), _dec3 = property(Node), _dec4 = property(Node), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(Joystick, _Component);
        function Joystick() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "bg", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "bar", _descriptor2, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "target", _descriptor3, _assertThisInitialized(_this));
          _this.isDragging = false;
          _this.dragOffset = new Vec2();
          _this.startTouchPos = new Vec3();
          _this.centerPosition = math.v3(0, 0);
          _this.joystickRadius = void 0;
          _this.currentDirection = new Vec3();
          return _this;
        }
        var _proto = Joystick.prototype;
        _proto.start = function start() {
          this.joystickRadius = 100; //this.bg.getComponent(UITransform).width / 2;
          this.drawBg();
          this.drawBar();
          this.bar.on(NodeEventType.TOUCH_START, this.onMouseDown, this);
          this.bar.on(NodeEventType.TOUCH_MOVE, this.onMouseMove, this);
          this.bar.on(NodeEventType.TOUCH_END, this.onMouseUp, this);
          this.bar.on(NodeEventType.TOUCH_CANCEL, this.onMouseUp, this);
        };
        _proto.drawBg = function drawBg() {
          var graphics = this.bg.getComponent(Graphics);
          graphics.clear();
          graphics.fillColor = Color.WHITE;
          graphics.circle(0, 0, this.joystickRadius);
          graphics.fill();
        };
        _proto.drawBar = function drawBar() {
          var graphics = this.bar.getComponent(Graphics);
          graphics.clear();
          graphics.fillColor = Color.RED;
          graphics.circle(0, 0, 30);
          graphics.fill();
        };
        _proto.onMouseDown = function onMouseDown(event) {
          this.isDragging = true;
          var locationInNode = event.getLocation();
          this.startTouchPos.set(locationInNode.x, locationInNode.y, 0);
          this.updateJoystickPosition(locationInNode);
          // this.dragOffset.set(locationInNode.x - this.node.position.x, locationInNode.y - this.node.position.y);
        };

        _proto.onMouseMove = function onMouseMove(event) {
          var touchPos = event.getLocation();
          this.updateJoystickPosition(touchPos);
        };
        _proto.updateJoystickPosition = function updateJoystickPosition(touchPos) {
          var deltaX = touchPos.x - this.startTouchPos.x;
          var deltaY = touchPos.y - this.startTouchPos.y;
          var distance = Math.sqrt(deltaX * deltaX + deltaY * deltaY);

          // 如果距离超过了摇杆的半径，限制在边界内
          if (distance > this.joystickRadius) {
            var angle = Math.atan2(deltaY, deltaX);
            var newX = this.joystickRadius * Math.cos(angle);
            var newY = this.joystickRadius * Math.sin(angle);
            this.bar.setPosition(newX, newY, 0);
          } else {
            this.bar.setPosition(deltaX, deltaY, 0);
          }

          // 计算摇杆输入的方向
          this.currentDirection.set(deltaX / this.joystickRadius, deltaY / this.joystickRadius, 0);
        };
        _proto.onMouseUp = function onMouseUp(event) {
          this.isDragging = false;
          this.bar.setPosition(0, 0, 0);
          this.currentDirection.set(0, 0, 0);
        };
        _proto.update = function update(deltaTime) {
          if (this.currentDirection.length() != 0 && this.target) {
            this.target.setPosition(this.target.position.clone().add(this.currentDirection.clone().multiplyScalar(200 * deltaTime)));
          }
        };
        _createClass(Joystick, [{
          key: "direction",
          get: function get() {
            var centerPosition = this.centerPosition.clone();
            var barPosition = this.bar.position.clone();
            var direction = barPosition.subtract(centerPosition);
            return direction;
          }
        }]);
        return Joystick;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "bg", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "bar", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "target", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/LayerManager.ts", ['cc'], function (exports) {
  var cclegacy, UITransform, Node, Widget;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      UITransform = module.UITransform;
      Node = module.Node;
      Widget = module.Widget;
    }],
    execute: function () {
      cclegacy._RF.push({}, "769aa/Wn4ZEkZmhPzTBV/Nk", "LayerManager", undefined);
      var LayerType = exports('LayerType', /*#__PURE__*/function (LayerType) {
        LayerType[LayerType["none"] = 0] = "none";
        LayerType[LayerType["view"] = 1] = "view";
        LayerType[LayerType["window"] = 2] = "window";
        LayerType[LayerType["end"] = 3] = "end";
        return LayerType;
      }({}));
      var LayerManager = exports('default', /*#__PURE__*/function () {
        function LayerManager() {}
        LayerManager.init = function init(root) {
          if (this.inited) {
            return;
          }
          this.layers = {};
          this.inited = true;
          this.root = root;
          var rootTr = this.root.getComponent(UITransform);
          if (!rootTr) {
            rootTr = this.root.addComponent(UITransform);
          }
          this.width = rootTr.width || 750;
          this.height = rootTr.height || 1334;
          for (var type = 0; type < LayerType.end; type++) {
            if (type != LayerType.none) {
              this.createLayer(type);
            }
          }
        };
        LayerManager.createLayer = function createLayer(layer, parent) {
          var node = new Node();
          node.name = "layer_" + layer;
          if (!parent) parent = this.root;
          var uiTr = node.getComponent(UITransform);
          if (!uiTr) {
            uiTr = node.addComponent(UITransform);
          }
          node.parent = parent;
          uiTr.setContentSize(this.width, this.height);
          var widget = node.addComponent(Widget);
          widget.isAlignTop = widget.isAlignBottom = widget.isAlignLeft = widget.isAlignRight = true;
          widget.left = widget.right = widget.top = widget.bottom = 0;
          widget.target = parent;
          widget.updateAlignment();
          this.layers[layer] = node;
          return node;
        };
        LayerManager.getLayer = function getLayer(layer) {
          return this.layers[layer];
        };
        return LayerManager;
      }());
      LayerManager.inited = false;
      LayerManager.layers = void 0;
      LayerManager.width = void 0;
      LayerManager.height = void 0;
      LayerManager.root = void 0;
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/main", ['./AreaType.ts', './ArrayUtils.ts', './AssetMgr.ts', './BackgroundAdapter.ts', './ContentAdapter.ts', './DestroyUtils.ts', './Enum2.ts', './Handler.ts', './Joystick.ts', './MathUtils.ts', './NodeFactory.ts', './Pool.ts', './QuadTree.ts', './ScreenAdaptation.ts', './SpineSkeleton.ts', './StringUtils.ts', './TimeUtils.ts', './Touch.ts', './Utils.ts', './HashMap.ts', './Game2048.ts', './Game2048Enum.ts', './Grid.ts', './Tile.ts', './Background.ts', './Block.ts', './Main.ts', './Render.ts', './config.ts', './enum.ts', './AFKGame.ts', './Containers.ts', './GameConst.ts', './GameScene.ts', './Scene.ts', './Unit.ts', './DepthHelper.ts', './Entity.ts', './FightConfig.ts', './FightMgr.ts', './FightRoleEntity.ts', './FightUtil.ts', './GameEntity.ts', './RoleEntity2.ts', './ActionInfo.ts', './EntityInfo.ts', './FightHeroInfo.ts', './FightSkillGroupInfo.ts', './FightSkillInfo.ts', './FindTargetInfo.ts', './AFKResultPanel.ts', './HeadBar.ts', './AFKGameConfigVo.ts', './HeroConfigVo.ts', './SkillConfigVo.ts', './GameElement.ts', './QuadTreeTest.ts', './Behaviour.ts', './EditObjData.ts', './Enum3.ts', './GameCamera.ts', './GameObject.ts', './IRoadSeeker.ts', './MainTest.ts', './RPGConfig.ts', './RPGGameManger.ts', './RPGGameScencePanel.ts', './RPGLauncher.ts', './RPGPanel.ts', './RPGScenceMap.ts', './RoleEntity.ts', './ScenceMap.ts', './SpineTest.ts', './Transform.ts', './Character.ts', './Monster.ts', './Npc.ts', './Player.ts', './MapParams.ts', './EntityLayer.ts', './MapLayer.ts', './AStarRoadSeeker.ts', './BinaryTreeNode.ts', './MapData.ts', './MapRoadUtils.ts', './PathFindingAgent.ts', './RoadNode.ts', './MapRoad45Angle.ts', './MapRoad90Angle.ts', './SpawnPoint.ts', './TransferDoor.ts', './RootLauncher.ts', './SceneBase.ts', './AnimationPath.ts', './BezierPart.ts', './Boss.ts', './Bullet.ts', './BulletManager.ts', './EffectManager.ts', './Enemy.ts', './GameOverOrWin.ts', './RemoveOrUpLevel.ts', './SelectTowerBuild.ts', './Test.ts', './TouchMove.ts', './TowerCharacter.ts', './TowerConfig.ts', './TowerConst.ts', './TowerGameScene.ts', './TowerGameUIManager.ts', './TowerLauncher.ts', './TowerMapLayer.ts', './TowerSceneMap.ts', './EditPlot.ts', './TowerBuildInfo.ts', './TowerDataDTO.ts', './TowerMapDTO.ts', './FBMoveBg.ts', './FBird.ts', './FCoin.ts', './FairyBirdConst.ts', './FairyBirdGameManger.ts', './FairyBirdPipe.ts', './FairyBirdPipeManger.ts', './FairybirdMainPanel.ts', './BackToMainPanel.ts', './MainPanel.ts', './BaseView.ts', './LayerManager.ts', './PanelEnum.ts', './UIExample.ts', './ViewConst.ts', './ViewManager.ts', './ViewRegisterMgr.ts', './ViewRegisterVo.ts'], function () {
  return {
    setters: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null],
    execute: function () {}
  };
});

System.register("chunks:///_virtual/Main.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './enum.ts', './config.ts', './Render.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _asyncToGenerator, _regeneratorRuntime, cclegacy, _decorator, Node, math, Label, Button, input, Input, KeyCode, Component, ItemColor, config, Render;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _asyncToGenerator = module.asyncToGenerator;
      _regeneratorRuntime = module.regeneratorRuntime;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      math = module.math;
      Label = module.Label;
      Button = module.Button;
      input = module.input;
      Input = module.Input;
      KeyCode = module.KeyCode;
      Component = module.Component;
    }, function (module) {
      ItemColor = module.ItemColor;
    }, function (module) {
      config = module.config;
    }, function (module) {
      Render = module.Render;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;
      cclegacy._RF.push({}, "da480qVdqFNTZhxH7gDX6/U", "Main", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var Main = exports('Main', (_dec = ccclass('Main'), _dec2 = property(Node), _dec3 = property(Node), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(Main, _Component);
        function Main() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "startPanel", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "endPanel", _descriptor2, _assertThisInitialized(_this));
          /** 二维数组 */
          _this.dataArray = [];
          _this.eliminateVec2s = [];
          /** 当前形状 */
          _this.currentShape = {
            center: math.v2(0, 0),
            index: 0,
            color: ItemColor.NULL
          };
          /** 计时变量 */
          _this.time = 0;
          /** 游戏进行开关 */
          _this.isOpen = false;
          _this.score = 0;
          _this.scoreLabel = void 0;
          _this.startBtn = void 0;
          _this.pauseBtn = void 0;
          _this.restartBtn = void 0;
          _this._isPause = false;
          return _this;
        }
        var _proto = Main.prototype;
        _proto.findChild = function findChild(name, startNode) {
          startNode = startNode ? startNode : this.node;
          var childs = startNode.children;
          for (var index = 0; index < childs.length; index++) {
            var element = childs[index];
            if (element.name == name) {
              return element;
            }
            var result = this.findChild(name, element);
            if (result != null) {
              return result;
            }
          }
          return null;
        };
        _proto.onLoad = function onLoad() {
          var cBlockWidth = Math.floor(config.sceneWidth / config.col);
          var cBlockHight = Math.floor(config.sceneHeight / config.row);
          config.blockWidth = config.blockHeight = Math.min(cBlockHight, cBlockWidth);
          this.pauseBtn = this.findChild("pause");
          this.restartBtn = this.findChild("restartBtn");
          this.startBtn = this.findChild("startBtn");
          var labelNode = this.findChild("score");
          if (labelNode) {
            this.scoreLabel = labelNode.getComponent(Label);
          }
          this.eliminateVec2s = [];
          this.showEndPanel(false);
          this.updateScore();
          this.pauseBtn.on(Button.EventType.CLICK, this.onClickPause, this);
          this.restartBtn.on(Button.EventType.CLICK, this.onClickRestart, this);

          // this.node.on(Input.EventType.KEY_DOWN, this.onKeyDown, this);
          input.on(Input.EventType.KEY_DOWN, this.onKeyDown, this);
          this.startBtn.on(Button.EventType.CLICK, this.gameStart, this);
        };
        _proto.showEndPanel = function showEndPanel(v, isPause) {
          if (this.endPanel) {
            this.endPanel.active = v;
          }
          this._isPause = !!isPause;
        };
        _proto.updateScore = function updateScore() {
          if (this.scoreLabel) {
            this.scoreLabel.string = "" + this.score;
          }
        };
        _proto.onKeyDown = function onKeyDown(event) {
          if (!this.isOpen) {
            console.warn("游戏未开始");
            return;
          }
          switch (event.keyCode) {
            case KeyCode.ARROW_LEFT:
              this.changeCurrentShapePos(math.v2(0, -1));
              break;
            case KeyCode.ARROW_RIGHT:
              this.changeCurrentShapePos(math.v2(0, 1));
              break;
            case KeyCode.ARROW_DOWN:
              // 添加快速下落
              // this.changeCurrentShapePos(math.v2(1, 0))
              this.fastDown();
              break;
            case KeyCode.ARROW_UP:
              this.changeCurrentShapeIndex();
              break;
          }
        };
        _proto.onClickPause = function onClickPause() {
          this.isOpen = false;
          this.showEndPanel(true, true);
        };
        _proto.onClickRestart = function onClickRestart() {
          if (this._isPause) {
            this.isOpen = true;
            this.showEndPanel(false, false);
          } else {
            this.gameStart();
            this.showEndPanel(false, false);
          }
        };
        _proto.start = function start() {
          // this.gameStart();
        };
        _proto.gameStart = function gameStart() {
          if (this.isOpen) {
            console.warn("游戏正在运行中！！！");
            return;
          }
          if (this.startPanel) {
            this.startPanel.active = false;
          }
          this.getComponent(Render).init();
          this.initData();
          this.render();
          this.randomOneShape();
          this.isOpen = true;
        };
        _proto.initData = function initData() {
          this.dataArray = [];
          for (var i = 0; i < config.row; i++) {
            this.dataArray[i] = [];
            for (var j = 0; j < config.col; j++) {
              this.dataArray[i][j] = ItemColor.NULL;
            }
          }
        };
        _proto.getRandom = function getRandom(min, max) {
          return Math.floor(min + max * Math.random());
        }

        /** 操作变形逻辑 */;
        _proto.changeCurrentShapeIndex = function changeCurrentShapeIndex() {
          this.clearCurrentData(this.currentShape);
          this.currentShape.index += this.currentShape.index === 3 ? -3 : 1;
          if (this.checkCurrentShapeData(this.currentShape)) {
            this.setCurrentData(this.currentShape);
            // cc.find(NodeUrl.Music).emit(MusicEvent.ACTION)
          } else {
            console.warn('操作不合理');
            this.currentShape.index += this.currentShape.index === 0 ? 3 : -1;
          }
        }

        /** 操作逻辑 */;
        _proto.changeCurrentShapePos = function changeCurrentShapePos(v) {
          this.clearCurrentData(this.currentShape);
          this.currentShape.center.x += v.x;
          this.currentShape.center.y += v.y;
          if (this.checkCurrentShapeData(this.currentShape)) {
            this.setCurrentData(this.currentShape);
          } else {
            console.warn('操作不合理');
            this.currentShape.center.x -= v.x;
            this.currentShape.center.y -= v.y;
          }
        };
        _proto.fastDown = /*#__PURE__*/function () {
          var _fastDown = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
            var i;
            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) switch (_context.prev = _context.next) {
                case 0:
                  this.clearCurrentData(this.currentShape);
                  i = this.currentShape.center.x;
                case 2:
                  if (!(i < config.row)) {
                    _context.next = 17;
                    break;
                  }
                  this.currentShape.center.x = i;
                  if (!this.checkCurrentShapeData(this.currentShape)) {
                    _context.next = 7;
                    break;
                  }
                  _context.next = 14;
                  break;
                case 7:
                  console.warn("无法移动。下一个");
                  this.currentShape.center.x = i - 1;
                  this.setCurrentData(this.currentShape);
                  _context.next = 12;
                  return this.checkLines();
                case 12:
                  this.randomOneShape();
                  return _context.abrupt("break", 17);
                case 14:
                  i++;
                  _context.next = 2;
                  break;
                case 17:
                case "end":
                  return _context.stop();
              }
            }, _callee, this);
          }));
          function fastDown() {
            return _fastDown.apply(this, arguments);
          }
          return fastDown;
        }();
        _proto.getCurrentShapeIndexData = function getCurrentShapeIndexData(currentShape) {
          var color = currentShape.color,
            index = currentShape.index;
          var shape = "shape" + color;
          var shapeData = config[shape];
          if (!shapeData) {
            return [];
          }
          var shapeDatas = shapeData[index];
          return shapeDatas || [];
        };
        _proto.randomOneShape = function randomOneShape() {
          var _this2 = this;
          this.currentShape.center.set(config.startPos);
          this.currentShape.color = this.getRandom(1, 7);
          this.currentShape.index = Math.floor(4 * Math.random());
          if (this.checkCurrentShapeData(this.currentShape)) {
            this.setCurrentData(this.currentShape);
          } else {
            this.isOpen = false;
            this.setCurrentData(this.currentShape);
            // cc.find(NodeUrl.Music).emit(MusicEvent.GAME_OVER)
            this.scheduleOnce(function () {
              // 显示游戏开始菜单
              _this2.showEndPanel(true, false);
            }, 2);
          }
        };
        _proto.setCurrentData = function setCurrentData(currentShape) {
          var center = currentShape.center,
            color = currentShape.color;
          var shapeDatas = this.getCurrentShapeIndexData(currentShape);
          for (var i = 0; i < shapeDatas.length; i++) {
            var ele = shapeDatas[i];
            var row = center.x + ele.x;
            var col = center.y + ele.y;
            this.dataArray[row][col] = color;
          }
          this.render();
        }

        /** 根据当前中心点和形状类型清除数据 */;
        _proto.clearCurrentData = function clearCurrentData(currentShape) {
          var center = currentShape.center,
            color = currentShape.color,
            index = currentShape.index;
          var shape = "shape" + color;
          var shapeData = config[shape];
          var datas = shapeData[index];
          for (var i = 0; i < datas.length; i++) {
            var ele = datas[i];
            var row = center.x + ele.x;
            var col = center.y + ele.y;
            this.dataArray[row][col] = ItemColor.NULL;
          }
        };
        _proto.render = function render() {
          var render = this.getComponent(Render);
          if (render) {
            render.render(this.dataArray);
          }
        };
        _proto.checkCurrentShapeData = function checkCurrentShapeData(currentShape) {
          var center = currentShape.center;
          var shapeIndexDatas = this.getCurrentShapeIndexData(currentShape);
          for (var i = 0; i < shapeIndexDatas.length; i++) {
            var v2 = shapeIndexDatas[i];
            var row = center.x + v2.x;
            if (row < 0 || row >= config.row) {
              return false;
            }
            var col = center.y + v2.y;
            if (col < 0 || col >= config.col) {
              return false;
            }
            if (this.dataArray[row][col] !== ItemColor.NULL) {
              return false;
            }
          }
          return true;
        };
        _proto.autoDown = /*#__PURE__*/function () {
          var _autoDown = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {
            return _regeneratorRuntime().wrap(function _callee2$(_context2) {
              while (1) switch (_context2.prev = _context2.next) {
                case 0:
                  this.clearCurrentData(this.currentShape);
                  this.currentShape.center.x += 1;
                  if (!this.checkCurrentShapeData(this.currentShape)) {
                    _context2.next = 6;
                    break;
                  }
                  this.setCurrentData(this.currentShape);
                  _context2.next = 12;
                  break;
                case 6:
                  console.warn("无法移动。下一个");
                  this.currentShape.center.x -= 1;
                  this.setCurrentData(this.currentShape);
                  _context2.next = 11;
                  return this.checkLines();
                case 11:
                  this.randomOneShape();
                case 12:
                case "end":
                  return _context2.stop();
              }
            }, _callee2, this);
          }));
          function autoDown() {
            return _autoDown.apply(this, arguments);
          }
          return autoDown;
        }();
        _proto.checkLines = /*#__PURE__*/function () {
          var _checkLines = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {
            var _this3 = this;
            var row, isFull, i, _i, p, j, render;
            return _regeneratorRuntime().wrap(function _callee3$(_context3) {
              while (1) switch (_context3.prev = _context3.next) {
                case 0:
                  row = config.row - 1;
                  this.eliminateVec2s = [];
                  while (row !== 0) {
                    isFull = true;
                    for (i = 0; i < config.col; i++) {
                      if (this.dataArray[row][i] === ItemColor.NULL) {
                        isFull = false;
                      }
                    }
                    if (isFull) {
                      for (_i = 0; _i < config.col; _i++) {
                        this.eliminateVec2s.push(math.v2(row, _i));
                      }
                      for (p = row; p > 0; p--) {
                        for (j = 0; j < config.col; j++) {
                          this.dataArray[p][j] = this.dataArray[p - 1][j];
                        }
                      }
                      this.score += 1;
                    } else {
                      row--;
                    }
                  }
                  render = this.getComponent(Render);
                  if (render && this.eliminateVec2s.length > 0) {
                    render.playEliminateEff(this.eliminateVec2s).then(function () {
                      _this3.updateScore();
                    });
                  } else {
                    this.updateScore();
                  }
                case 6:
                case "end":
                  return _context3.stop();
              }
            }, _callee3, this);
          }));
          function checkLines() {
            return _checkLines.apply(this, arguments);
          }
          return checkLines;
        }();
        _proto.update = function update(deltaTime) {
          if (!this.isOpen) {
            return;
          }
          this.time += deltaTime;
          if (this.time > 1) {
            this.time = 0;
            // 下落逻辑
            this.autoDown();
          }
        };
        _proto.printDataArray = function printDataArray() {
          var str = "";
          for (var i = 0; i < this.dataArray.length; i++) {
            var cols = this.dataArray[i];
            str += cols.join(",") + "\n";
            // for (let j = 0; j < cols.length; j++) {
            //     const v = cols[j];

            // }
          }

          console.log(str);
        };
        return Main;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "startPanel", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return undefined;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "endPanel", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return undefined;
        }
      })), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/MainPanel.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './BaseView.ts', './ViewRegisterMgr.ts', './PanelEnum.ts', './LayerManager.ts', './Utils.ts', './ViewConst.ts', './ViewManager.ts', './TowerGameScene.ts', './FairybirdMainPanel.ts', './AFKGame.ts', './RPGGameScencePanel.ts'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, NodeEventType, BaseView, registerView, PanelType, LayerType, Utils, ViewConst, viewManager, TowerGameScene, FairybirdMainPanel, AFKGame, RPGGameScencePanel;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      NodeEventType = module.NodeEventType;
    }, function (module) {
      BaseView = module.default;
    }, function (module) {
      registerView = module.registerView;
    }, function (module) {
      PanelType = module.PanelType;
    }, function (module) {
      LayerType = module.LayerType;
    }, function (module) {
      Utils = module.default;
    }, function (module) {
      ViewConst = module.default;
    }, function (module) {
      viewManager = module.viewManager;
    }, function (module) {
      TowerGameScene = module.TowerGameScene;
    }, function (module) {
      FairybirdMainPanel = module.FairybirdMainPanel;
    }, function (module) {
      AFKGame = module.AFKGame;
    }, function (module) {
      RPGGameScencePanel = module.RPGGameScencePanel;
    }],
    execute: function () {
      var _dec, _class;
      cclegacy._RF.push({}, "442abgev5ZGjKHGrEz1cBOH", "MainPanel", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var MainPanel = exports('MainPanel', (_dec = ccclass('MainPanel'), _dec(_class = /*#__PURE__*/function (_BaseView) {
        _inheritsLoose(MainPanel, _BaseView);
        function MainPanel() {
          return _BaseView.apply(this, arguments) || this;
        }
        var _proto = MainPanel.prototype;
        _proto.onOpen = function onOpen(fromUI) {
          var _BaseView$prototype$o;
          for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
            args[_key - 1] = arguments[_key];
          }
          (_BaseView$prototype$o = _BaseView.prototype.onOpen).call.apply(_BaseView$prototype$o, [this, fromUI].concat(args));
          console.error(args);
        };
        _proto.init = function init() {
          var _BaseView$prototype$i;
          for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            args[_key2] = arguments[_key2];
          }
          (_BaseView$prototype$i = _BaseView.prototype.init).call.apply(_BaseView$prototype$i, [this].concat(args));
          var node = Utils.FindChildByName(this.node, "btns");
          var childs = node.children;
          for (var index = 0; index < childs.length; index++) {
            var element = childs[index];
            if (element.name.indexOf('btn_') != -1) {
              element.on(NodeEventType.TOUCH_START, this.onClickNode, this);
            }
          }
        };
        _proto.onClickNode = function onClickNode(event) {
          var target = event.target;
          if (target.name.indexOf("btn_") != -1) {
            var sps = target.name.split("_");
            if (sps[1]) {
              switch (sps[1]) {
                case "tower":
                  viewManager.open(TowerGameScene);
                  break;
                case "rpg":
                  viewManager.open(RPGGameScencePanel);
                  break;
                case "fb":
                  viewManager.open(FairybirdMainPanel);
                  break;
                case "afk":
                  viewManager.open(AFKGame);
                  break;
              }
            }
          }
        };
        _proto.start = function start() {};
        _proto.update = function update(deltaTime) {};
        return MainPanel;
      }(BaseView)) || _class));
      registerView({
        viewCls: MainPanel,
        id: PanelType.MainPanel,
        layer: LayerType.view,
        prefabPathPrefix: ViewConst.defaultPrefabPathPrefix + "main/"
      });
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/MainTest.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './ScenceMap.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, KeyCode, UITransform, Component, ScenceMap;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      KeyCode = module.KeyCode;
      UITransform = module.UITransform;
      Component = module.Component;
    }, function (module) {
      ScenceMap = module.ScenceMap;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3;
      cclegacy._RF.push({}, "cd657OyPtVL8rVNBL7VI0TR", "MainTest", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var MainTest = exports('MainTest', (_dec = ccclass('MainTest'), _dec2 = property(Node), _dec3 = property(Node), _dec4 = property(Node), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(MainTest, _Component);
        function MainTest() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "viewPortNode", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "mapNode", _descriptor2, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "roleNode", _descriptor3, _assertThisInitialized(_this));
          _this.gameCamera = void 0;
          _this.roleSpeed = 10;
          _this.keyCache = {};
          _this.scenceMap = void 0;
          return _this;
        }
        var _proto = MainTest.prototype;
        _proto.onLoad = function onLoad() {
          // this.gameCamera = new GameCamera(this.viewPortNode, this.mapNode, this.roleNode);

          // input.on(Input.EventType.KEY_DOWN, this.onKeyDown, this);
          // input.on(Input.EventType.KEY_UP, this.onKeyUp, this);
          this.scenceMap = this.addComponent(ScenceMap);
          this.scenceMap.mapId = 1;
        };
        _proto.start = function start() {};
        _proto.onKeyDown = function onKeyDown(event) {
          this.setKeyCodeCache(event.keyCode, true);
          // switch (event.keyCode) {
          //     case KeyCode.ARROW_UP:
          //         this.keyCache[KeyCode.ARROW_UP] = true;
          //         console.log("按下Up");
          //         break;
          //     case KeyCode.ARROW_DOWN:
          //         this.keyCache[KeyCode.ARROW_DOWN] = true;
          //         console.log("按下Down");
          //         break;
          //     case KeyCode.ARROW_LEFT:
          //         this.keyCache[KeyCode.ARROW_LEFT] = true;
          //         console.log("按下Left");
          //         break;
          //     case KeyCode.ARROW_RIGHT:
          //         this.keyCache[KeyCode.ARROW_RIGHT] = true;
          //         console.log("按下Right");
          //         break;
          // }
        };

        _proto.onKeyUp = function onKeyUp(event) {
          this.setKeyCodeCache(event.keyCode, false);
          // switch (event.keyCode) {
          //     case KeyCode.ARROW_UP:
          //         this.keyCache[KeyCode.ARROW_UP] = true;
          //         console.log("按下Up");
          //         break;
          //     case KeyCode.ARROW_DOWN:
          //         this.keyCache[KeyCode.ARROW_DOWN] = true;
          //         console.log("按下Down");
          //         break;
          //     case KeyCode.ARROW_LEFT:
          //         this.keyCache[KeyCode.ARROW_LEFT] = true;
          //         console.log("按下Left");
          //         break;
          //     case KeyCode.ARROW_RIGHT:
          //         this.keyCache[KeyCode.ARROW_RIGHT] = true;
          //         console.log("按下Right");
          //         break;
          // }
        };

        _proto.setKeyCodeCache = function setKeyCodeCache(keyCode, isKeepDown) {
          if (isKeepDown === void 0) {
            isKeepDown = false;
          }
          this.keyCache[keyCode] = isKeepDown;
        }

        /**刷新人物移动 */;
        _proto.updateRoleMove = function updateRoleMove() {
          var x = this.roleNode.position.x;
          var y = this.roleNode.position.y;
          //根据按键移动
          if (this.keyCache[KeyCode.ARROW_UP]) {
            this.roleNode.setPosition(x, y += this.roleSpeed);
            // this.roleNode.y += this.roleSpeed;
          }

          if (this.keyCache[KeyCode.ARROW_DOWN]) {
            this.roleNode.setPosition(x, y -= this.roleSpeed);
            // this.roleNode.y -= this.roleSpeed;
          }

          if (this.keyCache[KeyCode.ARROW_LEFT]) {
            this.roleNode.setPosition(x -= this.roleSpeed, y);
            // this.roleNode.x -= this.roleSpeed;
          }

          if (this.keyCache[KeyCode.ARROW_RIGHT]) {
            this.roleNode.setPosition(x += this.roleSpeed, y);
            // this.roleNode.x += this.roleSpeed;
          }

          var roleUITransform = this.roleNode.getComponent(UITransform);
          var roleScale = this.roleNode.scale;
          var mapUITransform = this.mapNode.getComponent(UITransform);
          var bx = this.roleNode.position.x;
          var by = this.roleNode.position.y;
          //边缘检测
          if (this.roleNode.position.x + roleUITransform.width * this.roleNode.scale.x / 2 > mapUITransform.width / 2) {
            bx = mapUITransform.width / 2 - roleUITransform.width * this.roleNode.scale.x / 2;
            this.roleNode.setPosition(bx, by);
            // this.roleNode.position.x = this.mapNode.width / 2 - this.roleNode.width / 2;
            console.log("人物超过地图右边缘");
          } else if (this.roleNode.position.x - roleUITransform.width * this.roleNode.scale.x / 2 < -mapUITransform.width / 2) {
            bx = -mapUITransform.width / 2 + roleUITransform.width * this.roleNode.scale.x / 2;
            this.roleNode.setPosition(bx, by);
            // this.roleNode.x = 
            console.log("人物超过地图左边缘");
          }
          if (this.roleNode.position.y + roleUITransform.height * this.roleNode.scale.y / 2 > mapUITransform.height / 2) {
            by = mapUITransform.height / 2 - roleUITransform.height * this.roleNode.scale.y / 2;
            this.roleNode.setPosition(bx, by);
            // this.roleNode.y = this.mapNode.height / 2 - this.roleNode.height / 2;
            console.log("人物超过地图上边缘");
          } else if (this.roleNode.position.y - roleUITransform.height * this.roleNode.scale.y / 2 < -mapUITransform.height / 2) {
            by = -mapUITransform.height / 2 + roleUITransform.height * this.roleNode.scale.y / 2;
            this.roleNode.setPosition(bx, by);
            // this.roleNode.y = 
            console.log("人物超过地图下边缘");
          }
        };
        _proto.update = function update(deltaTime) {
          // this.updateRoleMove();
          // this.gameCamera.updatePosition();
        };
        return MainTest;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "viewPortNode", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "mapNode", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "roleNode", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/MapData.ts", ['cc'], function (exports) {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "85c90I1mbFJuKY26/Oh7Pp0", "MapData", undefined);
      var MapData = exports('default', function MapData() {
        this.name = void 0;
        this.bgName = void 0;
        this.type = void 0;
        this.mapWidth = void 0;
        this.mapHeight = void 0;
        this.nodeWidth = void 0;
        this.nodeHeight = void 0;
        this.alignment = void 0;
        this.offsetX = void 0;
        this.offsetY = void 0;
        this.roadDataArr = void 0;
        this.mapItems = void 0;
      });
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/MapLayer.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, cclegacy, _decorator, Sprite, Node, UITransform, SpriteFrame, Component;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Sprite = module.Sprite;
      Node = module.Node;
      UITransform = module.UITransform;
      SpriteFrame = module.SpriteFrame;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;
      cclegacy._RF.push({}, "b68808DpwhOBpij/W+1VNnI", "MapLayer", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var MapLayer = exports('default', (_dec = ccclass("MapLayer"), _dec2 = property(Sprite), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(MapLayer, _Component);
        function MapLayer() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "bgImg", _descriptor, _assertThisInitialized(_this));
          _this._mapParams = null;
          return _this;
        }
        var _proto = MapLayer.prototype;
        _proto.update = function update(dt) {};
        _proto.init = function init(mapParams) {
          this._mapParams = mapParams;
          if (!this.bgImg) {
            var bgNode = new Node();
            this.node.addChild(bgNode);
            bgNode.layer = this.node.layer;
            this.bgImg = bgNode.addComponent(Sprite);
            this.bgImg.sizeMode = Sprite.SizeMode.RAW;
            bgNode.getComponent(UITransform).anchorX = 0;
            bgNode.getComponent(UITransform).anchorY = 0;
          }
          var spriteFrame = new SpriteFrame();
          spriteFrame.texture = mapParams.bgTex;
          this.bgImg.spriteFrame = spriteFrame;
          this.getComponent(UITransform).width = this.width;
          this.getComponent(UITransform).height = this.height;
        };
        _createClass(MapLayer, [{
          key: "bgImage",
          get: function get() {
            return this.bgImg;
          }
        }, {
          key: "width",
          get: function get() {
            if (this.bgImg) {
              return this.bgImg.getComponent(UITransform).width;
            }
            return this._mapParams.viewWidth;
          }
        }, {
          key: "height",
          get: function get() {
            if (this.bgImg) {
              return this.bgImg.getComponent(UITransform).height;
            }
            return this._mapParams.viewHeight;
          }
        }]);
        return MapLayer;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "bgImg", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/MapParams.ts", ['cc', './Enum3.ts'], function (exports) {
  var cclegacy, MapType, MapLoadModel;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      MapType = module.MapType;
      MapLoadModel = module.MapLoadModel;
    }],
    execute: function () {
      cclegacy._RF.push({}, "27244yA0LJIeoXhWxSb2Vt/", "MapParams", undefined);

      /**
       * 地图参数
       */
      var MapParams = exports('default', function MapParams() {
        /**
         * 地图名称
         */
        this.name = "";
        /**
         * 底图资源名称
         */
        this.bgName = "";
        /**
         * 地图类型
         */
        this.mapType = MapType.Angle45;
        /**
         * 地图宽
         */
        this.mapWidth = 750;
        /**
         * 地图高
         */
        this.mapHeight = 1600;
        /**
         * 地图单元格宽
         */
        this.ceilWidth = 75;
        /**
         * 地图单元格高
         */
        this.ceilHeight = 75;
        /**
         * 地图视野宽
         */
        this.viewWidth = 750;
        /**
         * 地图视野高
         */
        this.viewHeight = 1334;
        /**
         * 地图切片宽
         */
        this.sliceWidth = 256;
        /**
         * 地图切片高
         */
        this.sliceHeight = 256;
        /**
         * 底图加载模式，是单张还是切片加载
         */
        this.mapLoadModel = MapLoadModel.single;
        /**
         * 地图底图
         */
        this.bgTex = null;
      });
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/MapRoad45Angle.ts", ['cc', './RoadNode.ts'], function (exports) {
  var cclegacy, math, RoadNode;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      math = module.math;
    }, function (module) {
      RoadNode = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "8f288RAwupPzLSHB7dHkSgl", "MapRoad45Angle", undefined);
      var MapRoad45Angle = exports('default', /*#__PURE__*/function () {
        function MapRoad45Angle(row, col, nodeWidth, nodeHeight, halfNodeWidth, halfNodeHeight) {
          this._row = void 0;
          this._col = void 0;
          this._nodeWidth = void 0;
          this._nodeHeight = void 0;
          this._halfNodeWidth = void 0;
          this._halfNodeHeight = void 0;
          this._row = row;
          this._col = col;
          this._nodeWidth = nodeWidth;
          this._nodeHeight = nodeHeight;
          this._halfNodeWidth = halfNodeWidth;
          this._halfNodeHeight = halfNodeHeight;
        }
        var _proto = MapRoad45Angle.prototype;
        _proto.getNodeByPixel = function getNodeByPixel(x, y) {
          var wPoint = this.getWorldPointByPixel(x, y);
          var fPoint = this.getPixelByWorldPoint(wPoint.x, wPoint.y);
          var dPoint = this.getDerectByPixel(x, y);
          var node = new RoadNode();
          node.cx = wPoint.x;
          node.cy = wPoint.y;
          node.px = fPoint.x;
          node.py = fPoint.y;
          node.dx = dPoint.x;
          node.dy = dPoint.y;
          return node;
        };
        _proto.getNodeByDerect = function getNodeByDerect(dx, dy) {
          var fPoint = this.getPixelByDerect(dx, dy);
          var wPoint = this.getWorldPointByPixel(fPoint.x, fPoint.y);
          var node = new RoadNode();
          node.cx = wPoint.x;
          node.cy = wPoint.y;
          node.px = fPoint.x;
          node.py = fPoint.y;
          node.dx = dx;
          node.dy = dy;
          return node;
        };
        _proto.getNodeByWorldPoint = function getNodeByWorldPoint(cx, cy) {
          var point = this.getPixelByWorldPoint(cx, cy);
          return this.getNodeByPixel(point.x, point.y);
        }
        /**
         * 根据像素坐标得到场景世界坐标
         * @param x 
         * @param y 
         */;
        _proto.getWorldPointByPixel = function getWorldPointByPixel(x, y) {
          var cx = Math.ceil(x / this._nodeWidth - 0.5 + y / this._nodeHeight) - 1;
          var cy = this._col - 1 - Math.ceil(x / this._nodeWidth - 0.5 - y / this._nodeHeight);
          return math.v2(cx, cy);
        }
        /**
         * 根据世界坐标获取像素坐标
         * @param cx 
         * @param cy 
         */;
        _proto.getPixelByWorldPoint = function getPixelByWorldPoint(cx, cy) {
          var x = Math.floor((cx + 1 - (cy - (this._col - 1))) * this._halfNodeWidth);
          var y = Math.floor((cx + 1 + (cy - (this._col - 1))) * this._halfNodeHeight);
          return math.v2(x, y);
        };
        _proto.getDerectByPixel = function getDerectByPixel(x, y) {
          var worldPoint = this.getWorldPointByPixel(x, y);
          var pixelPoint = this.getPixelByWorldPoint(worldPoint.x, worldPoint.y);
          var dx = Math.floor(pixelPoint.x / this._nodeWidth) - (pixelPoint.x % this._nodeWidth == 0 ? 1 : 0);
          var dy = Math.floor(pixelPoint.y / this._halfNodeHeight) - 1;
          return math.v2(dx, dy);
        };
        _proto.getDerectByWorldPoint = function getDerectByWorldPoint(cx, cy) {
          var dx = Math.floor((cx - (cy - (this._col - 1))) / 2);
          var dy = cx + (cy - (this._col - 1));
          return math.v2(dx, dy);
        };
        _proto.getPixelByDerect = function getPixelByDerect(dx, dy) {
          var x = Math.floor((dx + dy % 2) * this._nodeWidth + (1 - dy % 2) * this._halfNodeWidth);
          var y = Math.floor((dy + 1) * this._halfNodeHeight);
          return math.v2(x, y);
        };
        return MapRoad45Angle;
      }());
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/MapRoad90Angle.ts", ['cc', './RoadNode.ts'], function (exports) {
  var cclegacy, math, RoadNode;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      math = module.math;
    }, function (module) {
      RoadNode = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "28fe7OzQwFALqUkizw4ReO0", "MapRoad90Angle", undefined);
      var MapRoad90Angle = exports('default', /*#__PURE__*/function () {
        function MapRoad90Angle(row, col, nodeWidth, nodeHeight, _halfNodeWidth, _halfNodeHeight) {
          this._row = void 0;
          this._col = void 0;
          this._nodeWidth = void 0;
          this._nodeHeight = void 0;
          this._halfNodeWidth = void 0;
          this._halfNodeHeight = void 0;
          this._row = row;
          this._col = col;
          this._nodeWidth = nodeWidth;
          this._nodeHeight = nodeHeight;
          this._halfNodeHeight = _halfNodeHeight;
          this._halfNodeWidth = _halfNodeWidth;
        }
        var _proto = MapRoad90Angle.prototype;
        _proto.getDerectByPixel = function getDerectByPixel(x, y) {
          var dx = Math.floor(x / this._nodeWidth);
          var dy = Math.floor(y / this._nodeHeight);
          return math.v2(dx, dy);
        };
        _proto.getDerectByWorldPoint = function getDerectByWorldPoint(cx, cy) {
          return math.v2(cx, cy);
        };
        _proto.getNodeByDerect = function getNodeByDerect(dx, dy) {
          var fPoint = this.getPixelByDerect(dx, dy);
          var wPoint = this.getWorldPointByPixel(fPoint.x, fPoint.y);
          var node = new RoadNode();
          node.cx = wPoint.x;
          node.cy = wPoint.y;
          node.px = fPoint.x;
          node.py = fPoint.y;
          node.dx = dx;
          node.dy = dy;
          return node;
        };
        _proto.getNodeByPixel = function getNodeByPixel(x, y) {
          var wPoint = this.getWorldPointByPixel(x, y);
          var fPoint = this.getPixelByWorldPoint(wPoint.x, wPoint.y);
          var dPoint = this.getDerectByPixel(x, y);
          var node = new RoadNode();
          node.cx = wPoint.x;
          node.cy = wPoint.y;
          node.px = fPoint.x;
          node.py = fPoint.y;
          node.dx = dPoint.x;
          node.dy = dPoint.y;
          return node;
        };
        _proto.getNodeByWorldPoint = function getNodeByWorldPoint(cx, cy) {
          var point = this.getPixelByWorldPoint(cx, cy);
          return this.getNodeByPixel(point.x, point.y);
        };
        _proto.getPixelByDerect = function getPixelByDerect(dx, dy) {
          var x = Math.floor((dx + 1) * this._nodeWidth - this._halfNodeWidth);
          var y = Math.floor((dy + 1) * this._nodeHeight - this._halfNodeHeight);
          return math.v2(x, y);
        };
        _proto.getPixelByWorldPoint = function getPixelByWorldPoint(cx, cy) {
          return this.getPixelByDerect(cx, cy);
        };
        _proto.getWorldPointByPixel = function getWorldPointByPixel(x, y) {
          return this.getDerectByPixel(x, y);
        };
        return MapRoad90Angle;
      }());
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/MapRoadUtils.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Enum3.ts', './RoadNode.ts', './MapRoad45Angle.ts', './MapRoad90Angle.ts'], function (exports) {
  var _createClass, cclegacy, math, MapType, RoadNode, MapRoad45Angle, MapRoad90Angle;
  return {
    setters: [function (module) {
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      math = module.math;
    }, function (module) {
      MapType = module.MapType;
    }, function (module) {
      RoadNode = module.default;
    }, function (module) {
      MapRoad45Angle = module.default;
    }, function (module) {
      MapRoad90Angle = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "fcf41L6Y0lEOKkZoBNNPomb", "MapRoadUtils", undefined);
      var MapRoadUtils = exports('default', /*#__PURE__*/function () {
        function MapRoadUtils() {
          this._mapWidth = void 0;
          this._mapHeight = void 0;
          this._nodeWidth = void 0;
          this._nodeHeight = void 0;
          this._halfNodeWidth = void 0;
          this._halfNodeHeight = void 0;
          this._col = void 0;
          this._row = void 0;
          this._mapType = void 0;
          this._mapRoad = void 0;
        }
        var _proto = MapRoadUtils.prototype;
        _proto.updateMapInfo = function updateMapInfo(mapWidth, mapHeight, nodeWidth, nodeHeight, mapType) {
          this._mapWidth = mapWidth;
          this._mapHeight = mapHeight;
          this._nodeWidth = nodeWidth;
          this._nodeHeight = nodeHeight;
          this._halfNodeWidth = Math.floor(nodeWidth / 2);
          this._halfNodeHeight = Math.floor(nodeHeight / 2);
          this._mapType = mapType;
          switch (this._mapType) {
            case MapType.Angle45:
              this._col = Math.ceil(mapWidth / nodeWidth);
              this._row = Math.ceil(mapHeight / nodeHeight) * 2;
              this._mapRoad = new MapRoad45Angle(this._row, this._col, this._nodeWidth, this._nodeHeight, this._halfNodeWidth, this._halfNodeHeight);
              break;
            case MapType.Angle90:
              this._col = Math.ceil(mapWidth / nodeWidth);
              this._row = Math.ceil(mapHeight / nodeHeight);
              this._mapRoad = new MapRoad90Angle(this._row, this._col, this._nodeWidth, this._nodeHeight, this._halfNodeWidth, this._halfNodeHeight);
              break;
          }
        };
        _proto.getNodeByPixel = function getNodeByPixel(x, y) {
          if (this._mapRoad) {
            return this._mapRoad.getNodeByPixel(x, y);
          }
          return new RoadNode();
        };
        _proto.getNodeByDerect = function getNodeByDerect(dx, dy) {
          if (this._mapRoad) {
            return this._mapRoad.getNodeByDerect(dx, dy);
          }
          return new RoadNode();
        };
        _proto.getNodeByWorldPoint = function getNodeByWorldPoint(cx, cy) {
          if (this._mapRoad) {
            return this._mapRoad.getNodeByWorldPoint(cx, cy);
          }
          return new RoadNode();
        };
        _proto.getWorldPointByPixel = function getWorldPointByPixel(x, y) {
          if (this._mapRoad) {
            return this._mapRoad.getWorldPointByPixel(x, y);
          }
          return math.v2(0, 0);
        };
        _proto.getPixelByWorldPoint = function getPixelByWorldPoint(cx, cy) {
          if (this._mapRoad) {
            return this._mapRoad.getPixelByWorldPoint(cx, cy);
          }
          return math.v2(0, 0);
        };
        _proto.getDerectByPixel = function getDerectByPixel(x, y) {
          if (this._mapRoad) {
            return this._mapRoad.getDerectByPixel(x, y);
          }
          return math.v2(0, 0);
        };
        _proto.getDerectByWorldPoint = function getDerectByWorldPoint(cx, cy) {
          if (this._mapRoad) {
            return this._mapRoad.getDerectByWorldPoint(cx, cy);
          }
          return math.v2(0, 0);
        };
        _proto.getPixelByDerect = function getPixelByDerect(dx, dy) {
          if (this._mapRoad) {
            return this._mapRoad.getPixelByDerect(dx, dy);
          }
          return math.v2(0, 0);
        };
        _createClass(MapRoadUtils, [{
          key: "mapWidth",
          get: function get() {
            return this._mapWidth;
          }
        }, {
          key: "mapHeight",
          get: function get() {
            return this._mapHeight;
          }
        }, {
          key: "nodeWidth",
          get: function get() {
            return this._nodeWidth;
          }
        }, {
          key: "nodeHeight",
          get: function get() {
            return this._nodeHeight;
          }
        }, {
          key: "halfNodeWidth",
          get: function get() {
            return this._halfNodeWidth;
          }
        }, {
          key: "halfNodeHeight",
          get: function get() {
            return this._halfNodeHeight;
          }
        }, {
          key: "col",
          get: function get() {
            return this._col;
          }
        }, {
          key: "row",
          get: function get() {
            return this._row;
          }
        }, {
          key: "mapType",
          get: function get() {
            return this._mapType;
          }
        }], [{
          key: "instance",
          get: function get() {
            if (!this._instance) {
              this._instance = new MapRoadUtils();
            }
            return this._instance;
          }
        }]);
        return MapRoadUtils;
      }());
      MapRoadUtils._instance = void 0;
      window["mapRoadUtils"] = MapRoadUtils.instance;
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/MathUtils.ts", ['cc'], function (exports) {
  var cclegacy, Vec2;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      Vec2 = module.Vec2;
    }],
    execute: function () {
      cclegacy._RF.push({}, "133a8p0X35GQKLoVrhmY7Dm", "MathUtils", undefined);
      var MathUtils = exports('default', /*#__PURE__*/function () {
        function MathUtils() {}
        /**
         * 生成bezier曲线路径点
         * @param anchors - 曲线控制点数组，包含起终点
         * @param count - 生成的曲线点数
         * @returns 生成的曲线点数组
         */
        MathUtils.createBezierPoints = function createBezierPoints(anchors, count) {
          var points = [];
          for (var i = 0; i <= count; i++) {
            var p = this.caculateBezierPoint(anchors, i / count);
            points.push(p);
          }
          return points;
        }

        /**
         * @param points - 曲线控制点数组，包含起终点
         * @param t - 比例，[0, 1]
         * @returns 生成的曲线点
         */;
        MathUtils.caculateBezierPoint = function caculateBezierPoint(points, t) {
          var len = points.length;
          var res = new Vec2(0, 0);
          var combination = function combination(n, m) {
            var nFactorial = 1,
              mFactorial = 1;
            while (m > 0) {
              nFactorial *= n;
              mFactorial *= m;
              n--;
              m--;
            }
            return nFactorial / mFactorial;
          };
          for (var i = 0; i < len; i++) {
            var p = points[i];
            res.x += p.x * combination(len - 1, i) * Math.pow(t, i) * Math.pow(1 - t, len - 1 - i);
            res.y += p.y * combination(len - 1, i) * Math.pow(t, i) * Math.pow(1 - t, len - 1 - i);
          }
          return res;
        }

        /**
         * 弧度转角度
         * @param radian - 弧度
         * @returns 角度
         */;
        MathUtils.RadianToAngle = function RadianToAngle(radian) {
          return radian * 180 / Math.PI;
        }

        /**
         * 角度转弧度
         * @param angle - 角度
         * @returns 弧度
         */;
        MathUtils.AngleToRadian = function AngleToRadian(angle) {
          return angle * Math.PI / 180;
        }

        // class end
        ;

        return MathUtils;
      }());
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Monster.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Character.ts'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, Vec3, Character;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Vec3 = module.Vec3;
    }, function (module) {
      Character = module.default;
    }],
    execute: function () {
      var _dec, _class;
      cclegacy._RF.push({}, "bda92rL8kZC2Lqf5El7yZIo", "Monster", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var Monster = exports('Monster', (_dec = ccclass('Monster'), _dec(_class = /*#__PURE__*/function (_Character) {
        _inheritsLoose(Monster, _Character);
        function Monster() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Character.call.apply(_Character, [this].concat(args)) || this;
          _this.monsterId = 0;
          _this.defaultDir = 0;
          /**
           * 编辑的数据
           */
          _this.editData = null;
          return _this;
        }
        var _proto = Monster.prototype;
        _proto.start = function start() {}

        /**
         * 初始化
         */;
        _proto.init = function init() {
          // this.width = 100;
          // this.height = 100;
          this.direction = this.defaultDir;

          // this.loadRes();
        };

        _proto.update = function update(deltaTime) {};
        _proto.initEditData = function initEditData(editData) {
          this.editData = editData;
          this.objName = editData.objName;
          this.monsterId = Number(editData.objId);
          this.node.position = new Vec3(editData.x, editData.y);
          this.defaultDir = editData.direction;
          // this.isPatrol = editData.isPatrol;
        };

        return Monster;
      }(Character)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/NodeFactory.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _createClass, cclegacy, Node, NodePool;
  return {
    setters: [function (module) {
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      Node = module.Node;
      NodePool = module.NodePool;
    }],
    execute: function () {
      cclegacy._RF.push({}, "a09b6yVv6FPHrG4tGTpPz9D", "NodeFactory", undefined);

      /**
       * @fileName NodeFactory.ts
       * @author zhangqiong
       * @date 2024/12/18 16:36:10"
       * @description
       */
      var NodeFactory = exports('NodeFactory', /*#__PURE__*/function () {
        function NodeFactory() {
          this._nodePool = void 0;
          this._nodePool = new NodePool();
        }
        var _proto = NodeFactory.prototype;
        _proto.createNode = function createNode() {
          var node = null;
          if (this._nodePool.size() > 0) {
            node = this._nodePool.get();
          } else {
            node = new Node();
          }
          return node;
        };
        _proto.release = function release(node) {
          if (this._nodePool) {
            this._nodePool.put(node);
          }
        };
        _createClass(NodeFactory, null, [{
          key: "instance",
          get: function get() {
            if (!NodeFactory._instance) {
              NodeFactory._instance = new NodeFactory();
            }
            return NodeFactory._instance;
          }
        }]);
        return NodeFactory;
      }());
      NodeFactory._instance = void 0;
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Npc.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Character.ts'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, Vec3, Character;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Vec3 = module.Vec3;
    }, function (module) {
      Character = module.default;
    }],
    execute: function () {
      var _dec, _class;
      cclegacy._RF.push({}, "3e83e/tUzBGo59E2vutxtBx", "Npc", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var Npc = exports('Npc', (_dec = ccclass('Npc'), _dec(_class = /*#__PURE__*/function (_Character) {
        _inheritsLoose(Npc, _Character);
        function Npc() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Character.call.apply(_Character, [this].concat(args)) || this;
          _this.npcId = 0;
          _this.defaultDir = 0;
          _this.editData = null;
          return _this;
        }
        var _proto = Npc.prototype;
        _proto.start = function start() {};
        _proto.update = function update(deltaTime) {};
        _proto.init = function init() {
          // this.width = 100;
          // this.height = 100;
          this.direction = this.defaultDir;
          // this.loadRes();
        };

        _proto.initEditData = function initEditData(editData) {
          this.editData = editData;
          this.objName = editData.objName;
          this.npcId = Number(editData.objId);
          this.node.position = new Vec3(editData.x, editData.y);
          this.defaultDir = editData.direction;
          // this.isPatrol = editData.isPatrol;
        };

        return Npc;
      }(Character)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/PanelEnum.ts", ['cc'], function (exports) {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "b7001BgKqtH3K1UCJSzUD69", "PanelEnum", undefined);
      var PanelType = exports('PanelType', /*#__PURE__*/function (PanelType) {
        PanelType[PanelType["none"] = 0] = "none";
        PanelType[PanelType["FairybirdMainPanel"] = 1] = "FairybirdMainPanel";
        PanelType[PanelType["RPGPanel"] = 2] = "RPGPanel";
        PanelType[PanelType["MainPanel"] = 3] = "MainPanel";
        PanelType[PanelType["TowerGameScene"] = 4] = "TowerGameScene";
        PanelType[PanelType["GameOverOrWin"] = 5] = "GameOverOrWin";
        PanelType[PanelType["AFKGame"] = 6] = "AFKGame";
        PanelType[PanelType["AFKResultPanel"] = 7] = "AFKResultPanel";
        PanelType[PanelType["RPGGameScencePanel"] = 8] = "RPGGameScencePanel";
        return PanelType;
      }({}));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/PathFindingAgent.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './AStarRoadSeeker.ts', './MapRoadUtils.ts'], function (exports) {
  var _createClass, cclegacy, AStarRoadSeeker, MapRoadUtils;
  return {
    setters: [function (module) {
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      AStarRoadSeeker = module.default;
    }, function (module) {
      MapRoadUtils = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "9f52a21pHhE7adxRmXzB/uE", "PathFindingAgent", undefined);
      var PathFindingAgent = exports('default', /*#__PURE__*/function () {
        function PathFindingAgent() {
          this._mapData = void 0;
          this._mapType = void 0;
          this._roadDic = {};
          this._roadSeeker = void 0;
        }
        var _proto = PathFindingAgent.prototype;
        _proto.init = function init(mapData) {
          this._mapData = mapData;
          this._mapType = mapData.type;
          MapRoadUtils.instance.updateMapInfo(mapData.mapWidth, mapData.mapHeight, mapData.nodeWidth, mapData.nodeHeight, mapData.type);
          this._roadDic = {};
          var roadDataArr = this._mapData.roadDataArr;
          var len = this._mapData.roadDataArr.length;
          var len2 = this._mapData.roadDataArr[0].length;
          var value = 0;
          var dx = 0;
          var dy = 0;
          for (var i = 0; i < len; i++) {
            for (var j = 0; j < len2; j++) {
              value = roadDataArr[i][j];
              dx = j;
              dy = i;
              var node = MapRoadUtils.instance.getNodeByDerect(dx, dy);
              node.value = value;
              this._roadDic[node.cx + "_" + node.cy] = node;
            }
          }
          this._roadSeeker = new AStarRoadSeeker(this._roadDic);
        };
        _proto.updateRoadSeekerInfo = function updateRoadSeekerInfo(pathOptimize, pathQuadSeek) {
          this._roadSeeker.setPathOptimize(pathOptimize);
          this._roadSeeker.setPathQuadSeek(pathQuadSeek);
        };
        _proto.setRoadSeekerPassCondition = function setRoadSeekerPassCondition(callback) {
          this._roadSeeker.setRoadNodePassCondition(callback);
        };
        _proto.seekPath = function seekPath(startV2, targetV2) {
          var startNode = this.getRoadNodeByPixel(startV2.x, startV2.y);
          var targetNode = this.getRoadNodeByPixel(targetV2.x, targetV2.y);
          var roadNodeArray = this._roadSeeker.seekPath(startNode, targetNode);
          // const roadNodeArray: RoadNode[] = this._roadSeeker.seekPath2(startNode, targetNode);
          return roadNodeArray;
        };
        _proto.getRoadNodeByPixel = function getRoadNodeByPixel(px, py) {
          var point = MapRoadUtils.instance.getWorldPointByPixel(px, py);
          var node = this.getRoadNode(point.x, point.y);
          // if (this._mapType == MapType.Angle45) {
          //     node = this.getRoadNode(point.x, point.y);
          // }else if(this._mapType == MapType.Angle90) {
          //
          // }
          return node;
        };
        _proto.getRoadNode = function getRoadNode(cx, cy) {
          return this._roadSeeker.getRoadNode(cx, cy);
        };
        _createClass(PathFindingAgent, null, [{
          key: "instance",
          get: function get() {
            if (!this._instance) {
              this._instance = new PathFindingAgent();
            }
            return this._instance;
          }
        }]);
        return PathFindingAgent;
      }());
      PathFindingAgent._instance = void 0;
      window["PathFindingAgent"] = PathFindingAgent.instance;
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Player.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Character.ts'], function (exports) {
  var _inheritsLoose, _createClass, cclegacy, _decorator, Character, CharacterState;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }, function (module) {
      Character = module.default;
      CharacterState = module.CharacterState;
    }],
    execute: function () {
      var _dec, _class;
      cclegacy._RF.push({}, "c3d2cRxQ5ZKgoDAmYovesUc", "Player", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var Player = exports('default', (_dec = ccclass('Player'), _dec(_class = /*#__PURE__*/function (_Character) {
        _inheritsLoose(Player, _Character);
        function Player() {
          return _Character.apply(this, arguments) || this;
        }
        var _proto = Player.prototype;
        _proto.start = function start() {
          _Character.prototype.start.call(this);
        };
        _createClass(Player, [{
          key: "state",
          get: function get() {
            return this._state;
          },
          set: function set(value) {
            this._state = value;
            switch (this._state) {
              case CharacterState.idle:
                if (this.skeleton) {
                  this.skeleton.setAnimation(0, "stand2", true);
                }
                break;
              case CharacterState.walk:
                // this.movieClip.begin = 6;
                // this.movieClip.end = 12;

                if (this.skeleton) {
                  this.skeleton.setAnimation(0, "run", true);
                }
                break;
              case CharacterState.sitdown:
                // this.movieClip.begin = 12;
                // this.movieClip.end = 18;
                break;
              case CharacterState.sitdown_walk:
                // this.movieClip.begin = 18;
                // this.movieClip.end = 24;
                break;
            }
          }
        }]);
        return Player;
      }(Character)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Pool.ts", ['cc', './DestroyUtils.ts'], function (exports) {
  var cclegacy, DestroyUtils;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      DestroyUtils = module.DestroyUtils;
    }],
    execute: function () {
      cclegacy._RF.push({}, "ed13cb+DsJKEYSIjEHK1Gsw", "Pool", undefined);

      /**
       * @fileName Pool.ts
       * @author zhangqiong
       * @date 2024/12/27 20:16:49"
       * @description
       */
      var Pool = exports('Pool', /*#__PURE__*/function () {
        function Pool(clazz, maxIdle, hasStatus) {
          if (maxIdle === void 0) {
            maxIdle = 100;
          }
          if (hasStatus === void 0) {
            hasStatus = false;
          }
          this.$clazz = void 0;
          this.$idles = void 0;
          this.$maxIdle = void 0;
          this.$hasStatus = void 0;
          this.isDestroy = false;
          this.$idles = [];
          this.$clazz = clazz;
          this.$maxIdle = maxIdle;
          this.$hasStatus = hasStatus;
        }
        var _proto = Pool.prototype;
        _proto.create = function create() {
          var $tempObj;
          if (this.$idles.length == 0) $tempObj = new this.$clazz();else $tempObj = this.$idles.pop();

          //添加垃圾代码

          //具备激活接口的对象
          if (this.$hasStatus && $tempObj.hasOwnProperty("activate")) $tempObj["activate"]();
          return $tempObj;
        };
        _proto.destroy = function destroy(o) {
          this.isDestroy = true;
          for (var i = 0; i < this.$idles.length; i++) {
            DestroyUtils.destroy(this.$idles[i]);
          }
          this.$idles = null;
        };
        _proto.release = function release(obj) {
          if (this.$idles.length > this.$maxIdle) {
            DestroyUtils.destroy(obj);
            //添加垃圾代码
          } else {
            if (this.$hasStatus && obj.hasOwnProperty("passivate")) obj["passivate"]();
            this.$idles.push(obj);
          }
        };
        _proto.clear = function clear() {
          // destroy();
          this.$idles = [];
        };
        _proto.isFull = function isFull() {
          if (this.$idles.length > this.$maxIdle) {
            return true;
          }
          return false;
        };
        _proto.getNumIdle = function getNumIdle() {
          return this.$idles.length;
        };
        return Pool;
      }());
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/QuadTree.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './AreaType.ts'], function (exports) {
  var _createForOfIteratorHelperLoose, cclegacy, math, Vec3, AreaType;
  return {
    setters: [function (module) {
      _createForOfIteratorHelperLoose = module.createForOfIteratorHelperLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      math = module.math;
      Vec3 = module.Vec3;
    }, function (module) {
      AreaType = module.AreaType;
    }],
    execute: function () {
      cclegacy._RF.push({}, "1a75eI3kcNDoZkJPVAa2DrA", "QuadTree", undefined);
      var AnchorPointType = exports('AnchorPointType', /*#__PURE__*/function (AnchorPointType) {
        AnchorPointType[AnchorPointType["Center"] = 0] = "Center";
        AnchorPointType[AnchorPointType["LeftDown"] = 1] = "LeftDown";
        return AnchorPointType;
      }({}));
      // QuadTreeRect.ts
      var QuadTreeRect = exports('QuadTreeRect', /*#__PURE__*/function () {
        function QuadTreeRect(x, y, width, height) {
          this.x = x;
          this.y = y;
          this.width = width;
          this.height = height;
        }

        // 检查目标矩形是否完全包含在当前矩形内
        var _proto = QuadTreeRect.prototype;
        _proto.contains = function contains(target, anchorType) {
          if (anchorType === void 0) {
            anchorType = AnchorPointType.Center;
          }
          var contain = false;
          if (anchorType == AnchorPointType.LeftDown) {
            // 矩形 A 的边界
            var ALeft = this.x;
            var ARight = this.x + this.width;
            var ABottom = this.y;
            var ATop = this.y + this.height;

            // 矩形 B 的边界
            var BLeft = target.x;
            var BRight = target.x + target.width;
            var BBottom = target.y;
            var BTop = target.y + target.height;

            // 检查矩形 A 是否包含矩形 B
            return ALeft <= BLeft && ARight >= BRight && ABottom <= BBottom && ATop >= BTop;
          } else if (anchorType == AnchorPointType.Center) {
            contain = Math.abs(target.x - this.x) + target.width / 2 <= this.width / 2 && Math.abs(target.y - this.y) + target.height / 2 <= this.height / 2;
          }
          return contain;
        }

        // 检查两个矩形是否相交
        ;

        _proto.intersects = function intersects(target, anchorType) {
          if (anchorType === void 0) {
            anchorType = AnchorPointType.Center;
          }
          var intersect = false;
          if (anchorType == AnchorPointType.Center) {
            intersect = Math.abs(target.x - this.x) <= (this.width + target.width) / 2 && Math.abs(target.y - this.y) <= (this.height + target.height) / 2;
          } else if (anchorType == AnchorPointType.LeftDown) {
            // 矩形 A 的边界
            var ALeft = target.x;
            var ARight = target.x + target.width;
            var ABottom = target.y;
            var ATop = target.y + target.height;

            // 矩形 B 的边界
            var BLeft = this.x;
            var BRight = this.x + this.width;
            var BBottom = this.y;
            var BTop = this.y + this.height;

            // 检查水平重叠
            var horizontalOverlap = ARight > BLeft && ALeft < BRight;

            // 检查垂直重叠
            var verticalOverlap = ATop > BBottom && ABottom < BTop;

            // 如果水平和垂直都有重叠，则两个矩形相交
            intersect = horizontalOverlap && verticalOverlap;
          }
          return intersect;
        };
        _proto.getIsInRange = function getIsInRange(target, radian, anchorType) {
          if (anchorType === void 0) {
            anchorType = AnchorPointType.Center;
          }
          var targetPos = math.v3(target.x, target.y, 0);
          var curPos = math.v3(this.x, this.y);
          var distance = Vec3.distance(curPos, targetPos);
          return distance < radian;
        };
        return QuadTreeRect;
      }());
      var QuadTree = exports('QuadTree', /*#__PURE__*/function () {
        function QuadTree(rect, maxCount, maxDepth, anchorPointType) {
          if (maxCount === void 0) {
            maxCount = 10;
          }
          if (maxDepth === void 0) {
            maxDepth = 5;
          }
          if (anchorPointType === void 0) {
            anchorPointType = AnchorPointType.Center;
          }
          this.children = [null, null, null, null];
          this.objects = [];
          this.divided = false;
          this.depth = 0;
          this.rect = void 0;
          this.MAX_COUNT = 10;
          this.MAX_DEPTH = 5;
          this.anchorPointType = void 0;
          this.rect = rect;
          this.MAX_COUNT = maxCount;
          this.MAX_DEPTH = maxDepth;
          this.anchorPointType = anchorPointType;
        }

        // 插入对象
        var _proto2 = QuadTree.prototype;
        _proto2.insert = function insert(object) {
          if (!this.rect.contains(object.rect, this.anchorPointType) && !this.rect.intersects(object.rect, this.anchorPointType)) {
            return false; // 对象不在当前节点范围内
          }

          if (this.objects.length < this.MAX_COUNT) {
            this.objects.push(object);
            return true;
          }
          if (this.depth >= this.MAX_DEPTH) {
            return false; // 达到最大深度，无法分裂
          }

          if (!this.divided) {
            this.divide();
          }
          for (var _iterator = _createForOfIteratorHelperLoose(this.children), _step; !(_step = _iterator()).done;) {
            var child = _step.value;
            if (child != null && child.insert(object)) {
              return true;
            }
          }
          return false;
        };
        _proto2.getTargetIndex = function getTargetIndex(node) {
          var X = this.rect.x;
          var Y = this.rect.y;
          var halfWidth = this.rect.width / 2;
          var halfHeight = this.rect.height / 2;
          var min_x = node.rect.x - node.rect.width / 2;
          var min_y = node.rect.y - node.rect.height / 2;
          var max_x = node.rect.x + node.rect.width / 2;
          var max_y = node.rect.y + node.rect.height / 2;
          if (min_x > X + halfWidth || max_x < X - halfWidth || min_y > Y + halfHeight || max_y < Y - halfHeight) return 0;
          var idx = 0;
          var IsLeft = min_x <= X ? true : false;
          var IsRight = max_x >= X ? true : false;
          var IsBottom = min_y <= Y ? true : false;
          var IsTop = max_y >= Y ? true : false;
          if (IsLeft) {
            if (IsTop) idx |= AreaType.LT;
            if (IsBottom) idx |= AreaType.LB;
          }
          if (IsRight) {
            if (IsTop) idx |= AreaType.RT;
            if (IsBottom) idx |= AreaType.RB;
          }
          return idx;
        }

        // 分裂当前节点为四个象限
        ;

        _proto2.divide = function divide() {
          var _this$rect = this.rect,
            x = _this$rect.x,
            y = _this$rect.y,
            width = _this$rect.width,
            height = _this$rect.height;
          var halfWidth = width / 2;
          var halfHeight = height / 2;
          var half2Width = halfWidth / 2;
          var half2Height = halfHeight / 2;
          if (this.anchorPointType == AnchorPointType.Center) {
            this.children[0] = new QuadTree(new QuadTreeRect(x - half2Width, y + half2Height, halfWidth, halfHeight), this.MAX_COUNT, this.MAX_DEPTH);
            this.children[1] = new QuadTree(new QuadTreeRect(x + half2Width, y + half2Height, halfWidth, halfHeight), this.MAX_COUNT, this.MAX_DEPTH);
            this.children[2] = new QuadTree(new QuadTreeRect(x - half2Width, y - half2Height, halfWidth, halfHeight), this.MAX_COUNT, this.MAX_DEPTH);
            this.children[3] = new QuadTree(new QuadTreeRect(x + half2Width, y - half2Height, halfWidth, halfHeight), this.MAX_COUNT, this.MAX_DEPTH);
          } else if (this.anchorPointType == AnchorPointType.LeftDown) {
            this.children[0] = new QuadTree(new QuadTreeRect(x, y + halfHeight, halfWidth, halfHeight), this.MAX_COUNT, this.MAX_DEPTH, this.anchorPointType);
            this.children[1] = new QuadTree(new QuadTreeRect(x + halfWidth, y + halfHeight, halfWidth, halfHeight), this.MAX_COUNT, this.MAX_DEPTH, this.anchorPointType);
            this.children[2] = new QuadTree(new QuadTreeRect(x, y, halfWidth, halfHeight), this.MAX_COUNT, this.MAX_DEPTH, this.anchorPointType);
            this.children[3] = new QuadTree(new QuadTreeRect(x + halfWidth, y, halfWidth, halfHeight), this.MAX_COUNT, this.MAX_DEPTH, this.anchorPointType);
          }
          this.divided = true;
          this.depth++;
        }

        // 查询指定范围内的对象
        ;

        _proto2.query = function query(range, found) {
          if (found === void 0) {
            found = [];
          }
          if (!this.rect.contains(range, this.anchorPointType) && !this.rect.intersects(range, this.anchorPointType)) {
            return found; // 范围不在当前节点内
          }

          for (var _iterator2 = _createForOfIteratorHelperLoose(this.objects), _step2; !(_step2 = _iterator2()).done;) {
            var obj = _step2.value;
            if (range.intersects(obj.rect, this.anchorPointType)) {
              found.push(obj);
            }
          }
          if (this.divided) {
            for (var _iterator3 = _createForOfIteratorHelperLoose(this.children), _step3; !(_step3 = _iterator3()).done;) {
              var child = _step3.value;
              if (child) {
                child.query(range, found);
              }
            }
          }
          return found;
        };
        _proto2.queryInRange = function queryInRange(range, radian, found) {
          if (found === void 0) {
            found = [];
          }
          if (!this.rect.contains(range, this.anchorPointType)) {
            return found; // 范围不在当前节点内
          }

          for (var _iterator4 = _createForOfIteratorHelperLoose(this.objects), _step4; !(_step4 = _iterator4()).done;) {
            var obj = _step4.value;
            if (range.getIsInRange(obj.rect, radian, this.anchorPointType)) {
              found.push(obj);
            }
          }
          if (this.divided) {
            for (var _iterator5 = _createForOfIteratorHelperLoose(this.children), _step5; !(_step5 = _iterator5()).done;) {
              var child = _step5.value;
              if (child) {
                child.queryInRange(range, radian, found);
              }
            }
          }
          return found;
        };
        _proto2.getAllChildNodes = function getAllChildNodes(qtList) {
          qtList.push(this);
          for (var i = 0; i < this.children.length; ++i) {
            var child = this.children[i];
            if (child) {
              child.getAllChildNodes(qtList);
            }
          }
        };
        _proto2.clear = function clear() {
          // 清除当前节点存储的对象
          this.objects.length = 0;

          // 递归清除子节点
          for (var i = 0; i < this.children.length; i++) {
            if (this.children[i]) {
              this.children[i].clear(); // 递归清除子节点
              this.children[i] = null; // 释放子节点
            }
          }

          // 重置分裂状态
          this.divided = false;
          this.depth = 0;
        };
        _proto2.remove = function remove(node) {
          var isRemove = false;
          if (!this.rect.contains(node.rect, this.anchorPointType) && !this.rect.intersects(node.rect, this.anchorPointType)) {
            return isRemove;
          }
          var index = this.objects.indexOf(node);
          if (index > -1) {
            this.objects.splice(index, 1);
            isRemove = true;
          }
          for (var i = 0; i < this.children.length; i++) {
            if (this.children[i]) {
              this.children[i].remove(node); // 递归清除子节点
            }
          }

          return isRemove;
        };
        return QuadTree;
      }());
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/QuadTreeTest.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './QuadTree.ts', './GameElement.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Prefab, Graphics, view, input, Input, NodeEventType, Color, KeyCode, instantiate, math, Component, QuadTreeRect, QuadTree, GameElement;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Prefab = module.Prefab;
      Graphics = module.Graphics;
      view = module.view;
      input = module.input;
      Input = module.Input;
      NodeEventType = module.NodeEventType;
      Color = module.Color;
      KeyCode = module.KeyCode;
      instantiate = module.instantiate;
      math = module.math;
      Component = module.Component;
    }, function (module) {
      QuadTreeRect = module.QuadTreeRect;
      QuadTree = module.QuadTree;
    }, function (module) {
      GameElement = module.GameElement;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3;
      cclegacy._RF.push({}, "8c2a26ybO9FPokS9uAmh6yv", "QuadTreeTest", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var QuadTreeTest = exports('QuadTreeTest', (_dec = ccclass('QuadTreeTest'), _dec2 = property(Prefab), _dec3 = property(GameElement), _dec4 = property(Graphics), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(QuadTreeTest, _Component);
        function QuadTreeTest() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "elementPrefab", _descriptor, _assertThisInitialized(_this));
          _this.quadTree = null;
          _this.size = void 0;
          _this.eleList = new Array();
          _this.IsShow = true;
          _this.qtList = void 0;
          _this.clickList = void 0;
          _this.idIndex = 0;
          _initializerDefineProperty(_this, "myElement", _descriptor2, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "graphics", _descriptor3, _assertThisInitialized(_this));
          _this.radius = 200;
          _this.count = 20;
          return _this;
        }
        var _proto = QuadTreeTest.prototype;
        _proto.onLoad = function onLoad() {
          // this.graphics = this.getComponent(Graphics);
          this.size = view.getViewportRect();
          var rect = new QuadTreeRect(0, 0, this.size.width, this.size.height);
          this.quadTree = new QuadTree(rect);
          this.eleList = [];
          this.qtList = [];
          this.clickList = [];
          input.on(Input.EventType.KEY_DOWN, this.onKeyDown, this);
          this.myElement = this.CreateElemnt(null, true);

          // this.CreateElemnt(math.v3(100, 100, 0))

          this.node.on(NodeEventType.MOUSE_DOWN, this.onMouseDown, this);

          // for (let i: number = 0; i < this.count; i++){
          //     const angle: number = (2 * Math.PI / this.count) * i;
          //     const x: number = this.myElement.node.position.x + this.radius * Math.cos(angle);
          //     const y: number = this.myElement.node.position.y + this.radius * Math.sin(angle);
          //     this.CreateElemnt(math.v3(x, y, 0));
          // }
        };

        _proto.drawSize = function drawSize() {
          this.graphics.clear();
          this.graphics.fillColor = Color.RED;
          this.graphics.strokeColor = Color.RED;
          this.graphics.lineWidth = 10;
          this.graphics.rect(-this.size.width / 2, -this.size.height / 2, this.size.width, this.size.height);
          this.graphics.stroke();
        };
        _proto.onMouseDown = function onMouseDown(event) {
          console.log("输出点击事件坐标", event.getLocationX(), event.getLocationY());
        };
        _proto.onKeyDown = function onKeyDown(event) {
          switch (event.keyCode) {
            case KeyCode.ARROW_LEFT:
              for (var i = 0; i < 5000; i++) {
                this.CreateElemnt();
              }
              break;
            case KeyCode.ARROW_RIGHT:
              for (var _i = 0; _i < 50; _i++) {
                this.CreateElemnt();
              }
              break;
            case KeyCode.ARROW_UP:
              this.myElement = this.CreateElemnt();
              break;
          }
        };
        _proto.start = function start() {
          this.drawSize();
        };
        _proto.update = function update(deltaTime) {
          this.TreeUpdate();
        }

        // private void FixedUpdate() {

        // }
        ;

        _proto.TreeUpdate = function TreeUpdate() {
          // TreeRoot.Clear();
          this.quadTree.clear();
          this.qtList.length = 0;
          for (var i = 0; i < this.clickList.length; i++) {
            this.clickList[i].Click(false);
          }
          this.clickList.length = 0;
          for (var index = 0; index < this.eleList.length; index++) {
            var element = this.eleList[index];
            this.quadTree.insert(element);
          }
          if (this.myElement) {
            this.clickList = this.quadTree.query(this.myElement.rect);
            for (var _i2 = 0; _i2 < this.clickList.length; _i2++) {
              this.clickList[_i2].Click(true);
            }
          }
          if (this.IsShow) {
            var qtList = [];
            this.quadTree.getAllChildNodes(qtList);
            var rects = qtList.map(function (e) {
              return e.rect;
            }, this);
            this.drawRect(rects);
            // for (let i = 0; i < qtList.length; ++i) {

            //     this.drawRect(qtList[i].rect);
            // }
          }
        };

        _proto.drawRect = function drawRect(rect) {
          // this.drawSize();
          this.graphics.clear();
          for (var index = 0; index < rect.length; index++) {
            var element = rect[index];
            this.graphics.fillColor = Color.RED;
            this.graphics.strokeColor = Color.YELLOW;
            this.graphics.lineWidth = 5;
            var x = element.x - element.width / 2;
            var y = element.y - element.height / 2;
            this.graphics.circle(element.x, element.y, 10);
            this.graphics.fill();
            this.graphics.rect(x, y, element.width, element.height);
            this.graphics.stroke();
          }
        };
        _proto.CreateElemnt = function CreateElemnt(pos, isMyself) {
          if (isMyself === void 0) {
            isMyself = false;
          }
          var node = instantiate(this.elementPrefab);
          var gameElement = node.getComponent(GameElement);
          node.name = "Ele " + this.idIndex++;
          gameElement.Init(this.size, isMyself);
          if (!pos) {
            pos = math.v3(0, 0, 0);
          }
          node.setPosition(pos);
          node.parent = this.node;
          if (!isMyself) {
            this.eleList.push(gameElement);
          }
          return gameElement;
        };
        return QuadTreeTest;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "elementPrefab", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "myElement", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "graphics", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/RemoveOrUpLevel.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Utils.ts', './TowerConfig.ts', './TowerLauncher.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, SpriteFrame, NodeEventType, Sprite, Label, Component, Utils, TowerConfig, TowerLauncher;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      SpriteFrame = module.SpriteFrame;
      NodeEventType = module.NodeEventType;
      Sprite = module.Sprite;
      Label = module.Label;
      Component = module.Component;
    }, function (module) {
      Utils = module.default;
    }, function (module) {
      TowerConfig = module.TowerConfig;
    }, function (module) {
      TowerLauncher = module.TowerLauncher;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;
      cclegacy._RF.push({}, "6e98e6rQmFOiIasiiJtk+VC", "RemoveOrUpLevel", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var RemoveOrUpLevel = exports('RemoveOrUpLevel', (_dec = ccclass('RemoveOrUpLevel'), _dec2 = property([SpriteFrame]), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(RemoveOrUpLevel, _Component);
        function RemoveOrUpLevel() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.upCostLabel = null;
          _this.upCostSprite = null;
          _this.removeBackLabel = null;
          _initializerDefineProperty(_this, "upStateSpriteFrames", _descriptor, _assertThisInitialized(_this));
          _this.buildInfo = null;
          _this.isMaxLevel = false;
          _this.handlerCall = void 0;
          _this.handlerObj = void 0;
          return _this;
        }
        var _proto = RemoveOrUpLevel.prototype;
        _proto.onLoad = function onLoad() {
          var upCostNode = Utils.FindChildByName(this.node, "upCostLevel");
          var removeBackNode = Utils.FindChildByName(this.node, "removeBackLabel");
          var upNode = Utils.FindChildByName(this.node, "up");
          var removeNode = Utils.FindChildByName(this.node, "remove");
          if (upNode) {
            upNode.on(NodeEventType.TOUCH_START, this.onClickUpLevel, this);
            this.upCostSprite = upNode.getComponent(Sprite);
          }
          if (removeNode) {
            removeNode.on(NodeEventType.TOUCH_START, this.onClickRemoveTower, this);
          }
          if (upCostNode) {
            this.upCostLabel = upCostNode.getComponent(Label);
          }
          if (removeBackNode) {
            this.removeBackLabel = removeBackNode.getComponent(Label);
          }
        };
        _proto.start = function start() {};
        _proto.onClickUpLevel = function onClickUpLevel(event) {
          if (!this.buildInfo) {
            return;
          }
          if (!this.buildInfo.tower) {
            return;
          }
          if (this.isMaxLevel) {
            return;
          }
          if (this.handlerCall && this.handlerObj) {
            this.handlerCall.call(this.handlerObj, 1, this.buildInfo);
          }
        };
        _proto.onClickRemoveTower = function onClickRemoveTower(event) {
          if (!this.buildInfo) {
            return;
          }
          if (!this.buildInfo.tower) {
            return;
          }
          if (this.handlerCall && this.handlerObj) {
            this.handlerCall.call(this.handlerObj, 2, this.buildInfo);
          }
        };
        _proto.updateInfo = function updateInfo(buildInfo, handlerCall, callObj) {
          if (handlerCall === void 0) {
            handlerCall = null;
          }
          if (callObj === void 0) {
            callObj = null;
          }
          this.buildInfo = buildInfo;
          this.handlerCall = handlerCall;
          this.handlerObj = callObj;
          var tower = this.buildInfo.tower;
          var spriteFrameIndex = 0;
          if (this.buildInfo && tower) {
            var currentLevel = tower.level;
            var nextLevelData = TowerConfig.instance.getTowerConfig(tower.towerId, currentLevel + 1);
            if (nextLevelData) {
              spriteFrameIndex = TowerLauncher.instance.value >= nextLevelData.buildCost ? 0 : 1;
            } else {
              spriteFrameIndex = 2;
            }
            this.upCostLabel.node.active = spriteFrameIndex != 2;
            this.isMaxLevel = spriteFrameIndex == 2;
            if (this.upCostSprite) {
              this.upCostSprite.spriteFrame = this.upStateSpriteFrames[spriteFrameIndex];
            }
            if (this.upCostLabel) {
              this.upCostLabel.string = nextLevelData ? nextLevelData.buildCost.toString() : '0';
            }
            var currentData = TowerConfig.instance.getTowerConfig(tower.towerId, currentLevel);
            if (this.removeBackLabel) {
              this.removeBackLabel.string = currentData ? currentData.removeBack.toString() : "0";
            }
            this.buildInfo.removeBackCost = currentData ? currentData.removeBack : 0;
            this.buildInfo.upLevelCost = nextLevelData ? nextLevelData.buildCost : 0;
          }
        };
        _proto.update = function update(deltaTime) {};
        return RemoveOrUpLevel;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "upStateSpriteFrames", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Render.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './config.ts', './Block.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Prefab, SpriteFrame, Node, Sprite, UITransform, math, instantiate, Component, config, Block;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Prefab = module.Prefab;
      SpriteFrame = module.SpriteFrame;
      Node = module.Node;
      Sprite = module.Sprite;
      UITransform = module.UITransform;
      math = module.math;
      instantiate = module.instantiate;
      Component = module.Component;
    }, function (module) {
      config = module.config;
    }, function (module) {
      Block = module.Block;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5;
      cclegacy._RF.push({}, "7f7ebjS2VtINIkslZ9v65Le", "Render", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var Render = exports('Render', (_dec = ccclass('Render'), _dec2 = property(Prefab), _dec3 = property([SpriteFrame]), _dec4 = property(SpriteFrame), _dec5 = property(Node), _dec6 = property(Node), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(Render, _Component);
        function Render() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "item", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "itemSpriteFrame", _descriptor2, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "backGroundItemSpriteFrame", _descriptor3, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "gamePanel", _descriptor4, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "backgroundPanel", _descriptor5, _assertThisInitialized(_this));
          _this.itemArray = [];
          _this.backGroundArray = [];
          return _this;
        }
        var _proto = Render.prototype;
        _proto.onLoad = function onLoad() {};
        _proto.init = function init() {
          this.itemArray = [];
          this.backGroundArray = [];
          var height = config.row * config.blockHeight;
          var width = config.col * config.blockWidth;
          var panelHeight = 1334;
          var diffH = Math.max(panelHeight - height, 0);
          for (var i = 0; i < config.row; i++) {
            this.itemArray[i] = [];
            this.backGroundArray[i] = [];
            for (var j = 0; j < config.col; j++) {
              var x = -width / 2 + config.blockWidth / 2 + j * config.blockWidth;
              var y = height / 2 - config.blockHeight / 2 - i * config.blockHeight - diffH / 2;
              var backItem = this.backGroundArray[i][j];
              if (!backItem) {
                backItem = this.createBackGroundItem(x, y);
              }
              backItem.getComponent(Sprite).spriteFrame = this.backGroundItemSpriteFrame;
              this.backGroundArray[i][j] = backItem;
              var item = this.itemArray[i][j];
              if (!item) {
                item = this.createItem(x, y);
              }
              this.itemArray[i][j] = item;
            }
          }
        };
        _proto.createBackGroundItem = function createBackGroundItem(x, y) {
          var item = new Node();
          var sprite = item.addComponent(Sprite);
          sprite.spriteFrame = this.backGroundItemSpriteFrame;
          sprite.sizeMode = Sprite.SizeMode.CUSTOM;
          this.node.addChild(item);
          item.setPosition(x, y);
          item.addComponent(UITransform).contentSize = math.size(config.blockWidth, config.blockHeight);
          return item;
        };
        _proto.createItem = function createItem(x, y) {
          var item = instantiate(this.item);
          this.gamePanel.addChild(item);
          item.getComponent(Sprite).sizeMode = Sprite.SizeMode.CUSTOM;
          item.getComponent(UITransform).contentSize = math.size(config.blockWidth, config.blockHeight);
          item.setPosition(x, y);
          return item;
        };
        _proto.render = function render(dataArray) {
          for (var i = 0; i < config.row; i++) {
            for (var j = 0; j < config.col; j++) {
              var color = dataArray[i][j];
              this.itemArray[i][j].getComponent(Sprite).spriteFrame = this.itemSpriteFrame[color - 1];
            }
          }
        };
        _proto.onDestroy = function onDestroy() {
          for (var index = 0; index < this.itemArray.length; index++) {
            var elements = this.itemArray[index];
            for (var j = 0; j < elements.length; j++) {
              var element = elements[j];
              if (element) {
                element.destroy();
              }
            }
          }
          this.itemArray = [];
        };
        _proto.playEliminateEff = function playEliminateEff(eliminateVec2) {
          var _this2 = this;
          return new Promise(function (resolve, reject) {
            var result = 0;
            for (var i = 0; i < eliminateVec2.length; i++) {
              var v2 = eliminateVec2[i];
              var block = _this2.itemArray[v2.x][v2.y].getComponent(Block);
              if (block) {
                block.playEff().then(function (r) {
                  if (r) {
                    result += 1;
                    if (result == eliminateVec2.length) {
                      resolve(true);
                    }
                  }
                });
              }
            }
          });
        };
        return Render;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "item", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return undefined;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "itemSpriteFrame", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "backGroundItemSpriteFrame", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return undefined;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "gamePanel", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return undefined;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "backgroundPanel", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return undefined;
        }
      })), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/RoadNode.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _createClass, cclegacy;
  return {
    setters: [function (module) {
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "a55e93n9ZJI4pyKrRPBGwfB", "RoadNode", undefined);
      var RoadNode = exports('default', /*#__PURE__*/function () {
        function RoadNode() {
          this._px = void 0;
          this._py = void 0;
          this._cx = void 0;
          this._cy = void 0;
          this._dx = void 0;
          this._dy = void 0;
          this._value = void 0;
          this._f = void 0;
          this._g = void 0;
          this._h = void 0;
          this._parent = void 0;
          //-------------二堆叉存储结构-----------------
          this._treeParent = null;
          //二堆叉结构的父节点
          this._left = null;
          //二堆叉结构的左子节点
          this._right = null;
          //二堆叉结构的右子节点
          this._openTag = 0;
          //是否在开启列表标记
          this._closeTag = 0;
        }
        var _proto = RoadNode.prototype;
        //是否在关闭列表标记
        _proto.resetTree = function resetTree() {
          this._treeParent = null;
          this._left = null;
          this._right = null;
        };
        _createClass(RoadNode, [{
          key: "px",
          get: function get() {
            return this._px;
          },
          set: function set(value) {
            this._px = value;
          }
        }, {
          key: "py",
          get: function get() {
            return this._py;
          },
          set: function set(value) {
            this._py = value;
          }
        }, {
          key: "cx",
          get: function get() {
            return this._cx;
          },
          set: function set(value) {
            this._cx = value;
          }
        }, {
          key: "cy",
          get: function get() {
            return this._cy;
          },
          set: function set(value) {
            this._cy = value;
          }
        }, {
          key: "dx",
          get: function get() {
            return this._dx;
          },
          set: function set(value) {
            this._dx = value;
          }
        }, {
          key: "dy",
          get: function get() {
            return this._dy;
          },
          set: function set(value) {
            this._dy = value;
          }
        }, {
          key: "value",
          get: function get() {
            return this._value;
          },
          set: function set(value) {
            this._value = value;
          }
        }, {
          key: "f",
          get: function get() {
            return this._f;
          },
          set: function set(value) {
            this._f = value;
          }
        }, {
          key: "g",
          get: function get() {
            return this._g;
          },
          set: function set(value) {
            this._g = value;
          }
        }, {
          key: "h",
          get: function get() {
            return this._h;
          },
          set: function set(value) {
            this._h = value;
          }
        }, {
          key: "parent",
          get: function get() {
            return this._parent;
          },
          set: function set(value) {
            this._parent = value;
          }

          //-------------二堆叉存储结构-----------------

          /**
           * 二堆叉结构的父节点
           */
        }, {
          key: "treeParent",
          get: function get() {
            return this._treeParent;
          },
          set: function set(value) {
            this._treeParent = value;
          }

          /**
           * 二堆叉结构的左子节点
           */
        }, {
          key: "left",
          get: function get() {
            return this._left;
          },
          set: function set(value) {
            this._left = value;
          }

          /**
           * 二堆叉结构的右子节点
           */
        }, {
          key: "right",
          get: function get() {
            return this._right;
          },
          set: function set(value) {
            this._right = value;
          }

          /**
           * 是否在开启列表标记
           */
        }, {
          key: "openTag",
          get: function get() {
            return this._openTag;
          },
          set: function set(value) {
            this._openTag = value;
          }

          /**
           * 是否在关闭列表标记
           */
        }, {
          key: "closeTag",
          get: function get() {
            return this._closeTag;
          },
          set: function set(value) {
            this._closeTag = value;
          }
        }]);
        return RoadNode;
      }());
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/RoleEntity.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Utils.ts', './RPGConfig.ts', './Enum3.ts'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, dragonBones, Sprite, math, ProgressBar, Component, Utils, RPGConfig, RPGModelDirection;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      dragonBones = module.dragonBones;
      Sprite = module.Sprite;
      math = module.math;
      ProgressBar = module.ProgressBar;
      Component = module.Component;
    }, function (module) {
      Utils = module.default;
    }, function (module) {
      RPGConfig = module.RPGConfig;
    }, function (module) {
      RPGModelDirection = module.RPGModelDirection;
    }],
    execute: function () {
      var _dec, _class;
      cclegacy._RF.push({}, "9dd40M7uuZB+r5LdWJ10Id2", "RoleEntity", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var RoleEntity = exports('RoleEntity', (_dec = ccclass('RoleEntity'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(RoleEntity, _Component);
        function RoleEntity() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.spNode = void 0;
          _this.progressNode = void 0;
          _this.modelData = void 0;
          _this.diretion = void 0;
          _this.currentDiretion = void 0;
          return _this;
        }
        var _proto = RoleEntity.prototype;
        _proto.onLoad = function onLoad() {
          this.spNode = Utils.FindChildByName(this.node, "player");
          this.progressNode = Utils.FindChildByName(this.node, "ProgressBar");
        };
        _proto.start = function start() {};
        _proto.update = function update(deltaTime) {};
        _proto.playAnimation = function playAnimation(name, time) {
          var _this2 = this;
          if (time === void 0) {
            time = 1;
          }
          return new Promise(function (resolve, reject) {
            if (_this2.spNode) {
              var dr = _this2.spNode.getComponent(dragonBones.ArmatureDisplay);
              if (dr) {
                if (time != 0) {
                  dr.addEventListener(dragonBones.EventObject.COMPLETE, function () {
                    resolve(true);
                  }, _this2);
                  dr.playAnimation(name, time);
                } else {
                  dr.playAnimation(name, time);
                  resolve(true);
                }
              } else {
                reject(false);
              }
            } else {
              reject(false);
            }
          });
        };
        _proto.setModeData = function setModeData(data) {
          this.modelData = data;
          this.diretion = data.camp == 0 ? RPGModelDirection.Left : RPGModelDirection.Right;
          this.currentDiretion = this.diretion;
          if (data.camp == 1) {
            this.node.setScale(-1, 1);
          }
          // this.setColor(data.index);
          this.setHp(data.hp / 100);
        }

        /**
         * 转换方向
         * @returns 
         */;
        _proto.rotationDiretion = function rotationDiretion() {
          var newDiretion = null;
          if (this.currentDiretion == RPGModelDirection.Left) {
            newDiretion = RPGModelDirection.Right;
          } else if (this.currentDiretion == RPGModelDirection.Right) {
            newDiretion = RPGModelDirection.Left;
          }
          var sacleX = 1;
          if (newDiretion === RPGModelDirection.Right) {
            sacleX = -1;
          }
          this.node.setScale(sacleX, 1);
          this.currentDiretion = newDiretion;
          return true;
        };
        _proto.setColor = function setColor(index) {
          if (this.spNode) {
            var color = RPGConfig.ins.colors[index];
            this.spNode.getComponent(Sprite).color = math.color(color);
          }
        };
        _proto.setHp = function setHp(value) {
          if (this.progressNode) {
            var progress = this.progressNode.getComponent(ProgressBar);
            if (progress) {
              progress.progress = value;
            }
          }
        };
        return RoleEntity;
      }(Component)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/RoleEntity2.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './GameConst.ts', './GameEntity.ts'], function (exports) {
  var _inheritsLoose, _asyncToGenerator, _regeneratorRuntime, cclegacy, GameConst, GameEntity;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _asyncToGenerator = module.asyncToGenerator;
      _regeneratorRuntime = module.regeneratorRuntime;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      GameConst = module.GameConst;
    }, function (module) {
      GameEntity = module.GameEntity;
    }],
    execute: function () {
      cclegacy._RF.push({}, "ba1ccbSf4NP4K6oGNzcY9AN", "RoleEntity", undefined);

      /**
       * @fileName RoleEntity.ts
       * @author zhangqiong
       * @date 2024/12/27 19:28:02"
       * @description
       */
      var RoleEntity = exports('RoleEntity', /*#__PURE__*/function (_GameEntity) {
        _inheritsLoose(RoleEntity, _GameEntity);
        function RoleEntity() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _GameEntity.call.apply(_GameEntity, [this].concat(args)) || this;
          _this.data = void 0;
          _this.scaleSize = 0.4;
          _this.status = 0;
          return _this;
        }
        var _proto = RoleEntity.prototype;
        _proto.init = function init() {
          _GameEntity.prototype.init.call(this);
        };
        _proto.setData = /*#__PURE__*/function () {
          var _setData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(data) {
            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) switch (_context.prev = _context.next) {
                case 0:
                  this.data = data;
                  this.setId(data.getEntityId());
                  // this.setLayer(data.heroConfig.layer);
                  this.setLayer(GameConst.ROLE_LAYER);
                  this.setScale(this.scaleSize, this.scaleSize);
                  this.setSpeed(data.heroConfig.speed);
                case 5:
                case "end":
                  return _context.stop();
              }
            }, _callee, this);
          }));
          function setData(_x) {
            return _setData.apply(this, arguments);
          }
          return setData;
        }();
        return RoleEntity;
      }(GameEntity));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/RootLauncher.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, cclegacy, _decorator, Camera, Component;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Camera = module.Camera;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor, _class3;
      cclegacy._RF.push({}, "4b229WKsv1ASoYac5IFm/YW", "RootLauncher", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var RootLauncher = exports('RootLauncher', (_dec = ccclass('RootLauncher'), _dec2 = property(Camera), _dec(_class = (_class2 = (_class3 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(RootLauncher, _Component);
        function RootLauncher() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "mainCamera", _descriptor, _assertThisInitialized(_this));
          return _this;
        }
        var _proto = RootLauncher.prototype;
        _proto.onLoad = function onLoad() {
          RootLauncher._instance = this;
        };
        _proto.start = function start() {};
        _proto.update = function update(deltaTime) {};
        _createClass(RootLauncher, null, [{
          key: "instance",
          get: function get() {
            return RootLauncher._instance;
          }
        }]);
        return RootLauncher;
      }(Component), _class3._instance = null, _class3), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "mainCamera", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/RPGConfig.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _createClass, cclegacy, math;
  return {
    setters: [function (module) {
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      math = module.math;
    }],
    execute: function () {
      cclegacy._RF.push({}, "0fdecYzFzNBC6Oqjv7GU04j", "RPGConfig", undefined);
      var RPGStateType = exports('RPGStateType', /*#__PURE__*/function (RPGStateType) {
        RPGStateType[RPGStateType["Death"] = 0] = "Death";
        RPGStateType[RPGStateType["Await"] = 1] = "Await";
        RPGStateType[RPGStateType["Move"] = 2] = "Move";
        RPGStateType[RPGStateType["Attack"] = 3] = "Attack";
        return RPGStateType;
      }({}));
      var RPGConfig = exports('RPGConfig', /*#__PURE__*/function () {
        function RPGConfig() {
          this.leftDatas = void 0;
          this.rightDatas = void 0;
          this.colors = [];
          this.initData();
        }
        var _proto = RPGConfig.prototype;
        _proto.initData = function initData() {
          this.colors = ["#F7AEAE", "#9FADE4", "#E9E58A", "#B6D38B", "#8BD3BF", "#EC4727", "#D1B628", "#548B21", "#2EB19C", "#2E4DB1"];
          this.leftDatas = [{
            index: 0,
            attack: 30,
            def: 5,
            speed: 15,
            hp: 100,
            camp: 0,
            "long": false,
            pos: math.v2(-104.869, 232)
          }, {
            index: 1,
            attack: 35,
            def: 10,
            speed: 20,
            hp: 100,
            camp: 0,
            "long": false,
            pos: math.v2(-104.869, -37.535)
          }, {
            index: 2,
            attack: 40,
            def: 15,
            speed: 35,
            hp: 100,
            camp: 0,
            "long": false,
            pos: math.v2(-250, 389.228)
          }, {
            index: 3,
            attack: 55,
            def: 10,
            speed: 40,
            hp: 100,
            camp: 0,
            "long": false,
            pos: math.v2(-250, 161.407)
          }, {
            index: 4,
            attack: 40,
            def: 5,
            speed: 50,
            hp: 100,
            camp: 0,
            "long": false,
            pos: math.v2(-250, -98.502)
          }];
          this.rightDatas = [{
            index: 5,
            attack: 20,
            def: 5,
            speed: 15,
            hp: 100,
            camp: 1,
            "long": false,
            pos: math.v2(119.743, 232)
          }, {
            index: 6,
            attack: 35,
            def: 10,
            speed: 20,
            hp: 100,
            camp: 1,
            "long": false,
            pos: math.v2(119.743, -37.535)
          }, {
            index: 7,
            attack: 40,
            def: 15,
            speed: 35,
            hp: 100,
            camp: 1,
            "long": false,
            pos: math.v2(250, 389.228)
          }, {
            index: 8,
            attack: 45,
            def: 10,
            speed: 40,
            hp: 100,
            camp: 1,
            "long": false,
            pos: math.v2(250, 161.407)
          }, {
            index: 9,
            attack: 50,
            def: 5,
            speed: 50,
            hp: 100,
            camp: 1,
            "long": false,
            pos: math.v2(250, -98.502)
          }];
        };
        _createClass(RPGConfig, null, [{
          key: "ins",
          get: function get() {
            if (!this._inst) {
              this._inst = new RPGConfig();
            }
            return this._inst;
          }
        }]);
        return RPGConfig;
      }());
      RPGConfig._inst = void 0;
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/RPGGameManger.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Player.ts', './Npc.ts', './Monster.ts', './SpawnPoint.ts', './TransferDoor.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, cclegacy, _decorator, Prefab, director, instantiate, Vec3, Component, Player, Npc, Monster, SpawnPoint, TransferDoor;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Prefab = module.Prefab;
      director = module.director;
      instantiate = module.instantiate;
      Vec3 = module.Vec3;
      Component = module.Component;
    }, function (module) {
      Player = module.default;
    }, function (module) {
      Npc = module.Npc;
    }, function (module) {
      Monster = module.Monster;
    }, function (module) {
      SpawnPoint = module.default;
    }, function (module) {
      TransferDoor = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _class3;
      cclegacy._RF.push({}, "afedf1kUZVLlpxTaPHfKAcp", "RPGGameManger", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var RPGGameManger = exports('RPGGameManger', (_dec = ccclass('RPGGameManger'), _dec2 = property(Prefab), _dec3 = property(Prefab), _dec4 = property(Prefab), _dec5 = property(Prefab), _dec6 = property(Prefab), _dec(_class = (_class2 = (_class3 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(RPGGameManger, _Component);
        function RPGGameManger() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          /**
           * 玩家预制体
           */
          _initializerDefineProperty(_this, "playerPrefab", _descriptor, _assertThisInitialized(_this));
          /**
           * 怪物预制体
           */
          _initializerDefineProperty(_this, "monsterPrefab", _descriptor2, _assertThisInitialized(_this));
          /**
           * npc预制体
           */
          _initializerDefineProperty(_this, "npcPrefab", _descriptor3, _assertThisInitialized(_this));
          /**
           * 出生点预制体
           */
          _initializerDefineProperty(_this, "spawnPointPrefab", _descriptor4, _assertThisInitialized(_this));
          /**
           * 传送点预制体
           */
          _initializerDefineProperty(_this, "transferDoorPrefabs", _descriptor5, _assertThisInitialized(_this));
          return _this;
        }
        var _proto = RPGGameManger.prototype;
        _proto.onLoad = function onLoad() {
          if (!RPGGameManger._instance) {
            RPGGameManger._instance = this;
            director.addPersistRootNode(this.node);
            this.init();
          } else {
            this.node.destroy(); //场景里只能有一个GameManager,有多余的必须销毁
          }
        };

        _proto.getPlayer = function getPlayer() {
          var node = instantiate(this.playerPrefab);
          var player = node.getComponent(Player);
          player.node.position = new Vec3(0, 0, 0);
          player.node.active = true;
          return player;
        }

        /**
         * 获得npc
         * @param npcId 
         * @returns 
         */;
        _proto.getNPC = function getNPC() {
          var npc = instantiate(this.npcPrefab).getComponent(Npc);
          npc.node.active = true;
          npc.node.position = new Vec3(0, 0, 0);
          return npc;
        }

        /**
        * 获得怪物
        * @param monsterId 
        * @returns 
        */;
        _proto.getMonster = function getMonster() {
          var monster = instantiate(this.monsterPrefab).getComponent(Monster);
          monster.node.active = true;
          monster.node.position = new Vec3(0, 0, 0);
          return monster;
        }

        /**
        * 获得出生点资源
        * @returns 
        */;
        _proto.getSpawnPoint = function getSpawnPoint() {
          var spawnPoint = instantiate(this.spawnPointPrefab).getComponent(SpawnPoint);
          spawnPoint.node.active = true;
          spawnPoint.node.position = new Vec3(0, 0, 0);
          return spawnPoint;
        }

        /**
         * 获得传送点资源
         * @returns 
         */;
        _proto.getTransferDoor = function getTransferDoor(type) {
          var index = 0;
          if (type < this.transferDoorPrefabs.length) {
            index = type;
          }
          var transferDoor = instantiate(this.transferDoorPrefabs[index]).getComponent(TransferDoor);
          transferDoor.node.active = true;
          transferDoor.node.position = new Vec3(0, 0, 0);
          return transferDoor;
        };
        _proto.init = function init() {};
        _proto.start = function start() {};
        _proto.update = function update(deltaTime) {};
        _createClass(RPGGameManger, null, [{
          key: "instance",
          get: function get() {
            return RPGGameManger._instance;
          }
        }]);
        return RPGGameManger;
      }(Component), _class3._instance = void 0, _class3), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "playerPrefab", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "monsterPrefab", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "npcPrefab", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "spawnPointPrefab", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "transferDoorPrefabs", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      })), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/RPGGameScencePanel.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './BaseView.ts', './ViewRegisterMgr.ts', './PanelEnum.ts', './LayerManager.ts', './ViewConst.ts'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, BaseView, registerView, PanelType, LayerType, ViewConst;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }, function (module) {
      BaseView = module.default;
    }, function (module) {
      registerView = module.registerView;
    }, function (module) {
      PanelType = module.PanelType;
    }, function (module) {
      LayerType = module.LayerType;
    }, function (module) {
      ViewConst = module.default;
    }],
    execute: function () {
      var _dec, _class;
      cclegacy._RF.push({}, "59a6aEr6cZDF5T5BCO4Vp/x", "RPGGameScencePanel", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;

      /**
       * @fileName RPGGameScencePanel.ts
       * @author zhangqiong
       * @date 2025/01/18 16:33:20"
       * @description
       */
      var RPGGameScencePanel = exports('RPGGameScencePanel', (_dec = ccclass('RPGGameScencePanel'), _dec(_class = /*#__PURE__*/function (_BaseView) {
        _inheritsLoose(RPGGameScencePanel, _BaseView);
        function RPGGameScencePanel() {
          return _BaseView.apply(this, arguments) || this;
        }
        var _proto = RPGGameScencePanel.prototype;
        _proto.start = function start() {};
        _proto.update = function update(deltaTime) {};
        return RPGGameScencePanel;
      }(BaseView)) || _class));
      registerView({
        viewCls: RPGGameScencePanel,
        id: PanelType.RPGGameScencePanel,
        layer: LayerType.view,
        prefabPathPrefix: ViewConst.defaultPrefabPathPrefix + "Rpg/"
      });
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/RPGLauncher.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, Component;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class, _class2;
      cclegacy._RF.push({}, "f3556t0IwZKtIdYcW+oqHWW", "RPGLauncher", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var RPGLauncher = exports('RPGLauncher', (_dec = ccclass('RPGLauncher'), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(RPGLauncher, _Component);
        function RPGLauncher() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.seed = 5;
          _this.initSeed = 5;
          _this.logRandomArray = [];
          return _this;
        }
        var _proto = RPGLauncher.prototype;
        _proto.onLoad = function onLoad() {
          if (RPGLauncher.ins) {
            this.destroy();
            return;
          } else {
            RPGLauncher.ins = this;
          }
        };
        _proto.start = function start() {};
        _proto.update = function update(deltaTime) {};
        _proto.setRandomSeed = function setRandomSeed(seed) {
          this.initSeed = seed;
          console.error("收到随机数", this.initSeed);
        };
        _proto.seedRandom = function seedRandom() {
          if (this.logRandomArray.length < 30) {
            this.logRandomArray.push(this.seed);
          }
          this.seed = (this.seed * 9301 + 49297) % 233280;
          var value = this.seed / 233280.0;
          return value;
        }

        /**
            * 随机获得int整数 
            * @param minNum:最小范围(0开始)
            * @param maxNum:最大范围
            * @param stepLen:增加范围（整数，默认为1）
            * @return 
            */;
        _proto.randomInt = function randomInt(minNum, maxNum, stepLen) {
          if (maxNum === void 0) {
            maxNum = 0;
          }
          if (stepLen === void 0) {
            stepLen = 1;
          }
          if (minNum > maxNum) {
            var nTemp = minNum;
            minNum = maxNum;
            maxNum = nTemp;
          }
          var nDeltaRange = maxNum - minNum + 1 * stepLen;
          var nRandomNumber = this.seedRandom() * nDeltaRange;
          nRandomNumber += minNum;
          return Math.floor(nRandomNumber / stepLen) * stepLen;
        };
        return RPGLauncher;
      }(Component), _class2.ins = void 0, _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/RPGPanel.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './BaseView.ts', './ViewRegisterMgr.ts', './PanelEnum.ts', './LayerManager.ts', './RPGConfig.ts', './ViewConst.ts', './AssetMgr.ts', './RPGLauncher.ts', './Enum3.ts', './RoleEntity.ts'], function (exports) {
  var _inheritsLoose, _asyncToGenerator, _regeneratorRuntime, cclegacy, _decorator, tween, math, BaseView, registerView, PanelType, LayerType, RPGConfig, RPGStateType, ViewConst, AssetMgr, RPGLauncher, RPGModelAnimName, RoleEntity;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _asyncToGenerator = module.asyncToGenerator;
      _regeneratorRuntime = module.regeneratorRuntime;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      tween = module.tween;
      math = module.math;
    }, function (module) {
      BaseView = module.default;
    }, function (module) {
      registerView = module.registerView;
    }, function (module) {
      PanelType = module.PanelType;
    }, function (module) {
      LayerType = module.LayerType;
    }, function (module) {
      RPGConfig = module.RPGConfig;
      RPGStateType = module.RPGStateType;
    }, function (module) {
      ViewConst = module.default;
    }, function (module) {
      AssetMgr = module.default;
    }, function (module) {
      RPGLauncher = module.RPGLauncher;
    }, function (module) {
      RPGModelAnimName = module.RPGModelAnimName;
    }, function (module) {
      RoleEntity = module.RoleEntity;
    }],
    execute: function () {
      var _dec, _class;
      cclegacy._RF.push({}, "922c3KvSMVMU7rKEhPU3H4J", "RPGPanel", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var RPGPanel = exports('RPGPanel', (_dec = ccclass('RPGPanel'), _dec(_class = /*#__PURE__*/function (_BaseView) {
        _inheritsLoose(RPGPanel, _BaseView);
        function RPGPanel() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _BaseView.call.apply(_BaseView, [this].concat(args)) || this;
          _this.orderIndex = void 0;
          _this.orderArrary = void 0;
          _this.leftFightModels = void 0;
          _this.rightFightModels = void 0;
          _this.targetIndex = void 0;
          return _this;
        }
        var _proto = RPGPanel.prototype;
        _proto.onOpen = /*#__PURE__*/function () {
          var _onOpen = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(fromUI) {
            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) switch (_context.prev = _context.next) {
                case 0:
                  this.initModelData();
                  _context.next = 3;
                  return this.initModel();
                case 3:
                  this.orderIndex = 0;
                  this.nextAttack();
                case 5:
                case "end":
                  return _context.stop();
              }
            }, _callee, this);
          }));
          function onOpen(_x) {
            return _onOpen.apply(this, arguments);
          }
          return onOpen;
        }();
        _proto.initModelData = function initModelData() {
          this.orderArrary = [];
          for (var i = 0; i < RPGConfig.ins.leftDatas.length; i++) {
            var element = RPGConfig.ins.leftDatas[i];
            var rightData = RPGConfig.ins.rightDatas[i];
            var copyData = {
              index: element.index,
              attack: element.attack,
              def: element.def,
              camp: element.camp,
              hp: element.hp,
              speed: element.speed,
              pos: element.pos,
              "long": element["long"],
              state: RPGStateType.Await
            };
            var copyRightData = {
              index: rightData.index,
              attack: rightData.attack,
              def: rightData.def,
              camp: rightData.camp,
              hp: rightData.hp,
              speed: rightData.speed,
              pos: rightData.pos,
              "long": rightData["long"],
              state: RPGStateType.Await
            };
            this.orderArrary[i] = copyData;
            this.orderArrary[i + 5] = copyRightData;
          }
        };
        _proto.initModel = /*#__PURE__*/function () {
          var _initModel = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {
            var i, data, node;
            return _regeneratorRuntime().wrap(function _callee2$(_context2) {
              while (1) switch (_context2.prev = _context2.next) {
                case 0:
                  this.leftFightModels = [];
                  this.rightFightModels = [];
                  i = 0;
                case 3:
                  if (!(i < this.orderArrary.length)) {
                    _context2.next = 12;
                    break;
                  }
                  data = this.orderArrary[i];
                  _context2.next = 7;
                  return this.createMode(data);
                case 7:
                  node = _context2.sent;
                  if (data.camp === 0) {
                    this.leftFightModels[data.index] = node;
                  } else if (data.camp === 1) {
                    this.rightFightModels[data.index] = node;
                  }
                case 9:
                  i++;
                  _context2.next = 3;
                  break;
                case 12:
                case "end":
                  return _context2.stop();
              }
            }, _callee2, this);
          }));
          function initModel() {
            return _initModel.apply(this, arguments);
          }
          return initModel;
        }();
        _proto.createMode = /*#__PURE__*/function () {
          var _createMode = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(data) {
            var path, node, ctr;
            return _regeneratorRuntime().wrap(function _callee3$(_context3) {
              while (1) switch (_context3.prev = _context3.next) {
                case 0:
                  path = ViewConst.defaultPrefabPathPrefix + "RPGRoleEntity";
                  _context3.next = 3;
                  return AssetMgr.instance.createPrefab(path);
                case 3:
                  node = _context3.sent;
                  if (node) {
                    _context3.next = 6;
                    break;
                  }
                  return _context3.abrupt("return");
                case 6:
                  node.setPosition(data.pos.x, data.pos.y);
                  node.parent = this.node;
                  ctr = node.getComponent(RoleEntity);
                  if (ctr) {
                    ctr.setModeData(data);
                  }
                  ctr.playAnimation(RPGModelAnimName.Idel);
                  return _context3.abrupt("return", node);
                case 12:
                case "end":
                  return _context3.stop();
              }
            }, _callee3, this);
          }));
          function createMode(_x2) {
            return _createMode.apply(this, arguments);
          }
          return createMode;
        }();
        _proto.start = function start() {};
        _proto.update = function update(deltaTime) {};
        _proto.getOrderArraryByCamp = function getOrderArraryByCamp(camp) {
          var result = [];
          for (var i = 0; i < this.orderArrary.length; i++) {
            var data = this.orderArrary[i];
            if (data.camp === camp && data.state != RPGStateType.Death) {
              result.push(data);
            }
          }
          return result;
        };
        _proto.getOrderDataByIndex = function getOrderDataByIndex(index) {
          for (var i = 0; i < this.orderArrary.length; i++) {
            var data = this.orderArrary[i];
            if (data.index === index && data.state != RPGStateType.Death) {
              return data;
            }
          }
          return null;
        };
        _proto.setModelState = function setModelState(obj, state) {
          var _this2 = this;
          if (state == RPGStateType.Move) {
            var targetCamp = 0;
            if (obj.camp == 0) {
              targetCamp = 1;
            }
            var campList = this.getOrderArraryByCamp(targetCamp);
            var index = RPGLauncher.ins.randomInt(0, campList.length - 1);
            console.log("随机出来的下标", index);
            var targetObj = campList[index];
            // for (let i = 0; i < this.orderArrary.length; i++) {
            //     const data = this.orderArrary[i];
            //     if (data.camp === targetCamp && data.state != RPGStateType.Idea) {
            //         targetObj = data;
            //         break;
            //     }
            // }
            this.targetIndex = null;
            if (targetObj) {
              this.targetIndex = targetObj.index;
              this.move(obj, targetObj).then(function (value) {
                _this2.setModelState(obj, RPGStateType.Attack);
              })["catch"](function (err) {
                console.error(err);
              });
            } else {
              if (targetCamp == 1) {
                console.error("你赢了");
              } else {
                console.error("你输了");
              }
            }
          } else if (state == RPGStateType.Attack) {
            if (this.targetIndex != null) {
              if (obj.camp == 0) ;
              var targetData = this.getOrderDataByIndex(this.targetIndex);
              this.attack(obj, targetData).then(function (value1) {
                console.error("执行到攻击返回步骤了");
                _this2.move(obj, obj, true).then(function (value) {
                  if (value1 <= 0) {
                    _this2.setModelState(targetData, RPGStateType.Death);
                  }
                  _this2.orderIndex += 1;
                  _this2.nextAttack();
                })["catch"](function (err) {
                  console.error(err);
                });
              })["catch"](function (err) {
                console.error(err);
              });
            }
          } else if (state == RPGStateType.Death) {
            if (obj) {
              for (var _index = 0; _index < this.orderArrary.length; _index++) {
                var element = this.orderArrary[_index];
                if (element.index == obj.index) {
                  // this.orderArrary.splice(index, 1);
                  element.state = RPGStateType.Death;
                  break;
                }
              }
              var model = this.getTargetModel(obj);
              if (model) {
                console.error(obj.index + "\u88AB\u6253\u6B7B\u4E86!!!!");
                model.removeFromParent();
              }
            }
          }
        }

        // private updateTargetHp(target: IRPGModelData, currentHp: number): void{
        //     if (!target) {
        //         return;
        //     }

        // }
        ;

        _proto.getTargetModel = function getTargetModel(target) {
          var model = null;
          if (target.camp == 0) {
            model = this.leftFightModels[target.index];
          } else if (target.camp == 1) {
            model = this.rightFightModels[target.index];
          }
          return model;
        };
        _proto.attack = function attack(attacker, target) {
          var _this3 = this;
          return new Promise(function (resolve, rejecet) {
            if (!attacker || !target) {
              rejecet("攻击数据为空");
              return;
            }
            var targetData = _this3.orderArrary[target.index];
            if (!targetData) {
              rejecet("攻击对象没找到");
              return;
            }
            var targetCurrentHp = target.hp + target.def - attacker.attack;
            target.hp = targetCurrentHp;
            var model = _this3.getTargetModel(target);
            if (!model) {
              rejecet("目标模型没找到");
              return;
            }
            var modelCtr = model.getComponent(RoleEntity);
            if (!modelCtr) {
              rejecet("模型没有绑定管理脚本");
              return;
            }
            var attackModel = _this3.getTargetModel(attacker);
            if (attackModel) {
              var attackCtr = attackModel.getComponent(RoleEntity);
              if (attackCtr) {
                attackCtr.playAnimation(RPGModelAnimName.Attack).then(function (value) {
                  console.error(attacker.index + " \u653B\u51FB\u4E86" + target.index + ",\u9020\u6210\u4E86" + attacker.attack + "\u4F24\u5BB3,\u9632\u5FA1\u4E86" + target.def + ",\u8FD8\u5269" + target.hp);
                  modelCtr.setHp(targetCurrentHp / 100);
                  resolve(targetCurrentHp);
                })["catch"](function (err) {
                  console.error(err);
                });
              }
            }
          });
        };
        _proto.move = function move(obj, target, isBack) {
          var _this4 = this;
          if (isBack === void 0) {
            isBack = false;
          }
          return new Promise(function (resolve, reject) {
            if (!obj || !target) {
              reject("数据为空");
              return;
            }
            var model = _this4.getTargetModel(obj);
            if (!model) {
              reject("模型为空");
              return;
            }
            var ctr = model.getComponent(RoleEntity);
            if (ctr) {
              if (isBack) {
                ctr.rotationDiretion();
              }
              ctr.playAnimation(RPGModelAnimName.Walk);
            }
            tween(model).to(1, {
              position: math.v3(target.pos.x, target.pos.y, 0)
            }).call(function (target, data) {
              if (ctr) {
                if (isBack) {
                  ctr.rotationDiretion();
                }
                ctr.playAnimation(RPGModelAnimName.Idel, 0);
              }
              resolve(true);
            }, _this4).start();
          });
        };
        _proto.nextAttack = function nextAttack() {
          if (this.orderIndex > 9) {
            this.orderIndex = 0;
          }
          var attacker = this.orderArrary[this.orderIndex];
          if (attacker.state === RPGStateType.Await) {
            this.setModelState(attacker, RPGStateType.Move);
          } else {
            this.orderIndex += 1;
            this.nextAttack();
          }
        };
        return RPGPanel;
      }(BaseView)) || _class));
      registerView({
        viewCls: RPGPanel,
        id: PanelType.RPGPanel,
        layer: LayerType.view
      });
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/RPGScenceMap.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './ScenceMap.ts'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, ScenceMap;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }, function (module) {
      ScenceMap = module.ScenceMap;
    }],
    execute: function () {
      var _dec, _class;
      cclegacy._RF.push({}, "bdf5408XE1JxIG8m4ti3E6/", "RPGScenceMap", undefined);
      /**
       * @fileName RPGScenceMap.ts
       * @author zhangqiong
       * @date 2025/01/18 16:21:27"
       * @description
       */
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var RPGScenceMap = exports('RPGScenceMap', (_dec = ccclass('RPGScenceMap'), _dec(_class = /*#__PURE__*/function (_ScenceMap) {
        _inheritsLoose(RPGScenceMap, _ScenceMap);
        function RPGScenceMap() {
          return _ScenceMap.apply(this, arguments) || this;
        }
        return RPGScenceMap;
      }(ScenceMap)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ScenceMap.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Enum3.ts', './SpawnPoint.ts', './TransferDoor.ts', './Monster.ts', './Npc.ts', './SceneBase.ts', './RootLauncher.ts', './RPGGameManger.ts'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, Node, Vec3, MapLoadModel, MapItemType, SpawnPoint, TransferDoor, Monster, Npc, SceneBase, RootLauncher, RPGGameManger;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Vec3 = module.Vec3;
    }, function (module) {
      MapLoadModel = module.MapLoadModel;
      MapItemType = module.MapItemType;
    }, function (module) {
      SpawnPoint = module.default;
    }, function (module) {
      TransferDoor = module.default;
    }, function (module) {
      Monster = module.Monster;
    }, function (module) {
      Npc = module.Npc;
    }, function (module) {
      SceneBase = module.SceneBase;
    }, function (module) {
      RootLauncher = module.RootLauncher;
    }, function (module) {
      RPGGameManger = module.RPGGameManger;
    }],
    execute: function () {
      var _dec, _class;
      cclegacy._RF.push({}, "d1b96xOPgFGeahphQzjz3qP", "ScenceMap", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var ScenceMap = exports('ScenceMap', (_dec = ccclass('ScenceMap'), _dec(_class = /*#__PURE__*/function (_SceneBase) {
        _inheritsLoose(ScenceMap, _SceneBase);
        function ScenceMap() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _SceneBase.call.apply(_SceneBase, [this].concat(args)) || this;
          // @property(Node)
          // public layer: Node = null;
          //
          // @property(MapLayer)
          // public mapLayer: MapLayer = null;
          //
          // @property(EntityLayer)
          // public entityLayer: EntityLayer = null;
          //
          // @property(Camera)
          // private camera: Camera = null;
          // private _mapData: MapData;
          // private _mapId: number;
          //
          // private targetPos: Vec3 = new Vec3(0, 0, 0);
          //
          // private winSize: Size = new Size();
          // private _mapParams: MapParams = null;
          /**
          * 场景里所有的出生点
          */
          _this.spawnPointList = [];
          /**
           * 场景里所有的传送门
           */
          _this.transferDoorList = [];
          /**
           * 场景里所有的npc
           */
          _this.npcList = [];
          /**
           * 场景里所有的怪物
           */
          _this.monsterList = [];
          _this.player = null;
          return _this;
        }
        var _proto = ScenceMap.prototype;
        // private isInit: boolean = false;
        _proto.start = function start() {
          _SceneBase.prototype.start.call(this);
          // this.winSize = view.getVisibleSize();
          // this.node.setPosition(math.v3(-this.winSize.width / 2, -this.winSize.height / 2));
          this.node.on(Node.EventType.TOUCH_START, this.onMapTouch, this);
          // this.node.on(Node.EventType.TOUCH_START, (event: EventTouch) => {
          //     const screenPoint = event.getLocation();
          //     console.log('全局点击的屏幕坐标:', screenPoint);
          // }, this);

          this.setMapId(1, MapLoadModel.single);
        }

        // public set mapId(value: number) {
        //     this._mapId = value;
        //     this.loadMap(value);
        // }
        //
        // public get mapId(): number{
        //     return this._mapId;
        // }

        // public loadMap(mapId: number, mapLoadModel: MapLoadModel = MapLoadModel.single) {
        //     if (mapLoadModel == MapLoadModel.single) {
        //         this.loadSingleMap(mapId);
        //     } else {
        //         // this.loadSlicesMap(mapId);
        //     }
        // }

        // protected loadSingleMap(mapId: number) {
        //     var dataPath: string = `Map/map${mapId}/map${mapId}`;
        //     resources.load(dataPath, JsonAsset, (error: Error, res: JsonAsset) => {
        //         if (error != null) {
        //             console.log("加载地图数据失败 path = ", dataPath, "error", error);
        //             return;
        //         }
        //
        //         var mapData: MapData = res.json as MapData;
        //
        //         var bgPath: string = dataPath + "/texture";
        //         resources.load(bgPath, Texture2D, (error: Error, tex: Texture2D) => {
        //             if (error != null) {
        //                 console.log("加载地图背景失败 path = ", bgPath, "error", error);
        //                 return;
        //             }
        //             console.log(mapData, tex);
        //             this.init(mapData, tex);
        //             // this.sceneMap.init(mapData, tex, MapLoadModel.single)
        //         });
        //
        //     });
        // }
        ;

        _proto.getMapPath = function getMapPath(mapId) {
          return "map/map" + mapId + "/map" + mapId;
        };
        _proto.initMapData = function initMapData(mapData) {
          this.initMapElement();
          this.afterInitMapElement();
          this.initPlayer();
          this.setViewToPlayer();
        };
        _proto.initMapElement = function initMapElement() {
          var mapItems = this.mapData.mapItems;
          if (!mapItems) {
            return;
          }
          for (var i = 0; i < mapItems.length; i++) {
            var mapItem = mapItems[i];
            var mapItemType = mapItem.type;
            if (mapItemType == MapItemType.Npc) {
              this.initNpc(mapItem);
            } else if (mapItemType == MapItemType.Monster) {
              this.initMonster(mapItem);
            } else if (mapItemType == MapItemType.Transfer) {
              this.initTransferDoor(mapItem);
            } else if (mapItemType == MapItemType.SpawnPoint) {
              this.initSpawnPoint(mapItem);
            }
          }
        }

        /**
        * 初始化Npc
        */;
        _proto.initNpc = function initNpc(editData) {
          var npc = RPGGameManger.instance.getNPC();
          npc.node.parent = this.entityLayer.node;
          npc.initEditData(editData);
          npc.init();
        }

        /**
         * 初始化怪物
         */;
        _proto.initMonster = function initMonster(editData) {
          var monster = RPGGameManger.instance.getMonster();
          monster.node.parent = this.entityLayer.node;
          monster.initEditData(editData);
          monster.init();
        }

        /**
         * 初始化传送门
         */;
        _proto.initTransferDoor = function initTransferDoor(editData) {
          var transferDoor = RPGGameManger.instance.getTransferDoor(editData.transferType);
          transferDoor.node.parent = this.entityLayer.node;
          transferDoor.initEditData(editData);
          transferDoor.init();
        };
        _proto.initSpawnPoint = function initSpawnPoint(editData) {
          var spawnPoint = RPGGameManger.instance.getSpawnPoint();
          spawnPoint.node.parent = this.entityLayer.node;
          spawnPoint.initEditData(editData);
          spawnPoint.init();
        };
        _proto.initPlayer = function initPlayer() {
          var spawnPoint = this.getSpawnPoint(0);
          this.player = RPGGameManger.instance.getPlayer();
          this.player.node.parent = this.entityLayer.node;
          this.player.node.position = spawnPoint != null ? spawnPoint.node.position : new Vec3(1000, 1000, 0); //如果找得到出生点就初始化在出生点的位置，否则默认一个出生位置点给玩家，防止报错。
        }

        /**
         * 根据id获取出生点
         * @param spawnId 
         * @returns 
         */;
        _proto.getSpawnPoint = function getSpawnPoint(spawnId) {
          if (spawnId === void 0) {
            spawnId = 0;
          }
          for (var i = 0; i < this.spawnPointList.length; i++) {
            if (this.spawnPointList[i].spawnId == spawnId) {
              return this.spawnPointList[i];
            }
          }
          if (spawnId == 0) {
            //如果没有找到匹配的出生点，则寻找默认出生点
            for (var i = 0; i < this.spawnPointList.length; i++) {
              if (this.spawnPointList[i].defaultSpawn) {
                return this.spawnPointList[i];
              }
            }
          }
          console.error("\u5730\u56FE" + this.mapData.name + "\u4E0D\u5B58\u5728\u8FD9\u4E2A\u51FA\u751F\u70B9 spawnId = " + spawnId);
          return null;
        };
        _proto.afterInitMapElement = function afterInitMapElement() {
          this.spawnPointList = this.getComponentsInChildren(SpawnPoint);
          this.transferDoorList = this.getComponentsInChildren(TransferDoor);
          this.npcList = this.getComponentsInChildren(Npc);
          this.monsterList = this.getComponentsInChildren(Monster);
        }

        /**
         * 获得地图参数
         * @param mapData 
         * @param bgTex 
         * @param mapLoadModel 
         * @returns 
         */
        // public getMapParams(mapData: MapData, bgTex: Texture2D, mapLoadModel: MapLoadModel = 1): MapParams {
        //     //初始化底图参数
        //     var mapParams: MapParams = new MapParams();
        //     mapParams.name = mapData.name;
        //     mapParams.bgName = mapData.bgName;
        //     mapParams.mapType = mapData.type;
        //     mapParams.mapWidth = mapData.mapWidth;
        //     mapParams.mapHeight = mapData.mapHeight;
        //     mapParams.ceilWidth = mapData.nodeWidth;
        //     mapParams.ceilHeight = mapData.nodeHeight;
        //     mapParams.viewWidth = mapData.mapWidth > this.winSize.width ? this.winSize.width : mapData.mapWidth;
        //     mapParams.viewHeight = mapData.mapHeight > this.winSize.height ? this.winSize.height : mapData.mapHeight;
        //     mapParams.sliceWidth = 256;
        //     mapParams.sliceHeight = 256;
        //     mapParams.bgTex = bgTex;
        //     mapParams.mapLoadModel = mapLoadModel;
        //
        //     return mapParams;
        // }

        /**
         *把视野定位到给定位置 
        * @param px
        * @param py
        * 
        */
        // public setViewToPoint(px: number, py: number): void {
        //     this.targetPos = new Vec3(px, py).subtract(new Vec3(this.winSize.width / 2, this.winSize.height / 2));
        //
        //     if (this.targetPos.x > this._mapParams.mapWidth - this.winSize.width) {
        //         this.targetPos.x = this._mapParams.mapWidth - this.winSize.width;
        //     } else if (this.targetPos.x < 0) {
        //         this.targetPos.x = 0;
        //
        //     }
        //
        //     if (this.targetPos.y > this._mapParams.mapHeight - this.winSize.height) {
        //         this.targetPos.y = this._mapParams.mapHeight - this.winSize.height;
        //     } else if (this.targetPos.y < 0) {
        //         this.targetPos.y = 0;
        //     }
        //
        //     this.targetPos.z = this.camera.node.position.z;
        //     this.camera.node.position = this.targetPos;
        //
        //     // if (this._mapParams.mapLoadModel == MapLoadModel.slices) {
        //     //     this.mapLayer.loadSliceImage(this.targetPos.x, this.targetPos.y);
        //     // }
        // }

        /**
         * 视图跟随玩家
         * @param dt 
         */
        // public followPlayer(dt: number) {
        //     if (this.player == null) {
        //         return;
        //     }
        //
        //     this.targetPos = this.player.node.position.clone().subtract(new Vec3(this.winSize.width / 2, this.winSize.height / 2));
        //
        //     if (this.targetPos.x > this._mapParams.mapWidth - this.winSize.width) {
        //         this.targetPos.x = this._mapParams.mapWidth - this.winSize.width;
        //     } else if (this.targetPos.x < 0) {
        //         this.targetPos.x = 0;
        //
        //     }
        //
        //     if (this.targetPos.y > this._mapParams.mapHeight - this.winSize.height) {
        //         this.targetPos.y = this._mapParams.mapHeight - this.winSize.height;
        //     } else if (this.targetPos.y < 0) {
        //         this.targetPos.y = 0;
        //     }
        //
        //
        //     this.targetPos.z = this.camera.node.position.z;
        //
        //     //摄像机平滑跟随
        //     this.targetPos = this.camera.node.position.clone().lerp(this.targetPos, dt * 2.0);
        //     // this.camera.node.position = this.targetPos;
        //     this.camera.node.setPosition(this.targetPos);
        //
        //     // if (this._mapParams.mapLoadModel == MapLoadModel.slices) {
        //     //     this.mapLayer.loadSliceImage(this.targetPos.x, this.targetPos.y);
        //     // }
        //
        // }

        /**
         * 将视野对准玩家
         */;
        _proto.setViewToPlayer = function setViewToPlayer() {
          this.setViewToPoint(this.player.node.position.x, this.player.node.position.y);
        };
        _proto.onMapTouch = function onMapTouch(event) {
          var touPos = new Vec3(event.getUILocation().x, event.getUILocation().y);
          var targetPos = new Vec3();
          var cameraPos = RootLauncher.instance.mainCamera.node.position;
          Vec3.add(targetPos, cameraPos, touPos); //计算点击地图的位置，计算结果输出到targetPos
          console.log("点击的像素坐标", targetPos.x, targetPos.y);
          this.player.navTo(targetPos.x, targetPos.y);
          // console.log(this.player);
        };

        _proto.update = function update(deltaTime) {
          if (!this.isInit) {
            return;
          }
          if (this.player) {
            this.followTarget(this.player.node, deltaTime);
          }
          // this.followPlayer(deltaTime);
        };

        return ScenceMap;
      }(SceneBase)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Scene.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './HashMap.ts', './Containers.ts', './GameConst.ts'], function (exports) {
  var _inheritsLoose, _createForOfIteratorHelperLoose, cclegacy, HashMap, Containers, GameConst;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _createForOfIteratorHelperLoose = module.createForOfIteratorHelperLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      HashMap = module.HashMap;
    }, function (module) {
      Containers = module.Containers;
    }, function (module) {
      GameConst = module.GameConst;
    }],
    execute: function () {
      cclegacy._RF.push({}, "42c54g36UtKNJvCUTUBhfp8", "Scene", undefined);

      /**
       * @fileName Scene.ts
       * @author zhangqiong
       * @date 2024/12/23 15:47:43"
       * @description
       */
      var Scene = exports('Scene', /*#__PURE__*/function (_Containers) {
        _inheritsLoose(Scene, _Containers);
        function Scene() {
          var _this;
          _this = _Containers.call(this) || this;
          _this.id = void 0;
          _this.type = void 0;
          _this.unitMap = void 0;
          _this.unitNameMap = void 0;
          _this.entityTypeMap = void 0;
          _this.depthHelper = void 0;
          _this.layers = [];
          _this._status = void 0;
          _this.queue = [];
          _this.unitMap = new HashMap();
          _this.unitNameMap = new HashMap();
          _this.entityTypeMap = new HashMap();
          _this.queue = [];
          _this.depthHelper = [];
          return _this;
        }
        var _proto = Scene.prototype;
        _proto.init = function init() {
          this.removeDepth();
          this.layers = [GameConst.BG_LAYER, GameConst.MAP_Bottom_Role_LAYER, GameConst.MAP_LAYER, GameConst.DECORATE_LAYER, GameConst.MAP_SHADOW_LAYER, GameConst.MAP_MAGIC_LAYER, GameConst.MAP_EFFECT_LAYER, GameConst.MAP_DROP_LAYER, GameConst.EFFECT_Bottom_LAYER, GameConst.EFFECT_TOP_LAYER, GameConst.ROLE_LAYER, GameConst.ROLE_NAME_LAYER, GameConst.EFFECT_LAYER, GameConst.HIT_EFFECT_LAYER, GameConst.CENTER_LAYER, GameConst.TOP_LAYER, GameConst.HURT_EFFECT_LAYER];
          this.setContainers(this.layers);
          for (var i = 0; i < this.layers.length; i++) {
            var layerName = this.layers[i];
          }
          this.initDepthLayer();
          this.onInit();
        };
        _proto.setSort = function setSort(v) {
          if (this.depthHelper) {
            if (v) {
              for (var _iterator = _createForOfIteratorHelperLoose(this.depthHelper), _step; !(_step = _iterator()).done;) {
                var depth = _step.value;
                depth.start(200);
              }
            } else {
              for (var _iterator2 = _createForOfIteratorHelperLoose(this.depthHelper), _step2; !(_step2 = _iterator2()).done;) {
                var _depth = _step2.value;
                _depth.stop();
              }
            }
          }
        };
        _proto.setDepths = function setDepths(depthLayers, type) {
          for (var i = 0; i < depthLayers.length; i++) {
            var layer = depthLayers[i];
            //todo
            var depthHelper = null;
            depthHelper.layerName = layer;
            depthHelper.setTarget(this.getChildContainer(layer));
            this.depthHelper.push(depthHelper);
          }
          this.setSort(true);
        };
        _proto.initDepthLayer = function initDepthLayer() {};
        _proto.enter = function enter() {};
        _proto.onEnter = function onEnter() {};
        _proto.leave = function leave() {};
        _proto.onLeave = function onLeave() {};
        _proto.onInit = function onInit() {};
        _proto.clear = function clear() {
          this.entityTypeMap.clear();
        };
        _proto.setStatus = function setStatus(status) {
          this._status = status;
        };
        _proto.getStatus = function getStatus() {
          return this._status;
        };
        _proto.resetUnitId = function resetUnitId(oldPartId, newPartId) {
          if (this.unitMap.hasKey(oldPartId)) {
            var unit = this.unitMap.remove(oldPartId);
            this.unitMap.put(newPartId, unit);
          }
        };
        _proto.getId = function getId() {
          return this.id;
        };
        _proto.getName = function getName() {
          return this.name;
        };
        _proto.setLocation = function setLocation(x, y) {
          this.setPosition(x, y);
        };
        _proto.getLocation = function getLocation() {
          return this.position.clone();
        };
        _proto.getLocationScale = function getLocationScale() {
          return this.scale.clone();
        };
        _proto.removeDepth = function removeDepth() {
          if (this.depthHelper) {
            for (var i = 0; i < this.depthHelper.length; i++) {
              this.depthHelper[i].destory();
            }
            this.depthHelper = [];
          }
        };
        _proto.destroy = function destroy() {
          var unitObj = this.unitMap.getContainer();
          this.unitMap.clear();
          this.unitNameMap.clear();
          return _Containers.prototype.destroy.call(this);
        };
        _proto.updateScene = function updateScene() {};
        _proto.addUnit = function addUnit(unit) {
          var isRepeat = false;
          if (this.unitMap.hasKey(unit.getId())) {
            isRepeat = true;
          }
          this.addUnitToTypeMap(unit);
          this.unitMap.put(unit.getId(), unit);
          this.unitNameMap.put(unit.getName(), unit);
          unit.setScene(this);
          if (!isRepeat) {
            this.queue.push(unit);
            this.queueAddChild();
          }
        };
        _proto.addUnitToTypeMap = function addUnitToTypeMap(unit) {
          var units = this.entityTypeMap.get(unit.type);
          if (!units) {
            units = [];
            this.entityTypeMap.put(unit.type, units);
          }
          if (!this.unitMap.hasKey(unit.getId())) {
            units.push(unit);
          }
        };
        _proto.reomveUnitToTypeMap = function reomveUnitToTypeMap(unit) {
          var units = this.entityTypeMap.get(unit.type);
          if (units) {
            for (var index = 0; index < units.length; index++) {
              var element = units[index];
              if (element.getId() == unit.getId()) {
                units.splice(index, 1);
                break;
              }
            }
          }
        };
        _proto.getUnitsByTypes = function getUnitsByTypes(types) {
          var results = [];
          for (var index = 0; index < types.length; index++) {
            var type = types[index];
            var units = this.entityTypeMap.get(type);
            if (units) {
              results = results.concat(units);
            }
          }
          return results;
        };
        _proto.removeUnitById = function removeUnitById(id, isDispose) {
          if (isDispose === void 0) {
            isDispose = false;
          }
          var unit = this.unitMap.remove(id);
          if (unit != null) {
            this.unitNameMap.remove(unit.getName());
            this.removeUnit(unit, isDispose);
          }
          return unit;
        };
        _proto.getUnits = function getUnits(type) {
          if (type === void 0) {
            type = 0;
          }
          if (type == 0) {
            return this.unitMap.values();
          }
          var reuslts = [];
          var values = this.unitMap.values();
          var unit = null;
          for (var i = 0; i < values.length; i++) {
            unit = values[i];
            if (unit.getType() == type) {
              reuslts.push(unit);
            }
          }
          return reuslts;
        };
        _proto.removeUnitByName = function removeUnitByName(name, isDispose) {
          if (isDispose === void 0) {
            isDispose = false;
          }
          var unit = this.getUnitByName(name);
          if (unit != null) {
            return this.removeUnitById(unit.getId(), isDispose);
          }
          return null;
        };
        _proto.getUnitById = function getUnitById(id) {
          return this.unitMap.get(id);
        };
        _proto.getUnitByName = function getUnitByName(unitName) {
          return this.unitNameMap.get(unitName);
        };
        _proto.removeUnit = function removeUnit(unit, isDispose) {
          if (isDispose === void 0) {
            isDispose = false;
          }
          this.reomveUnitToTypeMap(unit);
          var queueIndex = this.queue.indexOf(unit);
          if (queueIndex != -1) {
            this.queue.splice(queueIndex, 1);
          }
          for (var i = 0; i < this.depthHelper.length; i++) {
            var depth = this.depthHelper[i];
            if (depth.layerName == unit.getLayer()) {
              depth.removeChild(unit.getDisplay());
            }
          }
          if (unit.getDisplay().parent == this.getChildContainer(unit.getLayer())) {
            this.getChildContainer(unit.getLayer()).removeChild(unit.getDisplay());
          }
          unit.onRemove();
          if (isDispose) {
            unit.destroy();
          }
        };
        _proto.queueAddChild = function queueAddChild() {
          if (this.queue.length > 0) {
            var unit = this.queue.shift();
            this.getChildContainer(unit.getLayer()).addChild(unit.getDisplay());
            unit.onAdd();
            for (var i = 0; i < this.depthHelper.length; i++) {
              if (this.depthHelper[i].layerName == unit.getLayer() && this.depthHelper != null) {
                this.depthHelper[i].addChild(unit.getDisplay());
              }
            }
          }
        };
        return Scene;
      }(Containers));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SceneBase.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './MapLayer.ts', './EntityLayer.ts', './MapParams.ts', './Enum3.ts', './PathFindingAgent.ts', './RootLauncher.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, cclegacy, _decorator, Vec3, Size, view, math, resources, JsonAsset, Texture2D, UITransform, Component, MapLayer, EntityLayer, MapParams, MapLoadModel, PathFindingAgent, RootLauncher;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Vec3 = module.Vec3;
      Size = module.Size;
      view = module.view;
      math = module.math;
      resources = module.resources;
      JsonAsset = module.JsonAsset;
      Texture2D = module.Texture2D;
      UITransform = module.UITransform;
      Component = module.Component;
    }, function (module) {
      MapLayer = module.default;
    }, function (module) {
      EntityLayer = module.default;
    }, function (module) {
      MapParams = module.default;
    }, function (module) {
      MapLoadModel = module.MapLoadModel;
    }, function (module) {
      PathFindingAgent = module.default;
    }, function (module) {
      RootLauncher = module.RootLauncher;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;
      cclegacy._RF.push({}, "e53e83AZzlJArZ30yyMJRSr", "SceneBase", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var SceneBase = exports('SceneBase', (_dec = ccclass("SceneBase"), _dec2 = property(MapLayer), _dec3 = property(EntityLayer), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SceneBase, _Component);
        function SceneBase() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "mapLayer", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "entityLayer", _descriptor2, _assertThisInitialized(_this));
          // @property(Camera)
          // public camera: Camera = null;
          _this._mapData = void 0;
          _this._mapId = void 0;
          _this.targetPos = new Vec3(0, 0, 0);
          _this.winSize = new Size();
          _this._mapParams = null;
          _this.isInit = false;
          return _this;
        }
        var _proto = SceneBase.prototype;
        _proto.start = function start() {
          this.winSize = view.getVisibleSize();
          this.node.setPosition(math.v3(-this.winSize.width / 2, -this.winSize.height / 2));
          this.setMapId(1);
        };
        _proto.setMapId = function setMapId(mapId, mapLoadModel) {
          if (mapLoadModel === void 0) {
            mapLoadModel = MapLoadModel.single;
          }
          this._mapId = mapId;
          this.loadMap(mapId);
        };
        _proto.loadMap = function loadMap(mapId, mapLoadModel) {
          if (mapLoadModel === void 0) {
            mapLoadModel = MapLoadModel.single;
          }
          if (mapLoadModel == MapLoadModel.single) {
            this.loadSingleMap(mapId);
          }
        };
        _proto.getMapPath = function getMapPath(mapId) {
          return "";
        };
        _proto.loadSingleMap = function loadSingleMap(mapId) {
          var _this2 = this;
          var dataPath = this.getMapPath(mapId); //`Map/map${mapId}/map${mapId}`;
          resources.load(dataPath, JsonAsset, function (error, res) {
            if (error != null) {
              console.log("加载地图数据失败 path = ", dataPath, "error", error);
              return;
            }
            var mapData = res.json;
            var bgPath = dataPath + "/texture";
            resources.load(bgPath, Texture2D, function (error, tex) {
              if (error != null) {
                console.log("加载地图背景失败 path = ", bgPath, "error", error);
                return;
              }
              console.log(mapData, tex);
              _this2.init(mapData, tex);
              // this.sceneMap.init(mapData, tex, MapLoadModel.single)
            });
          });
        };

        _proto.init = function init(mapData, bgTexture) {
          this._mapData = mapData;
          this._mapParams = this.getMapParams(mapData, bgTexture, MapLoadModel.single);
          this.mapLayer.init(this._mapParams);
          PathFindingAgent.instance.init(mapData);
          var uiTransform = this.node.getComponent(UITransform);
          if (uiTransform) {
            uiTransform.width = this.mapLayer.width;
            uiTransform.height = this.mapLayer.height;
          }
          this.initMapData(mapData);
          this.isInit = true;
        };
        _proto.initMapData = function initMapData(mapData) {}

        /**
         * 获得地图参数
         * @param mapData
         * @param bgTex
         * @param mapLoadModel
         * @returns
         */;
        _proto.getMapParams = function getMapParams(mapData, bgTex, mapLoadModel) {
          if (mapLoadModel === void 0) {
            mapLoadModel = 1;
          }
          //初始化底图参数
          var mapParams = new MapParams();
          mapParams.name = mapData.name;
          mapParams.bgName = mapData.bgName;
          mapParams.mapType = mapData.type;
          mapParams.mapWidth = mapData.mapWidth;
          mapParams.mapHeight = mapData.mapHeight;
          mapParams.ceilWidth = mapData.nodeWidth;
          mapParams.ceilHeight = mapData.nodeHeight;
          mapParams.viewWidth = mapData.mapWidth > this.winSize.width ? this.winSize.width : mapData.mapWidth;
          mapParams.viewHeight = mapData.mapHeight > this.winSize.height ? this.winSize.height : mapData.mapHeight;
          mapParams.sliceWidth = 256;
          mapParams.sliceHeight = 256;
          mapParams.bgTex = bgTex;
          mapParams.mapLoadModel = mapLoadModel;
          return mapParams;
        }

        /**
         *把视野定位到给定位置
         * @param px
         * @param py
         *
         */;
        _proto.setViewToPoint = function setViewToPoint(px, py) {
          this.targetPos = new Vec3(px, py).subtract(new Vec3(this.winSize.width / 2, this.winSize.height / 2));
          if (this.targetPos.x > this._mapParams.mapWidth - this.winSize.width) {
            this.targetPos.x = this._mapParams.mapWidth - this.winSize.width;
          } else if (this.targetPos.x < 0) {
            this.targetPos.x = 0;
          }
          if (this.targetPos.y > this._mapParams.mapHeight - this.winSize.height) {
            this.targetPos.y = this._mapParams.mapHeight - this.winSize.height;
          } else if (this.targetPos.y < 0) {
            this.targetPos.y = 0;
          }
          var camera = RootLauncher.instance.mainCamera;
          this.targetPos.z = camera.node.position.z;
          camera.node.position = this.targetPos;

          // if (this._mapParams.mapLoadModel == MapLoadModel.slices) {
          //     this.mapLayer.loadSliceImage(this.targetPos.x, this.targetPos.y);
          // }
        }

        /**
         * 视图跟随
         * @param targetNode
         * @param dt
         */;
        _proto.followTarget = function followTarget(targetNode, dt) {
          if (targetNode == null) {
            return;
          }
          this.targetPos = targetNode.position.clone().subtract(new Vec3(this.winSize.width / 2, this.winSize.height / 2));
          if (this.targetPos.x > this._mapParams.mapWidth - this.winSize.width) {
            this.targetPos.x = this._mapParams.mapWidth - this.winSize.width;
          } else if (this.targetPos.x < 0) {
            this.targetPos.x = 0;
          }
          if (this.targetPos.y > this._mapParams.mapHeight - this.winSize.height) {
            this.targetPos.y = this._mapParams.mapHeight - this.winSize.height;
          } else if (this.targetPos.y < 0) {
            this.targetPos.y = 0;
          }
          var camera = RootLauncher.instance.mainCamera;
          this.targetPos.z = camera.node.position.z;
          //摄像机平滑跟随
          this.targetPos = camera.node.position.clone().lerp(this.targetPos, dt * 2.0);
          // this.camera.node.position = this.targetPos;
          camera.node.setPosition(this.targetPos);

          // if (this._mapParams.mapLoadModel == MapLoadModel.slices) {
          //     this.mapLayer.loadSliceImage(this.targetPos.x, this.targetPos.y);
          // }
        };

        _createClass(SceneBase, [{
          key: "mapData",
          get: function get() {
            return this._mapData;
          }
        }, {
          key: "mapId",
          get: function get() {
            return this._mapId;
          }
        }]);
        return SceneBase;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "mapLayer", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "entityLayer", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ScreenAdaptation.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _inheritsLoose, cclegacy, Size, _decorator, view, ResolutionPolicy, Component;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      Size = module.Size;
      _decorator = module._decorator;
      view = module.view;
      ResolutionPolicy = module.ResolutionPolicy;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class;
      cclegacy._RF.push({}, "2f8d0JsBS9FpZnKkLVuU8oh", "ScreenAdaptation", undefined);
      /** 
       * 画布的标准化尺寸，就是之前说的
       * iPad 设备中的画布尺寸 = 1001 x 1334 (其中 1001 ≈ 1668/1.6672)
       * iPhone16设备中的画布尺寸 = 750 x1626（其中 1626 = 2556/1.572）
       */
      var G_VIEW_SIZE = exports('G_VIEW_SIZE', new Size(0, 0));
      var ccclass = _decorator.ccclass,
        property = _decorator.property;

      /**
       * @fileName ScreenAdaptation.ts
       * @author zhangqiong
       * @date 2025/01/15 19:57:43"
       * @description
       */

      var ScreenAdaptation = exports('ScreenAdaptation', (_dec = ccclass('ScreenAdaptation'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(ScreenAdaptation, _Component);
        function ScreenAdaptation() {
          return _Component.apply(this, arguments) || this;
        }
        var _proto = ScreenAdaptation.prototype;
        _proto.start = function start() {
          this.adapterScreen();
        };
        _proto.update = function update(dt) {
          // this.adapterScreen();
        };
        _proto.adapterScreen = function adapterScreen() {
          var resolutionPolicy = view.getResolutionPolicy();
          var designSize = view.getDesignResolutionSize();
          // let frameSize =  screen.windowSize;
          var frameW = screen.width;
          var frameH = screen.height;
          /** 是否是屏幕更宽 */
          var isScreenWidthLarger = frameW / frameH > designSize.width / designSize.height;
          var targetResolutionPolicy = isScreenWidthLarger ? ResolutionPolicy.FIXED_HEIGHT : ResolutionPolicy.FIXED_WIDTH;
          if (targetResolutionPolicy !== resolutionPolicy.getContentStrategy().strategy) {
            /** 保证设计分辨率的内容都能显示出来 */
            view.setDesignResolutionSize(designSize.width, designSize.height, targetResolutionPolicy);
          }

          /** 实际的尺寸会和设计分辨率在一个维度，但是宽或高更大 */
          if (isScreenWidthLarger) {
            G_VIEW_SIZE.width = Math.ceil(designSize.height * screen.width / screen.height);
            G_VIEW_SIZE.height = designSize.height;
          } else {
            G_VIEW_SIZE.width = designSize.width;
            G_VIEW_SIZE.height = Math.ceil(designSize.width * screen.height / screen.width);
          }
          console.log("\u5C4F\u5E55" + (isScreenWidthLarger ? "更宽, 高度适配" : "更高, 宽度适配") + " \u8BBE\u8BA1\u5206\u8FA8\u7387\u6BD4\u4F8B\u4E0B\u7684\u5C4F\u5E55\u5C3A\u5BF8: " + G_VIEW_SIZE.width + "x" + G_VIEW_SIZE.height);
        };
        return ScreenAdaptation;
      }(Component)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SelectTowerBuild.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './TowerConfig.ts', './TowerLauncher.ts', './TowerGameUIManager.ts'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, NodeEventType, resources, Texture2D, Sprite, SpriteFrame, Component, TowerConfig, TowerLauncher, TowerGameUIManager;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      NodeEventType = module.NodeEventType;
      resources = module.resources;
      Texture2D = module.Texture2D;
      Sprite = module.Sprite;
      SpriteFrame = module.SpriteFrame;
      Component = module.Component;
    }, function (module) {
      TowerConfig = module.TowerConfig;
    }, function (module) {
      TowerLauncher = module.TowerLauncher;
    }, function (module) {
      TowerGameUIManager = module.TowerGameUIManager;
    }],
    execute: function () {
      var _dec, _class;
      cclegacy._RF.push({}, "d36e5yXmYBLAbSfwD/EaKem", "SelectTowerBuild", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var SelectTowerBuild = exports('SelectTowerBuild', (_dec = ccclass('SelectTowerBuild'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SelectTowerBuild, _Component);
        function SelectTowerBuild() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.callBack = void 0;
          _this.callObj = void 0;
          _this.towerId = void 0;
          _this.level = void 0;
          _this.buildInfo = void 0;
          _this.towerData = null;
          return _this;
        }
        var _proto = SelectTowerBuild.prototype;
        _proto.start = function start() {
          this.node.on(NodeEventType.TOUCH_START, this.onTouchNode, this);
        };
        _proto.onTouchNode = function onTouchNode(event) {
          if (!this.towerData) {
            console.error("当前选中塔的配置不存在");
            return;
          }
          if (TowerLauncher.instance.value >= this.towerData.buildCost) {
            if (this.callBack && this.callObj) {
              this.buildInfo.selectedTowerId = this.towerId;
              this.callBack.call(this.callObj, this.buildInfo);
              TowerGameUIManager.instance.showSelectTower(false);
            }
          }
        };
        _proto.setTowerId = function setTowerId(id, level) {
          var _this2 = this;
          if (level === void 0) {
            level = 1;
          }
          this.towerId = id;
          this.level = level;
          var towerData = TowerConfig.instance.getTowerConfig(this.towerId, this.level);
          if (towerData) {
            this.towerData = towerData;
            var canBuild = TowerLauncher.instance.value >= towerData.buildCost;
            var buildPath = "tower/res/NormalMordel/Game/Tower/" + this.towerId + "/CanClick" + (canBuild ? 1 : 0) + "/texture";
            resources.load(buildPath, Texture2D, function (err, tex) {
              if (err) {
                console.error(err.stack);
                return;
              }
              var sprite = _this2.node.getComponent(Sprite);
              var spf = new SpriteFrame();
              spf.texture = tex;
              sprite.spriteFrame = spf;
            });
          }
        };
        _proto.setBuildInfo = function setBuildInfo(buildInfo) {
          this.buildInfo = buildInfo;
        };
        _proto.setClickCall = function setClickCall(call, callObj) {
          this.callBack = call;
          this.callObj = callObj;
        };
        _proto.update = function update(deltaTime) {};
        return SelectTowerBuild;
      }(Component)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SkillConfigVo.ts", ['cc'], function (exports) {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "80a24vn2JxCCZo1Wy0j2NqX", "SkillConfigVo", undefined);
      /**
       * @fileName SkillConfigVo.ts
       * @author zhangqiong
       * @date 2024/12/31 19:36:56"
       * @description
       */
      var SkillConfigVo = exports('SkillConfigVo', function SkillConfigVo() {
        this.skillId = void 0;
        this.firstCd = void 0;
        this.cd = void 0;
        /** 1表示能量技能，2自动释放技能，3被动技能，4被动触发主动技能, 5神器技能.6圣龙技能 */
        this.type = void 0;
        /** 主目标 */
        this.target = void 0;
        /** 1普攻 2技能 */
        this.skillType = void 0;
        //选择目标类型 0：选择类型 1: 选择阵营类型 1 不同阵营 2 同阵营 3 全部
        this.targetTypes = void 0;
        /** 施法距离 */
        this.distance = void 0;
        /** 技能伤害 */
        this.hurt = void 0;
        /** 恢复的能量 */
        this.recoveyAnger = void 0;
      });
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SpawnPoint.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, CCInteger, CCBoolean, Vec3, Component;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      CCInteger = module.CCInteger;
      CCBoolean = module.CCBoolean;
      Vec3 = module.Vec3;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;
      cclegacy._RF.push({}, "7bac4jmsgdBK4STLC9vrcL4", "SpawnPoint", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;

      /**
       * 地图出生点
       */
      var SpawnPoint = exports('default', (_dec = ccclass('SpawnPoint'), _dec2 = property(CCInteger), _dec3 = property(CCBoolean), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SpawnPoint, _Component);
        function SpawnPoint() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          /**
           * 在本地图，出生点Id
           */
          _initializerDefineProperty(_this, "spawnId", _descriptor, _assertThisInitialized(_this));
          /**
           * 是否是默认出生点
           */
          _initializerDefineProperty(_this, "defaultSpawn", _descriptor2, _assertThisInitialized(_this));
          /**
           * 编辑的数据
           */
          _this.editData = null;
          return _this;
        }
        var _proto = SpawnPoint.prototype;
        // LIFE-CYCLE CALLBACKS:
        // onLoad () {}
        _proto.start = function start() {
          //this.node.opacity = 0;
        }

        /**
         * 初始化
         */;
        _proto.init = function init() {}

        /**
         * 初始化编辑数据
         * @param editData 
         */;
        _proto.initEditData = function initEditData(editData) {
          this.editData = editData;
          this.node.position = new Vec3(editData.x, editData.y);
          this.spawnId = editData.spawnId;
          this.defaultSpawn = editData.defaultSpawn;
        }

        // update (dt) {}
        ;

        return SpawnPoint;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "spawnId", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "defaultSpawn", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      })), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SpineSkeleton.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './GameConst.ts', './ActionInfo.ts'], function (exports) {
  var _inheritsLoose, _createClass, cclegacy, _decorator, sp, resources, Component, GameConst, ActionInfo;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      sp = module.sp;
      resources = module.resources;
      Component = module.Component;
    }, function (module) {
      GameConst = module.GameConst;
    }, function (module) {
      ActionInfo = module.ActionInfo;
    }],
    execute: function () {
      var _dec, _class;
      cclegacy._RF.push({}, "16367xy4HNNnbe2kwjBErJJ", "SpineSkeleton", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var SpineSkeleton = exports('SpineSkeleton', (_dec = ccclass('SpineSkeleton'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SpineSkeleton, _Component);
        function SpineSkeleton() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.skeleton = null;
          _this.playTimes = -1;
          _this._currentTimes = 0;
          _this._currentAnimationName = void 0;
          _this._endAnimationName = void 0;
          _this.keyFrameHandler = void 0;
          _this.runing = false;
          _this.animationQueue = void 0;
          _this.currentInfo = void 0;
          _this._rosolve = void 0;
          return _this;
        }
        var _proto = SpineSkeleton.prototype;
        _proto.onLoad = function onLoad() {
          this.skeleton = this.node.getComponent(sp.Skeleton);
          if (!this.skeleton) {
            this.skeleton = this.node.addComponent(sp.Skeleton);
          }
          this.animationQueue = [];
          // this.skeleton.setCompleteListener(this.onAnimationComplete);
        };

        _proto.start = function start() {};
        _proto.setSpineId = function setSpineId(spineId, animationName) {
          var _this2 = this;
          if (animationName === void 0) {
            animationName = GameConst.Idle;
          }
          return new Promise(function (resolve, reject) {
            var skeletonPath = "spine/body/afk/hero/sanim_" + spineId;
            resources.load(skeletonPath, sp.SkeletonData, function (err, data) {
              if (err) {
                reject(err);
                return;
              }
              _this2.skeleton.skeletonData = data;
              _this2.skeleton.setCompleteListener(_this2.onAimationComplete);
              var info = new ActionInfo(animationName);
              _this2.setAnimation(info);
              resolve();
            });
          });
        };
        _proto._onPlay = function _onPlay(info) {
          var _this3 = this;
          if (!info) {
            return;
          }
          if (this.skeleton && info.name != this._currentAnimationName) {
            this._currentTimes = 0;
            this._endAnimationName = info.endActionName;
            this._currentAnimationName = info.name;
            this.playTimes = info.times;
            this.skeleton.loop = true;
            if (this.playTimes != -1) {
              this.skeleton.setCompleteListener(function (enter) {
                if (_this3.playTimes != -1) {
                  _this3._currentTimes++;
                  if (_this3._currentTimes >= _this3.playTimes) {
                    _this3.clear();
                    _this3.next();
                  }
                }
              });
            } else {
              this.skeleton.setCompleteListener(null);
            }
            this.skeleton.setEventListener(function (entry, event) {
              if (_this3.keyFrameHandler) {
                _this3.keyFrameHandler.execute(entry, event);
              }
            });
            this.skeleton.animation = info.name;
          }
        };
        _proto.setAnimation = function setAnimation(info) {
          var _this4 = this;
          return new Promise(function (resolve, reject) {
            if (!info) {
              reject("信息有误");
              return;
            }
            if (_this4.skeleton && info.name != _this4._currentAnimationName) {
              _this4._currentTimes = 0;
              _this4._endAnimationName = info.endActionName;
              _this4._currentAnimationName = info.name;
              _this4.playTimes = info.times;
              _this4.skeleton.loop = true;
              if (_this4.playTimes != -1) {
                _this4.skeleton.setCompleteListener(function (enter) {
                  if (_this4.playTimes != -1) {
                    _this4._currentTimes++;
                    if (_this4._currentTimes >= _this4.playTimes) {
                      _this4.clear();
                      resolve();
                    }
                  }
                });
              } else {
                _this4.skeleton.setCompleteListener(null);
              }
              _this4.skeleton.setEventListener(function (entry, event) {
                if (_this4.keyFrameHandler) {
                  _this4.keyFrameHandler.execute(entry, event);
                }
              });
              _this4.skeleton.animation = info.name;
              if (info.times == -1) {
                resolve();
              }
            } else {
              resolve();
            }
          });
          // if (oper == GameConst.Action_Opre_One) {
          //     this.killAll();
          // }
          // this.animationQueue.push(info);
          // if (!this.runing) {
          //     if (this.animationQueue.length > 0)//判断队列中是否还有动作
          //     {
          //         this.runing = true;
          //         this.nextRun();
          //     }
          // }
        };

        _proto.killAll = function killAll() {
          this.runCurrent();
          this.animationQueue = [];
          this.runing = false;
        };
        _proto.runCurrent = function runCurrent() {
          if (this.currentInfo) {
            if (this.currentInfo.handler) {
              this.currentInfo.handler.execute();
            }
            // if (this.currentInfo.endActionName) {
            //     this.playEndAnimation(this.currentInfo.endActionName)
            // }
          }
        };

        _proto.nextRun = function nextRun() {
          this.runCurrent();
          this.currentInfo = this.animationQueue.shift();
          this._onPlay(this.currentInfo);
        };
        _proto.next = function next() {
          if (this.animationQueue.length <= 0) {
            //队列无的话，停止
            this.runing = false;
            if (this.currentInfo) {
              if (this.currentInfo.handler) {
                this.currentInfo.handler.execute();
              }
            }
          } else {
            this.nextRun();
          }
        };
        _proto.playEndAnimation = function playEndAnimation(name) {
          var endAnimationName = name ? name : GameConst.Idle;
          var endInfo = new ActionInfo(endAnimationName);
          this.setAnimation(endInfo);
        };
        _proto.clear = function clear() {
          this.playTimes = -1;
          this._currentTimes = 0;
        };
        _proto.onAimationComplete = function onAimationComplete(entery) {
          if (this.playTimes == -1) {
            return;
          }
          this._currentTimes++;
          if (this._currentTimes >= this.playTimes) {
            this.clear();
            // this.playEndAnimation(GameConst.Idle);
            return;
          }
        };
        _proto.update = function update(deltaTime) {};
        _createClass(SpineSkeleton, [{
          key: "currentAnimation",
          get: function get() {
            return this._currentAnimationName;
          }
        }]);
        return SpineSkeleton;
      }(Component)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SpineTest.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, sp, resources, Component;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      sp = module.sp;
      resources = module.resources;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class;
      cclegacy._RF.push({}, "b8acb/5pnZI8oLkiBHchNQC", "SpineTest", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var SpineTest = exports('SpineTest', (_dec = ccclass('SpineTest'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SpineTest, _Component);
        function SpineTest() {
          return _Component.apply(this, arguments) || this;
        }
        var _proto = SpineTest.prototype;
        _proto.start = function start() {
          var comp = this.getComponent(sp.Skeleton);
          resources.loadDir("spine/54154/", function (err, assets) {
            console.log(assets);
            var texture = assets[3];
            var skeletonData = assets[2];
            // let asset = new sp.SkeletonData();
            // asset._nativeAsset = assets[1];
            // asset.atlasText = assets[0];
            // asset.textures = [texture];
            // asset.textureNames = ['E54154.png'];
            // asset._uuid = ske; // 可以传入任意字符串，但不能为空
            // asset._nativeUrl = ske; // 传入一个二进制路径用作 initSkeleton 时的 filePath 参数使用
            comp.skeletonData = skeletonData;
            // let ani = comp.setAnimation(0, 'walk', true);
            // assetManager.loadRemote(image, (error, img: ImageAsset) => {
          });

          // assetManager.loadAny([{ url: atlas, ext: '.txt' }, { url: ske, ext: '.bin' }], (error, assets) => {

          //     // });
          // });
        };

        _proto.update = function update(deltaTime) {};
        return SpineTest;
      }(Component)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/StringUtils.ts", ['cc'], function (exports) {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "ff123rNIqNHT52+G7NGRrI2", "StringUtils", undefined);
      /**
       * @class: StringUtils
       * @description: 字符串工具类
       * @author: Ran
       * @time: 2024-08-12 20:06:31
       */
      var StringUtils = exports('default', /*#__PURE__*/function () {
        function StringUtils() {}
        /**
         * 判断空字符串
         * @param str - 
         * @returns 
         */
        StringUtils.empty = function empty(str) {
          return str == null || str == "" || str.length <= 0;
        }

        /**
         * 生成富文本
         * @param str - 字符串
         * @param color - 颜色
         * @param size - 字体大小
         * @returns 富文本字符串
         */;
        StringUtils.generateRichText = function generateRichText(str, color, size) {
          var ret = "";
          ret = this.colorRichText(str, color);
          ret = this.sizeRichText(ret, size);
          return ret;
        }

        /**
         * 颜色富文本
         * @param str - 字符串
         * @param color - 颜色
         * @returns 富文本字符串
         */;
        StringUtils.colorRichText = function colorRichText(str, color) {
          if (color === null) return str;
          var ele = "<color=" + color + ">%d</color>";
          return ele.replace("%d", str);
        }

        /**
         * 字号富文本
         * @param str - 字符串
         * @param size - 字号
         * @returns 富文本字符串
         */;
        StringUtils.sizeRichText = function sizeRichText(str, size) {
          if (size === null) return str;
          var ele = "<size=" + size + ">%d</size>";
          return ele.replace("%d", str);
        }

        /**
         * 加粗富文本
         * @param str - 字符串
         * @returns 富文本字符串
         */;
        StringUtils.boldRichText = function boldRichText(str) {
          var ele = "<b>%d</b>";
          return ele.replace("%d", str);
        }

        // class end
        ;

        return StringUtils;
      }());
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Test.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, Component;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;
      cclegacy._RF.push({}, "9ead4JPW05I/rCLq5Lz5uJg", "Test", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var Test = exports('Test', (_dec = ccclass('Test'), _dec2 = property(Node), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(Test, _Component);
        function Test() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "targetNode", _descriptor, _assertThisInitialized(_this));
          _this.speed = 200;
          return _this;
        }
        var _proto = Test.prototype;
        _proto.start = function start() {};
        _proto.update = function update(deltaTime) {
          var currentPos = this.node.position.clone();
          var targetPos = this.targetNode.position.clone();
          var radian = Math.atan2(targetPos.y - currentPos.y, targetPos.x - currentPos.x);
          var direction = targetPos.subtract(currentPos).normalize();
          var angle = radian / Math.PI * 180;
          this.node.angle = angle - 90;
          var displacement = direction.multiplyScalar(this.speed * deltaTime);
          this.node.position = this.node.position.clone().add(displacement);
        };
        return Test;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "targetNode", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Tile.ts", ['cc'], function (exports) {
  var cclegacy, _decorator, Vec2;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Vec2 = module.Vec2;
    }],
    execute: function () {
      cclegacy._RF.push({}, "3f1f85sfylNpbAWlo4ssk/l", "Tile", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var Tile = exports('Tile', /*#__PURE__*/function () {
        function Tile() {
          this.positionX = void 0;
          this.positionY = void 0;
          this.value = void 0;
          this.megreFrom = null;
          this.previousPosition = new Vec2(0, 0);
        }
        var _proto = Tile.prototype;
        _proto.setup = function setup(pos, value) {
          this.positionX = pos.x;
          this.positionY = pos.y;
          this.value = value || 2;
          this.megreFrom = null;
          this.previousPosition = new Vec2(0, 0);
        };
        _proto.savePosition = function savePosition() {
          this.previousPosition.set(this.positionX, this.positionY);
        };
        _proto.updatePosition = function updatePosition(position) {
          this.positionX = position.x;
          this.positionY = position.y;
        };
        _proto.serialize = function serialize() {
          return {
            position: {
              x: this.positionX,
              y: this.positionY
            },
            value: this.value
          };
        };
        return Tile;
      }());
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TimeUtils.ts", ['cc'], function (exports) {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "d28fa+G49BMypt6Smeva8UQ", "TimeUtils", undefined);
      /**
       * @class: DateUtils
       * @description: 日期工具类
       * @author: Ran
       * @time: 2024-08-12 20:07:39
       */
      var TimeUitls = exports('default', /*#__PURE__*/function () {
        function TimeUitls() {}
        /**
         * 格式化秒数
         * @param second ：秒
         * @param format ：格式，缺省为hh:mm:ss
         * @returns 时间字符串
         */
        TimeUitls.formatSecond = function formatSecond(second, format) {
          if (format === void 0) {
            format = "hh:mm:ss";
          }
          var h = 0,
            m = 0,
            s = 0;
          if (second >= 3600) {
            h = Math.floor(second / 3600);
            second -= h * 3600;
          }
          if (second >= 60) {
            m = Math.floor(second / 60);
            second -= m * 60;
          }
          s = second;
          var formatArr = format.split(":");
          switch (formatArr.length) {
            case 1:
              return "" + (s < 10 && formatArr[0].length >= 2 ? "0" : "") + s;
            case 2:
              return "" + (m < 10 && formatArr[1].length >= 2 ? "0" : "") + m + ":" + (s < 10 && formatArr[0].length >= 2 ? "0" : "") + s;
            case 3:
              return "" + (h < 10 && formatArr[2].length >= 2 ? "0" : "") + h + ":" + (m < 10 && formatArr[1].length >= 2 ? "0" : "") + m + ":" + (s < 10 && formatArr[0].length >= 2 ? "0" : "") + s;
          }
          return "";
        }

        // class end
        ;

        return TimeUitls;
      }());
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Touch.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Enum2.ts'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, Node, misc, Component, TouchEvent;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      misc = module.misc;
      Component = module.Component;
    }, function (module) {
      TouchEvent = module.TouchEvent;
    }],
    execute: function () {
      var _dec, _class;
      cclegacy._RF.push({}, "81bb0/FB2RIr4GT21W+y8dV", "Touch", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var Touch = exports('Touch', (_dec = ccclass('Touch'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(Touch, _Component);
        function Touch() {
          return _Component.apply(this, arguments) || this;
        }
        var _proto = Touch.prototype;
        _proto.start = function start() {};
        _proto.onLoad = function onLoad() {
          this.registerEvent();
        };
        _proto.registerEvent = function registerEvent() {
          var _this = this;
          this.node.on(Node.EventType.TOUCH_END, function (e) {
            var startPoint = e.getStartLocation();
            var endPoint = e.getLocation();
            var v = endPoint.subtract(startPoint);
            var radians = Math.atan2(v.y, v.x);
            var degrees = misc.radiansToDegrees(radians);
            var index = Math.floor(degrees / 45);
            _this.emitEventByIndex(index);
          }, this);
        };
        _proto.emitEventByIndex = function emitEventByIndex(index) {
          // 8 方向判断
          if (index === 0 || index === -1) {
            this.node.emit(TouchEvent.RIGHT);
          } else if (index === 1 || index === 2) {
            this.node.emit(TouchEvent.UP);
          } else if (index === -2 || index === -3) {
            this.node.emit(TouchEvent.DOWN);
          } else if (index === -4 || index === 3 || index === 4) {
            this.node.emit(TouchEvent.LEFT);
          } else {
            console.error("无此方向");
          }
        };
        _proto.update = function update(deltaTime) {};
        return Touch;
      }(Component)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TouchMove.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, Node, Vec2, Component;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Vec2 = module.Vec2;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class;
      cclegacy._RF.push({}, "06965eGdi5HrrZ1LrLSfO4l", "TouchMove", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var TouchMove = exports('TouchMove', (_dec = ccclass('TouchMove'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(TouchMove, _Component);
        function TouchMove() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.isDragging = false;
          _this.dragOffset = new Vec2();
          return _this;
        }
        var _proto = TouchMove.prototype;
        _proto.start = function start() {
          this.node.on(Node.EventType.TOUCH_START, this.onTouchStart, this);
          this.node.on(Node.EventType.TOUCH_MOVE, this.onTouchMove, this);
          this.node.on(Node.EventType.TOUCH_END, this.onTouchEnd, this);
          this.node.on(Node.EventType.TOUCH_CANCEL, this.onTouchEnd, this);
        };
        _proto.onTouchStart = function onTouchStart(event) {
          this.isDragging = true;
          var locationInNode = event.getLocation(); //this.node.convertToNodeSpaceAR(touch.getLocation());
          this.dragOffset.set(locationInNode.x - this.node.position.x, locationInNode.y - this.node.position.y);
        };
        _proto.onTouchMove = function onTouchMove(event) {
          if (this.isDragging) {
            // const touch = event.getTouch();
            var locationInNode = event.getLocation(); //this.node.convertToNodeSpaceAR(touch.getLocation());
            this.node.setPosition(locationInNode.x - this.dragOffset.x, locationInNode.y - this.dragOffset.y);
          }
        };
        _proto.onTouchEnd = function onTouchEnd(event) {
          this.isDragging = false;
        };
        _proto.update = function update(deltaTime) {};
        return TouchMove;
      }(Component)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TowerBuildInfo.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _inheritsLoose, _createClass, cclegacy, _decorator, Component;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class;
      cclegacy._RF.push({}, "ea529TTVC1LXLXfnGNnpTip", "TowerBuildInfo", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var TowerBuildInfo = exports('TowerBuildInfo', (_dec = ccclass('TowerBuildInfo'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(TowerBuildInfo, _Component);
        function TowerBuildInfo() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.road = void 0;
          _this.selectedTowerId = void 0;
          _this.removeBackCost = void 0;
          _this.upLevelCost = void 0;
          _this.tower = void 0;
          return _this;
        }
        var _proto = TowerBuildInfo.prototype;
        _proto.start = function start() {};
        _proto.update = function update(deltaTime) {};
        _createClass(TowerBuildInfo, [{
          key: "id",
          get: function get() {
            if (!this.road) {
              return null;
            }
            return this.road.cx + "_" + this.road.cy;
          }
        }]);
        return TowerBuildInfo;
      }(Component)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TowerCharacter.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Enemy.ts', './TowerLauncher.ts', './Character.ts', './BulletManager.ts', './TowerDataDTO.ts', './TowerConfig.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, cclegacy, _decorator, Node, Prefab, Graphics, CCInteger, CCBoolean, SpriteFrame, Animation, Color, Sprite, UITransform, Enemy, TowerLauncher, Character, BulletManager, TowerDataDTO, TowerConfig;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Prefab = module.Prefab;
      Graphics = module.Graphics;
      CCInteger = module.CCInteger;
      CCBoolean = module.CCBoolean;
      SpriteFrame = module.SpriteFrame;
      Animation = module.Animation;
      Color = module.Color;
      Sprite = module.Sprite;
      UITransform = module.UITransform;
    }, function (module) {
      Enemy = module.Enemy;
    }, function (module) {
      TowerLauncher = module.TowerLauncher;
    }, function (module) {
      Character = module.default;
    }, function (module) {
      BulletManager = module.BulletManager;
    }, function (module) {
      TowerDataDTO = module.TowerDataDTO;
    }, function (module) {
      TowerConfig = module.TowerConfig;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7;
      cclegacy._RF.push({}, "c685bNc3pFOWJmYrl+ckRxI", "TowerCharacter", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var TowerCharacter = exports('TowerCharacter', (_dec = ccclass('TowerCharacter'), _dec2 = property(Node), _dec3 = property(Prefab), _dec4 = property(Graphics), _dec5 = property(CCInteger), _dec6 = property({
        tooltip: "控制炮塔是否需要旋转",
        type: CCBoolean
      }), _dec7 = property({
        tooltip: "炮塔等级外观资源",
        type: [SpriteFrame]
      }), _dec8 = property(CCBoolean), _dec(_class = (_class2 = /*#__PURE__*/function (_Character) {
        _inheritsLoose(TowerCharacter, _Character);
        function TowerCharacter() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Character.call.apply(_Character, [this].concat(args)) || this;
          _this.lockTarget = null;
          _initializerDefineProperty(_this, "tempLockTarget", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "bulletPrefab", _descriptor2, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "graphics", _descriptor3, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "range", _descriptor4, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "fortIsRotate", _descriptor5, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "TowerSpriteFrame", _descriptor6, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "isTest", _descriptor7, _assertThisInitialized(_this));
          _this.fireRate = 0.3;
          _this.timeSinceLastFire = 0;
          _this.fort = null;
          _this.enemyList = void 0;
          _this.animation = null;
          _this._level = 1;
          _this._towerData = null;
          _this.towerId = 0;
          return _this;
        }
        var _proto = TowerCharacter.prototype;
        _proto.onLoad = function onLoad() {
          _Character.prototype.onLoad.call(this);
          this.fort = this.node.getChildByName("fort");
          if (this.fort) {
            this.animation = this.fort.getComponent(Animation);
          }
          // this.node.on(NodeEventType.TOUCH_START, this.onClickNode, this);
          this.enemyList = {};
        };
        _proto.onClickNode = function onClickNode(event) {
          this.createBullet();
        };
        _proto.start = function start() {
          if (TowerLauncher.instance && TowerLauncher.instance.isDebug) {
            this.drawRange();
          }
        };
        _proto.drawRange = function drawRange() {
          this.graphics.clear();
          this.graphics.strokeColor = Color.RED;
          this.graphics.lineWidth = 5;
          this.graphics.circle(0, 0, this.range);
          this.graphics.stroke();
        };
        _proto.getTarget = function getTarget() {
          if (!this.enemyList) {
            return null;
          }
          var enemyKeys = Object.keys(this.enemyList);
          if (enemyKeys.length <= 0) {
            return null;
          }
          var index = -1;
          var minHp = Number.MAX_VALUE;
          for (var i = 0; i < enemyKeys.length; i++) {
            var enemy = this.enemyList[enemyKeys[i]];
            if (enemy.hp < minHp) {
              minHp = enemy.hp;
              index = i;
            }
          }
          if (index != -1) {
            return this.enemyList[enemyKeys[index]];
          }
          return this.enemyList[enemyKeys[0]];
        };
        _proto.update = function update(deltaTime) {
          if (!this.isTest && TowerLauncher.instance && (TowerLauncher.instance.gameOver || TowerLauncher.instance.pause)) {
            return;
          }
          this.timeSinceLastFire += deltaTime;
          this.enemyList = {};
          var foundList = [];
          if (TowerLauncher.instance && TowerLauncher.instance.quadTree) {
            foundList = TowerLauncher.instance.quadTree.queryInRange(this.rect, this.range);
          }
          // const foundEnemyList:Enemy[] = [];
          if (foundList.length > 0) {
            for (var i = 0; i < foundList.length; i++) {
              var e = foundList[i];
              if (e instanceof Enemy) {
                this.enemyList[e.uuid] = e;
              }
            }
          }
          var enemy = this.getTarget();
          this.lockTarget = enemy ? enemy.node : this.tempLockTarget;
          if (this.lockTarget && this.fortIsRotate) {
            var currentPos = this.node.position.clone();
            var targetPos = this.lockTarget.position.clone();
            var radian = Math.atan2(targetPos.y - currentPos.y, targetPos.x - currentPos.x);
            var angle = radian / Math.PI * 180;
            this.fort.angle = angle; //- 90

            // this.node.lookAt(this.lockTarget.worldPosition,math.v3(0,1,0));
            // this.node.eulerAngles = math.v3(0,0,this.node.eulerAngles.z)
          }

          if (this.lockTarget && this.timeSinceLastFire > this.fireRate) {
            this.timeSinceLastFire = 0;
            console.log("创建子弹了");
            this.playFireAnimation();
          }
          // this.transform.lookAtZ(targetPos);
        };

        _proto.playFireAnimation = function playFireAnimation() {
          if (this.animation) {
            var clips = this.animation.clips;
            var names = clips.map(function (clip) {
              return clip.name;
            }, this);
            this.animation.on(Animation.EventType.FINISHED, this.onAnimationFinished, this);
            this.animation.play(names[Math.max(0, this.level - 1)]);
          }
        }

        /**
         * 更新炮塔外观
         */;
        _proto.updateTowerOutward = function updateTowerOutward() {
          if (this.fort) {
            var fortSprinte = this.fort.getComponent(Sprite);
            if (fortSprinte) {
              fortSprinte.spriteFrame = this.TowerSpriteFrame[Math.max(0, this.level - 1)];
            }
          }
        };
        _proto.updateLevel = function updateLevel(level) {
          this._level = level;
          this.updateTowerOutward();
          this._towerData = TowerConfig.instance.getTowerConfig(this.towerId, this.level);
        };
        _proto.onAnimationFinished = function onAnimationFinished() {
          this.createBullet();
        };
        _proto.createBullet = function createBullet() {
          if (!this.lockTarget || TowerLauncher.instance && (TowerLauncher.instance.gameOver || TowerLauncher.instance.pause)) {
            return;
          }
          var bullet = BulletManager.instance.create(this.bulletPrefab);
          var node = bullet.node;
          // const pos = new Vec3();
          var pos = this.node.position.clone();
          var fortRadius = this.fort.getComponent(UITransform).width / 2;
          var angle = this.fort.angle;
          var x = pos.x + fortRadius * Math.cos(angle);
          var y = pos.y + fortRadius * Math.sin(angle);
          node.setPosition(x, y);
          // bullet.targetNode = this.lockTarget;
          node.parent = this.node.parent;
          var direction = this.lockTarget.position.clone().subtract(this.node.position.clone());
          bullet["short"](direction, this);
        };
        _createClass(TowerCharacter, [{
          key: "towerData",
          get: function get() {
            if (!this._towerData) {
              this._towerData = new TowerDataDTO();
              this._towerData.buildCost = 100;
              this._towerData.harm = 10;
              this._towerData.speed = 300;
              this._towerData.removeBack = 90;
            }
            return this._towerData;
          },
          set: function set(value) {
            this._towerData = value;
          }
        }, {
          key: "level",
          get: function get() {
            return this._level;
          }
        }]);
        return TowerCharacter;
      }(Character), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "tempLockTarget", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "bulletPrefab", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "graphics", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "range", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 100;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "fortIsRotate", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return true;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "TowerSpriteFrame", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "isTest", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      })), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TowerConfig.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './TowerLauncher.ts', './TowerDataDTO.ts', './TowerMapDTO.ts'], function (exports) {
  var _createClass, cclegacy, _decorator, resources, TowerLauncher, TowerDataDTO, TowerMapDTO;
  return {
    setters: [function (module) {
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      resources = module.resources;
    }, function (module) {
      TowerLauncher = module.TowerLauncher;
    }, function (module) {
      TowerDataDTO = module.TowerDataDTO;
    }, function (module) {
      TowerMapDTO = module.TowerMapDTO;
    }],
    execute: function () {
      cclegacy._RF.push({}, "024e1/UrblCvpLKieiVb4pK", "TowerConfig", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var TowerConfig = exports('TowerConfig', /*#__PURE__*/function () {
        function TowerConfig() {
          this._config = null;
          this._towerData = void 0;
          this._mapData = void 0;
          this.init();
        }
        var _proto = TowerConfig.prototype;
        _proto.init = function init() {};
        _proto.loadConfig = function loadConfig() {
          return new Promise(function (resolve, reject) {
            resources.load("tower/config", function (err, data) {
              if (err) {
                reject(err);
                return;
              }
              resolve(data);
            });
          });
        };
        _proto.initConfig = function initConfig(config) {
          this._config = config.json;
          this._towerData = {};
          this._mapData = {};
          var towersData = this._config["towers"];
          if (towersData) {
            for (var _key in towersData) {
              var towerId = Number(_key);
              var towrData = towersData[_key];
              var idDtoMap = this._towerData[towerId];
              if (!idDtoMap) {
                idDtoMap = {};
              }
              for (var levelKey in towrData) {
                if (Object.prototype.hasOwnProperty.call(towrData, levelKey)) {
                  var element = towrData[levelKey];
                  var dto = new TowerDataDTO();
                  dto.buildCost = element.buildCost;
                  dto.removeBack = element.removeBack;
                  dto.harm = element.harm;
                  dto.speed = element.speed;
                  idDtoMap[levelKey] = dto;
                }
              }
              this._towerData[towerId] = idDtoMap;
            }
          }
          var themeConfigs = this._config["theme"];
          for (var _key2 in themeConfigs) {
            var theme = Number(_key2);
            var themeData = this._mapData[theme];
            if (!themeData) {
              themeData = {};
            }
            var configData = themeConfigs[_key2];
            if (!configData) {
              continue;
            }
            for (var configDataKey in configData) {
              var mapConfig = configData[configDataKey];
              var _mapData = new TowerMapDTO();
              _mapData.canBuildTowerIds = mapConfig.towers;
              _mapData.startValue = mapConfig.startValue;
              _mapData.enemyCount = mapConfig.enemyCount;
              themeData[configDataKey] = _mapData;
            }
            this._mapData[theme] = themeData;
          }
          // TowerLauncher.instance.value = this._config["startValue"];
          var mapData = this.getMapData();
          if (mapData) {
            TowerLauncher.instance.value = mapData.startValue;
          }
        };
        _proto.getConfig = function getConfig(key) {
          if (!this._config) {
            return null;
          }
          return this._config[key];
        };
        _proto.getMapData = function getMapData(themeId, mapId) {
          if (themeId === void 0) {
            themeId = TowerLauncher.instance.theme;
          }
          if (mapId === void 0) {
            mapId = TowerLauncher.instance.mapId;
          }
          if (!this._mapData) {
            return null;
          }
          var themeConfigs = this._mapData[themeId];
          if (!themeConfigs) {
            return null;
          }
          var theme = themeConfigs["map" + mapId];
          return theme;
        };
        _proto.getTowerConfig = function getTowerConfig(towerId, level) {
          if (level === void 0) {
            level = 1;
          }
          if (!this._towerData) {
            return null;
          }
          var towerData = this._towerData[towerId];
          if (!towerData) {
            return null;
          }
          return towerData["level" + level];
        };
        _createClass(TowerConfig, null, [{
          key: "instance",
          get: function get() {
            if (!TowerConfig._instance) {
              TowerConfig._instance = new TowerConfig();
            }
            return TowerConfig._instance;
          }
        }]);
        return TowerConfig;
      }());
      TowerConfig._instance = void 0;
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TowerConst.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _createClass, cclegacy;
  return {
    setters: [function (module) {
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "b96a1/UGG1GsIYdJzPH2+aj", "TowerConst", undefined);
      var TowerConst = exports('TowerConst', /*#__PURE__*/function () {
        function TowerConst() {
          this.ColliderTag_Boss = 1;
          this.ColliderTag_Enemy = 2;
          this.ColliderTag_Bullet = 3;
        }
        _createClass(TowerConst, null, [{
          key: "instance",
          get: function get() {
            if (!this._instance) {
              this._instance = new TowerConst();
            }
            return this._instance;
          }
        }]);
        return TowerConst;
      }());
      TowerConst._instance = void 0;
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TowerDataDTO.ts", ['cc'], function (exports) {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "c1445wiXudFgIm5Jtc1mcnx", "TowerDataDTO", undefined);
      var TowerDataDTO = exports('TowerDataDTO', function TowerDataDTO() {
        this.buildCost = void 0;
        this.removeBack = void 0;
        this.harm = void 0;
        this.speed = void 0;
      });
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TowerGameScene.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './BaseView.ts', './ViewRegisterMgr.ts', './PanelEnum.ts', './LayerManager.ts', './ViewConst.ts'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, BaseView, registerView, PanelType, LayerType, ViewConst;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }, function (module) {
      BaseView = module.default;
    }, function (module) {
      registerView = module.registerView;
    }, function (module) {
      PanelType = module.PanelType;
    }, function (module) {
      LayerType = module.LayerType;
    }, function (module) {
      ViewConst = module.default;
    }],
    execute: function () {
      var _dec, _class;
      cclegacy._RF.push({}, "0a80eWIP15IiJC23Tc8ca/3", "TowerGameScene", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var TowerGameScene = exports('TowerGameScene', (_dec = ccclass('TowerGameScene'), _dec(_class = /*#__PURE__*/function (_BaseView) {
        _inheritsLoose(TowerGameScene, _BaseView);
        function TowerGameScene() {
          return _BaseView.apply(this, arguments) || this;
        }
        var _proto = TowerGameScene.prototype;
        _proto.start = function start() {};
        _proto.update = function update(deltaTime) {};
        return TowerGameScene;
      }(BaseView)) || _class));
      registerView({
        viewCls: TowerGameScene,
        id: PanelType.TowerGameScene,
        layer: LayerType.view,
        prefabPathPrefix: ViewConst.defaultPrefabPathPrefix + "tower/"
      });
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TowerGameUIManager.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './TowerConfig.ts', './SelectTowerBuild.ts', './RemoveOrUpLevel.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, cclegacy, _decorator, Label, Node, NodePool, Sprite, Component, TowerConfig, SelectTowerBuild, RemoveOrUpLevel;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      Node = module.Node;
      NodePool = module.NodePool;
      Sprite = module.Sprite;
      Component = module.Component;
    }, function (module) {
      TowerConfig = module.TowerConfig;
    }, function (module) {
      SelectTowerBuild = module.SelectTowerBuild;
    }, function (module) {
      RemoveOrUpLevel = module.RemoveOrUpLevel;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3, _class3;
      cclegacy._RF.push({}, "e41482n/ApICY3mWFeB+JSK", "TowerGameUIManager", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var TowerGameUIManager = exports('TowerGameUIManager', (_dec = ccclass('GameUIManager'), _dec2 = property(Label), _dec3 = property(Node), _dec4 = property(Node), _dec(_class = (_class2 = (_class3 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(TowerGameUIManager, _Component);
        function TowerGameUIManager() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "turnipLabel", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "selectedTowerNode", _descriptor2, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "removeOrUpdate", _descriptor3, _assertThisInitialized(_this));
          _this._nodePool = null;
          return _this;
        }
        var _proto = TowerGameUIManager.prototype;
        _proto.onLoad = function onLoad() {
          if (!TowerGameUIManager._instance) {
            TowerGameUIManager._instance = this;
          } else {
            this.destroy();
          }
        };
        _proto.start = function start() {
          this._nodePool = new NodePool();
        };
        _proto.update = function update(deltaTime) {};
        _proto.updateValue = function updateValue(value) {
          if (this.turnipLabel) {
            this.turnipLabel.string = value.toString();
          }
        };
        _proto.showRemoveOrUpdate = function showRemoveOrUpdate(show, buildInfo, selectCall, callObj) {
          if (selectCall === void 0) {
            selectCall = null;
          }
          if (callObj === void 0) {
            callObj = null;
          }
          if (!this.removeOrUpdate) {
            return;
          }
          this.reomoveUpdateState = show;
          if (show && buildInfo) {
            this.removeOrUpdate.setPosition(buildInfo.node.position.clone());
            var script = this.removeOrUpdate.getComponent(RemoveOrUpLevel);
            if (script) {
              script.updateInfo(buildInfo, selectCall, callObj);
            }
          }
        }

        /**
         * 显示选择塔建造
         * @param show 是否显示
         * @param buildInfo
         * @param selectCall 选择回调函数
         * @param selectObj 选择回调函数对象
         */;
        _proto.showSelectTower = function showSelectTower(show, buildInfo, selectCall, selectObj) {
          if (selectCall === void 0) {
            selectCall = null;
          }
          if (selectObj === void 0) {
            selectObj = null;
          }
          if (!this.selectedTowerNode) {
            return false;
          }
          this.selectedTowerState = show;
          var childrenCount = this.selectedTowerNode.children.length;
          for (var i = childrenCount - 1; i >= 0; i--) {
            var child = this.selectedTowerNode.children[i];
            child.removeFromParent();
            this._nodePool.put(child);
          }
          if (show) {
            this.selectedTowerNode.setPosition(buildInfo.node.position.clone());
            var mapData = TowerConfig.instance.getMapData();
            if (mapData) {
              var canBuildTowers = mapData.canBuildTowerIds;
              for (var _i = 0; _i < canBuildTowers.length; _i++) {
                var towerId = canBuildTowers[_i];
                var towerBuild = this.getNode();
                this.selectedTowerNode.addChild(towerBuild.node);
                towerBuild.setTowerId(towerId);
                towerBuild.setBuildInfo(buildInfo);
                towerBuild.setClickCall(selectCall, selectObj);
              }
            }
          }
        };
        _proto.getNode = function getNode() {
          if (this._nodePool.size() > 0) {
            var _node = this._nodePool.get();
            var build = _node.getComponent(SelectTowerBuild);
            if (!build) {
              build = _node.addComponent(SelectTowerBuild);
            }
            _node.addComponent(Sprite);
            return build;
          }
          var node = new Node();
          node.addComponent(Sprite);
          return node.addComponent(SelectTowerBuild);
        };
        _createClass(TowerGameUIManager, [{
          key: "reomoveUpdateState",
          get: function get() {
            if (this.removeOrUpdate) {
              return this.removeOrUpdate.active;
            }
            return false;
          },
          set: function set(show) {
            if (this.removeOrUpdate) {
              this.removeOrUpdate.active = show;
            }
          }
        }, {
          key: "selectedTowerState",
          get: function get() {
            if (this.selectedTowerNode) {
              return this.selectedTowerNode.active;
            }
            return false;
          },
          set: function set(value) {
            if (this.selectedTowerNode) {
              this.selectedTowerNode.active = value;
            }
          }
        }], [{
          key: "instance",
          get: function get() {
            if (!TowerGameUIManager._instance) {
              TowerGameUIManager._instance = new TowerGameUIManager();
            }
            return TowerGameUIManager._instance;
          }
        }]);
        return TowerGameUIManager;
      }(Component), _class3._instance = void 0, _class3), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "turnipLabel", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "selectedTowerNode", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "removeOrUpdate", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TowerLauncher.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Enemy.ts', './QuadTree.ts', './BulletManager.ts', './TowerGameUIManager.ts', './ViewManager.ts', './PanelEnum.ts', './TowerConfig.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, _asyncToGenerator, _regeneratorRuntime, cclegacy, _decorator, Graphics, Color, Component, Enemy, QuadTree, AnchorPointType, QuadTreeRect, BulletManager, TowerGameUIManager, viewManager, PanelType, TowerConfig;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
      _asyncToGenerator = module.asyncToGenerator;
      _regeneratorRuntime = module.regeneratorRuntime;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Graphics = module.Graphics;
      Color = module.Color;
      Component = module.Component;
    }, function (module) {
      Enemy = module.Enemy;
    }, function (module) {
      QuadTree = module.QuadTree;
      AnchorPointType = module.AnchorPointType;
      QuadTreeRect = module.QuadTreeRect;
    }, function (module) {
      BulletManager = module.BulletManager;
    }, function (module) {
      TowerGameUIManager = module.TowerGameUIManager;
    }, function (module) {
      viewManager = module.viewManager;
    }, function (module) {
      PanelType = module.PanelType;
    }, function (module) {
      TowerConfig = module.TowerConfig;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor, _class3;
      cclegacy._RF.push({}, "d1c78JbMBZGZZoWCxl3zSdU", "TowerLauncher", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var TowerLauncher = exports('TowerLauncher', (_dec = ccclass('TowerLauncher'), _dec2 = property(Graphics), _dec(_class = (_class2 = (_class3 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(TowerLauncher, _Component);
        function TowerLauncher() {
          var _this;
          _this = _Component.call(this) || this;
          _initializerDefineProperty(_this, "graphics", _descriptor, _assertThisInitialized(_this));
          _this.isInit = false;
          _this.speed = 1;
          _this.pause = false;
          _this.theme = 1;
          _this.gameOver = false;
          _this.mapId = 1;
          _this.popEnemyCount = 0;
          _this._value = 0;
          _this._entityLayer = void 0;
          _this._mapLayer = void 0;
          _this._enemyList = void 0;
          _this._towerList = void 0;
          _this._boss = void 0;
          _this._buildInfos = void 0;
          _this._mapPathCache = void 0;
          _this.quadTree = null;
          _this.isDebug = true;
          return _this;
        }
        var _proto = TowerLauncher.prototype;
        _proto.onLoad = function onLoad() {
          if (!TowerLauncher._instance) {
            TowerLauncher._instance = this;
          } else {
            this.destroy();
          }
        };
        _proto.init = function init(entityLayer, mapLayer) {
          this._entityLayer = entityLayer;
          this._mapLayer = mapLayer;
          this._enemyList = {};
          this._towerList = {};
          this._buildInfos = {};
          this._mapPathCache = {};
        };
        _proto.getWorldPath = /*#__PURE__*/function () {
          var _getWorldPath = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
            var mapKey, result;
            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) switch (_context.prev = _context.next) {
                case 0:
                  mapKey = this.theme + "_" + this.mapId;
                  result = this._mapPathCache[mapKey];
                  if (!(result && result.length > 0)) {
                    _context.next = 4;
                    break;
                  }
                  return _context.abrupt("return", result);
                case 4:
                  if (!this._mapLayer) {
                    _context.next = 10;
                    break;
                  }
                  _context.next = 7;
                  return this._mapLayer.animationPath.getWorldPathByMapId(this.mapId, this.theme);
                case 7:
                  result = _context.sent;
                  this._mapPathCache[mapKey] = result;
                  return _context.abrupt("return", result);
                case 10:
                  return _context.abrupt("return", []);
                case 11:
                case "end":
                  return _context.stop();
              }
            }, _callee, this);
          }));
          function getWorldPath() {
            return _getWorldPath.apply(this, arguments);
          }
          return getWorldPath;
        }();
        _proto.addEnemy = function addEnemy(enemy) {
          if (!enemy || !enemy.node) {
            return;
          }
          // this.quadTree.insert(enemy);
          this._enemyList[enemy.uuid] = enemy;
        };
        _proto.removeEnemy = function removeEnemy(enemy) {
          if (!enemy || !enemy.node) {
            return;
          }
          // this.quadTree.remove(enemy);
          delete this._enemyList[enemy.uuid];
        };
        _proto.addBuildInfo = function addBuildInfo(build) {
          this._buildInfos[build.id] = build;
        };
        _proto.getBuildInfo = function getBuildInfo(id) {
          return this._buildInfos[id];
        };
        _proto.getEnemySize = function getEnemySize() {
          if (!this._enemyList) {
            return 0;
          }
          return Object.keys(this._enemyList).length;
        };
        _proto.addBoss = function addBoss(boss) {
          this._boss = boss;
        };
        _proto.addTower = function addTower(tower) {
          if (!tower || !tower.node) {
            return;
          }
          this._towerList[tower.uuid] = tower;
        };
        _proto.removeTower = function removeTower(tower) {
          if (!tower || !tower.node) {
            return;
          }
          delete this._towerList[tower.uuid];
        };
        _proto.onGameStar = function onGameStar(level) {
          // const map:TowerSceneMap = this.node.getComponent(TowerSceneMap);
          // if(map){
          //     map.setMapId(level, MapLoadModel.single);
          // }
          // TowerSceneMap.instance.setMapId(level)
        };
        _proto.start = function start() {
          // console.log("游戏管理脚本")
          // const size: Size = view.getVisibleSize();
          // const rect: QuadTreeRect = new QuadTreeRect(0, 0, size.width, size.height);
          // this.quadTree = new QuadTree<Behaviour>(rect, 10, 5, AnchorPointType.LeftDown);

          // this.onGameStar(1)
        };
        _proto.initQuadTree = function initQuadTree(width, height) {
          var rect = new QuadTreeRect(0, 0, width, height);
          this.quadTree = new QuadTree(rect, 10, 5, AnchorPointType.LeftDown);
        };
        _proto.update = function update(deltaTime) {
          if (!this.isInit || this.gameOver || this.pause) {
            return;
          }
          this.quadTree.clear();
          var bullets = BulletManager.instance.bulletList;
          if (bullets.length > 0) {
            for (var i = 0; i < bullets.length; i++) {
              var bullet = bullets[i];
              this.quadTree.insert(bullet);
            }
          }
          for (var _key in this._towerList) {
            this.quadTree.insert(this._towerList[_key]);
          }
          for (var _key2 in this._enemyList) {
            this.quadTree.insert(this._enemyList[_key2]);
          }
          this.quadTree.insert(this._boss);
          if (bullets.length > 0) {
            for (var _i = 0; _i < bullets.length; _i++) {
              var _bullet = bullets[_i];
              var child = [];
              this.quadTree.query(_bullet.rect, child);
              if (child.length > 0) {
                for (var j = 0; j < child.length; j++) {
                  var e = child[j];
                  if (e instanceof Enemy) {
                    console.log("子弹", _bullet, "打中了", e);
                    e.damage(_bullet.harm);
                    _bullet.node.removeFromParent();
                    BulletManager.instance.release(_bullet);
                    _i--;
                  }
                }
              }
            }
          }
          if (this._boss) {
            var collideBossElements = [];
            this.quadTree.query(this._boss.rect, collideBossElements);
            if (collideBossElements.length > 0) {
              for (var _i2 = 0; _i2 < collideBossElements.length; _i2++) {
                var element = collideBossElements[_i2];
                if (element instanceof Enemy) {
                  console.log("敌人", element, "跟boss碰撞了");
                  this._boss.bleeding();
                  element.die();
                }
              }
            }
          }
          var mapData = TowerConfig.instance.getMapData();
          if (mapData) {
            var maxEnemy = mapData.enemyCount;
            if (this.popEnemyCount >= maxEnemy) {
              this.gameOver = true;
              this.doGameOver(true);
            }
          }
          if (this.isDebug) {
            var qtList = [];
            this.quadTree.getAllChildNodes(qtList);
            var rects = qtList.map(function (e) {
              return e.rect;
            }, this);
            this.drawRect(rects);
          }
        };
        _proto.drawRect = function drawRect(rect) {
          this.graphics.clear();
          for (var index = 0; index < rect.length; index++) {
            var element = rect[index];
            this.graphics.fillColor = Color.RED;
            this.graphics.strokeColor = Color.YELLOW;
            this.graphics.lineWidth = 5;
            var x = element.x;
            var y = element.y;
            this.graphics.circle(element.x, element.y, 10);
            this.graphics.fill();
            this.graphics.rect(x, y, element.width, element.height);
            this.graphics.stroke();
          }
        };
        _proto.drawPoint = function drawPoint(point, radius) {
          if (radius === void 0) {
            radius = 10;
          }
          this.graphics.lineWidth = 5;
          this.graphics.fillColor = Color.RED;
          this.graphics.circle(point.x, point.y, radius);
          this.graphics.fill();
        };
        _proto.doGameOver = function doGameOver(isWin) {
          if (isWin === void 0) {
            isWin = false;
          }
          if (Object.keys(this._enemyList).length > 0) {
            for (var _key3 in this._enemyList) {
              if (Object.prototype.hasOwnProperty.call(this._enemyList, _key3)) {
                var element = this._enemyList[_key3];
                element.node.removeFromParent();
                this.removeEnemy(element);
              }
            }
            this._enemyList = {};
          }
          BulletManager.instance.releaseAll();
          viewManager.open(PanelType.GameOverOrWin, isWin);
        };
        _proto.restart = function restart() {
          this.gameOver = false;
          this.pause = false;
        };
        _createClass(TowerLauncher, [{
          key: "value",
          get: function get() {
            return this._value;
          },
          set: function set(value) {
            this._value = value;
            TowerGameUIManager.instance.updateValue(value);
          }
        }], [{
          key: "instance",
          get: function get() {
            // if (!this._instance) {
            //     this._instance = new TowerLauncher();
            // }
            return this._instance;
          }
        }]);
        return TowerLauncher;
      }(Component), _class3._instance = void 0, _class3), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "graphics", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _class2)) || _class));
      window["TowerLauncher"] = TowerLauncher;
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TowerMapDTO.ts", ['cc'], function (exports) {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "79e45LBSTFIbJndn2KyjUXD", "TowerMapDTO", undefined);
      var TowerMapDTO = exports('TowerMapDTO', function TowerMapDTO() {
        this.canBuildTowerIds = void 0;
        this.startValue = void 0;
        this.enemyCount = void 0;
      });
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TowerMapLayer.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './MapLayer.ts', './TowerLauncher.ts', './AnimationPath.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, cclegacy, _decorator, Sprite, Node, UITransform, resources, Texture2D, SpriteFrame, MapLayer, TowerLauncher, AnimationPath;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Sprite = module.Sprite;
      Node = module.Node;
      UITransform = module.UITransform;
      resources = module.resources;
      Texture2D = module.Texture2D;
      SpriteFrame = module.SpriteFrame;
    }, function (module) {
      MapLayer = module.default;
    }, function (module) {
      TowerLauncher = module.TowerLauncher;
    }, function (module) {
      AnimationPath = module.AnimationPath;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3;
      cclegacy._RF.push({}, "b4312URXw1D4KM7vEOKPHD6", "TowerMapLayer", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var TowerMapLayer = exports('TowerMapLayer', (_dec = ccclass('TowerMapLayer'), _dec2 = property(Sprite), _dec3 = property(AnimationPath), _dec4 = property(Node), _dec(_class = (_class2 = /*#__PURE__*/function (_MapLayer) {
        _inheritsLoose(TowerMapLayer, _MapLayer);
        function TowerMapLayer() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _MapLayer.call.apply(_MapLayer, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "baseImage", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "animationPath", _descriptor2, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "roadNode", _descriptor3, _assertThisInitialized(_this));
          return _this;
        }
        var _proto = TowerMapLayer.prototype;
        _proto.onLoad = function onLoad() {
          if (!this.animationPath) {
            this.animationPath = this.node.getComponentInChildren(AnimationPath);
          }
        };
        _proto.init = function init(mapParams) {
          _MapLayer.prototype.init.call(this, mapParams);
          if (!this.baseImage) {
            var bgNode = new Node();
            this.node.addChild(bgNode);
            bgNode.layer = this.node.layer;
            this.baseImage = bgNode.addComponent(Sprite);
            this.baseImage.sizeMode = Sprite.SizeMode.RAW;
            bgNode.getComponent(UITransform).anchorX = 0;
            bgNode.getComponent(UITransform).anchorY = 0;
          }
          this.loadBg();
        };
        _proto.loadBg = function loadBg() {
          var _this2 = this;
          var themeId = TowerLauncher.instance.theme;
          var path = "tower/map/theme" + themeId + "/BG" + themeId + "/texture";
          resources.load(path, Texture2D, function (error, tex) {
            if (error != null) {
              console.log("加载地图背景失败 path = ", path, "error", error);
              return;
            }
            var spriteFrame = new SpriteFrame();
            spriteFrame.texture = tex;
            _this2.baseImage.spriteFrame = spriteFrame;
            _this2.getComponent(UITransform).width = _this2.width;
            _this2.getComponent(UITransform).height = _this2.height;
          });
        };
        _createClass(TowerMapLayer, [{
          key: "width",
          get: function get() {
            if (this.baseImage) {
              return this.baseImage.getComponent(UITransform).width;
            }
            return this._mapParams.viewWidth;
          }
        }, {
          key: "height",
          get: function get() {
            if (this.baseImage) {
              return this.baseImage.getComponent(UITransform).height;
            }
            return this._mapParams.viewHeight;
          }
        }]);
        return TowerMapLayer;
      }(MapLayer), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "baseImage", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "animationPath", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "roadNode", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TowerSceneMap.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './SceneBase.ts', './Enum3.ts', './PathFindingAgent.ts', './Boss.ts', './Enemy.ts', './TowerCharacter.ts', './TowerLauncher.ts', './TowerBuildInfo.ts', './TowerMapLayer.ts', './TowerConfig.ts', './TowerGameUIManager.ts', './EffectManager.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, _asyncToGenerator, _regeneratorRuntime, cclegacy, _decorator, Prefab, Node, instantiate, UITransform, math, resources, Sprite, SpriteFrame, NodeEventType, SceneBase, MapItemType, PathOptimize, PathQuadSeek, PathFindingAgent, Boss, Enemy, TowerCharacter, TowerLauncher, TowerBuildInfo, TowerMapLayer, TowerConfig, TowerGameUIManager, EffectManager;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
      _asyncToGenerator = module.asyncToGenerator;
      _regeneratorRuntime = module.regeneratorRuntime;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Prefab = module.Prefab;
      Node = module.Node;
      instantiate = module.instantiate;
      UITransform = module.UITransform;
      math = module.math;
      resources = module.resources;
      Sprite = module.Sprite;
      SpriteFrame = module.SpriteFrame;
      NodeEventType = module.NodeEventType;
    }, function (module) {
      SceneBase = module.SceneBase;
    }, function (module) {
      MapItemType = module.MapItemType;
      PathOptimize = module.PathOptimize;
      PathQuadSeek = module.PathQuadSeek;
    }, function (module) {
      PathFindingAgent = module.default;
    }, function (module) {
      Boss = module.Boss;
    }, function (module) {
      Enemy = module.Enemy;
    }, function (module) {
      TowerCharacter = module.TowerCharacter;
    }, function (module) {
      TowerLauncher = module.TowerLauncher;
    }, function (module) {
      TowerBuildInfo = module.TowerBuildInfo;
    }, function (module) {
      TowerMapLayer = module.TowerMapLayer;
    }, function (module) {
      TowerConfig = module.TowerConfig;
    }, function (module) {
      TowerGameUIManager = module.TowerGameUIManager;
    }, function (module) {
      EffectManager = module.EffectManager;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _class3;
      cclegacy._RF.push({}, "dba7ck8uaxPArkxJ561JqIv", "TowerSceneMap", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var TowerSceneMap = exports('TowerSceneMap', (_dec = ccclass('TowerSceneMap'), _dec2 = property(Prefab), _dec3 = property(TowerMapLayer), _dec4 = property(Prefab), _dec5 = property([Prefab]), _dec6 = property(Node), _dec(_class = (_class2 = (_class3 = /*#__PURE__*/function (_SceneBase) {
        _inheritsLoose(TowerSceneMap, _SceneBase);
        function TowerSceneMap() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _SceneBase.call.apply(_SceneBase, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "bossPrefab", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "mapLayer", _descriptor2, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "enemyPrefab", _descriptor3, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "towerPrefab", _descriptor4, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "effectLayer", _descriptor5, _assertThisInitialized(_this));
          _this.spawnPointDatas = [];
          _this.maxEnemy = 10;
          _this.boss = null;
          _this.createEnemyDelay = 2;
          _this._time = 0;
          return _this;
        }
        var _proto = TowerSceneMap.prototype;
        _proto.onLoad = function onLoad() {
          // this.mapLayer =
          TowerSceneMap._instance = this;
        }

        // private mapPath: Vec2[] = [];
        ;

        _proto.start = function start() {
          _SceneBase.prototype.start.call(this);

          // this.winSize = view.getVisibleSize();
        };

        _proto.setMapId = function setMapId(mapId, mapLoadModel) {
          _SceneBase.prototype.setMapId.call(this, mapId, mapLoadModel);
          TowerLauncher.instance.mapId = mapId;
        };
        _proto.getMapPath = function getMapPath(mapId) {
          var themeId = TowerLauncher.instance.theme;
          return "tower/map/theme" + themeId + "/level" + mapId + "/level_" + themeId + "_" + mapId;
        };
        _proto.initMapElement = function initMapElement() {
          var mapItems = this.mapData.mapItems;
          if (!mapItems) {
            return;
          }
          TowerLauncher.instance.init(this.entityLayer, this.mapLayer);
          for (var i = 0; i < mapItems.length; i++) {
            var mapItem = mapItems[i];
            var mapItemType = mapItem.type;
            if (mapItemType == MapItemType.Npc) {
              this.initBoss(mapItem);
            } else if (mapItemType == MapItemType.Monster) ;else if (mapItemType == MapItemType.Transfer) ;else if (mapItemType == MapItemType.SpawnPoint) {
              this.initSpawnPoint(mapItem);
            }
          }
        };
        _proto.initSpawnPoint = function initSpawnPoint(mapItem) {
          this.spawnPointDatas.push(mapItem);
        };
        _proto.initBoss = function initBoss(mapItem) {
          var node = instantiate(this.bossPrefab);
          var boss = node.getComponent(Boss);
          this.boss = boss;
          node.active = true;
          node.parent = this.entityLayer.node;
          boss.initEditData(mapItem);
          boss.init();
          TowerLauncher.instance.addBoss(boss);
        };
        _proto.adapter = function adapter() {
          var uiTransform = this.node.getComponent(UITransform);
          var width = uiTransform ? uiTransform.width : 960;
          var height = uiTransform ? uiTransform.height : 640;
          var scale = Math.min(750 / width, 1335 / height);
          this.node.setScale(scale, scale);
          this.node.setPosition(math.v3(-(width * scale) / 2, -(height * scale) / 2));
        };
        _proto.initMapData = function initMapData(mapData) {
          this.isInit = false;
          var len = mapData.roadDataArr.length;
          var len2 = mapData.roadDataArr[0].length;
          var dx = 0;
          var dy = 0;
          for (var i = 0; i < len; i++) {
            for (var j = 0; j < len2; j++) {
              mapData.roadDataArr[i][j];
              dx = j;
              dy = i;
              var node = PathFindingAgent.instance.getRoadNode(dx, dy);
              this.createRoad(node);
            }
          }
          var uiTransform = this.node.getComponent(UITransform);
          var width = uiTransform ? uiTransform.width : 0;
          var height = uiTransform ? uiTransform.height : 0;
          this.adapter();
          TowerLauncher.instance.initQuadTree(width, height);
          this.spawnPointDatas = [];
          this.entityLayer.node.removeAllChildren();
          this.mapLayer.roadNode.removeAllChildren();
          PathFindingAgent.instance.setRoadSeekerPassCondition(this.onRoadSeekerPassCondition.bind(this));
          EffectManager.instance.initEffectLayer(this.effectLayer);
          this.initMapElement();
          TowerConfig.instance.loadConfig().then(function (config) {
            TowerConfig.instance.initConfig(config);
            TowerLauncher.instance.isInit = true;
          })["catch"](function (err) {
            console.error(err);
          });

          // TowerLauncher.instance.getWorldPath().then((paths: Vec2[]) => {
          //     // this.mapPath = paths;
          //
          //     TowerConfig.instance.loadConfig().then((config: any) => {
          //         TowerConfig.instance.initConfig(config);
          //         TowerLauncher.instance.isInit = true;
          //     }).catch(err => {
          //         console.error(err);
          //     })
          // }).catch(err => {
          //
          // });

          // this.createEnemy();
        };

        _proto.createRoad = function createRoad(road) {
          var _this2 = this;
          if (!road) {
            return;
          }
          if (road.value == 1) {
            return;
          }
          if (road.value == 0) {
            return;
          }
          var greenRoadPath = "tower/res/NormalMordel/Game/Grid/texture";
          var blueRoadPath = "tower/res/NormalMordel/Game/Grid/texture";
          var path = greenRoadPath;
          if (road.value == 3) {
            path = blueRoadPath;
          }
          resources.load(path, function (error, tex) {
            var bgNode = new Node();
            _this2.node.addChild(bgNode);
            bgNode.layer = _this2.node.layer;
            var sprite = bgNode.addComponent(Sprite);
            sprite.sizeMode = Sprite.SizeMode.CUSTOM;
            bgNode.getComponent(UITransform).width = _this2.mapData.nodeWidth;
            bgNode.getComponent(UITransform).height = _this2.mapData.nodeHeight;
            bgNode.getComponent(UITransform).anchorX = 0.5;
            bgNode.getComponent(UITransform).anchorY = 0.5;
            var sp = new SpriteFrame();
            sp.texture = tex;
            sprite.spriteFrame = sp;
            bgNode.setPosition(road.px, road.py);
            bgNode.parent = _this2.mapLayer.roadNode;
            var buildInfo = bgNode.addComponent(TowerBuildInfo);
            buildInfo.road = road;
            bgNode.on(NodeEventType.TOUCH_START, _this2.onClickTowerRoad, _this2);
            TowerLauncher.instance.addBuildInfo(buildInfo);
          });
        };
        _proto.onClickTowerRoad = function onClickTowerRoad(event) {
          if (TowerLauncher.instance.gameOver || TowerLauncher.instance.pause || !TowerLauncher.instance.isInit) {
            return;
          }
          var node = event.target;
          var buildInfo = node.getComponent(TowerBuildInfo);
          if (!buildInfo) {
            return;
          }
          if (buildInfo.tower) {
            //console.log("有炮塔了 选择移除还是升级");
            //this.removeTower(buildInfo)
            if (TowerGameUIManager.instance.reomoveUpdateState) {
              TowerGameUIManager.instance.reomoveUpdateState = false;
            } else {
              TowerGameUIManager.instance.showRemoveOrUpdate(true, buildInfo, this.reomveOrUpdateTower, this);
            }
          } else {
            // this.createTower(buildInfo);
            if (TowerGameUIManager.instance.selectedTowerState) {
              TowerGameUIManager.instance.selectedTowerState = false;
            } else {
              TowerGameUIManager.instance.showSelectTower(true, buildInfo, this.createTower, this);
            }
          }
        };
        _proto.reomveOrUpdateTower = function reomveOrUpdateTower(type, buildInfo) {
          if (type == 1) {
            // 升级
            if (buildInfo && buildInfo.tower) {
              buildInfo.tower.updateLevel(buildInfo.tower.level + 1);
            }
          } else if (type == 2) {
            // 移除
            this.removeTower(buildInfo);
          }
          TowerGameUIManager.instance.showRemoveOrUpdate(false);
        }

        // private buildTower(towerId:number,pos:Vec3):void{
        //     console.log("选择建造",towerId);
        //
        //
        // }
        ;

        _proto.createEnemy = /*#__PURE__*/
        function () {
          var _createEnemy = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
            var node, enemy, spawnPoint;
            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) switch (_context.prev = _context.next) {
                case 0:
                  node = instantiate(this.enemyPrefab);
                  node.active = true;
                  enemy = node.getComponent(Enemy);
                  spawnPoint = this.spawnPointDatas[0];
                  node.setPosition(spawnPoint.x, spawnPoint.y);
                  node.parent = this.entityLayer.node;
                  PathFindingAgent.instance.updateRoadSeekerInfo(PathOptimize.none, PathQuadSeek.path_dire_4);

                  // var roadNodeArr: RoadNode[] = PathFindingAgent.instance.seekPath(math.v2(node.position.x, node.position.y), math.v2(this.boss.x, this.boss.y));

                  enemy.navTo(this.boss.x, this.boss.y);
                  // this.enemyList.push(enemy);

                  // enemy.navigationByPath(this.mapPath);
                  TowerLauncher.instance.addEnemy(enemy);
                case 9:
                case "end":
                  return _context.stop();
              }
            }, _callee, this);
          }));
          function createEnemy() {
            return _createEnemy.apply(this, arguments);
          }
          return createEnemy;
        }();
        _proto.createTower = function createTower(buildInfo) {
          console.log("选择建造", buildInfo.selectedTowerId);
          var node = instantiate(this.towerPrefab[Math.max(0, buildInfo.selectedTowerId - 1)]);
          node.active = true;
          var tower = node.getComponent(TowerCharacter);
          tower.towerId = buildInfo.selectedTowerId;
          tower.updateLevel(1);
          node.parent = this.entityLayer.node;
          node.setPosition(buildInfo.node.position.x, buildInfo.node.position.y);
          buildInfo.tower = tower;
          TowerLauncher.instance.addTower(tower);
        };
        _proto.removeTower = function removeTower(buildInfo) {
          if (!buildInfo.tower) {
            return;
          }
          buildInfo.tower.node.removeFromParent();
          TowerLauncher.instance.removeTower(buildInfo.tower);
          buildInfo.tower = null;
          if (buildInfo.removeBackCost != 0) {
            TowerLauncher.instance.value += buildInfo.removeBackCost;
          }
        }

        /**
         * 检测塔防地图路径点是否通过的条件
         * @param road
         * @private
         */;
        _proto.onRoadSeekerPassCondition = function onRoadSeekerPassCondition(road) {
          if (!road || road.value == 1 || road.value == 3) {
            return false;
          }
          return true;
        };
        _proto.update = function update(deltaTime) {
          if (TowerLauncher.instance.gameOver || TowerLauncher.instance.pause || !TowerLauncher.instance.isInit) {
            return;
          }
          this._time += deltaTime;
          if (this._time >= this.createEnemyDelay) {
            var count = TowerLauncher.instance.getEnemySize();
            if (count < this.maxEnemy) {
              console.log("创建一个敌人");
              this.createEnemy();
            }
            this._time = 0;
          }
        };
        _createClass(TowerSceneMap, null, [{
          key: "instance",
          get: function get() {
            return this._instance;
          }
        }]);
        return TowerSceneMap;
      }(SceneBase), _class3._instance = null, _class3), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "bossPrefab", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "mapLayer", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "enemyPrefab", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "towerPrefab", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "effectLayer", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TransferDoor.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, cclegacy, _decorator, CCString, CCInteger, Label, Vec3, Component;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      CCString = module.CCString;
      CCInteger = module.CCInteger;
      Label = module.Label;
      Vec3 = module.Vec3;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3;
      cclegacy._RF.push({}, "81275RZmxBNOIMFeons0oZc", "TransferDoor", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;

      /**
       * 传送门
       */
      var TransferDoor = exports('default', (_dec = ccclass('TransferDoor'), _dec2 = property(CCString), _dec3 = property(CCInteger), _dec4 = property(Label), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(TransferDoor, _Component);
        function TransferDoor() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          /**
           * 传送到目标地图Id
           */
          _initializerDefineProperty(_this, "targetMapId", _descriptor, _assertThisInitialized(_this));
          /**
           * 传送到目标地图的出生点Id
           */
          _initializerDefineProperty(_this, "targetMapSpawnId", _descriptor2, _assertThisInitialized(_this));
          /**
           * 魔法值
           */
          _initializerDefineProperty(_this, "nameTxt", _descriptor3, _assertThisInitialized(_this));
          /**
           * 用于显示角色名字的接口
           */
          _this._objName = "";
          /**
           * 编辑的数据
           */
          _this.editData = null;
          return _this;
        }
        var _proto = TransferDoor.prototype;
        // LIFE-CYCLE CALLBACKS:
        // onLoad () {}
        _proto.start = function start() {

          //this.node.opacity = 0;
        }

        /**
         * 初始化
         */;
        _proto.init = function init() {}

        /**
         * 初始化编辑数据
         * @param editData 
         */;
        _proto.initEditData = function initEditData(editData) {
          this.editData = editData;
          this.objName = editData.objName;
          this.node.position = new Vec3(editData.x, editData.y);
          this.targetMapId = editData.targetMapId;
          this.targetMapSpawnId = editData.targetMapSpawnId;
        }

        // update (dt) {}
        ;

        _proto.toString = function toString() {
          return this.targetMapId + "," + this.targetMapSpawnId;
        }

        /**
         * 角色进入传送门
         * @param callback 
         */;
        _proto.onTriggerEnter = function onTriggerEnter(player) {
          if (player != null) {
            console.log("跳转到地图", this.targetMapId, this.targetMapSpawnId);
          }
        }

        /**
         * 角色从传送们出来
         * @param callback 
         */;
        _proto.onTriggerExit = function onTriggerExit(player) {
          //
        };
        _createClass(TransferDoor, [{
          key: "objName",
          get: function get() {
            return this._objName;
          },
          set: function set(value) {
            this._objName = value;
            if (this.nameTxt == null) {
              var _this$node$getChildBy;
              this.nameTxt = (_this$node$getChildBy = this.node.getChildByName("NameTxt")) == null ? void 0 : _this$node$getChildBy.getComponent(Label);
            }
            if (this.nameTxt) {
              this.nameTxt.string = this._objName;
            }
          }
        }]);
        return TransferDoor;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "targetMapId", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return "";
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "targetMapSpawnId", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "nameTxt", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Transform.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _inheritsLoose, _createClass, cclegacy, _decorator, Vec3, Quat, Node;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Vec3 = module.Vec3;
      Quat = module.Quat;
      Node = module.Node;
    }],
    execute: function () {
      var _dec, _class;
      cclegacy._RF.push({}, "a3d30//Iw9F147gC+EuFDcZ", "Transform", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var Transform = exports('Transform', (_dec = ccclass('Transform'), _dec(_class = /*#__PURE__*/function (_Node) {
        _inheritsLoose(Transform, _Node);
        function Transform() {
          return _Node.apply(this, arguments) || this;
        }
        var _proto = Transform.prototype;
        /**
         * 以节点的正Z轴为方向朝向目标
         * @param pos 
         * @param up 
         */
        _proto.lookAtZ = function lookAtZ(pos, up) {
          //super.lookAt(pos, up);

          var outDir = new Vec3();
          Vec3.subtract(outDir, pos, this.worldPosition);
          outDir.normalize();
          var quat = new Quat();
          Quat.fromViewUp(quat, outDir.normalize(), up);
          this.rotation = quat;
        };
        _proto.find = function find(path) {
          return this.getChildByPath(path);
        };
        _proto.getComponentInParent = function getComponentInParent(type) {
          var t = type;
          var component = this.getComponent(t);
          if (!component) {
            component = this.searchParentComponent(this, t);
          }

          //this.getComponent
          return component;
        };
        _proto.searchParentComponent = function searchParentComponent(node, type) {
          var t = type;
          var component = null;
          if (node.parent) {
            component = node.parent.getComponent(t);
            if (component) {
              return component;
            } else {
              component = this.searchParentComponent(node.parent, type);
              if (component) {
                return component;
              }
            }
          }
          return component;
        };
        _createClass(Transform, [{
          key: "transform",
          get: function get() {
            var node = this;
            return node;
          }
        }, {
          key: "gameObject",
          get: function get() {
            var node = this;
            return node;
          }
        }]);
        return Transform;
      }(Node)) || _class));
      Node.prototype["lookAtZ"] = Transform.prototype.lookAtZ;
      Node.prototype["find"] = Transform.prototype.find;
      Node.prototype["getComponentInParent"] = Transform.prototype.getComponentInParent;
      Node.prototype["searchParentComponent"] = Transform.prototype.searchParentComponent;
      //Node.prototype["gameObject"] = GameObject.prototype.gameObject; //GameObject已经设置过了，不用再设置
      //Node.prototype["transform"] = GameObject.prototype.transform; //GameObject已经设置过了，不用再设置
      //Transform.prototype = Node.prototype;
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UIExample.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './LayerManager.ts', './ViewManager.ts', './MainPanel.ts'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, Component, LayerManager, viewManager, MainPanel;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
    }, function (module) {
      LayerManager = module.default;
    }, function (module) {
      viewManager = module.viewManager;
    }, function (module) {
      MainPanel = module.MainPanel;
    }],
    execute: function () {
      var _dec, _class;
      cclegacy._RF.push({}, "15926Uri99IQaMlEWjEH2gQ", "UIExample", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var UIExample = exports('UIExample', (_dec = ccclass('UIExample'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(UIExample, _Component);
        function UIExample() {
          return _Component.apply(this, arguments) || this;
        }
        var _proto = UIExample.prototype;
        _proto.start = function start() {
          LayerManager.init(this.node);
          viewManager.open(MainPanel, "测试测试");
        };
        _proto.update = function update(deltaTime) {};
        return UIExample;
      }(Component)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Unit.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Containers.ts'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, Vec2, UITransform, Vec3, Containers;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Vec2 = module.Vec2;
      UITransform = module.UITransform;
      Vec3 = module.Vec3;
    }, function (module) {
      Containers = module.Containers;
    }],
    execute: function () {
      var _dec, _class;
      cclegacy._RF.push({}, "b5577I2andP3KxBIsjzv79g", "Unit", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;

      /**
       * @fileName Unit.ts
       * @author zhangqiong
       * @date 2024/12/18 16:27:46"
       * @description
       */
      var Unit = exports('Unit', (_dec = ccclass('Unit'), _dec(_class = /*#__PURE__*/function (_Containers) {
        _inheritsLoose(Unit, _Containers);
        function Unit() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Containers.call.apply(_Containers, [this].concat(args)) || this;
          _this.type = 0;
          _this.mId = void 0;
          _this.mType = void 0;
          _this.mLayer = void 0;
          _this.mScene = void 0;
          _this.isDestroy = false;
          _this.mLocation = void 0;
          _this._scaleX = void 0;
          _this._scaleY = void 0;
          _this._cibs = void 0;
          return _this;
        }
        var _proto = Unit.prototype;
        _proto.onLoad = function onLoad() {
          this.mLocation = new Vec2();
        };
        _proto.start = function start() {};
        _proto.update = function update(deltaTime) {};
        _proto.setId = function setId(id) {
          this.mId = id;
        };
        _proto.getId = function getId() {
          return this.mId;
        };
        _proto.setName = function setName(name) {
          this.name = name;
        };
        _proto.getName = function getName() {
          return this.name;
        };
        _proto.setScene = function setScene(scene) {
          this.mScene = scene;
        };
        _proto.getScene = function getScene() {
          return this.mScene;
        };
        _proto.setType = function setType(type) {
          this.mType = type;
        };
        _proto.getType = function getType() {
          return this.mType;
        };
        _proto.setLayer = function setLayer(layer) {
          this.mLayer = layer;
        };
        _proto.getLayer = function getLayer() {
          return this.mLayer;
        };
        _proto.remove = function remove(isDispose) {
          if (this.scene) {
            this.mScene.remove;
          } else {
            _Containers.prototype.remove.call(this);
          }
        };
        _proto.destroy = function destroy() {
          this.mId = null;
          this.mLayer = null;
          this.mScene = null;
          this.isDestroy = null;
          this.onDestroy();
          return _Containers.prototype.destroy.call(this);
        };
        _proto.onDestroy = function onDestroy() {};
        _proto.setLocation = function setLocation(x, y) {
          this.setPosition(x, y);
        };
        _proto.getLocation = function getLocation() {
          return this.position.clone();
        };
        _proto.setLocationScale = function setLocationScale(x, y) {
          this._scaleX = x;
          this._scaleY = y;
          this.setScale(x, y);
        };
        _proto.getDisplay = function getDisplay() {
          return this;
        };
        _proto.onAdd = function onAdd() {};
        _proto.onRemove = function onRemove() {};
        _proto.getBounds = function getBounds() {
          var uiTransform = this.getComponent(UITransform);
          var width = uiTransform ? uiTransform.width : 0;
          var height = uiTransform ? uiTransform.height : 0;
          var scale = new Vec3();
          this.getScale(scale);
          width = Math.abs(width * scale.x);
          height = Math.abs(height * scale.y);
          return [0, width, 0, height];
        };
        _proto.checkIn = function checkIn(left, right, top, bottom) {
          if (!this.mScene) {
            return false;
          }
          var b = this.getCheckInBounds();
          var e = b[0] > left && b[0] < right && b[1] > top && b[1] < bottom;
          return e;
        };
        _proto.getCheckInBounds = function getCheckInBounds() {
          if (!this._cibs) {
            this._cibs = [];
          }
          var pos = this.getLocation();
          var sceneScale = this.mScene.getLocationScale();
          var scenePos = this.mScene.getLocation();
          this._cibs[0] = pos.x * sceneScale.x + scenePos.x;
          this._cibs[1] = pos.y * sceneScale.y + scenePos.y;
          return this._cibs;
        };
        _proto.setIsShow = function setIsShow(v) {
          if (this.active && v) {
            return;
          }
          this.active = v;
        };
        return Unit;
      }(Containers)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Utils.ts", ['cc'], function (exports) {
  var cclegacy, Button, Node, Component, BlockInputEvents, js;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      Button = module.Button;
      Node = module.Node;
      Component = module.Component;
      BlockInputEvents = module.BlockInputEvents;
      js = module.js;
    }],
    execute: function () {
      cclegacy._RF.push({}, "2d0e5N24mZO8qHgIq0MnxyA", "Utils", undefined);

      /**
       * @class name : Utils
       * @description : 基本工具类
       * @author : Ran
       * @time : 2022.05.10
       */
      var Utils = exports('default', /*#__PURE__*/function () {
        function Utils() {}
        /**
         * 从子孙节点中找到第一个名字符合的节点，不包括目标节点本身。
         * 使用 深度优先的方式。
         * 若没有找到，则返回null
         * @param targetNode 
         * @param name 
         */
        Utils.FindChildByName = function FindChildByName(targetNode, name) {
          if (!targetNode.children || targetNode.children.length <= 0) return null;
          for (var i = 0; i < targetNode.children.length; i++) {
            var child = targetNode.children[i];
            if (child.name == name) {
              return child;
            }
            var result = this.FindChildByName(child, name);
            if (result != null) return result;
          }
          return null;
        }

        /**
         * 获取显示对象hash值
         * @param obj 显示对象
         * @returns hash值或null
         */;
        Utils.getHashCode = function getHashCode(obj) {
          // return obj._objFlags != null ? obj._objFlags : null;
          return obj._id != null ? obj._id : null;
        }

        /**
         * 添加按钮点击事件
         * @param target - 目标节点或按钮组件
         * @param scriptNode - 响应函数script组件所属节点
         * @param scriptName - 响应函数script组件名称
         * @param functionName - 响应函数名称
         * @param data - 自定义参数
         * @returns true or false
         */;
        Utils.addButtonClickHandler = function addButtonClickHandler(target, scriptNode, scriptName, functionName, data) {
          var button;
          if (target instanceof Button) button = target;else if (target instanceof Node) button = target.getComponent(Button);
          if (!button) {
            console.warn("addButtonClickHandler: target node has no button component");
            return false;
          }
          var h = new Component.EventHandler();
          h.target = scriptNode;
          h.component = scriptName;
          h.handler = functionName;
          h.customEventData = data;
          button.clickEvents = [];
          button.clickEvents.push(h);
          return true;
        }

        /**
         * 节点添加事件，这个方法默认会给节点添加屏蔽点击穿透组件
         * @param target - 事件节点
         * @param eventType - 事件类型
         * @param callback - 回调函数
         * @param callbackObj - 回调函数所属对象
         * @param once - 是否只监听一次
         * @param touchThough - 是否穿透
         */;
        Utils.addNodeEvent = function addNodeEvent(target, eventType, callback, callbackObj, once, touchThough) {
          if (once === void 0) {
            once = false;
          }
          if (touchThough === void 0) {
            touchThough = false;
          }
          if (once) {
            target.once(eventType, callback, callbackObj);
          } else {
            target.on(eventType, callback, callbackObj);
          }
          if (!touchThough) {
            if (!target.getComponent(BlockInputEvents)) {
              target.addComponent(BlockInputEvents);
            }
          }
        }

        /**
         * 查看类是否被ccclass修饰
         * @param constructor - 
         * @returns 
         */;
        Utils.isCCClass = function isCCClass(constructor) {
          return constructor && constructor.hasOwnProperty("__ctors__");
        }

        /**
         * 节点控制脚本挂载
         * @param node - 
         * @param script - 
         */;
        Utils.addNodeScript = function addNodeScript(node, script) {
          if (typeof script == "string") {
            var hasCls = js.getClassByName(script);
            if (hasCls == null) {
              console.error(" ***** " + script + " does not decorated by ccclass ***** ");
              return;
            }
            var has = node.getComponent(script) != null;
            if (!has) node.addComponent(script);
          } else if (typeof script == "function") {
            if (!this.isCCClass(script)) {
              console.error(" ***** " + script + " does not decorated by ccclass ***** ");
              return;
            }
            var _has = node.getComponent(script) != null;
            if (!_has) node.addComponent(script);
          }
        }

        // class end
        ;

        return Utils;
      }());
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ViewConst.ts", ['cc'], function (exports) {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "83c86UK0bpEoKfoIHDHv+sX", "ViewConst", undefined);
      var ViewConst = exports('default', function ViewConst() {});
      /** 默认预制体路径 */
      ViewConst.defaultPrefabPathPrefix = "resources://prefabs/";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ViewManager.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Enum2.ts', './ViewRegisterMgr.ts', './LayerManager.ts', './StringUtils.ts', './ViewConst.ts', './AssetMgr.ts', './Utils.ts'], function (exports) {
  var _asyncToGenerator, _createForOfIteratorHelperLoose, _regeneratorRuntime, cclegacy, Node, UITransform, view, BlockInputEvents, isValid, js, log, ViewShowTypes, getViewRegisterVo, LayerManager, StringUtils, ViewConst, AssetMgr, Utils;
  return {
    setters: [function (module) {
      _asyncToGenerator = module.asyncToGenerator;
      _createForOfIteratorHelperLoose = module.createForOfIteratorHelperLoose;
      _regeneratorRuntime = module.regeneratorRuntime;
    }, function (module) {
      cclegacy = module.cclegacy;
      Node = module.Node;
      UITransform = module.UITransform;
      view = module.view;
      BlockInputEvents = module.BlockInputEvents;
      isValid = module.isValid;
      js = module.js;
      log = module.log;
    }, function (module) {
      ViewShowTypes = module.ViewShowTypes;
    }, function (module) {
      getViewRegisterVo = module.getViewRegisterVo;
    }, function (module) {
      LayerManager = module.default;
    }, function (module) {
      StringUtils = module.default;
    }, function (module) {
      ViewConst = module.default;
    }, function (module) {
      AssetMgr = module.default;
    }, function (module) {
      Utils = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "484556JSQRI8IRGZiUHI4e8", "ViewManager", undefined);

      /**
       * ViewManager界面管理类
       * 
       * 1.打开界面，根据配置自动加载界面、调用初始化、播放打开动画、隐藏其他界面、屏蔽下方界面点击
       * 2.关闭界面，根据配置自动关闭界面、播放关闭动画、恢复其他界面
       * 3.切换界面，与打开界面类似，但是是将当前栈顶的界面切换成新的界面（先关闭再打开）
       * 4.提供界面缓存功能
       * 
       */
      /** UI栈结构体 */
      var ViewManager = exports('ViewManager', /*#__PURE__*/function () {
        function ViewManager() {
          /** 资源加载计数器，用于生成唯一的资源占用key */
          this.useCount = 0;
          /** 背景UI（有若干层UI是作为背景UI，而不受切换等影响）*/
          this.BackGroundUI = 0;
          /** 是否正在关闭UI */
          this.isClosing = false;
          /** 是否正在打开UI */
          this.isOpening = false;
          /** UI界面缓存（key为UIId，value为UIView节点）*/
          this.ViewCache = {};
          /** UI界面栈（{UIID + UIView + UIArgs}数组）*/
          this.ViewStack = [];
          /** UI待打开列表 */
          this.ViewOpenQueue = [];
          /** UI待关闭列表 */
          this.ViewCloseQueue = [];
          /** UI打开前回调 */
          this.uiOpenBeforeDelegate = null;
          /** UI打开回调 */
          this.uiOpenDelegate = null;
          /** UI关闭回调 */
          this.uiCloseDelegate = null;
        }
        var _proto = ViewManager.prototype;
        /****************** 私有方法，UIManager内部的功能和基础规则 *******************/
        /**
         * 添加防触摸层
         * @param zOrder 屏蔽层的层级
         */
        _proto.preventTouch = function preventTouch(layer, zOrder) {
          var viewContainer = LayerManager.getLayer(layer);
          if (!viewContainer) {
            console.warn(" -----  " + layer + " layer container is null ----- ");
            return;
          }
          var node = new Node();
          node.name = 'preventTouch';
          var uiCom = node.addComponent(UITransform);
          uiCom.setContentSize(view.getVisibleSize());
          node.on(Node.EventType.TOUCH_START, function (event) {
            event.propagationStopped = true;
          }, node);
          viewContainer.addChild(node);
          uiCom.priority = zOrder - 0.01;
          return node;
        }

        /** 自动执行下一个待关闭或待打开的界面 */;
        _proto.autoExecNextUI = function autoExecNextUI() {
          // 逻辑上是先关后开
          if (this.ViewCloseQueue.length > 0) {
            var uiQueueInfo = this.ViewCloseQueue.shift();
            this.close(uiQueueInfo);
          } else if (this.ViewOpenQueue.length > 0) {
            var _uiQueueInfo = this.ViewOpenQueue.shift();
            this.open(_uiQueueInfo.uiId, _uiQueueInfo.uiArgs);
          }
        }

        /**
         * 自动检测动画组件以及特定动画，如存在则播放动画，无论动画是否播放，都执行回调
         * @param aniName 动画名
         * @param aniOverCallback 动画播放完成回调
         */;
        _proto.autoExecAnimation = function autoExecAnimation(uiView, aniName, aniOverCallback) {
          // 暂时先省略动画播放的逻辑
          aniOverCallback();
        }

        /**
         * 自动检测资源预加载组件，如果存在则加载完成后调用completeCallback，否则直接调用
         * @param completeCallback 资源加载完成回调
         */;
        _proto.autoLoadRes = function autoLoadRes(uiView, completeCallback) {
          // 暂时先省略
          completeCallback();
        }

        /** 根据界面显示类型刷新显示 */;
        _proto.updateUI = function updateUI() {
          var hideIndex = 0;
          var showIndex = this.ViewStack.length - 1;
          for (; showIndex >= 0; --showIndex) {
            var mode = this.ViewStack[showIndex].uiView.showType;
            // 无论何种模式，最顶部的UI都是应该显示的
            this.ViewStack[showIndex].uiView.node.active = true;
            if (ViewShowTypes.ViewFullScreen == mode) {
              break;
            } else if (ViewShowTypes.ViewSingle == mode) {
              for (var i = 0; i < this.BackGroundUI; ++i) {
                if (this.ViewStack[i]) {
                  this.ViewStack[i].uiView.node.active = true;
                }
              }
              hideIndex = this.BackGroundUI;
              break;
            }
          }
          // 隐藏不应该显示的部分UI
          for (var hide = hideIndex; hide < showIndex; ++hide) {
            this.ViewStack[hide].uiView.node.active = false;
          }
        }

        /**
         * UI被打开时回调，对UI进行初始化设置，刷新其他界面的显示，并根据
         * @param viewVo 界面注册结构
         * @param uiView 界面对象
         * @param uiInfo 界面栈对应的信息结构
         * @param uiArgs 界面初始化参数
         */;
        _proto.onViewOpen = function onViewOpen(viewVo, uiView, uiInfo, uiArgs) {
          var _this = this;
          if (null == uiView) {
            return;
          }
          // 激活界面
          uiInfo.uiView = uiView;
          uiView.node.active = true;
          var uiCom = uiView.getComponent(UITransform);
          if (!uiCom) {
            uiCom = uiView.addComponent(UITransform);
          }

          // 快速关闭界面的设置，绑定界面中的background，实现快速关闭
          if (uiView.quickClose) {
            var backGround = uiView.node.getChildByName('background');
            if (!backGround) {
              backGround = new Node();
              backGround.name = 'background';
              var _uiCom = backGround.addComponent(UITransform);
              _uiCom.setContentSize(view.getVisibleSize());
              uiView.node.addChild(backGround);
              _uiCom.priority = -1;
            }
            backGround.targetOff(Node.EventType.TOUCH_START);
            backGround.on(Node.EventType.TOUCH_START, function (event) {
              event.propagationStopped = true;
              _this.close(uiView);
            }, backGround);
          }
          var className = this.getViewClassName(viewVo.viewCls);
          // 添加到父节点
          var viewContainer = LayerManager.getLayer(viewVo.layer);
          if (viewContainer == null) {
            console.warn(" ----- open " + className + " field container is null ----- ");
            return;
          }
          viewContainer.addChild(uiView.node);
          uiCom.priority = uiInfo.zOrder || this.ViewStack.length;

          // 刷新其他UI
          this.updateUI();

          // 从那个界面打开的
          var fromUIID = 0;
          if (this.ViewStack.length > 1) {
            fromUIID = this.ViewStack[this.ViewStack.length - 2].uiId;
          }

          // 打开界面之前回调
          // if (this.uiOpenBeforeDelegate) {
          //     this.uiOpenBeforeDelegate(uiId, fromUIID);
          // }

          // 执行onOpen回调
          uiView.onOpen(fromUIID, uiArgs);
          this.autoExecAnimation(uiView, "uiOpen", function () {
            uiView.onOpenAniOver();
            // if (this.uiOpenDelegate) {
            //     this.uiOpenDelegate(uiId, fromUIID);
            // }
          });
        };
        /** 打开界面并添加到界面栈中 */
        _proto.open = /*#__PURE__*/
        function () {
          var _open = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(v, params) {
            var _this2 = this;
            var viewVo, uiInfo, uiIndex;
            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) switch (_context.prev = _context.next) {
                case 0:
                  viewVo = getViewRegisterVo(v);
                  if (viewVo) {
                    _context.next = 4;
                    break;
                  }
                  console.error(" ***** view " + v + " has not registered ***** ");
                  return _context.abrupt("return");
                case 4:
                  uiInfo = {
                    uiId: viewVo.id,
                    uiArgs: params,
                    uiView: null
                  };
                  if (!(this.isOpening || this.isClosing)) {
                    _context.next = 8;
                    break;
                  }
                  // 插入待打开队列
                  this.ViewOpenQueue.push(uiInfo);
                  return _context.abrupt("return");
                case 8:
                  uiIndex = this.getViewIndex(viewVo.id);
                  if (!(-1 != uiIndex)) {
                    _context.next = 12;
                    break;
                  }
                  // 重复打开了同一个界面，直接回到该界面
                  this.closeToView(v, params);
                  return _context.abrupt("return");
                case 12:
                  // 设置UI的zOrder
                  uiInfo.zOrder = this.ViewStack.length + 1;
                  this.ViewStack.push(uiInfo);

                  // 先屏蔽点击
                  if (viewVo.preventTouch) {
                    uiInfo.preventNode = this.preventTouch(viewVo.layer, uiInfo.zOrder);
                  }
                  this.isOpening = true;
                  this.getOrCreateUI(viewVo).then(function (viewNode) {
                    if (uiInfo.isClose || view == null) {
                      console.warn("getOrCreateUI " + viewVo.id + " faile!\n                        close state : " + uiInfo.isClose + " , uiView : " + view);
                      _this2.isOpening = false;
                      if (uiInfo.preventNode) {
                        uiInfo.preventNode.destroy();
                        uiInfo.preventNode = null;
                      }
                      return;
                    }
                    _this2.onViewOpen(viewVo, viewNode, uiInfo, params);
                    _this2.isOpening = false;
                    _this2.autoExecNextUI();
                  });
                case 17:
                case "end":
                  return _context.stop();
              }
            }, _callee, this);
          }));
          function open(_x, _x2) {
            return _open.apply(this, arguments);
          }
          return open;
        }()
        /**
         * 添加阻止输入事件组件
         * @param node - 
         */;

        _proto.addBlockInputEvent = function addBlockInputEvent(node) {
          if (!node) return;
          if (!node.getComponent(BlockInputEvents)) node.addComponent(BlockInputEvents);
        };
        _proto.getOrCreateUI = function getOrCreateUI(viewVo, params) {
          var _this3 = this;
          return new Promise( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(resolve, reject) {
            var uiView, className, prefabPathPrefix, prefabName, prefabPath, node, view;
            return _regeneratorRuntime().wrap(function _callee2$(_context2) {
              while (1) switch (_context2.prev = _context2.next) {
                case 0:
                  if (viewVo) {
                    _context2.next = 3;
                    break;
                  }
                  resolve(null);
                  return _context2.abrupt("return");
                case 3:
                  // 如果找到缓存对象，则直接返回
                  uiView = _this3.ViewCache[viewVo.id];
                  if (!uiView) {
                    _context2.next = 7;
                    break;
                  }
                  resolve(uiView);
                  return _context2.abrupt("return");
                case 7:
                  className = _this3.getViewClassName(viewVo.viewCls);
                  prefabPathPrefix = viewVo.prefabPathPrefix;
                  if (StringUtils.empty(prefabPathPrefix)) {
                    prefabPathPrefix = ViewConst.defaultPrefabPathPrefix;
                  }
                  prefabName = viewVo.prefabName;
                  if (prefabName == null) {
                    prefabName = className;
                  }
                  prefabPath = prefabPathPrefix + prefabName;
                  _context2.next = 15;
                  return AssetMgr.instance.createPrefab(prefabPath);
                case 15:
                  node = _context2.sent;
                  if (node) {
                    _context2.next = 20;
                    break;
                  }
                  console.error(" ***** open " + className + " failed " + prefabName + " is not exist ***** ");
                  resolve(null);
                  return _context2.abrupt("return");
                case 20:
                  node.name = className;
                  Utils.addNodeScript(node, viewVo.viewCls);
                  view = _this3.getViewScript(className, node);
                  if (view) {
                    view.init(params);
                  }
                  if (view.cache) {
                    _this3.ViewCache[viewVo.id] = view;
                  }
                  resolve(view);
                case 26:
                case "end":
                  return _context2.stop();
              }
            }, _callee2);
          })));
        }

        /**
         * 替换栈顶界面
         * @param cls 需要打开的界面类
         * @param uiArgs 界面参数
         */;
        /** 替换栈顶界面 */
        _proto.replace = function replace(v, uiArgs) {
          if (uiArgs === void 0) {
            uiArgs = null;
          }
          var uiId = this.getUnifyParam(v);
          this.close(this.ViewStack[this.ViewStack.length - 1].uiView);
          this.open(uiId, uiArgs);
        }

        /**
         * 关闭当前界面
         * @param closeUI 要关闭的界面
         */;
        _proto.close = function close(closeUI) {
          var _this4 = this;
          var uiCount = this.ViewStack.length;
          if (uiCount < 1 || this.isClosing || this.isOpening) {
            if (closeUI) {
              // 插入待关闭队列
              this.ViewCloseQueue.push(closeUI);
            }
            return;
          }
          var uiInfo;
          if (closeUI) {
            for (var index = this.ViewStack.length - 1; index >= 0; index--) {
              var ui = this.ViewStack[index];
              if (ui.uiView === closeUI) {
                uiInfo = ui;
                this.ViewStack.splice(index, 1);
                break;
              }
            }
          } else {
            uiInfo = this.ViewStack.pop();
          }
          // 找不到这个UI
          if (uiInfo === undefined) {
            return;
          }

          // 关闭当前界面
          var uiId = uiInfo.uiId;
          var uiView = uiInfo.uiView;
          uiInfo.isClose = true;

          // 回收遮罩层
          if (uiInfo.preventNode) {
            uiInfo.preventNode.destroy();
            uiInfo.preventNode = null;
          }
          if (!uiView) {
            return;
          }
          var preUIInfo = this.ViewStack[uiCount - 2];
          // 处理显示模式
          this.updateUI();
          var close = function close() {
            _this4.isClosing = false;
            // 显示之前的界面
            if (preUIInfo && preUIInfo.uiView && _this4.isTopView(preUIInfo.uiId)) {
              // 如果之前的界面弹到了最上方（中间有肯能打开了其他界面）
              preUIInfo.uiView.node.active = true;
              // 回调onTop
              preUIInfo.uiView.onTop(uiId, uiView.onClose());
            } else {
              uiView.onClose();
            }

            // if (this.uiCloseDelegate) {
            //     this.uiCloseDelegate(uiId);
            // }
            if (uiView.cache) {
              _this4.ViewCache[uiId] = uiView;
              uiView.node.removeFromParent();
              log("uiView removeFromParent " + uiInfo.uiId);
            } else {
              // uiView!.releaseAssets();
              uiView.node.destroy();
              log("uiView destroy " + uiInfo.uiId);
            }
            _this4.autoExecNextUI();
          };
          // 执行关闭动画
          this.autoExecAnimation(uiView, "uiClose", close);
        }

        /** 关闭所有界面 */;
        _proto.closeAll = function closeAll() {
          // 不播放动画，也不清理缓存
          for (var _iterator = _createForOfIteratorHelperLoose(this.ViewStack), _step; !(_step = _iterator()).done;) {
            var uiInfo = _step.value;
            uiInfo.isClose = true;
            if (uiInfo.preventNode) {
              uiInfo.preventNode.destroy();
              uiInfo.preventNode = null;
            }
            if (uiInfo.uiView) {
              uiInfo.uiView.onClose();
              // uiInfo.uiView.releaseAssets();
              uiInfo.uiView.node.destroy();
            }
          }
          this.ViewOpenQueue = [];
          this.ViewCloseQueue = [];
          this.ViewStack = [];
          this.isOpening = false;
          this.isClosing = false;
        };
        /**
         * 关闭界面，一直关闭到顶部为uiId的界面，为避免循环打开UI导致UI栈溢出
         * @param uiId 要关闭到的uiId（关闭其顶部的ui）
         * @param uiArgs 打开的参数
         * @param bOpenSelf 
         */
        _proto.closeToView = function closeToView(v, uiArgs, bOpenSelf) {
          if (bOpenSelf === void 0) {
            bOpenSelf = true;
          }
          var idx = this.getViewIndex(v);
          if (-1 == idx) {
            return;
          }
          idx = bOpenSelf ? idx : idx + 1;
          for (var i = this.ViewStack.length - 1; i >= idx; --i) {
            var uiInfo = this.ViewStack.pop();
            if (!uiInfo) {
              continue;
            }
            var _uiId = uiInfo.uiId;
            var uiView = uiInfo.uiView;
            uiInfo.isClose = true;

            // 回收屏蔽层
            if (uiInfo.preventNode) {
              uiInfo.preventNode.destroy();
              uiInfo.preventNode = null;
            }

            // if (this.uiCloseDelegate) {
            //     this.uiCloseDelegate(uiId);
            // }

            if (uiView) {
              uiView.onClose();
              if (uiView.cache) {
                this.ViewCache[_uiId] = uiView;
                uiView.node.removeFromParent();
              } else {
                // uiView.releaseAssets();
                uiView.node.destroy();
              }
            }
          }
          this.updateUI();
          this.ViewOpenQueue = [];
          this.ViewCloseQueue = [];
          bOpenSelf && this.open(v, uiArgs);
        }

        /** 清理界面缓存 */;
        _proto.clearCache = function clearCache() {
          for (var key in this.ViewCache) {
            var ui = this.ViewCache[key];
            if (isValid(ui.node)) {
              if (isValid(ui)) ;
              ui.node.destroy();
            }
          }
          this.ViewCache = {};
        }

        /******************** UI的便捷接口 *******************/;
        _proto.isTopView = function isTopView(uiId) {
          if (this.ViewStack.length == 0) {
            return false;
          }
          return this.ViewStack[this.ViewStack.length - 1].uiId == uiId;
        };
        _proto.getView = function getView(uiId) {
          for (var index = 0; index < this.ViewStack.length; index++) {
            var element = this.ViewStack[index];
            if (uiId == element.uiId) {
              return element.uiView;
            }
          }
          return null;
        };
        _proto.getTopView = function getTopView() {
          if (this.ViewStack.length > 0) {
            return this.ViewStack[this.ViewStack.length - 1].uiView;
          }
          return null;
        };
        _proto.getViewScript = function getViewScript(className, node) {
          return node.getComponent(className);
        }

        /**
         * 获取界面类名
         * @param cls - 界面类
         * @returns 界面类名称字符串
         */;
        _proto.getViewClassName = function getViewClassName(cls) {
          var className = "";
          if (typeof cls === "string") className = cls;else if (typeof cls === "function") className = js.getClassName(cls);else if (typeof cls === "object") className = js.getClassName(cls.constructor);else console.error("ViewManager.getViewClassName: cls is not string or function");
          return className;
        }

        /**
         * 参数归一化
         * @param v 
         */;
        _proto.getUnifyParam = function getUnifyParam(v) {
          var id = null;
          if (typeof v == "number" || typeof v == "string") {
            id = v;
          } else if (typeof v == "function") {
            id = this.getViewClassName(v);
          } else if (typeof v == "object") {
            id = v.id;
          }
          return id;
        };
        _proto.getViewIndex = function getViewIndex(v) {
          var id = this.getUnifyParam(v);
          for (var index = 0; index < this.ViewStack.length; index++) {
            var element = this.ViewStack[index];
            if (id == element.uiId) {
              return index;
            }
          }
          return -1;
        };
        _proto.getIsOpen = function getIsOpen(v) {
          var index = this.getViewIndex(v);
          return index != -1;
        };
        return ViewManager;
      }());
      var viewManager = exports('viewManager', new ViewManager());
      window["viewManager"] = viewManager;
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ViewRegisterMgr.ts", ['cc'], function (exports) {
  var cclegacy, js;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      js = module.js;
    }],
    execute: function () {
      exports({
        getRegisteredViews: getRegisteredViews,
        getViewRegisterVo: getViewRegisterVo,
        registerView: registerView
      });
      cclegacy._RF.push({}, "7bbdf1rmzpIYZ9xAh0zXTaU", "ViewRegisterMgr", undefined);
      var registerViews = [];
      var registerViewDictionary = {};
      var registerViewDictionaryByView = {};
      function registerView(vo) {
        var className = js.getClassName(vo.viewCls);
        if (vo.id == null) {
          vo.id = className;
        }
        registerViews.push(vo);
        registerViewDictionary[vo.id] = vo;
        registerViewDictionaryByView[className] = vo;
      }
      function getRegisteredViews() {
        return registerViews;
      }
      function getViewRegisterVo(value) {
        var vo = null;
        if (typeof value == "number" || typeof value == "string") {
          vo = registerViewDictionary[value];
          if (vo != null) {
            return vo;
          }
          vo = registerViewDictionaryByView[value];
        } else if (typeof value == "function") {
          var className = js.getClassName(value);
          vo = registerViewDictionaryByView[className];
        }
        return vo;
      }
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ViewRegisterVo.ts", ['cc'], function (exports) {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "ed1027EDmlLsLVYcBYjeW/n", "ViewRegisterVo", undefined);
      var ViewRegisterVo = exports('default', function ViewRegisterVo() {
        this.id = void 0;
        /** 父级id，缺省则挂到root下 */
        this.parent = void 0;
        /** 界面类 */
        this.viewCls = void 0;
        /** 界面层级 */
        this.layer = void 0;
        /** 预制体路径前缀，缺省常量 */
        this.prefabPathPrefix = void 0;
        /** 预制体名称，需要带上除前缀路径外的路径，缺省类名 */
        this.prefabName = void 0;
        this.preventTouch = false;
      });
      cclegacy._RF.pop();
    }
  };
});

(function(r) {
  r('virtual:///prerequisite-imports/main', 'chunks:///_virtual/main'); 
})(function(mid, cid) {
    System.register(mid, [cid], function (_export, _context) {
    return {
        setters: [function(_m) {
            var _exportObj = {};

            for (var _key in _m) {
              if (_key !== "default" && _key !== "__esModule") _exportObj[_key] = _m[_key];
            }
      
            _export(_exportObj);
        }],
        execute: function () { }
    };
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,