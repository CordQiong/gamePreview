System.register("chunks:///_virtual/ActionInfo.ts", ['cc', './GameConst.ts'], function (exports) {
  var cclegacy, GameConst;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      GameConst = module.GameConst;
    }],
    execute: function () {
      cclegacy._RF.push({}, "ecd0a7U7pNKd4z66FlS7gFN", "ActionInfo", undefined);

      /**
       * @fileName ActionInfo.ts
       * @author zhangqiong
       * @date 2025/01/04 20:39:19"
       * @description
       */
      var ActionInfo = exports('ActionInfo', function ActionInfo(name, handler, times, endName) {
        if (handler === void 0) {
          handler = null;
        }
        if (times === void 0) {
          times = -1;
        }
        if (endName === void 0) {
          endName = GameConst.Idle;
        }
        this.name = void 0;
        this.handler = void 0;
        this.times = -1;
        this.endActionName = GameConst.Idle;
        this.name = name;
        this.handler = handler;
        this.times = times;
        this.endActionName = endName;
      });
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/AFKGame.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './BaseView.ts', './ViewRegisterMgr.ts', './PanelEnum.ts', './LayerManager.ts', './GameScene.ts', './ViewConst.ts', './HashMap.ts', './FightHeroInfo.ts', './GameConst.ts', './FightRoleEntity.ts', './Utils.ts', './FightMgr.ts', './FightConfig.ts'], function (exports) {
  var _inheritsLoose, _asyncToGenerator, _regeneratorRuntime, cclegacy, _decorator, math, resources, JsonAsset, BaseView, registerView, PanelType, LayerType, GameScene, ViewConst, HashMap, FightHeroInfo, GameConst, FightRoleEntity, Utils, FightMgr, FightConfig;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _asyncToGenerator = module.asyncToGenerator;
      _regeneratorRuntime = module.regeneratorRuntime;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      math = module.math;
      resources = module.resources;
      JsonAsset = module.JsonAsset;
    }, function (module) {
      BaseView = module.default;
    }, function (module) {
      registerView = module.registerView;
    }, function (module) {
      PanelType = module.PanelType;
    }, function (module) {
      LayerType = module.LayerType;
    }, function (module) {
      GameScene = module.GameScene;
    }, function (module) {
      ViewConst = module.default;
    }, function (module) {
      HashMap = module.HashMap;
    }, function (module) {
      FightHeroInfo = module.FightHeroInfo;
    }, function (module) {
      GameConst = module.GameConst;
    }, function (module) {
      FightRoleEntity = module.FightRoleEntity;
    }, function (module) {
      Utils = module.default;
    }, function (module) {
      FightMgr = module.FightMgr;
    }, function (module) {
      FightConfig = module.FightConfig;
    }],
    execute: function () {
      var _dec, _class;
      cclegacy._RF.push({}, "86e896MaEBGsp9GQ8s3/bXj", "AFKGame", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var AFKGame = exports('AFKGame', (_dec = ccclass('AFKGame'), _dec(_class = /*#__PURE__*/function (_BaseView) {
        _inheritsLoose(AFKGame, _BaseView);
        function AFKGame() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _BaseView.call.apply(_BaseView, [this].concat(args)) || this;
          _this.scene = void 0;
          _this.gameConfig = void 0;
          _this.heroMap = void 0;
          _this.enmeyMap = void 0;
          _this.positionMap = void 0;
          _this.isInit = false;
          return _this;
        }
        var _proto = AFKGame.prototype;
        _proto.start = function start() {};
        _proto.update = function update(deltaTime) {
          if (!this.isInit) {
            return;
          }
          FightMgr.instance.doFrameHandler();
        };
        _proto.init = function init() {
          this.heroMap = new HashMap();
          this.enmeyMap = new HashMap();
          this.positionMap = new HashMap();
          this.isInit = false;
        };
        _proto.onOpen = /*#__PURE__*/function () {
          var _onOpen = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(fromUI) {
            var i, leftNodeName, rightNodeName, leftNode, rightNode, leftMap, rightMap, heros, enmeys, index, element, _index, _element;
            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) switch (_context.prev = _context.next) {
                case 0:
                  _context.next = 2;
                  return this.loadConfig();
                case 2:
                  this.scene = new GameScene();
                  this.scene.init();
                  this.scene.name = "afkScene";
                  this.node.addChild(this.scene);
                  for (i = 0; i < 5; i++) {
                    leftNodeName = "left" + i;
                    rightNodeName = "right" + i;
                    leftNode = Utils.FindChildByName(this.node, leftNodeName);
                    rightNode = Utils.FindChildByName(this.node, rightNodeName);
                    leftMap = this.positionMap.get(0);
                    if (!leftMap) {
                      leftMap = new HashMap();
                    }
                    rightMap = this.positionMap.get(1);
                    if (!rightMap) {
                      rightMap = new HashMap();
                    }
                    leftNode.active = rightNode.active = false;
                    leftMap.put(i + 1, leftNode.position.clone());
                    rightMap.put(i + 1, rightNode.position.clone());
                    this.positionMap.put(0, leftMap);
                    this.positionMap.put(1, rightMap);
                  }
                  heros = this.heroMap.values();
                  enmeys = this.enmeyMap.values();
                  index = 0;
                case 10:
                  if (!(index < heros.length)) {
                    _context.next = 17;
                    break;
                  }
                  element = heros[index];
                  _context.next = 14;
                  return this.createHero(element);
                case 14:
                  index++;
                  _context.next = 10;
                  break;
                case 17:
                  _index = 0;
                case 18:
                  if (!(_index < enmeys.length)) {
                    _context.next = 25;
                    break;
                  }
                  _element = enmeys[_index];
                  _context.next = 22;
                  return this.createHero(_element);
                case 22:
                  _index++;
                  _context.next = 18;
                  break;
                case 25:
                  FightMgr.instance.setRandomSeed(99856269);
                  this.isInit = true;
                case 27:
                case "end":
                  return _context.stop();
              }
            }, _callee, this);
          }));
          function onOpen(_x) {
            return _onOpen.apply(this, arguments);
          }
          return onOpen;
        }();
        _proto.loadConfig = /*#__PURE__*/function () {
          var _loadConfig = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {
            var _this2 = this;
            return _regeneratorRuntime().wrap(function _callee2$(_context2) {
              while (1) switch (_context2.prev = _context2.next) {
                case 0:
                  return _context2.abrupt("return", new Promise(function (resolve, reject) {
                    resources.load("afk/afkGameConfg", JsonAsset, function (err, data) {
                      if (err) {
                        reject(err);
                        return;
                      }
                      _this2.gameConfig = data.json;
                      FightConfig.instance.init(_this2.gameConfig);
                      var heros = _this2.gameConfig.heros;
                      for (var key in heros) {
                        if (Object.prototype.hasOwnProperty.call(heros, key)) {
                          var element = heros[key];
                          var hid = Number(key);
                          var hero = _this2.setFightHeroInfo(1000, element);
                          if (element.comp == 0) {
                            _this2.heroMap.put(hid, hero);
                          } else {
                            _this2.enmeyMap.put(hid, hero);
                          }
                        }
                      }
                      resolve();
                    });
                  }));
                case 1:
                case "end":
                  return _context2.stop();
              }
            }, _callee2);
          }));
          function loadConfig() {
            return _loadConfig.apply(this, arguments);
          }
          return loadConfig;
        }();
        _proto.setFightHeroInfo = function setFightHeroInfo(playerId, data) {
          var heroInfo = new FightHeroInfo();
          heroInfo.setData(playerId, data);
          return heroInfo;
        };
        _proto.getPosition = function getPosition(info) {
          var comp = info.camp;
          var site = info.site;
          var posMap = this.positionMap.get(comp);
          if (!posMap) {
            return math.v3(0, 0);
          }
          return posMap.get(site);
        };
        _proto.createHero = function createHero(fightHero) {
          var _this3 = this;
          return new Promise(function (resolve, reject) {
            _this3.create(FightRoleEntity, fightHero, _this3.scene, fightHero.camp == 0 ? GameConst.RIGHT : GameConst.LEFT).then(function (entity) {
              var position = _this3.getPosition(fightHero);
              entity.setLocation(position.x, position.y);
              entity.initHeadBar().then(function (e) {
                FightMgr.instance.addEntity(entity);
                console.log("hero_" + fightHero.spineId, entity.getBounds());
                resolve();
              })["catch"](function (bErr) {
                reject(bErr);
              });
            })["catch"](function (err) {
              reject(err);
            });
          });
        };
        _proto.create = function create(c, info, scene, dir, action) {
          if (dir === void 0) {
            dir = GameConst.RIGHT;
          }
          if (action === void 0) {
            action = GameConst.Idle;
          }
          return new Promise(function (reslove, reject) {
            var entity = new c();
            entity.setData(info);
            if (!scene.getUnitById(entity.getId())) {
              scene.addUnit(entity);
            }
            entity.setRole(info.heroConfig.spineId).then(function (value) {
              entity.changeActionAndDirection(action, dir);
              reslove(entity);
            })["catch"](function (err) {
              reject(err);
            });
          });
        };
        return AFKGame;
      }(BaseView)) || _class));
      registerView({
        viewCls: AFKGame,
        id: PanelType.AFKGame,
        layer: LayerType.view,
        prefabPathPrefix: ViewConst.defaultPrefabPathPrefix + "afk/"
      });
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/AFKGameConfigVo.ts", ['cc'], function (exports) {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "bee34vsZcpM2J1haGSe2RYX", "AFKGameConfigVo", undefined);
      /**
       * @fileName AFKGameConfigVo.ts
       * @author zhangqiong
       * @date 2024/12/26 20:17:19"
       * @description
       */
      var AFKGameConfigVo = exports('AFKGameConfigVo', function AFKGameConfigVo() {
        this.heros = void 0;
        this.skills = void 0;
      });
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/AFKResultPanel.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './BaseView.ts', './ViewRegisterMgr.ts', './PanelEnum.ts', './LayerManager.ts', './ViewConst.ts', './Utils.ts', './ViewManager.ts', './Enum3.ts', './FightMgr.ts'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, Button, sp, BaseView, registerView, PanelType, LayerType, ViewConst, Utils, viewManager, ViewShowTypes, FightMgr;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Button = module.Button;
      sp = module.sp;
    }, function (module) {
      BaseView = module.default;
    }, function (module) {
      registerView = module.registerView;
    }, function (module) {
      PanelType = module.PanelType;
    }, function (module) {
      LayerType = module.LayerType;
    }, function (module) {
      ViewConst = module.default;
    }, function (module) {
      Utils = module.default;
    }, function (module) {
      viewManager = module.viewManager;
    }, function (module) {
      ViewShowTypes = module.ViewShowTypes;
    }, function (module) {
      FightMgr = module.FightMgr;
    }],
    execute: function () {
      var _dec, _class;
      cclegacy._RF.push({}, "d07402x9N1DjZYR2sCnp7gT", "AFKResultPanel", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;

      /**
       * @fileName AFKResultPanel.ts
       * @author zhangqiong
       * @date 2025/01/07 15:10:00"
       * @description
       */
      var AFKResultPanel = exports('AFKResultPanel', (_dec = ccclass('AFKResultPanel'), _dec(_class = /*#__PURE__*/function (_BaseView) {
        _inheritsLoose(AFKResultPanel, _BaseView);
        function AFKResultPanel() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _BaseView.call.apply(_BaseView, [this].concat(args)) || this;
          _this.showType = ViewShowTypes.ViewAddition;
          _this.btn = void 0;
          _this.spine = void 0;
          return _this;
        }
        var _proto = AFKResultPanel.prototype;
        _proto.init = function init() {
          this.btn = Utils.FindChildByName(this.node, "tryBtn").getComponent(Button);
          this.spine = Utils.FindChildByName(this.node, "spineNode").getComponent(sp.Skeleton);
          if (this.btn) {
            this.btn.node.on(Button.EventType.CLICK, this.onClickBtn, this);
          }
        };
        _proto.onClickBtn = function onClickBtn() {
          viewManager.close(this);
          FightMgr.instance.reset();
          viewManager.open(PanelType.AFKGame);
        };
        _proto.onOpen = function onOpen(fromUI) {
          var isWin = arguments.length <= 1 ? undefined : arguments[1];
          var actionName = isWin ? "animation_2" : "animation_3";
          if (this.spine) {
            this.spine.animation = actionName;
          }
        };
        _proto.onLoad = function onLoad() {};
        _proto.start = function start() {};
        _proto.update = function update(deltaTime) {};
        return AFKResultPanel;
      }(BaseView)) || _class));
      registerView({
        viewCls: AFKResultPanel,
        id: PanelType.AFKResultPanel,
        layer: LayerType.view,
        prefabPathPrefix: ViewConst.defaultPrefabPathPrefix + "afk/"
      });
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/AnimationPath.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './TowerLauncher.ts'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, Animation, Graphics, resources, Color, math, Component, TowerLauncher;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Animation = module.Animation;
      Graphics = module.Graphics;
      resources = module.resources;
      Color = module.Color;
      math = module.math;
      Component = module.Component;
    }, function (module) {
      TowerLauncher = module.TowerLauncher;
    }],
    execute: function () {
      var _dec, _class;
      cclegacy._RF.push({}, "85731V2OvZAdZqz5Y5lYAJZ", "AnimationPath", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var AnimationPath = exports('AnimationPath', (_dec = ccclass('AnimationPath'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(AnimationPath, _Component);
        function AnimationPath() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.animation = void 0;
          _this.graphics = void 0;
          _this.p2pDistance = 25;
          return _this;
        }
        var _proto = AnimationPath.prototype;
        _proto.onLoad = function onLoad() {
          this.animation = this.getComponent(Animation);
          if (!this.animation) {
            this.animation = this.node.addComponent(Animation);
          }
          this.graphics = this.node.getComponent(Graphics);
          if (!this.graphics) {
            this.graphics = this.node.addComponent(Graphics);
          }
          // this.graphics.fillColor = math.color(255,0,0,255)
        };

        _proto.start = function start() {
          // this.getWorldPath()
          this.getWorldPathByMapId(1);
        };
        _proto.update = function update(deltaTime) {};
        _proto.getWorldPathByMapId = function getWorldPathByMapId(mapId, themeId) {
          var _this2 = this;
          if (themeId === void 0) {
            themeId = TowerLauncher.instance.theme;
          }
          return new Promise(function (resolve, reject) {
            var path = "anim/map/map" + themeId + "_" + mapId;
            resources.load(path, function (err, data) {
              if (err) {
                console.error(err);
                reject(err);
                return;
              }
              console.log(data);
              var path = _this2.getNodePath(data);
              _this2.drawPoint(path, Color.RED);
              resolve(path);
            });
          });
        }

        /**
         * Gets world path
         *
         * @returns world path
         */;
        _proto.getWorldPath = function getWorldPath() {
          var clips = this.animation.clips;
          var path = this.getNodePath(clips[0]);
          console.log(path);
          this.drawPoint(path, Color.RED);
          return path;
          // for (let i = 0; i < path.length; i++)
          //     path[i] = this.node.getWorldPosition(path[i]);
          // return path;
        }

        /**
         *
         * @returns 节点坐标
         */;
        _proto.getNodePath = function getNodePath(clip) {
          var track = clip.tracks[0];
          var channels = track.channels();
          var xcurve = channels[0].curve;
          var ycurve = channels[1].curve;
          var xkeyFrame = xcurve.values();
          var ykeyFrame = ycurve.values();
          // let paths =  clip.curves//clip.curveData.paths; //动画路径数组
          // let frameArray = paths[pathName].props.position; //关键帧数组即为一条路径
          var bezierPartArray = this.getBezierPartArray(xkeyFrame, ykeyFrame);
          // let path: Vec2[] = this._getPath(bezierPartArray);

          return bezierPartArray;
        }

        /**
         * 得到点路径
         * @param bezierPartArray 曲线数组
         * @returns path 不含路径起点坐标
         */;
        _proto._getPath = function _getPath(bezierPartArray) {
          var pArray = [];
          var bezier;
          for (var i = 0; i < bezierPartArray.length; i++) {
            bezier = bezierPartArray[i];
            bezier.createPosArray(16);
            pArray = pArray.concat(bezier.posArray);
          }
          return pArray;
        }

        /**
         * 由关键帧数组 得到 曲线段数组
         * @param xframeArray
         * @param yframeArray
         */;
        _proto.getBezierPartArray = function getBezierPartArray(xframeArray, yframeArray) {
          var bezierPartArray = [];
          var maxLength = Math.max(xframeArray.length, yframeArray.length);
          //两个关键帧组成一条路径
          for (var j = 0; j < maxLength - 1; j++) {
            var xKeyFrame = xframeArray[j];
            var yKeyFrame = yframeArray[j];
            var nextXKeyFrame = xframeArray[j + 1];
            var nextYKeyFrame = yframeArray[j + 1];
            var arr = this.createBezierPartArray(xKeyFrame, yKeyFrame, nextXKeyFrame, nextYKeyFrame);
            bezierPartArray = bezierPartArray.concat(arr);
          }
          return bezierPartArray;
        }

        /**
         * 由两个关键帧 生成 它们构成的贝塞尔曲线段数组
         * @param startXKeyFrame
         * @param startYKeyFrame
         * @param endXKeyFrame
         * @param endYKeyFrame
         */;
        _proto.createBezierPartArray = function createBezierPartArray(startXKeyFrame, startYKeyFrame, endXKeyFrame, endYKeyFrame) {
          var startPoint = math.v2(startXKeyFrame.value, startYKeyFrame.value);
          var endPoint = math.v2(endXKeyFrame.value, endYKeyFrame.value);
          var direction = endPoint.subtract(startPoint);
          var distance = direction.length(); //Vec2.distance(startPoint,endPoint);
          var numSegments = distance / this.p2pDistance;
          var dx = direction.x / numSegments; // x轴方向的每段增量
          var dy = direction.y / numSegments; // y轴方向的每段增量

          var result = [];
          for (var i = 0; i <= numSegments; i++) {
            var x = startPoint.x + i * dx;
            var y = startPoint.y + i * dy;
            result.push(math.v2(x, y));
          }
          return result;

          // let startP: Vec2, cP1: Vec2, cP2: Vec2, endP: Vec2;
          // let motionPath = startKeyFrame.motionPath; //移动路径数组即主控制点数组
          // let moPathSP, moPathEP; //一段曲线上的首尾端主控制点
          //
          // //第一段
          // startP = math.v2(startKeyFrame.value[0], startKeyFrame.value[1]);
          // moPathEP = motionPath[0];
          // cP1 = cP2 = math.v2(moPathEP[2], moPathEP[3]);
          // endP = math.v2(moPathEP[0], moPathEP[1]);
          // bezierPartArray.push(new BezierPart(startP, cP1, cP2, endP));
          //
          // for (let i = 0; i < motionPath.length - 1; i++) { //0 - len - 1, len - 3 len - 2 len -1
          //     moPathSP = motionPath[i];
          //     moPathEP = motionPath[i + 1]
          //     startP = math.v2(moPathSP[0], moPathSP[1]);
          //     cP1 = math.v2(moPathSP[4], moPathSP[5]);
          //     cP2 = math.v2(moPathEP[2], moPathEP[3]);
          //     endP = math.v2(moPathEP[0], moPathEP[1]);
          //     bezierPartArray.push(new BezierPart(startP, cP1, cP2, endP));
          // }
          //
          // //最后一段
          // moPathSP = motionPath[motionPath.length - 1];
          // startP = math.v2(moPathSP[0], moPathSP[1]);
          // cP1 = cP2 = math.v2(moPathSP[4], moPathSP[5]);
          // endP = math.v2(endKeyFrame.value[0], endKeyFrame.value[1]);
          // bezierPartArray.push(new BezierPart(startP, cP1, cP2, endP));

          // return bezierPartArray;
        }

        /**
         * Draws point
         * @param point 点坐标
         * @param color 默认颜色为红色
         */;
        _proto.drawPoint = function drawPoint(point, color) {
          if (color === void 0) {
            color = null;
          }
          this.graphics.clear();
          if (color === null) this.graphics.strokeColor = Color.RED;else this.graphics.strokeColor = color;

          // this.graphics.strokeColor = cc.Color.RED;
          this.graphics.fillColor = Color.RED;
          this.graphics.lineWidth = 1;
          if (point.length) {
            for (var i = 0; i < point.length; i++) {
              this.graphics.circle(point[i].x, point[i].y, 2);
              // this.graphics.stroke();
              this.graphics.fill();
            }
          } else {
            this.graphics.circle(point.x, point.y, 2);
            this.graphics.fill();
          }
        };
        return AnimationPath;
      }(Component)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/AreaType.ts", ['cc'], function (exports) {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "c5be0bRepNF2YyFPUHoUaZK", "AreaType", undefined);
      var AreaType = exports('AreaType', function AreaType() {});
      /// <summary>
      /// 左上
      /// </summary>
      AreaType.LT = 0x0001;
      /// <summary>
      /// 右上
      /// </summary>
      AreaType.RT = 0x0010;
      /// <summary>
      /// 左下
      /// </summary>
      AreaType.LB = 0x0100;
      /// <summary>
      /// 右下
      /// </summary>
      AreaType.RB = 0x1000;
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ArrayUtils.ts", ['cc'], function (exports) {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "881a3GBmmtBJLOMpwSDzNlQ", "ArrayUtils", undefined);
      /**
       * @class: ArrayUtils
       * @description: 数组工具类
       * @author: Ran
       * @time: 2024-08-12 20:05:00
       */
      var ArrayUtils = exports('default', /*#__PURE__*/function () {
        function ArrayUtils() {}
        /**
         * 随机下标
         * @param len ：数组长度
         * @param count ：需要的下标个数
         * @param repetition ：下标是否可以重复，缺省为false
         * @returns 下标数组(未排序)
         */
        ArrayUtils.randomIndex = function randomIndex(len, count, repetition) {
          if (repetition === void 0) {
            repetition = false;
          }
          var ret = [];
          var key = {};
          var i = 0;
          while (i < count) {
            var _i = Math.floor(Math.random() * len * 100 % len);
            if (key[_i] != null && !repetition) continue;
            ret.push(_i);
            key[_i] = _i;
            i++;
          }
          return ret;
        }

        /**
         * 获取一个范围内的随机数，[min, max]
         * @param min - 最小值
         * @param max - 最大值
         * @param integer - 是否取整，缺省为true
         * @returns 
         */;
        ArrayUtils.randomRange = function randomRange(min, max, integer) {
          if (integer === void 0) {
            integer = true;
          }
          return integer ? Math.floor(Math.random() * (max - min + 1)) + min : Math.random() * (max - min) + min;
        };
        ArrayUtils.removeItem = function removeItem(array, item) {
          var i = array.length;
          while (i > 0) {
            i--;
            if (array[i] === item) {
              array.splice(i, 1);
              return true;
            }
          }
          return false;
        }

        /**
         * 对数组的进行NUMBER排序
         * @param _arr1 
         * @param re true升序 false降序
         * @param isNew 是否创建新的数组
         * @returns 
         */;
        ArrayUtils.sortBy = function sortBy(_arr1, re, isNew) {
          if (re === void 0) {
            re = false;
          }
          if (isNew === void 0) {
            isNew = true;
          }
          var arr = isNew ? _arr1.concat() : _arr1;
          arr.sort(sortFun);
          return arr;
          function sortFun(a, b) {
            if (a < b) {
              if (re) return -1;
              return 1;
            }
            if (a == b) return 0;
            if (re) return 1;

            //添加垃圾代码

            return -1;
          }
        }

        /**
         * 
         * @param _arr1 对象数组
         * @param p 属性名
         * @param re false降序 true升序
         * @param isNew 是否创建新的数组
         * @returns 
         */;
        ArrayUtils.sortBy2 = function sortBy2(_arr1, p, re, isNew) {
          if (re === void 0) {
            re = false;
          }
          if (isNew === void 0) {
            isNew = true;
          }
          var arr = isNew ? _arr1.concat() : _arr1;
          arr.sort(sortFun);
          function sortFun(a, b) {
            if (a[p] < b[p]) {
              if (re) return -1;

              //添加垃圾代码

              return 1;
            }
            if (a[p] == b[p]) return 0;
            if (re) return 1;
            return -1;
          }
          return arr;
        }

        /**
         * 对数组的某些属性排序
         * @param _arr1 对象数组
         * @param p 属性名
         * @param re false 升序 true 降序
         * @param isNew 是否创建新的数组
         * @returns 
         */;
        ArrayUtils.sortBy3 = function sortBy3(_arr1, p, re, isNew) {
          if (re === void 0) {
            re = false;
          }
          if (isNew === void 0) {
            isNew = true;
          }
          var arr = isNew ? _arr1.concat() : _arr1;
          arr.sort(sortFun);

          //添加垃圾代码
          return arr;
          function sortFun(a, b) {
            var i = 0;
            while (true) {
              if (a[p[i]] < b[p[i]]) {
                if (re) return 1;
                return -1;
              } else if (a[p[i]] > b[p[i]]) {
                if (re) return -1;
                return 1;
              }
              if (a[p[i]] == b[p[i]]) {
                i++;
                if (i >= p.length) {
                  break;
                }
              }
            }
            return 0;
          }
        }

        /**
         * 
         * @param _arr1 
         * @param _arr2 
         * @param reArr 
         * @param isNew 
         * @returns 
         */;
        ArrayUtils.sortBy4 = function sortBy4(_arr1, _arr2, reArr, isNew) {
          if (isNew === void 0) {
            isNew = true;
          }
          var arr = isNew ? _arr1.concat() : _arr1;
          if (!arr || arr.length == 0) return [];
          arr.sort(sortFun);

          //添加垃圾代码

          return arr;
          function sortFun(a, b) {
            var i;
            var aa = a;
            var bb = b;
            var re = false;
            for (var j = 0; j < _arr2.length; j++) {
              a = aa;
              b = bb;
              re = reArr[j];
              for (i = 0; i < _arr2[j].length; i++) {
                a = a[_arr2[j][i]];
              }
              for (i = 0; i < _arr2[j].length; i++) {
                b = b[_arr2[j][i]];
              }
              if (a != b) {
                break;
              }
            }
            if (a < b) {
              if (re) return -1;
              return 1;
            }
            if (a == b) return 0;
            if (re) return 1;
            return -1;
          }
        }

        /**
         * 
         * @param _arr1 
         * @param p 属性名
         * @param reArr false 升序 true 降序
         * @param isNew 是否创建新的数组
         *  例子:sortBy5(list,["type","id"],[fales,true],false);//对type升序排完再对id降序排
         * @returns 
         */;
        ArrayUtils.sortBy5 = function sortBy5(_arr1, p, reArr, isNew) {
          if (reArr === void 0) {
            reArr = [];
          }
          if (isNew === void 0) {
            isNew = true;
          }
          var arr = isNew ? _arr1.concat() : _arr1;
          arr.sort(sortFun);

          //添加垃圾代码

          return arr;
          function sortFun(a, b) {
            var i = 0;
            while (true) {
              var re = reArr[i];
              if (a[p[i]] < b[p[i]]) {
                if (re) return 1;
                return -1;
              } else if (a[p[i]] > b[p[i]]) {
                if (re) return -1;
                return 1;
              }
              if (a[p[i]] == b[p[i]]) {
                i++;
                if (i >= p.length) {
                  break;
                }
              }
            }
            return 0;
          }
        }

        // class end
        ;

        return ArrayUtils;
      }());
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/AssetMgr.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _createClass, _asyncToGenerator, _regeneratorRuntime, cclegacy, assetManager, instantiate;
  return {
    setters: [function (module) {
      _createClass = module.createClass;
      _asyncToGenerator = module.asyncToGenerator;
      _regeneratorRuntime = module.regeneratorRuntime;
    }, function (module) {
      cclegacy = module.cclegacy;
      assetManager = module.assetManager;
      instantiate = module.instantiate;
    }],
    execute: function () {
      cclegacy._RF.push({}, "0ab7eWf9V9HAqiDU1r3bcOH", "AssetMgr", undefined);

      /**
       * @class name : AssetManager
       * @description : 资源管理类
       * @author : Ran
       * @time : 2022.07.20
       */
      var AssetMgr = exports('default', /*#__PURE__*/function () {
        function AssetMgr() {}
        var _proto = AssetMgr.prototype;
        /**
         * 获取bundle，如果未加载则加载该bundle
         * @param nameOrUrl - bundle路径
         * @returns bundle对象
         */
        _proto.getBundle = function getBundle(nameOrUrl) {
          if (!nameOrUrl || nameOrUrl === "") return Promise.reject(" ***** ERROR Bundle name ***** ");
          var bundle = assetManager.getBundle(nameOrUrl);
          if (bundle) {
            return Promise.resolve(bundle);
          }
          return new Promise(function (resolve, reject) {
            assetManager.loadBundle(nameOrUrl, function (err, bundle) {
              if (err) {
                console.error(" ***** load bundle " + nameOrUrl + " error: " + err + " ***** ");
                reject(err);
              }
              resolve(bundle);
            });
          });
        }

        /**
         * 加载文件
         * @template T extends cc.Asset - 资源类型
         * @param path - 资源路径，规则为: bundleName://assetName，缺省bundleName为resources
         * @returns 资源对象
         */;
        _proto.load = /*#__PURE__*/
        function () {
          var _load = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(path, cb) {
            var pathResult, bundleName, assetName, bundle, asset;
            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) switch (_context.prev = _context.next) {
                case 0:
                  pathResult = this.parseAssetPath(path);
                  if (!(pathResult == null)) {
                    _context.next = 3;
                    break;
                  }
                  return _context.abrupt("return", Promise.reject(" ***** ERROR Bundle: " + path + " ***** "));
                case 3:
                  bundleName = pathResult.bundleName, assetName = pathResult.assetName;
                  _context.next = 6;
                  return this.getBundle(bundleName);
                case 6:
                  bundle = _context.sent;
                  if (bundle) {
                    _context.next = 10;
                    break;
                  }
                  if (cb) {
                    cb(" ***** ERROR Bundle: " + bundleName + " ***** ", null);
                  }
                  return _context.abrupt("return", Promise.reject(" ***** ERROR Bundle: " + bundleName + " ***** "));
                case 10:
                  asset = bundle.get(assetName);
                  if (!asset) {
                    _context.next = 14;
                    break;
                  }
                  if (cb) {
                    cb(null, asset);
                  }
                  return _context.abrupt("return", Promise.resolve(asset));
                case 14:
                  if (!cb) {
                    _context.next = 17;
                    break;
                  }
                  bundle.load(assetName, function (err, asset) {
                    cb(err, asset);
                  });
                  return _context.abrupt("return");
                case 17:
                  return _context.abrupt("return", new Promise(function (resolve, reject) {
                    bundle.load(assetName, function (err, resource) {
                      if (err) {
                        console.error(" ***** load asset " + path + " error: " + err + " ***** ");
                        reject(err);
                      }
                      resolve(resource);
                    });
                  }));
                case 18:
                case "end":
                  return _context.stop();
              }
            }, _callee, this);
          }));
          function load(_x, _x2) {
            return _load.apply(this, arguments);
          }
          return load;
        }()
        /**
         * 预加载资源
         * @param path - 资源路径，规则为: bundleName://assetName，缺省bundleName为resources
         */;

        _proto.preload = /*#__PURE__*/
        function () {
          var _preload = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(path) {
            var pathResult, bundleName, assetName, bundle;
            return _regeneratorRuntime().wrap(function _callee2$(_context2) {
              while (1) switch (_context2.prev = _context2.next) {
                case 0:
                  pathResult = this.parseAssetPath(path);
                  if (!(pathResult == null)) {
                    _context2.next = 3;
                    break;
                  }
                  return _context2.abrupt("return", Promise.reject(" ***** ERROR Bundle: " + path + " ***** "));
                case 3:
                  bundleName = pathResult.bundleName, assetName = pathResult.assetName;
                  _context2.next = 6;
                  return this.getBundle(bundleName);
                case 6:
                  bundle = _context2.sent;
                  if (bundle) {
                    _context2.next = 9;
                    break;
                  }
                  return _context2.abrupt("return");
                case 9:
                  bundle.preload(assetName);
                case 10:
                case "end":
                  return _context2.stop();
              }
            }, _callee2, this);
          }));
          function preload(_x3) {
            return _preload.apply(this, arguments);
          }
          return preload;
        }()
        /**
         * 解析资源路径
         * @param path - 资源路径，规则为: bundleName://assetName，缺省bundleName为resources
         * @returns 资源路径中的bundleName和assetName
         */;

        _proto.parseAssetPath = function parseAssetPath(path) {
          var bundleName, assetName;
          if (path.indexOf(":") != -1) {
            var regex = /(.*):\/\/(.*)/;
            var regexArr = path.match(regex);
            if (regexArr == null || regexArr.length <= 0) return null;
            bundleName = regexArr[1];
            assetName = regexArr[2];
          } else {
            bundleName = "resources";
            assetName = path;
          }
          return {
            bundleName: bundleName,
            assetName: assetName
          };
        }

        /**
         * 释放资源
         * @param path - 资源路径，规则为: bundleName://assetName，缺省bundleName为resources
         * @param releaseBundle - 是否释放bundle，缺省为false
         */;
        _proto.release = function release(path, releaseBundle) {
          if (releaseBundle === void 0) {
            releaseBundle = false;
          }
          var pathResult = this.parseAssetPath(path);
          if (pathResult == null) return Promise.reject(" ***** ERROR Bundle: " + path + " ***** ");
          var bundleName = pathResult.bundleName,
            assetName = pathResult.assetName;
          var bundle = assetManager.getBundle(bundleName);
          if (!bundle) return;
          if (!releaseBundle) {
            bundle.release(assetName);
          } else {
            this.releaseBundle(bundle);
          }
        }

        /**
         * 释放bundle
         * @param bundle - bundle名字或bundle对象
         */;
        _proto.releaseBundle = function releaseBundle(bundle) {
          if (typeof bundle === "string") {
            var b = assetManager.getBundle(bundle);
            if (!b) return;
            b.releaseAll();
            assetManager.removeBundle(b);
          } else {
            if (!bundle) return;
            bundle.releaseAll();
            assetManager.removeBundle(bundle);
          }
        }

        /* 释放所有资源 */;
        _proto.releaseAll = function releaseAll() {
          assetManager.releaseAll();
        }

        /**
         * 创建预制体
         * @param prefabPath ：预制体路径，规则为: bundleName://assetName，缺省bundleName为resources
         */;
        _proto.createPrefab = /*#__PURE__*/
        function () {
          var _createPrefab = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(prefabPath) {
            var p, node;
            return _regeneratorRuntime().wrap(function _callee3$(_context3) {
              while (1) switch (_context3.prev = _context3.next) {
                case 0:
                  _context3.next = 2;
                  return this.load(prefabPath);
                case 2:
                  p = _context3.sent;
                  node = instantiate(p);
                  return _context3.abrupt("return", node);
                case 5:
                case "end":
                  return _context3.stop();
              }
            }, _callee3, this);
          }));
          function createPrefab(_x4) {
            return _createPrefab.apply(this, arguments);
          }
          return createPrefab;
        }()
        /**
         * base64转纹理
         * @param data - base64编码的字符串
         * @returns 纹理
         */;

        _proto.base64ToTexture = /*#__PURE__*/
        function () {
          var _base64ToTexture = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(data) {
            return _regeneratorRuntime().wrap(function _callee4$(_context4) {
              while (1) switch (_context4.prev = _context4.next) {
                case 0:
                case "end":
                  return _context4.stop();
              }
            }, _callee4);
          }));
          function base64ToTexture(_x5) {
            return _base64ToTexture.apply(this, arguments);
          }
          return base64ToTexture;
        }()
        /**
         * base64转精灵
         * @param data - base64编码的字符串
         * @returns 精灵数据
         */;

        _proto.base64ToSpriteFrame = /*#__PURE__*/
        function () {
          var _base64ToSpriteFrame = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(data) {
            return _regeneratorRuntime().wrap(function _callee5$(_context5) {
              while (1) switch (_context5.prev = _context5.next) {
                case 0:
                case "end":
                  return _context5.stop();
              }
            }, _callee5);
          }));
          function base64ToSpriteFrame(_x6) {
            return _base64ToSpriteFrame.apply(this, arguments);
          }
          return base64ToSpriteFrame;
        }() // class end
        ;

        _createClass(AssetMgr, null, [{
          key: "instance",
          get: function get() {
            this._instance || (this._instance = new AssetMgr());
            return this._instance;
          }
        }]);
        return AssetMgr;
      }()); // export const assetManager = AssetMgr.instance;
      // window["assetManager"] = assetManager;
      AssetMgr._instance = void 0;
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/AStarRoadSeeker.ts", ['cc', './Enum2.ts', './BinaryTreeNode.ts'], function (exports) {
  var cclegacy, PathQuadSeek, PathOptimize, BinaryTreeNode;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      PathQuadSeek = module.PathQuadSeek;
      PathOptimize = module.PathOptimize;
    }, function (module) {
      BinaryTreeNode = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "70b6f336f1Bn5hqVuXLEGek", "AStarRoadSeeker", undefined);
      var AStarRoadSeeker = exports('default', /*#__PURE__*/function () {
        function AStarRoadSeeker(roadNodes) {
          /**
           * 横向移动一个格子的代价
           */
          this.COST_STRAIGHT = 10;
          /**
           * 斜向移动一个格子的代价
           */
          this.COST_DIAGONAL = 14;
          /**
           *最大搜寻步骤数，超过这个值时表示找不到目标 
           */
          this.maxStep = 1000;
          /** 
           * 开启列表
           */
          this._openList = void 0;
          /**
           * 关闭列表
           */
          this._closeList = void 0;
          this._binaryTreeNode = new BinaryTreeNode();
          this._startNode = void 0;
          this._currentNode = void 0;
          this._targetNode = void 0;
          this._roadNodes = void 0;
          /**
           * 用于检索一个节点周围上下左右4个点的向量数组 
           */
          this._round1 = [[0, -1], [1, 0], [0, 1], [-1, 0]];
          /**
           * 用于检索一个节点周围8个点的向量数组 
           */
          this._round2 = [[0, -1], [1, -1], [1, 0], [1, 1], [0, 1], [-1, 1], [-1, 0], [-1, -1]];
          /**
           *用于检索一个节点周围n个点的向量数组，默认8方向
          */
          this._round = this._round2;
          this.handle = -1;
          /**
           * 优化类型，默认使用最短路径的优化
           */
          this._pathOptimize = PathOptimize.best;
          /**
           * 默认使用8方向寻路
           */
          this._pathQuadSeek = PathQuadSeek.path_dire_8;
          /**
           * 定义一个路点是否能通过，如果是null，则用默认判断条件
           */
          this._isPassCallBack = null;
          this._roadNodes = roadNodes;
        }
        var _proto = AStarRoadSeeker.prototype;
        _proto.seekPath = function seekPath(startNode, targetNode) {
          this._startNode = startNode;
          this._targetNode = targetNode;
          this._currentNode = startNode;
          if (!this._startNode || !this._targetNode) {
            return [];
          }
          if (this._startNode == this._targetNode) {
            return [this._targetNode];
          }
          if (!this.isPassNode(this._targetNode)) {
            console.error("目标不可达到");
            return [];
          }
          this._startNode.g = 0;
          this._startNode.resetTree();
          this._binaryTreeNode.refleshTag();
          var step = 0;
          while (true) {
            if (step > this.maxStep) {
              console.error("没有找到计算目标", step);
              return [];
            }
            step++;
            this.searchRoundNodes(this._currentNode);
            if (this._binaryTreeNode.isTreeNull()) {
              console.error("没有找到目标", step);
              return [];
            }
            this._currentNode = this._binaryTreeNode.getMinFNode();
            if (this._currentNode == this._targetNode) {
              console.error("找到目标了", step);
              return this.getPath();
              // return [];
            } else {
              this._binaryTreeNode.setRoadNodeInCloseList(this._currentNode);
            }
          }
        };
        _proto.seekPath2 = function seekPath2(startNode, targetNode) {
          this._startNode = startNode;
          this._currentNode = startNode;
          this._targetNode = targetNode;
          if (!this._startNode || !this._targetNode) return [];
          if (this._startNode == this._targetNode) {
            return [this._targetNode];
          }
          var newMaxStep = this.maxStep;
          if (!this.isPassNode(this._targetNode)) {
            //如果不能直达目标，最大寻路步骤 = 为两点间的预估距离的3倍
            newMaxStep = (Math.abs(this._targetNode.cx - this._startNode.cx) + Math.abs(this._targetNode.cy - this._startNode.cy)) * 3;
            if (newMaxStep > this.maxStep) {
              newMaxStep = this.maxStep;
            }
          }
          this._startNode.g = 0; //重置起始节点的g值
          this._startNode.resetTree(); //清除起始节点原有的二叉堆关联关系

          this._binaryTreeNode.refleshTag(); //刷新二叉堆tag，用于后面判断是不是属于当前次的寻路
          //this._binaryTreeNode.addTreeNode(this._startNode); //把起始节点设置为二叉堆结构的根节点

          var step = 0;
          var closestNode = null; //距离目标最近的路点

          while (true) {
            if (step > newMaxStep) {
              console.error("没找到目标计算步骤为：", step);
              return this.seekPath(startNode, closestNode);
            }
            step++;
            this.searchRoundNodes(this._currentNode);
            if (this._binaryTreeNode.isTreeNull())
              //二叉堆树里已经没有任何可搜寻的点了，则寻路结束，没找到目标
              {
                console.error("没找到目标计算步骤为：", step);
                return this.seekPath(startNode, closestNode);
              }
            this._currentNode = this._binaryTreeNode.getMinFNode();
            if (closestNode == null) {
              closestNode = this._currentNode;
            } else {
              if (this._currentNode.h < closestNode.h) {
                closestNode = this._currentNode;
              }
            }
            if (this._currentNode == this._targetNode) {
              console.error("找到目标计算步骤为：", step);
              // return [];
              return this.getPath();
            } else {
              this._binaryTreeNode.setRoadNodeInCloseList(this._currentNode); //打入关闭列表标记
            }
          }
        };

        _proto.testSeekPathStep = function testSeekPathStep(startNode, targetNode, callback, target, time) {
          throw new Error("Method not implemented.");
        };
        _proto.isArriveBetweenTwoNodes = function isArriveBetweenTwoNodes(startNode, targetNode) {
          if (startNode == targetNode) {
            return false;
          }
          var disX = Math.abs(targetNode.cx - startNode.cx);
          var disY = Math.abs(targetNode.cy - startNode.cy);
          var dirX = 0;
          if (targetNode.cx > startNode.cx) {
            dirX = 1;
          } else if (targetNode.cx < startNode.cx) {
            dirX = -1;
          }
          var dirY = 0;
          if (targetNode.cy > startNode.cy) {
            dirY = 1;
          } else if (targetNode.cy < startNode.cy) {
            dirY = -1;
          }
          var rx = 0;
          var ry = 0;
          var intNum = 0;
          var decimal = 0;
          if (disX > disY) {
            var rate = disY / disX;
            for (var i = 0; i < disX; i++) {
              ry = startNode.cy + i * dirY * rate;
              intNum = Math.floor(ry);
              decimal = ry % 1;
              var cx1 = startNode.cx + i * dirX;
              var cy1 = decimal <= 0.5 ? intNum : intNum + 1;
              ry = startNode.cy + (i + 1) * dirY * rate;
              intNum = Math.floor(ry);
              decimal = ry % 1;
              var cx2 = startNode.cx + (i + 1) * dirX;
              var cy2 = decimal <= 0.5 ? intNum : intNum + 1;
              var node1 = this.getRoadNode(cx1, cy1);
              var node2 = this.getRoadNode(cx2, cy2);

              //cc.log(i + "  :: " + node1.cy," yy ",startNode.cy + i * rate,ry % 1);

              if (!this.isCrossAtAdjacentNodes(node1, node2)) {
                return false;
              }
            }
          } else {
            var rate = disX / disY;
            for (var i = 0; i < disY; i++) {
              rx = i * dirX * rate;
              intNum = dirX > 0 ? Math.floor(startNode.cx + rx) : Math.ceil(startNode.cx + rx);
              decimal = Math.abs(rx % 1);
              var cx1 = decimal <= 0.5 ? intNum : intNum + 1 * dirX;
              var cy1 = startNode.cy + i * dirY;
              rx = (i + 1) * dirX * rate;
              intNum = dirX > 0 ? Math.floor(startNode.cx + rx) : Math.ceil(startNode.cx + rx);
              decimal = Math.abs(rx % 1);
              var cx2 = decimal <= 0.5 ? intNum : intNum + 1 * dirX;
              var cy2 = startNode.cy + (i + 1) * dirY;
              var node1 = this.getRoadNode(cx1, cy1);
              var node2 = this.getRoadNode(cx2, cy2);
              if (!this.isCrossAtAdjacentNodes(node1, node2)) {
                return false;
              }
            }
          }
          return true;
        }

        /**
         * 判断两个相邻的点是否可通过
         * @param node1 
         * @param node2 
         */;
        _proto.isCrossAtAdjacentNodes = function isCrossAtAdjacentNodes(node1, node2) {
          if (node1 == node2) {
            return false;
          }

          //两个点只要有一个点不能通过就不能通过
          if (!this.isPassNode(node1) || !this.isPassNode(node2)) {
            return false;
          }
          var dirX = node2.cx - node1.cx;
          var dirY = node2.cy - node1.cy;

          //如果不是相邻的两个点 则不能通过
          if (Math.abs(dirX) > 1 || Math.abs(dirY) > 1) {
            return false;
          }

          //如果相邻的点是在同一行，或者同一列，则判定为可通过
          if (node1.cx == node2.cx || node1.cy == node2.cy) {
            return true;
          }

          //只剩对角情况了
          if (this.isPassNode(this.getRoadNode(node1.cx, node1.cy + dirY)) && this.isPassNode(this.getRoadNode(node1.cx + dirX, node1.cy))) {
            return true;
          }
          return false;
        };
        _proto.isPassNode = function isPassNode(node) {
          if (this._isPassCallBack != null) {
            return this._isPassCallBack(node);
          }
          if (node == null || node.value == 1) {
            return false;
          }
          return true;
        };
        _proto.getRoadNode = function getRoadNode(cx, cy) {
          var key = cx + "_" + cy;
          return this._roadNodes[key];
        };
        _proto.setMaxSeekStep = function setMaxSeekStep(maxStep) {
          this.maxStep = maxStep;
        };
        _proto.setPathOptimize = function setPathOptimize(optimize) {
          this._pathOptimize = optimize;
        };
        _proto.setPathQuadSeek = function setPathQuadSeek(pathQuadSeek) {
          this._pathQuadSeek = pathQuadSeek;
          if (this._pathQuadSeek == PathQuadSeek.path_dire_4) {
            this._round = this._round1;
          } else if (this._pathQuadSeek == PathQuadSeek.path_dire_8) {
            this._round = this._round2;
          }
        };
        _proto.setRoadNodePassCondition = function setRoadNodePassCondition(callback) {
          this._isPassCallBack = callback;
        };
        _proto.searchRoundNodes = function searchRoundNodes(node) {
          for (var i = 0; i < this._round.length; i++) {
            var cx = node.cx + this._round[i][0];
            var cy = node.cy + this._round[i][1];
            var node2 = this.getRoadNode(cx, cy);
            if (this.isPassNode(node2) && node2 != this._startNode && !this.isInCloseList(node2) && !this.isInCorner(node2)) {
              this.setNodeFValue(node2);
            }
          }
        };
        _proto.getPath = function getPath() {
          var result = [];
          var node = this._targetNode;
          while (node != this._startNode) {
            result.unshift(node);
            node = node.parent;
          }
          result.unshift(this._startNode);
          if (this._pathOptimize == PathOptimize.none) {
            return result;
          }
          //第一阶段优化： 对横，竖，正斜进行优化
          //把多个节点连在一起的，横向或者斜向的一连串点，除两边的点保留
          for (var i = 1; i < result.length - 1; i++) {
            var preNode = result[i - 1];
            var midNode = result[i];
            var nextNode = result[i + 1];
            var bool1 = midNode.cx == preNode.cx && midNode.cx == nextNode.cx;
            var bool2 = midNode.cy == preNode.cy && midNode.cy == nextNode.cy;
            var bool3 = false;
            if (this._pathQuadSeek == PathQuadSeek.path_dire_8)
              //寻路类型是8方向时才考虑正斜角路径优化
              {
                bool3 = (midNode.cx - preNode.cx) / (midNode.cy - preNode.cy) * ((nextNode.cx - midNode.cx) / (nextNode.cy - midNode.cy)) == 1;
              }
            if (bool1 || bool2 || bool3) {
              result.splice(i, 1);
              i--;
            }
          }

          //如果寻路类型是4方向寻路，则直接返回第一阶段的优化结果。
          //（因为4方向寻路是用不到第二阶段优化的，否则进入第二阶段优化的话，路径就不按上下左右相连了，这并不是4方寻路想要的结果）
          if (this._pathQuadSeek == PathQuadSeek.path_dire_4) {
            return result;
          }

          //如果只需要优化到第一阶段，则直接返回第一阶段的优化结果
          if (this._pathOptimize == PathOptimize.better) {
            return result;
          }

          //第二阶段优化：对不在横，竖，正斜的格子进行优化
          for (var i = 0; i < result.length - 2; i++) {
            var startNode = result[i];
            var optimizeNode = null;

            //优先从尾部对比，如果能直达就把中间多余的路点删掉
            for (var j = result.length - 1; j > i + 1; j--) {
              var targetNode = result[j];

              //在第一阶段优已经优化过横，竖，正斜了，所以再出现是肯定不能优化的，可以忽略
              if (startNode.cx == targetNode.cx || startNode.cy == targetNode.cy || Math.abs(targetNode.cx - startNode.cx) == Math.abs(targetNode.cy - startNode.cy)) {
                continue;
              }
              if (this.isArriveBetweenTwoNodes(startNode, targetNode)) {
                optimizeNode = targetNode;
                break;
              }
            }
            if (optimizeNode) {
              var optimizeLen = j - i - 1;
              result.splice(i + 1, optimizeLen);
            }
          }
          return result;
        };
        _proto.setNodeFValue = function setNodeFValue(node) {
          var g;
          if (node.cx == this._currentNode.cx || node.cy == this._currentNode.cy) {
            g = this._currentNode.g + this.COST_STRAIGHT;
          } else {
            g = this._currentNode.g + this.COST_DIAGONAL;
          }
          if (this.isInOpenList(node)) {
            if (g < node.g) {
              node.g = g;
              node.parent = this._currentNode;
              node.h = (Math.abs(this._targetNode.cx - node.cx) + Math.abs(this._targetNode.cy - node.cy)) * this.COST_STRAIGHT;
              node.f = node.g + node.h;

              //节点的g值已经改变，把节点先从二堆叉树结构中删除，再重新添加进二堆叉树
              this._binaryTreeNode.removeTreeNode(node);
              this._binaryTreeNode.addTreeNode(node);
            }
          } else {
            node.g = g;
            this._binaryTreeNode.setRoadNodeInOpenList(node); //给节点打入开放列表的标志
            node.resetTree();
            node.parent = this._currentNode;
            node.h = (Math.abs(this._targetNode.cx - node.cx) + Math.abs(this._targetNode.cy - node.cy)) * this.COST_STRAIGHT;
            node.f = node.g + node.h;
            this._binaryTreeNode.addTreeNode(node);
          }
        };
        _proto.isInCloseList = function isInCloseList(node) {
          return this._binaryTreeNode.isInCloseList(node);
        };
        _proto.isInOpenList = function isInOpenList(node) {
          return this._binaryTreeNode.isInOpenList(node);
        };
        _proto.isInCorner = function isInCorner(node) {
          if (this._pathQuadSeek == PathQuadSeek.path_dire_4) {
            return false;
          }
          if (node.cx == this._currentNode.cx || node.cy == this._currentNode.cy) {
            return false;
          }
          var node1 = this.getRoadNode(this._currentNode.cx, node.cy);
          var node2 = this.getRoadNode(node.cx, this._currentNode.cy);
          if (this.isPassNode(node1) && this.isPassNode(node2)) {
            return false;
          }
          return true;
        };
        return AStarRoadSeeker;
      }());
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Background.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './config.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, SpriteFrame, Node, Sprite, UITransform, math, Component, config;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      SpriteFrame = module.SpriteFrame;
      Node = module.Node;
      Sprite = module.Sprite;
      UITransform = module.UITransform;
      math = module.math;
      Component = module.Component;
    }, function (module) {
      config = module.config;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;
      cclegacy._RF.push({}, "8c523QmY1BGjJbstFHJdR36", "Background", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var Background = exports('Background', (_dec = ccclass('Background'), _dec2 = property(SpriteFrame), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(Background, _Component);
        function Background() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "itemSpriteFrame", _descriptor, _assertThisInitialized(_this));
          _this.itemArray = [];
          return _this;
        }
        var _proto = Background.prototype;
        _proto.onLoad = function onLoad() {
          this.init();
        };
        _proto.init = function init() {
          this.itemArray = [];
          var height = config.row * config.blockHeight;
          var width = config.col * config.blockWidth;
          for (var i = 0; i < config.row; i++) {
            this.itemArray[i] = [];
            for (var j = 0; j < config.col; j++) {
              var x = -width / 2 + config.blockWidth / 2 + j * config.blockWidth;
              var y = height / 2 - config.blockHeight / 2 - i * config.blockHeight;
              var item = this.createItem(x, y);
              this.itemArray[i][j] = item;
            }
          }
          console.log(this.itemArray);
        };
        _proto.createItem = function createItem(x, y) {
          var item = new Node();
          var sprite = item.addComponent(Sprite);
          sprite.spriteFrame = this.itemSpriteFrame;
          sprite.sizeMode = Sprite.SizeMode.CUSTOM;
          this.node.addChild(item);
          item.setPosition(x, y);
          item.addComponent(UITransform).contentSize = math.size(config.blockWidth, config.blockHeight);
          return item;
        };
        _proto.onDestroy = function onDestroy() {
          for (var i = 0; i < this.itemArray.length; i++) {
            var items = this.itemArray[i];
            for (var j = 0; j < items.length; j++) {
              var element = items[j];
              if (element) {
                element.destroy();
              }
            }
          }
          this.itemArray = [];
        };
        return Background;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "itemSpriteFrame", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return undefined;
        }
      }), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/BaseView.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Enum3.ts', './Behaviour.ts'], function (exports) {
  var _inheritsLoose, cclegacy, ViewShowTypes, Behaviour;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      ViewShowTypes = module.ViewShowTypes;
    }, function (module) {
      Behaviour = module.Behaviour;
    }],
    execute: function () {
      cclegacy._RF.push({}, "db7c5MaGkBBtrvyGxinAVPh", "BaseView", undefined);
      /**
       * UIView界面基础类
       * 
       * 1. 快速关闭与屏蔽点击的选项配置
       * 2. 界面缓存设置（开启后界面关闭不会被释放，以便下次快速打开）
       * 3. 界面显示类型配置
       * 
       * 4. 加载资源接口（随界面释放自动释放），this.loadRes(xxx)
       * 5. 由UIManager释放
       * 
       * 5. 界面初始化回调（只调用一次）
       * 6. 界面打开回调（每次打开回调）
       * 7. 界面打开动画播放结束回调（动画播放完回调）
       * 8. 界面关闭回调
       * 9. 界面置顶回调
       */
      var BaseView = exports('default', /*#__PURE__*/function (_Behaviour) {
        _inheritsLoose(BaseView, _Behaviour);
        function BaseView() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Behaviour.call.apply(_Behaviour, [this].concat(args)) || this;
          _this.quickClose = false;
          /** 屏蔽点击选项 在UIConf设置屏蔽点击*/
          // @property
          // preventTouch: boolean = true;
          _this.cache = false;
          _this.showType = ViewShowTypes.ViewSingle;
          /** 界面id */
          _this.UIid = 0;
          return _this;
        }
        var _proto = BaseView.prototype;
        /********************** UI的回调 ***********************/
        /**
         * 当界面被创建时回调，生命周期内只调用
         * @param args 可变参数
         */
        _proto.init = function init() {}

        /**
         * 当界面被打开时回调，每次调用Open时回调
         * @param fromUI 从哪个UI打开的
         * @param args 可变参数
         */;
        _proto.onOpen = function onOpen(fromUI) {}

        /**
         * 每次界面Open动画播放完毕时回调
         */;
        _proto.onOpenAniOver = function onOpenAniOver() {}

        /**
         * 当界面被关闭时回调，每次调用Close时回调
         * 返回值会传递给下一个界面
         */;
        _proto.onClose = function onClose() {}

        /**
         * 当界面被置顶时回调，Open时并不会回调该函数
         * @param preID 前一个ui
         * @param args 可变参数，
         */;
        _proto.onTop = function onTop(preID) {};
        return BaseView;
      }(Behaviour));
      /**  静态变量，用于区分相同界面的不同实例 */
      BaseView.uiIndex = 0;
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Behaviour.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './QuadTree.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, cclegacy, _decorator, Collider2D, Contact2DType, Collider, UITransform, UIOpacity, Component, QuadTreeRect;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Collider2D = module.Collider2D;
      Contact2DType = module.Contact2DType;
      Collider = module.Collider;
      UITransform = module.UITransform;
      UIOpacity = module.UIOpacity;
      Component = module.Component;
    }, function (module) {
      QuadTreeRect = module.QuadTreeRect;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;
      cclegacy._RF.push({}, "78837+997RN1Yv+tqVlWR8Q", "Behaviour", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;

      /**
       * 行为组件
       */
      var Behaviour = exports('Behaviour', (_dec = ccclass("Behaviour"), _dec2 = property({
        tooltip: "对象标识"
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(Behaviour, _Component);
        function Behaviour() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          /**
           * 对象标识
           */
          _initializerDefineProperty(_this, "tag", _descriptor, _assertThisInitialized(_this));
          _this.colliders_2D = null;
          _this.colliders_3D = null;
          _this._transform = null;
          _this._gameObject = null;
          _this._uiTransform = null;
          _this._uiOpacity = null;
          //--------------------------------设置宽高 end---------------------------------------------
          //--------------------------------设置透明度 begin---------------------------------------------
          _this._alpha = 1;
          _this._opacity = 255;
          return _this;
        }
        var _proto = Behaviour.prototype;
        //--------------------------------世界坐标 end----------------------------------------------
        _proto.onLoad = function onLoad() {
          this.addColliderEventListener();
        }

        /**
         * 监听碰撞事件
         */;
        _proto.addColliderEventListener = function addColliderEventListener() {
          this.add2DColliderEventListener();
          this.add3DColliderEventListener();
        }

        /**
         * 2D 触发器进入函数
         * @param selfCollider 自己的碰撞体
         * @param otherCollider 对方的碰撞体
         * @param contact
         * @protected
         */;
        _proto.onTriggerEnter2D = function onTriggerEnter2D(selfCollider, otherCollider, contact) {}

        /**
         * 2D 触发器结束函数
         * @param selfCollider
         * @param otherCollider
         * @param contact
         * @protected
         */;
        _proto.onTriggerExit2D = function onTriggerExit2D(selfCollider, otherCollider, contact) {}

        /**
         * 2D 碰撞器进入函数
         * @param selfCollider
         * @param otherCollider
         * @param contact
         * @protected
         */;
        _proto.onCollisionEnter2D = function onCollisionEnter2D(selfCollider, otherCollider, contact) {}

        /**
         * 2D 碰撞器退出函数
         * @param selfCollider
         * @param otherCollider
         * @param contact
         * @protected
         */;
        _proto.onCollisionExit2D = function onCollisionExit2D(selfCollider, otherCollider, contact) {}

        /**
         * 监听2d碰撞事件
         */;
        _proto.add2DColliderEventListener = function add2DColliderEventListener() {
          var i;
          this.colliders_2D = this.getComponents(Collider2D);
          for (i = 0; i < this.colliders_2D.length; i++) {
            this.colliders_2D[i].on(Contact2DType.BEGIN_CONTACT, this.onTriggerEnter2D, this);
          }
          for (i = 0; i < this.colliders_2D.length; i++) {
            this.colliders_2D[i].on(Contact2DType.END_CONTACT, this.onTriggerExit2D, this);
          }
          for (i = 0; i < this.colliders_2D.length; i++) {
            this.colliders_2D[i].on(Contact2DType.BEGIN_CONTACT, this.onCollisionEnter2D, this);
          }
          for (i = 0; i < this.colliders_2D.length; i++) {
            this.colliders_2D[i].on(Contact2DType.END_CONTACT, this.onCollisionExit2D, this);
          }
        }

        /**
         * 3D 触发器进入函数
         * @param event
         * @protected
         */;
        _proto.onTriggerEnter = function onTriggerEnter(event) {}

        /**
         * 3D 触发器持续函数
         * @param event
         * @private
         */;
        _proto.onTriggerStay = function onTriggerStay(event) {}

        /**
         * 3D 触发器退出函数
         * @param event
         * @private
         */;
        _proto.onTriggerExit = function onTriggerExit(event) {}

        /**
         * 3D 碰撞器进入函数
         * @param event
         * @private
         */;
        _proto.onCollisionEnter = function onCollisionEnter(event) {}

        /**
         * 3D 碰撞器持续函数
         * @param event
         * @private
         */;
        _proto.onCollisionStay = function onCollisionStay(event) {}

        /**
         * 3D 碰撞器退出函数
         * @param event
         * @private
         */;
        _proto.onCollisionExit = function onCollisionExit(event) {}

        /**
         * 监听3d碰撞事件
         */;
        _proto.add3DColliderEventListener = function add3DColliderEventListener() {
          this.colliders_3D = this.getComponents(Collider);
          for (var _i = 0; _i < this.colliders_3D.length; _i++) {
            this.colliders_3D[_i].on("onTriggerEnter", this.onTriggerEnter, this);
          }
          for (var _i2 = 0; _i2 < this.colliders_3D.length; _i2++) {
            this.colliders_3D[_i2].on("onTriggerStay", this.onTriggerStay, this);
          }
          for (var _i3 = 0; _i3 < this.colliders_3D.length; _i3++) {
            this.colliders_3D[_i3].on("onTriggerExit", this.onTriggerExit, this);
          }
          for (var _i4 = 0; _i4 < this.colliders_3D.length; _i4++) {
            this.colliders_3D[_i4].on("onCollisionEnter", this.onCollisionEnter, this);
          }
          for (var _i5 = 0; _i5 < this.colliders_3D.length; _i5++) {
            this.colliders_3D[_i5].on("onCollisionStay", this.onCollisionStay, this);
          }
          for (var i = 0; i < this.colliders_3D.length; i++) {
            this.colliders_3D[i].on("onCollisionExit", this.onCollisionExit, this);
          }
        }

        /**
         * 注销所有碰撞事件
         */;
        _proto.removeAllColliderEventListener = function removeAllColliderEventListener() {
          if (this.colliders_2D) {
            for (var i = 0; i < this.colliders_2D.length; i++) {
              this.colliders_2D[i].off(Contact2DType.BEGIN_CONTACT, this.onTriggerEnter2D, this);
              this.colliders_2D[i].off(Contact2DType.END_CONTACT, this.onTriggerExit2D, this);
              this.colliders_2D[i].off(Contact2DType.BEGIN_CONTACT, this.onCollisionEnter2D, this);
              this.colliders_2D[i].off(Contact2DType.END_CONTACT, this.onCollisionExit2D, this);
            }
          }
          if (this.colliders_3D) {
            for (var _i6 = 0; _i6 < this.colliders_3D.length; _i6++) {
              this.colliders_3D[_i6].off("onTriggerEnter", this.onTriggerEnter, this);
              this.colliders_3D[_i6].off("onTriggerStay", this.onTriggerStay, this);
              this.colliders_3D[_i6].off("onTriggerExit", this.onTriggerExit, this);
              this.colliders_3D[_i6].off("onCollisionEnter", this.onCollisionEnter, this);
              this.colliders_3D[_i6].off("onCollisionStay", this.onCollisionStay, this);
              this.colliders_3D[_i6].off("onCollisionExit", this.onCollisionExit, this);
            }
          }
        };
        _proto.onDestroy = function onDestroy() {
          this.removeAllColliderEventListener();
        };
        _createClass(Behaviour, [{
          key: "rect",
          get: function get() {
            var postioion = this.node.position.clone();
            return new QuadTreeRect(postioion.x, postioion.y, this.width, this.height);
          }
        }, {
          key: "transform",
          get: function get() {
            if (!this._transform) {
              this._transform = this.node;
            }
            return this._transform;
          }
        }, {
          key: "gameObject",
          get: function get() {
            if (!this._gameObject) {
              this._gameObject = this.node;
            }
            return this._gameObject;
          }
        }, {
          key: "uiTransform",
          get: function get() {
            if (!this._uiTransform) {
              this._uiTransform = this.node.getComponent(UITransform);
            }
            return this._uiTransform;
          }
        }, {
          key: "uiOpacity",
          get: function get() {
            if (!this._uiOpacity) {
              this._uiOpacity = this.node.getComponent(UIOpacity);
            }
            return this._uiOpacity;
          }

          //--------------------------------设置宽高 begin---------------------------------------------
        }, {
          key: "width",
          get: function get() {
            if (this.uiTransform) {
              return this.uiTransform.width;
            }
            return 0;
          },
          set: function set(value) {
            if (this.uiTransform) {
              this.uiTransform.width = value;
            }
          }
        }, {
          key: "height",
          get: function get() {
            if (this.uiTransform) {
              return this.uiTransform.height;
            }
            return 0;
          },
          set: function set(value) {
            if (this.uiTransform) {
              this.uiTransform.height = value;
            }
          }
        }, {
          key: "alpha",
          get: function get() {
            return this._alpha;
          }
          /**alpha值的范围是 0-1 */,
          set: function set(value) {
            this._alpha = value;
            if (this._alpha < 0) {
              this._alpha = 0;
            } else if (this._alpha > 1) {
              this._alpha = 1;
            }
            if (this.uiOpacity != null) {
              this.uiOpacity.opacity = 255 * (this._alpha / 1);
            }
          }
        }, {
          key: "opacity",
          get: function get() {
            return this._opacity;
          }
          /**opacity值的范围是 0-255 */,
          set: function set(value) {
            this._opacity = value;
            if (this._opacity < 0) {
              this._opacity = 0;
            } else if (this._opacity > 255) {
              this._opacity = 255;
            }
            if (this.uiOpacity != null) {
              this.uiOpacity.opacity = this._opacity;
            }
          }
          //--------------------------------设置透明度 end---------------------------------------------

          //--------------------------------局部坐标 begin---------------------------------------------
        }, {
          key: "x",
          get: function get() {
            return this.transform.position.x;
          },
          set: function set(value) {
            var pos = this.transform.position;
            pos.x = value;
            this.transform.position = pos;
          }
        }, {
          key: "y",
          get: function get() {
            return this.transform.position.y;
          },
          set: function set(value) {
            var pos = this.transform.position;
            pos.y = value;
            this.transform.position = pos;
          }
        }, {
          key: "z",
          get: function get() {
            return this.transform.position.z;
          },
          set: function set(value) {
            var pos = this.transform.position;
            pos.z = value;
            this.transform.position = pos;
          }
          //---------------------------------局部坐标 end-----------------------------------------------

          //--------------------------------世界坐标 begin----------------------------------------------
        }, {
          key: "wx",
          get: function get() {
            return this.transform.worldPosition.x;
          },
          set: function set(value) {
            var pos = this.transform.worldPosition;
            pos.x = value;
            this.transform.worldPosition = pos;
          }
        }, {
          key: "wy",
          get: function get() {
            return this.transform.worldPosition.y;
          },
          set: function set(value) {
            var pos = this.transform.transform.worldPosition;
            pos.y = value;
            this.transform.worldPosition = pos;
          }
        }, {
          key: "wz",
          get: function get() {
            return this.transform.worldPosition.z;
          },
          set: function set(value) {
            var pos = this.transform.worldPosition;
            pos.z = value;
            this.transform.worldPosition = pos;
          }
        }]);
        return Behaviour;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "tag", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return "";
        }
      }), _class2)) || _class));

      //Behaviour.prototype.onLoad = function(){this.onLoad(); console.log("执行了behaviour的 onload")};
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/BezierPart.ts", ['cc'], function (exports) {
  var cclegacy, _decorator, math;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      math = module.math;
    }],
    execute: function () {
      var _dec, _class;
      cclegacy._RF.push({}, "3f432xl0ENMxZF0TrIni9z0", "BezierPart", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var BezierPart = exports('BezierPart', (_dec = ccclass('BezierPart'), _dec(_class = /*#__PURE__*/function () {
        function BezierPart(startP, cP1, cP2, endP) {
          this.startPos = void 0;
          this.cPos1 = void 0;
          this.cPos2 = void 0;
          this.endPos = void 0;
          /**
           * 将贝塞尔曲线分成多个点，不包含开始端点
           */
          this.posArray = [];
          this.lenght = null;
          this.startPos = startP;
          this.cPos1 = cP1;
          this.cPos2 = cP2;
          this.endPos = endP;
          this.lenght = this.getBezierLen();
        }

        /**
         * 每隔len个像素生成一个点,曲线开始的端点不生成点
         * @param len
         */
        var _proto = BezierPart.prototype;
        _proto.createPosArray = function createPosArray(len) {
          var fn = Math.floor(this.lenght / len);
          var i = 1 / fn;
          for (var t = i; t <= 1; t += i) {
            var x = this.bezier(this.startPos.x, this.cPos1.x, this.cPos2.x, this.endPos.x, t);
            var y = this.bezier(this.startPos.y, this.cPos1.y, this.cPos2.y, this.endPos.y, t);
            this.posArray.push(math.v2(x, y));
          }
          if (this.posArray.length < fn) {
            //补上结束端点
            this.posArray.push(this.endPos);
          }
        }

        /**
         * 获得曲线长度
         * @param f 将一段曲线分为多少份来求长度,默认20
         */;
        _proto.getBezierLen = function getBezierLen(f) {
          var t = 1 / 20;
          var l = 0;
          var i;
          var cP;
          var lastP = math.v2(0, 0);
          for (i = 0; i <= 1; i += t) {
            var x = this.bezier(this.startPos.x, this.cPos1.x, this.cPos2.x, this.endPos.x, i);
            var y = this.bezier(this.startPos.y, this.cPos1.y, this.cPos2.y, this.endPos.y, i);
            cP = math.v2(x, y);
            l += cP.subtract(lastP).length();
            lastP = cP;
          }
          return l;
        };
        _proto.bezier = function bezier(v1, v2, v3, v4, t) {
          return v1 * Math.pow(1 - t, 3) + 3 * v2 * t * Math.pow(1 - t, 2) + 3 * v3 * t * t * (1 - t) + v4 * Math.pow(t, 3);
        };
        return BezierPart;
      }()) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/BinaryTreeNode.ts", ['cc'], function (exports) {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "656f9y+lfxGjINj0fvyGiQy", "BinaryTreeNode", undefined);
      var BinaryTreeNode = exports('default', /*#__PURE__*/function () {
        function BinaryTreeNode() {
          this.seekTag = 0;
          this.openNode = null;
          this.count = 0;
        }
        var _proto = BinaryTreeNode.prototype;
        _proto.refleshTag = function refleshTag() {
          this.openNode = null;
          this.count = 0;
          this.seekTag++;
          if (this.seekTag > 1000000000) {
            this.seekTag = 0;
          }
        };
        _proto.isTreeNull = function isTreeNull() {
          return this.openNode == null;
        };
        _proto.addTreeNode = function addTreeNode(roadNode, head) {
          if (head === void 0) {
            head = null;
          }
          this.count++;
          if (head == null) {
            if (this.isTreeNull()) {
              this.openNode = roadNode;
              return;
            } else {
              head = this.openNode;
            }
          }
          if (head == roadNode) {
            return;
          }
          if (roadNode.f >= head.f) {
            if (head.right == null) {
              head.right = roadNode;
              roadNode.treeParent = head;
            } else {
              this.addTreeNode(roadNode, head.right);
            }
          } else {
            if (head.left == null) {
              head.left = roadNode;
              roadNode.treeParent = head;
            } else {
              this.addTreeNode(roadNode, head.left);
            }
          }
        };
        _proto.removeTreeNode = function removeTreeNode(roadNode) {
          this.count++;
          if (roadNode.treeParent == null && roadNode.left == null && roadNode.right == null) {
            if (roadNode == this.openNode) {
              this.openNode = null;
            }
            return;
          }
          if (roadNode.treeParent == null) {
            if (roadNode.left) {
              this.openNode = roadNode.left;
              roadNode.left.treeParent = null;
              if (roadNode.right) {
                roadNode.right.treeParent = null;
                this.addTreeNode(roadNode.right, this.openNode);
              }
            } else if (roadNode.right) {
              this.openNode = roadNode.right;
              roadNode.right.treeParent = null;
            }
          } else {
            if (roadNode.treeParent.left == roadNode) {
              if (roadNode.right) {
                roadNode.treeParent.left = roadNode.right;
                roadNode.right.treeParent = roadNode.treeParent;
                if (roadNode.left) {
                  roadNode.left.treeParent = null;
                  this.addTreeNode(roadNode.left, roadNode.right);
                }
              } else {
                roadNode.treeParent.left = roadNode.left;
                if (roadNode.left) {
                  roadNode.left.treeParent = roadNode.treeParent;
                }
              }
            } else if (roadNode.treeParent.right == roadNode) {
              if (roadNode.left) {
                roadNode.treeParent.right = roadNode.left;
                roadNode.left.treeParent = roadNode.treeParent;
                if (roadNode.right) {
                  roadNode.right.treeParent = null;
                  this.addTreeNode(roadNode.right, roadNode.left);
                }
              } else {
                roadNode.treeParent.right = roadNode.right;
                if (roadNode.right) {
                  roadNode.right.treeParent = roadNode.treeParent;
                }
              }
            }
          }
          roadNode.resetTree();
        };
        _proto.getMinFNode = function getMinFNode(head) {
          if (head === void 0) {
            head = null;
          }
          this.count++;
          if (head == null) {
            if (this.openNode == null) {
              return null;
            } else {
              head = this.openNode;
            }
          }
          if (head.left == null) {
            var minNode = head;
            if (head.treeParent == null) {
              this.openNode = head.right;
              if (this.openNode) {
                this.openNode.treeParent = null;
              }
            } else {
              head.treeParent.left = head.right;
              if (head.right) {
                head.right.treeParent = head.treeParent;
              }
            }
            return minNode;
          } else {
            return this.getMinFNode(head.left);
          }
        };
        _proto.setRoadNodeInOpenList = function setRoadNodeInOpenList(node) {
          node.openTag = this.seekTag;
          node.closeTag = 0;
        };
        _proto.setRoadNodeInCloseList = function setRoadNodeInCloseList(node) {
          node.openTag = 0;
          node.closeTag = this.seekTag;
        };
        _proto.isInOpenList = function isInOpenList(node) {
          return node.openTag == this.seekTag;
        };
        _proto.isInCloseList = function isInCloseList(node) {
          return node.closeTag == this.seekTag;
        };
        _proto.getOpenList = function getOpenList() {
          var openList = [];
          this.seachTree(this.openNode, openList);
          return openList;
        };
        _proto.seachTree = function seachTree(head, openList) {
          if (head == null) {
            return;
          }
          openList.push(head);
          if (head.left) {
            this.seachTree(head.left, openList);
          }
          if (head.right) {
            this.seachTree(head.right, openList);
          }
        };
        return BinaryTreeNode;
      }());
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Block.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, Animation, Component;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Animation = module.Animation;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class;
      cclegacy._RF.push({}, "5c597v9Ai9GhZ6PDvUITBI9", "Block", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var Block = exports('Block', (_dec = ccclass('Block'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(Block, _Component);
        function Block() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.animation = void 0;
          return _this;
        }
        var _proto = Block.prototype;
        _proto.onLoad = function onLoad() {
          this.animation = this.node.getComponent(Animation);
        };
        _proto.playEff = function playEff() {
          var _this2 = this;
          return new Promise(function (resolve, rejecet) {
            if (!_this2.animation) {
              rejecet("动画组件未挂载");
              return;
            }
            _this2.animation.play("block");
            _this2.animation.on(Animation.EventType.FINISHED, function () {
              resolve(true);
            }, _this2);
          });
        };
        return Block;
      }(Component)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Boss.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Character.ts', './TowerLauncher.ts'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, ProgressBar, Vec3, Character, TowerLauncher;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      ProgressBar = module.ProgressBar;
      Vec3 = module.Vec3;
    }, function (module) {
      Character = module.default;
    }, function (module) {
      TowerLauncher = module.TowerLauncher;
    }],
    execute: function () {
      var _dec, _class;
      cclegacy._RF.push({}, "0327cg14fpLKrTPJG+gbfGL", "Boss", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var Boss = exports('Boss', (_dec = ccclass('Boss'), _dec(_class = /*#__PURE__*/function (_Character) {
        _inheritsLoose(Boss, _Character);
        function Boss() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Character.call.apply(_Character, [this].concat(args)) || this;
          _this.progress = void 0;
          _this._currentHp = 10;
          _this._maxHp = 10;
          return _this;
        }
        var _proto = Boss.prototype;
        _proto.onLoad = function onLoad() {
          _Character.prototype.onLoad.call(this);
          this.progress = this.node.getChildByName("ProgressBar").getComponent(ProgressBar);
        };
        _proto.start = function start() {};
        _proto.update = function update(deltaTime) {};
        _proto.initEditData = function initEditData(editData) {
          this.node.position = new Vec3(editData.x, editData.y);
          this.updateHp(this._currentHp);
        };
        _proto.updateHp = function updateHp(hp) {
          if (this.progress) {
            this._currentHp = hp;
            this.progress.progress = this._currentHp / this._maxHp;
          }
        };
        _proto.bleeding = function bleeding() {
          var _this2 = this;
          this._currentHp -= 1;
          this.updateHp(this._currentHp);
          if (this._currentHp <= 0) {
            this.scheduleOnce(function () {
              _this2.node.removeFromParent();
            }, 0);
            // this.destroy();
            console.error("失败了");
            TowerLauncher.instance.gameOver = true;
            TowerLauncher.instance.doGameOver();
          }
        };
        _proto.init = function init() {};
        return Boss;
      }(Character)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Bullet.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Character.ts', './BulletManager.ts', './TowerLauncher.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, CCInteger, Vec3, view, Animation, Character, BulletManager, TowerLauncher;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      CCInteger = module.CCInteger;
      Vec3 = module.Vec3;
      view = module.view;
      Animation = module.Animation;
    }, function (module) {
      Character = module.default;
    }, function (module) {
      BulletManager = module.BulletManager;
    }, function (module) {
      TowerLauncher = module.TowerLauncher;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;
      cclegacy._RF.push({}, "9af87CBFw5C3I5xbYJSoQXb", "Bullet", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var Bullet = exports('Bullet', (_dec = ccclass('Bullet'), _dec2 = property(Node), _dec3 = property(CCInteger), _dec(_class = (_class2 = /*#__PURE__*/function (_Character) {
        _inheritsLoose(Bullet, _Character);
        function Bullet() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Character.call.apply(_Character, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "targetNode", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "speed", _descriptor2, _assertThisInitialized(_this));
          _this.direction2 = Vec3.ZERO;
          _this.body = void 0;
          _this.harm = 10;
          _this.targetPosition = void 0;
          _this.view = void 0;
          _this.towerLevel = void 0;
          _this.tower = null;
          _this.animation = null;
          return _this;
        }
        var _proto = Bullet.prototype;
        _proto.onLoad = function onLoad() {
          _Character.prototype.onLoad.call(this);
          this.body = this.node.getChildByName("body");
          this.view = view.getVisibleSize();
          this.animation = this.node.getComponent(Animation);
          // if (this.targetNode) {
          //     // 计算子弹的移动方向
          //     const targetPos = this.targetNode.position;
          //     const currentPos = this.node.position;
          //     this.direction2 = math.v2(targetPos.x,targetPos.y).subtract(math.v2(currentPos.x,currentPos.y)).normalize(); //targetPos.subtract(currentPos).normalize();  // 计算方向向量
          // }
          // const rig = this.node.getComponent(RigidBody2D);
          // rig.applyForceToCenter(this.direction2.multiply(math.v2(0,this.speed)),true);
        };

        _proto.start = function start() {};
        _proto.update = function update(dt) {
          if (TowerLauncher.instance && (TowerLauncher.instance.gameOver || TowerLauncher.instance.pause)) {
            this.node.removeFromParent();
            BulletManager.instance.release(this);
            return;
          }
          if (this.direction2) {
            var radian = Math.atan2(this.direction2.y, this.direction2.x);
            var direction = this.direction2.clone().normalize();
            var angle = radian / Math.PI * 180;
            this.node.angle = angle; //- 90

            var displacement = direction.multiplyScalar(this.speed * dt);
            this.node.position = this.node.position.clone().add(displacement);
          }

          // 如果子弹飞出了场景，可以设置回收
          if (Math.abs(this.node.position.x) > this.view.width || Math.abs(this.node.position.y) > this.view.height || Math.abs(this.node.position.x) < 0 || Math.abs(this.node.position.y) < 0) {
            this.node.removeFromParent();
            BulletManager.instance.release(this);
          }
        };
        _proto["short"] = function short(direction, tower) {
          this.direction2 = direction;
          this.tower = tower;
          if (tower) {
            this.towerLevel = tower.level;
            this.playBulletAnimation();
            this.speed = tower.towerData.speed;
            this.harm = tower.towerData.harm;
          }
          // this.speed = speed;
        };

        _proto.playBulletAnimation = function playBulletAnimation() {
          if (this.animation) {
            var clips = this.animation.clips;
            var names = clips.map(function (clip) {
              return clip.name;
            }, this);
            this.animation.on(Animation.EventType.FINISHED, this.onAnimationFinished, this);
            this.animation.play(names[Math.max(0, this.towerLevel - 1)]);
            return true;
          }
          return false;
        };
        _proto.onAnimationFinished = function onAnimationFinished() {};
        return Bullet;
      }(Character), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "targetNode", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "speed", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0;
        }
      })), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/BulletManager.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Bullet.ts'], function (exports) {
  var _createClass, cclegacy, _decorator, NodePool, instantiate, Bullet;
  return {
    setters: [function (module) {
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      NodePool = module.NodePool;
      instantiate = module.instantiate;
    }, function (module) {
      Bullet = module.Bullet;
    }],
    execute: function () {
      var _dec, _class, _class2;
      cclegacy._RF.push({}, "c87ecJWPIZNaIXzqNH5cDtE", "BulletManager", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var BulletManager = exports('BulletManager', (_dec = ccclass('BulletManager'), _dec(_class = (_class2 = /*#__PURE__*/function () {
        function BulletManager() {
          this._bulletPool = null;
          this.bulletList = [];
          this._bulletPool = {};
          this.bulletList = [];
        }
        var _proto = BulletManager.prototype;
        _proto.create = function create(prefab) {
          if (!prefab) {
            return null;
          }
          var node = null;
          var pool = this._bulletPool[prefab.data.name];
          if (!pool) {
            pool = new NodePool();
          }
          if (pool.size() > 0) {
            node = pool.get();
          } else {
            node = instantiate(prefab);
          }
          var bullet = node.getComponent(Bullet);
          // TowerLauncher.instance.quadTree.insert(bullet);
          this.bulletList.push(bullet);
          return bullet;
        };
        _proto.release = function release(bullet) {
          if (!bullet) {
            return;
          }
          // TowerLauncher.instance.quadTree.remove(bullet);
          var index = this.bulletList.indexOf(bullet);
          if (index > -1) {
            this.bulletList.splice(index, 1);
          }
          var pool = this._bulletPool[bullet.node.name];
          if (pool) {
            pool.put(bullet.node);
          }
        };
        _proto.releaseAll = function releaseAll() {
          if (this.bulletList.length > 0) {
            for (var index = 0; index < this.bulletList.length; index++) {
              var bullet = this.bulletList[index];
              bullet.node.removeFromParent();
              this.release(bullet);
              this.bulletList.splice(index, 1);
              index--;
            }
          }
        };
        _proto.update = function update(deltaTime) {};
        _createClass(BulletManager, null, [{
          key: "instance",
          get: function get() {
            if (!BulletManager._instance) {
              BulletManager._instance = new BulletManager();
            }
            return BulletManager._instance;
          }
        }]);
        return BulletManager;
      }(), _class2._instance = null, _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Character.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Behaviour.ts', './PathFindingAgent.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, cclegacy, _decorator, Label, view, math, sp, Behaviour, PathFindingAgent;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      view = module.view;
      math = module.math;
      sp = module.sp;
    }, function (module) {
      Behaviour = module.Behaviour;
    }, function (module) {
      PathFindingAgent = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;
      cclegacy._RF.push({}, "47c79NPDE1Obqtin1lh3e7r", "Character", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;

      /**
       * 角色状态
       */
      var CharacterState = exports('CharacterState', /*#__PURE__*/function (CharacterState) {
        CharacterState[CharacterState["idle"] = 0] = "idle";
        CharacterState[CharacterState["walk"] = 1] = "walk";
        CharacterState[CharacterState["sitdown"] = 2] = "sitdown";
        CharacterState[CharacterState["sitdown_walk"] = 3] = "sitdown_walk";
        return CharacterState;
      }({}));

      /**
       * 场景角色基类 
       * @author 
       * 
       */
      var Character = exports('default', (_dec = ccclass('Character'), _dec2 = property(Label), _dec(_class = (_class2 = /*#__PURE__*/function (_Behaviour) {
        _inheritsLoose(Character, _Behaviour);
        function Character() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Behaviour.call.apply(_Behaviour, [this].concat(args)) || this;
          /**
           * 单位名字文本
           */
          _initializerDefineProperty(_this, "nameTxt", _descriptor, _assertThisInitialized(_this));
          /**
           * 用于显示角色名字的接口
           */
          _this._objName = "";
          _this._skeleton = null;
          /**
           * 设置单位方向
           * 
           * 方向值范围为 0-7，方向值设定如下，0是下，1是左下，2是左，3是左上，4是上，5是右上，6是右，7是右下
           * 
           *        4
           *      3   5
           *    2   *   6
           *      1   7
           *        0
           * 
           */
          _this._direction = 0;
          _this._state = 0;
          /**
           *角色最近一次所站在的地图节点 
           */
          _this._lastRoadNode = null;
          /**
           *玩家当前所站在的地图节点 
           */
          _this._currentNode = void 0;
          //public isScrollScene:boolean = false;
          _this.moving = false;
          _this.moveSpeed = 200;
          _this._moveAngle = 0;
          _this._roadNodeArr = [];
          _this._roadNodeVec2 = [];
          _this._nodeIndex = 0;
          // LIFE-CYCLE CALLBACKS:
          // onLoad () {}
          _this.speedX = 100;
          // 水平速度，单位：像素/秒
          _this.speedY = 100;
          // 垂直速度，单位：像素/秒
          _this.directionX = 1;
          // 水平方向，1为向右，-1为向左
          _this.directionY = 1;
          // 垂直方向，1为向上，-1为向下
          _this.screenWidth = 0;
          // 屏幕宽度
          _this.screenHeight = 0;
          return _this;
        }
        var _proto = Character.prototype;
        // 屏幕高度
        _proto.onLoad = function onLoad() {
          _Behaviour.prototype.onLoad.call(this);
          var visibleSize = view.getVisibleSize();
          this.screenWidth = visibleSize.width;
          this.screenHeight = visibleSize.height;
        };
        _proto.start = function start() {
          this.state = CharacterState.idle; //默认待机状态
        };

        _proto.update = function update(dt) {
          if (this.moving) {
            var nextVec = this._roadNodeVec2[this._nodeIndex];
            var pos = this.node.position;
            var posX = pos.x;
            var posY = pos.y;
            var dx = nextVec.x - posX;
            var dy = nextVec.y - posY;
            var speed = this.moveSpeed * dt;
            if (dx * dx + dy * dy > speed * speed) {
              if (this._moveAngle == 0) {
                this._moveAngle = Math.atan2(dy, dx);
                var dire = Math.round((-this._moveAngle + Math.PI) / (Math.PI / 4));
                this.direction = dire > 5 ? dire - 6 : dire + 2;
              }
              var xspeed = Math.cos(this._moveAngle) * speed;
              var yspeed = Math.sin(this._moveAngle) * speed;
              posX += xspeed;
              posY += yspeed;
            } else {
              this._moveAngle = 0;
              if (this._nodeIndex == this._roadNodeArr.length - 1) {
                posX = nextVec.x;
                posY = nextVec.y;
                this.stop();
              } else {
                this.walk();
              }
            }

            // console.log("移动坐标", pos.x, pos.y);
            this.node.setPosition(posX, posY);
            // this.node.position = pos;
            // console.log("当前节点坐标", this.node.position.x, this.node.position.y);
            // this.node.setPosition(pos);
            // this.node.setPosition(pos.x, pos.y);
          }

          this.updateCharaterStateByNode();
        }

        // protected lateUpdate(dt: number): void {
        //     if (this.moving && this.movePos) { 
        //         this.node.position = this.movePos;
        //     }
        // }

        /**
         * 根据角色所在的路节点信息更新自身的信息
         * @returns 
         */;
        _proto.updateCharaterStateByNode = function updateCharaterStateByNode() {
          var roadNode = this.roadNode;
          if (roadNode == this._lastRoadNode) {
            //如果角色所站的路节点没有发生变化，不处理
            return;
          }
          this._lastRoadNode = roadNode;
          if (this._lastRoadNode) {
            switch (this._lastRoadNode.value) {
              case 2:
                //如果是透明节点时
                if (this.alpha != 0.4) {
                  this.alpha = 0.4;
                }
                break;
              case 3:
                //如果是隐藏节点时
                //this.alpha < 1 && (this.alpha = 1);
                this.alpha > 0 && (this.alpha = 0);
                break;
              default:
                this.alpha < 1 && (this.alpha = 1);
            }
          }
        }

        /**
         * 根据路节点路径行走
         * @param roadNodeArr 
         */;
        _proto.walkByRoad = function walkByRoad(roadNodeArr) {
          this._roadNodeArr = roadNodeArr;
          var nodeVec2Array = this._roadNodeArr.map(function (e) {
            return math.v2(e.px, e.py);
          }, this);
          this.wolkByVec2(nodeVec2Array);
        };
        _proto.wolkByVec2 = function wolkByVec2(vec2Array) {
          this._roadNodeVec2 = vec2Array;
          this._nodeIndex = 0;
          this._moveAngle = 0;
          this.walk();
          this.move();
        };
        _proto.walk = function walk() {
          if (this._nodeIndex < this._roadNodeVec2.length - 1) {
            this._nodeIndex++;
          }
        };
        _proto.move = function move() {
          this.moving = true;
          this.state = CharacterState.walk;
        };
        _proto.stop = function stop() {
          this.moving = false;
          this.state = CharacterState.idle;
        }

        /**
         * 导航角色到目标点
         * @param targetX 
         * @param targetY 
         */;
        _proto.navTo = function navTo(targetX, targetY) {
          // this.node.setPosition(targetX, targetY);
          var roadNodeArr = PathFindingAgent.instance.seekPath(math.v2(this.node.position.x, this.node.position.y), math.v2(targetX, targetY)); //如果目标点是障碍，则寻路失败                               //按需求自选
          // var roadNodeArr:RoadNode[] = PathFindingAgent.instance.seekPath2(this.node.position.x,this.node.position.y,targetX,targetY);  //如果目标点是障碍，则寻路到里目标点最近的一个非障碍点         //按需求自选

          if (roadNodeArr.length > 0) {
            console.log(roadNodeArr);
            this.walkByRoad(roadNodeArr);
          }
        };
        _createClass(Character, [{
          key: "objName",
          get: function get() {
            return this._objName;
          },
          set: function set(value) {
            this._objName = value;
            if (this.nameTxt == null) {
              var _this$node$getChildBy;
              this.nameTxt = (_this$node$getChildBy = this.node.getChildByName("NameTxt")) == null ? void 0 : _this$node$getChildBy.getComponent(Label);
            }
            if (this.nameTxt) {
              this.nameTxt.string = this._objName;
            }
          }
        }, {
          key: "skeleton",
          get: function get() {
            if (!this._skeleton) {
              this._skeleton = this.node.getComponentInChildren(sp.Skeleton);
            }
            return this._skeleton;
          }
        }, {
          key: "direction",
          get: function get() {
            return this._direction;
          },
          set: function set(value) {
            this._direction = value;
            if (value == 2) {
              var _scale = this.skeleton.node.scale.clone();
              var _scaleX = _scale.x;
              _scale.x = -_scaleX;
              this.skeleton.node.scale = _scale;
              return;
            }
            var scale = this.skeleton.node.scale.clone();
            var scaleX = scale.x;
            scale.x = scaleX;
            this.skeleton.node.scale = scale;

            // if(value > 4)
            // {
            //     // this.skeleton.rowIndex = 4 - value % 4;
            //     let scale = this.skeleton.node.scale.clone();
            //     let scaleX: number = scale.x;
            //     scale.x = scaleX;
            //     this.skeleton.node.scale = scale;
            // }else
            // {
            //     // this.movieClip.rowIndex = value;
            //     let scale: Vec3 = this.skeleton.node.scale.clone();
            //     let scaleX: number = scale.x;
            //     scale.x = -scaleX;
            //     this.skeleton.node.scale = scale;
            // }
          }
        }, {
          key: "state",
          get: function get() {
            return this._state;
          },
          set: function set(value) {
            // this._state = value;

            // var halfCol:number = this.movieClip.col / 2;

            // switch(this._state)
            // {
            //     case CharacterState.idle: 
            //         this.movieClip.begin = 0;
            //         this.movieClip.end = halfCol;
            //     break;

            //     case CharacterState.walk: 
            //         this.movieClip.begin = halfCol;
            //         this.movieClip.end = this.movieClip.col;
            //     break;
            // }
          }

          /**
           * 单位当前所站在的路点
           */
        }, {
          key: "roadNode",
          get: function get() {
            return PathFindingAgent.instance.getRoadNodeByPixel(this.node.position.x, this.node.position.y);
          }
        }]);
        return Character;
      }(Behaviour), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "nameTxt", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/config.ts", ['cc'], function (exports) {
  var cclegacy, Vec2;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      Vec2 = module.Vec2;
    }],
    execute: function () {
      cclegacy._RF.push({}, "c6c25PlK05J7Zxjenr5Qj17", "config", undefined);

      /** 游戏配置 */
      var config = exports('config', {
        sceneWidth: 740,
        sceneHeight: 1200,
        /** 方格宽 */
        blockWidth: 90,
        /** 方格高 */
        blockHeight: 90,
        /** 小动物宽 */
        itemWidth: 78,
        /** 小动物高 */
        itemHeight: 67,
        /** 行数 */
        row: 20,
        /** 列数 */
        col: 10,
        /** 每次新生成形状时的中心位置 */
        startPos: new Vec2(1, 3),
        // 形状数据,以（1，1）为中心参考
        /** 长条形 */
        shape1: [[new Vec2(0, -1), new Vec2(0, 0), new Vec2(0, 1), new Vec2(0, 2)], [new Vec2(-1, 0), new Vec2(0, 0), new Vec2(1, 0), new Vec2(2, 0)], [new Vec2(0, -1), new Vec2(0, 0), new Vec2(0, 1), new Vec2(0, 2)], [new Vec2(-1, 0), new Vec2(0, 0), new Vec2(1, 0), new Vec2(2, 0)]],
        /** 方形 */
        shape2: [[new Vec2(-1, -1), new Vec2(-1, 0), new Vec2(0, -1), new Vec2(0, 0)], [new Vec2(-1, -1), new Vec2(-1, 0), new Vec2(0, -1), new Vec2(0, 0)], [new Vec2(-1, -1), new Vec2(-1, 0), new Vec2(0, -1), new Vec2(0, 0)], [new Vec2(-1, -1), new Vec2(-1, 0), new Vec2(0, -1), new Vec2(0, 0)]],
        /** T形 */
        shape3: [[new Vec2(0, -1), new Vec2(-1, 0), new Vec2(0, 0), new Vec2(0, 1)], [new Vec2(1, 0), new Vec2(-1, 0), new Vec2(0, 0), new Vec2(0, 1)], [new Vec2(0, -1), new Vec2(1, 0), new Vec2(0, 0), new Vec2(0, 1)], [new Vec2(0, -1), new Vec2(-1, 0), new Vec2(0, 0), new Vec2(1, 0)]],
        /** L形 */
        shape4: [[new Vec2(-1, 0), new Vec2(0, 0), new Vec2(1, 0), new Vec2(1, 1)], [new Vec2(1, -1), new Vec2(0, -1), new Vec2(0, 0), new Vec2(0, 1)], [new Vec2(-1, -1), new Vec2(-1, 0), new Vec2(0, 0), new Vec2(1, 0)], [new Vec2(-1, 1), new Vec2(0, -1), new Vec2(0, 0), new Vec2(0, 1)]],
        /** 翻转L */
        shape5: [[new Vec2(-1, 0), new Vec2(0, 0), new Vec2(1, 0), new Vec2(1, -1)], [new Vec2(-1, -1), new Vec2(0, -1), new Vec2(0, 0), new Vec2(0, 1)], [new Vec2(-1, 0), new Vec2(-1, 1), new Vec2(0, 0), new Vec2(1, 0)], [new Vec2(0, -1), new Vec2(0, 0), new Vec2(0, 1), new Vec2(1, 1)]],
        /** S形 */
        shape6: [[new Vec2(-1, 0), new Vec2(-1, 1), new Vec2(0, -1), new Vec2(0, 0)], [new Vec2(-1, -1), new Vec2(0, -1), new Vec2(0, 0), new Vec2(1, 0)], [new Vec2(-1, 0), new Vec2(-1, 1), new Vec2(0, -1), new Vec2(0, 0)], [new Vec2(-1, -1), new Vec2(0, -1), new Vec2(0, 0), new Vec2(1, 0)]],
        /** 翻转S */
        shape7: [[new Vec2(-1, -1), new Vec2(-1, 0), new Vec2(0, 0), new Vec2(0, 1)], [new Vec2(1, -1), new Vec2(-1, 0), new Vec2(0, 0), new Vec2(0, -1)], [new Vec2(-1, -1), new Vec2(-1, 0), new Vec2(0, 0), new Vec2(0, 1)], [new Vec2(1, -1), new Vec2(-1, 0), new Vec2(0, 0), new Vec2(0, -1)]]
      });
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Containers.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './HashMap.ts', './NodeFactory.ts', './GameObject.ts', './GameConst.ts', './EntityLayer.ts'], function (exports) {
  var _inheritsLoose, cclegacy, HashMap, NodeFactory, GameObject, GameConst, EntityLayer;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      HashMap = module.HashMap;
    }, function (module) {
      NodeFactory = module.NodeFactory;
    }, function (module) {
      GameObject = module.GameObject;
    }, function (module) {
      GameConst = module.GameConst;
    }, function (module) {
      EntityLayer = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "406abiLprxDE6tPkrsWB920", "Containers", undefined);

      /**
       * @fileName Containers.ts
       * @author zhangqiong
       * @date 2024/12/18 16:21:40"
       * @description
       */
      var Containers = exports('Containers', /*#__PURE__*/function (_GameObject) {
        _inheritsLoose(Containers, _GameObject);
        function Containers() {
          var _this;
          _this = _GameObject.call(this) || this;
          _this.containerMap = void 0;
          _this.containerMap = new HashMap();
          return _this;
        }
        var _proto = Containers.prototype;
        _proto.onLoad = function onLoad() {};
        _proto.getChildContainer = function getChildContainer(names) {
          if (this.containerMap.hasKey(names)) {
            return this.containerMap.get(names);
          }
          var container = NodeFactory.instance.createNode();
          this.addChild(container);
          this.containerMap.put(names, container);
          return container;
        };
        _proto.setContainers = function setContainers(names) {
          for (var i = 0; i < names.length; i++) {
            var container = NodeFactory.instance.createNode();
            container.name = names[i];
            this.addChild(container);
            if (names[i] == GameConst.ROLE_LAYER) {
              container.addComponent(EntityLayer);
            }
            this.containerMap.put(names[i], container);
          }
        };
        _proto.addContainer = function addContainer(name, container, depth) {
          if (container === void 0) {
            container = null;
          }
          if (depth === void 0) {
            depth = -1;
          }
          if (this.containerMap.get(name) == null) {
            if (!container) {
              container = NodeFactory.instance.createNode();
            }
            if (depth == -1) {
              this.addChild(container);
            } else {
              container.setSiblingIndex(depth);
              this.addChild(container);
            }
            this.containerMap.put(name, container);
          }
        };
        _proto.removeContainer = function removeContainer(name) {
          var container = this.containerMap.get(name);
          if (container) {
            this.containerMap.remove(name);
            this.removeChild(container);
            return container;
          }
          return null;
        };
        _proto.remove = function remove() {
          if (this.parent) this.parent.removeChild(this);
        };
        return Containers;
      }(GameObject));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/DepthHelper.ts", ['cc'], function () {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "717d9+EQtdDM7KUvmMmxVwF", "DepthHelper", undefined);
      /**
       * @fileName DepthHelper.ts
       * @author zhangqiong
       * @date 2024/12/23 16:45:54"
       * @description
       */
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/DestroyUtils.ts", ['cc'], function (exports) {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "148efdAHCROIaJCUDI1S35L", "DestroyUtils", undefined);
      /**
       * @fileName DestroyUtils.ts
       * @author zhangqiong
       * @date 2024/12/27 20:19:14"
       * @description
       */
      var DestroyUtils = exports('DestroyUtils', /*#__PURE__*/function () {
        function DestroyUtils() {}
        DestroyUtils.destroy = function destroy(obj) {
          if (obj instanceof Array) {
            for (var i = 0; i < obj.length; i++) {
              this.destroy(obj[i]);
            }
            return;
          }
          for (var i = 0; i < this.keyNames.length; i++) {
            if (obj[this.keyNames[i]]) {
              obj[this.keyNames[i]]();
              return;
            }
          }
        };
        return DestroyUtils;
      }());
      DestroyUtils.keyNames = ["destroy", "dispose"];
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/EditObjData.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _inheritsLoose, cclegacy;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "4b613uVFoVGBLPJihnr8m8F", "EditObjData", undefined);
      /**
       * 地图编辑物体对象的数据结构 （基类）
       */
      var EditObjData = exports('default', function EditObjData() {
        /**
         * 物体Id
         */
        this.objId = "";
        /**
         * 物体名称
         */
        this.objName = "";
        /**
         * 物体类型
         */
        this.objType = "";
        /**
         * 物体皮肤
         */
        this.skin = "";
        /**
         * x坐标
         */
        this.x = 0;
        /**
         * y坐标
         */
        this.y = 0;
        /**
         * 世界坐标x轴
         */
        this.cx = 0;
        /**
         * 世界坐标y轴
         */
        this.cy = 0;
        /**
         * 自定义参数
         */
        this.params = "";
      });
      var EditNpcData = exports('EditNpcData', /*#__PURE__*/function (_EditObjData) {
        _inheritsLoose(EditNpcData, _EditObjData);
        function EditNpcData() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _EditObjData.call.apply(_EditObjData, [this].concat(args)) || this;
          /**
           * 角色方向,值为 0-7
           */
          _this.direction = 0;
          /**
           * 是否巡逻
           */
          _this.isPatrol = false;
          /**
           * 对话id
           */
          _this.dialogueId = 0;
          /**
           * 任务id
           */
          _this.taskId = 0;
          /**
           * 功能id
           */
          _this.funcId = 0;
          /**
           * npc类型
           */
          _this.npcType = 0;
          return _this;
        }
        return EditNpcData;
      }(EditObjData));

      /**
       * 编辑怪物的数据
       */
      var EditMonsterData = exports('EditMonsterData', /*#__PURE__*/function (_EditObjData2) {
        _inheritsLoose(EditMonsterData, _EditObjData2);
        function EditMonsterData() {
          var _this2;
          for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            args[_key2] = arguments[_key2];
          }
          _this2 = _EditObjData2.call.apply(_EditObjData2, [this].concat(args)) || this;
          /**
           * 角色方向,值为 0-7
           */
          _this2.direction = 0;
          /**
           * 是否巡逻
           */
          _this2.isPatrol = false;
          /**
           * 对话id
           */
          _this2.dialogueId = 0;
          /**
           * 战斗id
           */
          _this2.fightId = 0;
          /**
           * 怪物类型
           */
          _this2.monsterType = 0;
          return _this2;
        }
        return EditMonsterData;
      }(EditObjData));

      /**
       * 编辑传送门的数据
       */
      var EditTransferData = exports('EditTransferData', /*#__PURE__*/function (_EditObjData3) {
        _inheritsLoose(EditTransferData, _EditObjData3);
        function EditTransferData() {
          var _this3;
          for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
            args[_key3] = arguments[_key3];
          }
          _this3 = _EditObjData3.call.apply(_EditObjData3, [this].concat(args)) || this;
          /**
           * 传送到目标地图Id
           */
          _this3.targetMapId = "";
          /**
           * 目标地图的出生点Id
           */
          _this3.targetMapSpawnId = 0;
          /**
           * 传送门类型
           */
          _this3.transferType = 0;
          return _this3;
        }
        return EditTransferData;
      }(EditObjData));

      /**
       * 编辑出生点的位置
       */
      var EditSpawnPointData = exports('EditSpawnPointData', /*#__PURE__*/function (_EditObjData4) {
        _inheritsLoose(EditSpawnPointData, _EditObjData4);
        function EditSpawnPointData() {
          var _this4;
          for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
            args[_key4] = arguments[_key4];
          }
          _this4 = _EditObjData4.call.apply(_EditObjData4, [this].concat(args)) || this;
          /**
           * 出生点Id
           */
          _this4.spawnId = 0;
          /**
           * 是否是默认出生点
           */
          _this4.defaultSpawn = false;
          return _this4;
        }
        return EditSpawnPointData;
      }(EditObjData));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/EditPlot.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, CCBoolean, SpriteFrame, Component;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      CCBoolean = module.CCBoolean;
      SpriteFrame = module.SpriteFrame;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;
      cclegacy._RF.push({}, "06729MDWzRCfZXpI15JTffo", "EditPlot", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var EditPlot = exports('EditPlot', (_dec = ccclass('EditPlot'), _dec2 = property(CCBoolean), _dec3 = property(SpriteFrame), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(EditPlot, _Component);
        function EditPlot() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "canBuild", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "defaultObj", _descriptor2, _assertThisInitialized(_this));
          return _this;
        }
        var _proto = EditPlot.prototype;
        _proto.start = function start() {};
        _proto.update = function update(deltaTime) {};
        return EditPlot;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "canBuild", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return true;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "defaultObj", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/EffectManager.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './ViewConst.ts', './AssetMgr.ts'], function (exports) {
  var _asyncToGenerator, _regeneratorRuntime, _createClass, cclegacy, Animation, NodePool, ViewConst, AssetMgr;
  return {
    setters: [function (module) {
      _asyncToGenerator = module.asyncToGenerator;
      _regeneratorRuntime = module.regeneratorRuntime;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      Animation = module.Animation;
      NodePool = module.NodePool;
    }, function (module) {
      ViewConst = module.default;
    }, function (module) {
      AssetMgr = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "f74ef144S1HvKrHDo8Ygtmd", "EffectManager", undefined);
      var EffectManager = exports('EffectManager', /*#__PURE__*/function () {
        function EffectManager() {
          this._nodePool = void 0;
          this._effectLayer = void 0;
          this._nodePool = new NodePool();
        }
        var _proto = EffectManager.prototype;
        _proto.initEffectLayer = function initEffectLayer(layer) {
          this._effectLayer = layer;
        };
        _proto.getNode = /*#__PURE__*/function () {
          var _getNode = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
            var prefabPath, node;
            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) switch (_context.prev = _context.next) {
                case 0:
                  if (!(this._nodePool && this._nodePool.size() > 0)) {
                    _context.next = 4;
                    break;
                  }
                  return _context.abrupt("return", this._nodePool.get());
                case 4:
                  prefabPath = ViewConst.defaultPrefabPathPrefix + "tower/effect";
                  _context.next = 7;
                  return AssetMgr.instance.createPrefab(prefabPath);
                case 7:
                  node = _context.sent;
                  return _context.abrupt("return", node);
                case 9:
                case "end":
                  return _context.stop();
              }
            }, _callee, this);
          }));
          function getNode() {
            return _getNode.apply(this, arguments);
          }
          return getNode;
        }();
        _proto.showEffect = function showEffect(name, position) {
          var _this = this;
          return new Promise( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(resolve, reject) {
            var node, animation, clips, effectNames, playClip;
            return _regeneratorRuntime().wrap(function _callee2$(_context2) {
              while (1) switch (_context2.prev = _context2.next) {
                case 0:
                  _context2.next = 2;
                  return _this.getNode();
                case 2:
                  node = _context2.sent;
                  if (node) {
                    _context2.next = 7;
                    break;
                  }
                  console.error(" ***** tower/effect is not exist ***** ");
                  resolve(null);
                  return _context2.abrupt("return");
                case 7:
                  node.setPosition(position);
                  if (_this._effectLayer) {
                    _this._effectLayer.addChild(node);
                  }
                  animation = node.getComponent(Animation);
                  if (animation) {
                    _context2.next = 13;
                    break;
                  }
                  reject("***** animation is not exist ***** ");
                  return _context2.abrupt("return");
                case 13:
                  clips = animation.clips;
                  effectNames = clips.map(function (clip) {
                    return clip.name;
                  });
                  if (!(!effectNames.length || effectNames.indexOf(name) === -1)) {
                    _context2.next = 18;
                    break;
                  }
                  reject("***** effect name is not exist ***** ");
                  return _context2.abrupt("return");
                case 18:
                  playClip = clips.find(function (clip) {
                    return clip.name === name;
                  });
                  if (playClip) {
                    _context2.next = 22;
                    break;
                  }
                  reject("***** playClip is not exist ***** ");
                  return _context2.abrupt("return");
                case 22:
                  if (playClip.wrapMode == 1) {
                    animation.on(Animation.EventType.FINISHED, function () {
                      _this._nodePool.put(node);
                      node.removeFromParent();
                      resolve();
                    }, _this);
                  }
                  animation.play(name);
                  if (playClip.wrapMode == 2) {
                    resolve();
                  }
                case 25:
                case "end":
                  return _context2.stop();
              }
            }, _callee2);
          })));
        };
        _createClass(EffectManager, null, [{
          key: "instance",
          get: function get() {
            if (!this._instance) {
              this._instance = new EffectManager();
            }
            return this._instance;
          }
        }]);
        return EffectManager;
      }());
      EffectManager._instance = void 0;
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Enemy.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Character.ts', './TowerLauncher.ts', './EffectManager.ts'], function (exports) {
  var _inheritsLoose, _createClass, cclegacy, _decorator, ProgressBar, Character, TowerLauncher, EffectManager;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      ProgressBar = module.ProgressBar;
    }, function (module) {
      Character = module.default;
    }, function (module) {
      TowerLauncher = module.TowerLauncher;
    }, function (module) {
      EffectManager = module.EffectManager;
    }],
    execute: function () {
      var _dec, _class;
      cclegacy._RF.push({}, "76911HV09VC7YhNBD9FE13i", "Enemy", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var Enemy = exports('Enemy', (_dec = ccclass('Enemy'), _dec(_class = /*#__PURE__*/function (_Character) {
        _inheritsLoose(Enemy, _Character);
        function Enemy() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Character.call.apply(_Character, [this].concat(args)) || this;
          _this.progress = void 0;
          _this._currentHp = 100;
          _this._maxHp = 100;
          _this.price = 50;
          return _this;
        }
        var _proto = Enemy.prototype;
        _proto.start = function start() {};
        _proto.damage = function damage(value) {
          this._currentHp -= value;
          this.updateHp();
          EffectManager.instance.showEffect("tower1_eff", this.node.position.clone()).then(function (value) {})["catch"](function (err) {
            console.error(err);
          });
          if (this._currentHp <= 0) {
            this.die();
            TowerLauncher.instance.value += this.price;
            TowerLauncher.instance.popEnemyCount++;
            EffectManager.instance.showEffect("EnemyDie", this.node.position.clone());
          }
        };
        _proto.die = function die() {
          var _this2 = this;
          this._currentHp = 0;
          this.scheduleOnce(function () {
            TowerLauncher.instance.removeEnemy(_this2);
            _this2.node.removeFromParent();
          }, 0);
        };
        _proto.updateHp = function updateHp() {
          if (this.progress) {
            this.progress.progress = this._currentHp / this._maxHp;
          }
        };
        _proto.onLoad = function onLoad() {
          _Character.prototype.onLoad.call(this);
          this.progress = this.node.getChildByName("ProgressBar").getComponent(ProgressBar);
          this.updateHp();
        };
        _proto.navigationByPath = function navigationByPath(paths) {
          if (paths.length > 0) {
            this.wolkByVec2(paths);
          }
        };
        _proto.init = function init() {};
        _proto.onTriggerEnter2D = function onTriggerEnter2D(selfCollider, otherCollider, contact) {
          // console.log("onTriggerEnter2D");
          // const target = otherCollider.node.getComponent(Boss);
          // if(target){
          //     target.bleeding();
          //     this.node.removeFromParent();
          // }
        };
        _proto.onTriggerExit2D = function onTriggerExit2D(selfCollider, otherCollider, contact) {
          // console.log("onTriggerExit2D");
        };
        _proto.onCollisionEnter2D = function onCollisionEnter2D(selfCollider, otherCollider, contact) {
          // console.log("onCollisionEnter2D");
          // const target = otherCollider.node.getComponent(Boss);
          // if(target){
          //     target.bleeding();
          //     this.die();
          // }
        };
        _proto.onCollisionExit2D = function onCollisionExit2D(selfCollider, otherCollider, contact) {
          // console.log("onCollisionExit2D");
        };
        _createClass(Enemy, [{
          key: "hp",
          get: function get() {
            return this._currentHp;
          }
        }]);
        return Enemy;
      }(Character)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Entity.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Unit.ts', './GameConst.ts', './SpineSkeleton.ts', './FightUtil.ts', './ActionInfo.ts'], function (exports) {
  var _inheritsLoose, _createClass, cclegacy, Vec3, Unit, GameConst, SpineSkeleton, FightUtil, ActionInfo;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      Vec3 = module.Vec3;
    }, function (module) {
      Unit = module.Unit;
    }, function (module) {
      GameConst = module.GameConst;
    }, function (module) {
      SpineSkeleton = module.SpineSkeleton;
    }, function (module) {
      FightUtil = module.FightUtil;
    }, function (module) {
      ActionInfo = module.ActionInfo;
    }],
    execute: function () {
      cclegacy._RF.push({}, "177d2BJmcdFAaRAa6yopDHs", "Entity", undefined);

      /**
       * @fileName Entity.ts
       * @author zhangqiong
       * @date 2024/12/24 15:49:24"
       * @description
       */
      var Entity = exports('Entity', /*#__PURE__*/function (_Unit) {
        _inheritsLoose(Entity, _Unit);
        function Entity() {
          var _this;
          _this = _Unit.call(this) || this;
          _this.mScene = void 0;
          _this.speed = 12;
          _this.url = void 0;
          _this.role = void 0;
          // todo
          _this.direction = 0;
          _this.action = void 0;
          _this.dirMode = void 0;
          _this.roleSpine = void 0;
          _this.dx = void 0;
          _this.dy = void 0;
          _this.dist = void 0;
          _this.moveAngle = void 0;
          _this.oldAngle = -1;
          _this.oldMoveAngle = -1;
          _this.xSpeed = 0;
          _this.ySpeed = 0;
          return _this;
        }
        var _proto = Entity.prototype;
        _proto.init = function init() {};
        _proto.changeDirByAngle = function changeDirByAngle(angle) {
          this.setDirection(FightUtil.instance.getDirectionByAngle(angle));
        };
        _proto.setRole = function setRole(id) {
          if (!this.roleSpine) {
            this.roleSpine = this.getComponent(SpineSkeleton);
            if (!this.roleSpine) {
              this.roleSpine = this.addComponent(SpineSkeleton);
            }
          }
          return this.roleSpine.setSpineId(id);
        };
        _proto.stopAction = function stopAction() {
          this.setAction(GameConst.Idle);
        };
        _proto.setAction = function setAction(action, times, handler, oper, isForce) {
          if (times === void 0) {
            times = -1;
          }
          if (handler === void 0) {
            handler = null;
          }
          if (isForce === void 0) {
            isForce = false;
          }
          if (action == this.action && !isForce) {
            return;
          }
          this.action = action;
          this.action = action;
          var info = new ActionInfo(action, handler, times);
          return this.roleSpine.setAnimation(info);
        };
        _proto.getCurrentAction = function getCurrentAction() {
          if (this.roleSpine) {
            return this.roleSpine.currentAnimation;
          }
          return this.action;
        };
        _proto.setSpineKeyFrameHandler = function setSpineKeyFrameHandler(handler) {
          if (this.roleSpine) {
            this.roleSpine.keyFrameHandler = handler;
          }
        };
        _proto.setDirection = function setDirection(direction, isForce, times) {
          if (isForce === void 0) {
            isForce = false;
          }
          if (direction == this.direction && !isForce) {
            return;
          }
          this.direction = direction;
          var scale = new Vec3();
          this.getScale(scale);
          var realyscaleX = FightUtil.instance.getScaleXByDirection(direction);
          var scaleX = Math.abs(scale.x) * realyscaleX;
          this.setScale(scaleX, scale.y);
        };
        _proto.changeActionAndDirection = function changeActionAndDirection(action, direction, times, handler, isForce) {
          if (direction === void 0) {
            direction = -1;
          }
          if (times === void 0) {
            times = -1;
          }
          if (handler === void 0) {
            handler = null;
          }
          if (isForce === void 0) {
            isForce = false;
          }
          this.setDirection(direction, isForce);
          this.setAction(action, times, handler);
        };
        _proto.setSpeed = function setSpeed(speed) {
          this.speed = Math.floor(speed);
          this.oldAngle = -1;
        };
        _proto.getSize = function getSize() {
          return 50;
        };
        _proto.move = function move(targetMovePoint) {
          this.setAction(GameConst.Move);
          var pos = this.getLocation();
          this.dx = targetMovePoint.x - pos.x;
          this.dy = targetMovePoint.y - pos.y;
          this.dist = Math.sqrt(this.dx * this.dx + this.dy * this.dy);
          if (this.dist < this.speed) {
            this.onMoveEnd(targetMovePoint);
            return;
          }
          this.toMove(this.moveAngle, -1);
        };
        _proto.onMoveEnd = function onMoveEnd(targetMovePoint) {
          this.oldAngle = -1;
          this.setLocation(targetMovePoint.x, targetMovePoint.y);
          this.setAction(GameConst.Idle);
        };
        _proto.setSpeedXY = function setSpeedXY(angle, endSpeed, tickIndex) {
          if (endSpeed === void 0) {
            endSpeed = -1;
          }
          if (endSpeed == -1) {
            this.xSpeed = this.speed * Math.cos(angle * Math.PI / 180) * tickIndex;
            this.ySpeed = this.speed * Math.sin(angle * Math.PI / 180) * tickIndex;
          } else {
            this.xSpeed = endSpeed * Math.cos(angle * Math.PI / 180);
            this.ySpeed = endSpeed * Math.sin(angle * Math.PI / 180);
          }
        };
        _proto.toMove = function toMove(angle, endSpeed) {
          if (endSpeed === void 0) {
            endSpeed = -1;
          }
          if (this.oldAngle != angle) {
            this.setSpeedXY(angle, endSpeed, 1);
          }
          this.oldAngle = angle;
          var pos = this.getLocation();
          var newX = pos.x + this.xSpeed;
          var newY = pos.y + this.ySpeed;
          this.setLocation(newX, newY);
          this.updateHeadPos();
        };
        _proto.updateHeadPos = function updateHeadPos() {};
        _createClass(Entity, [{
          key: "x",
          get: function get() {
            var pos = this.getLocation();
            return pos ? pos.x : 0;
          }
        }, {
          key: "y",
          get: function get() {
            var pos = this.getLocation();
            return pos ? pos.y : 0;
          }
        }]);
        return Entity;
      }(Unit));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/EntityInfo.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _createClass, cclegacy;
  return {
    setters: [function (module) {
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "5ee61g4pjlEU4+HcWD289Ep", "EntityInfo", undefined);
      /**
       * @fileName EntityInfo.ts
       * @author zhangqiong
       * @date 2024/12/26 19:42:50"
       * @description
       */
      var EntityInfo = exports('EntityInfo', /*#__PURE__*/function () {
        function EntityInfo() {
          this._name = void 0;
          this._entityId = void 0;
          this.onlyId = void 0;
          this.type = void 0;
          this.insId = void 0;
        }
        var _proto = EntityInfo.prototype;
        _proto.setEntityId = function setEntityId(id, type) {
          this.type = type;
          this.onlyId = id;
          this._entityId = "s" + id + "_" + (arguments.length <= 2 ? undefined : arguments[2]);
        };
        _proto.getEntityId = function getEntityId() {
          return this._entityId;
        };
        _createClass(EntityInfo, [{
          key: "name",
          get: function get() {
            return this._name;
          },
          set: function set(v) {
            this._name = v;
          }
        }]);
        return EntityInfo;
      }());
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/EntityLayer.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, Component;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class;
      cclegacy._RF.push({}, "f8428h81G1PqoDcFwlkxzA9", "EntityLayer", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var EntityLayer = exports('default', (_dec = ccclass("EntityLayer"), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(EntityLayer, _Component);
        function EntityLayer() {
          return _Component.apply(this, arguments) || this;
        }
        var _proto = EntityLayer.prototype;
        _proto.update = function update(dt) {
          this.sortZindex();
        };
        _proto.sortZindex = function sortZindex() {
          var allEntityNodes = this.node.children.slice();
          allEntityNodes.sort(function (node1, node2) {
            if (node1.position.y > node2.position.y) {
              return -1;
            } else if (node1.position.y < node2.position.y) {
              return 1;
            }
            return 0;
          });
          var entiryCount = allEntityNodes.length;
          for (var i = 0; i < entiryCount; i++) {
            //allEntityNodes[i].zIndex = i;
            allEntityNodes[i].setSiblingIndex(i);
          }
        };
        return EntityLayer;
      }(Component)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/enum.ts", ['cc'], function (exports) {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "2233fzhdj5DyrXxiL5WmwqT", "enum", undefined);
      /** 不渲染与7个颜色 */
      var ItemColor = exports('ItemColor', /*#__PURE__*/function (ItemColor) {
        ItemColor[ItemColor["NULL"] = 0] = "NULL";
        ItemColor[ItemColor["Color1"] = 1] = "Color1";
        ItemColor[ItemColor["Color2"] = 2] = "Color2";
        ItemColor[ItemColor["Color3"] = 3] = "Color3";
        ItemColor[ItemColor["Color4"] = 4] = "Color4";
        ItemColor[ItemColor["Color5"] = 5] = "Color5";
        ItemColor[ItemColor["Color6"] = 6] = "Color6";
        ItemColor[ItemColor["Color7"] = 7] = "Color7";
        return ItemColor;
      }({}));

      /** 触摸事件-上下左右滑动 */
      var TouchEvent = exports('TouchEvent', /*#__PURE__*/function (TouchEvent) {
        TouchEvent["UP"] = "touch-up";
        TouchEvent["DOWN"] = "touch-down";
        TouchEvent["LEFT"] = "touch-left";
        TouchEvent["RIGHT"] = "touch-right";
        return TouchEvent;
      }({}));

      /** 音效事件 */
      var MusicEvent = exports('MusicEvent', /*#__PURE__*/function (MusicEvent) {
        MusicEvent["BGM"] = "bgm";
        MusicEvent["ACTION"] = "action";
        MusicEvent["GAME_OVER"] = "over";
        MusicEvent["ELIMINATE"] = "eliminate";
        return MusicEvent;
      }({}));

      /** 节点路径 */
      var NodeUrl = exports('NodeUrl', /*#__PURE__*/function (NodeUrl) {
        NodeUrl["Canvas"] = "Canvas";
        NodeUrl["Music"] = "Music";
        return NodeUrl;
      }({}));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Enum2.ts", ['cc'], function (exports) {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "6d9f4TPX1RN17SPhyI25mzw", "Enum", undefined);
      var RPGModelAnimName = exports('RPGModelAnimName', /*#__PURE__*/function (RPGModelAnimName) {
        RPGModelAnimName["Idel"] = "steady";
        RPGModelAnimName["Attack"] = "attack1";
        RPGModelAnimName["Jump"] = "jump";
        RPGModelAnimName["Walk"] = "walk";
        RPGModelAnimName["Walk2"] = "walk2";
        return RPGModelAnimName;
      }({}));
      var RPGModelDirection = exports('RPGModelDirection', /*#__PURE__*/function (RPGModelDirection) {
        RPGModelDirection[RPGModelDirection["Left"] = 0] = "Left";
        RPGModelDirection[RPGModelDirection["Right"] = 1] = "Right";
        return RPGModelDirection;
      }({}));
      var MapType = exports('MapType', /*#__PURE__*/function (MapType) {
        MapType[MapType["Angle45"] = 0] = "Angle45";
        MapType[MapType["Angle90"] = 1] = "Angle90";
        return MapType;
      }({}));
      var MapLoadModel = exports('MapLoadModel', /*#__PURE__*/function (MapLoadModel) {
        MapLoadModel[MapLoadModel["single"] = 0] = "single";
        MapLoadModel[MapLoadModel["split"] = 1] = "split";
        return MapLoadModel;
      }({}));
      var PathOptimize = exports('PathOptimize', /*#__PURE__*/function (PathOptimize) {
        PathOptimize[PathOptimize["none"] = 0] = "none";
        PathOptimize[PathOptimize["better"] = 1] = "better";
        PathOptimize[PathOptimize["best"] = 2] = "best";
        return PathOptimize;
      }({}));
      var PathQuadSeek = exports('PathQuadSeek', /*#__PURE__*/function (PathQuadSeek) {
        PathQuadSeek[PathQuadSeek["path_dire_4"] = 0] = "path_dire_4";
        PathQuadSeek[PathQuadSeek["path_dire_8"] = 1] = "path_dire_8";
        return PathQuadSeek;
      }({}));
      var MapItemType = exports('MapItemType', /*#__PURE__*/function (MapItemType) {
        MapItemType["Npc"] = "npc";
        MapItemType["Monster"] = "monster";
        MapItemType["Transfer"] = "transfer";
        MapItemType["SpawnPoint"] = "spawnPoint";
        return MapItemType;
      }({}));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Enum3.ts", ['cc'], function (exports) {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "33eadHkwjBM0ZpN3gEUmHSL", "Enum", undefined);
      var TouchEvent = exports('TouchEvent', /*#__PURE__*/function (TouchEvent) {
        TouchEvent["UP"] = "touch_up";
        TouchEvent["RIGHT"] = "touch_right";
        TouchEvent["DOWN"] = "touch_down";
        TouchEvent["LEFT"] = "touch_left";
        return TouchEvent;
      }({}));

      /** 界面展示类型 */
      var ViewShowTypes = exports('ViewShowTypes', /*#__PURE__*/function (ViewShowTypes) {
        ViewShowTypes[ViewShowTypes["ViewFullScreen"] = 0] = "ViewFullScreen";
        ViewShowTypes[ViewShowTypes["ViewAddition"] = 1] = "ViewAddition";
        ViewShowTypes[ViewShowTypes["ViewSingle"] = 2] = "ViewSingle";
        return ViewShowTypes;
      }({})); // 单界面显示，只显示当前界面和背景界面，性能较好
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/FairyBirdConst.ts", ['cc'], function (exports) {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "b6b32pUGMdBL52SQSLtd9+1", "FairyBirdConst", undefined);
      /**
       * @fileName FairyBirdConst.ts
       * @author zhangqiong
       * @date 2025/01/09 20:43:10"
       * @description
       */
      var FairyBirdConst = exports('FairyBirdConst', function FairyBirdConst() {});
      FairyBirdConst.TAG_LAND = 10;
      FairyBirdConst.TAG_PIPE = 20;
      FairyBirdConst.TAG_COIN = 30;
      FairyBirdConst.STATE_READING = 1;
      FairyBirdConst.STATE_GAMEING = 2;
      FairyBirdConst.STATE_GAMEOVER = 3;
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/FairyBirdGameManger.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './FairyBirdConst.ts', './Utils.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, cclegacy, _decorator, CCInteger, Node, Label, NodeEventType, Component, FairyBirdConst, Utils;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      CCInteger = module.CCInteger;
      Node = module.Node;
      Label = module.Label;
      NodeEventType = module.NodeEventType;
      Component = module.Component;
    }, function (module) {
      FairyBirdConst = module.FairyBirdConst;
    }, function (module) {
      Utils = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _class3;
      cclegacy._RF.push({}, "0cca7wA41VCl7tdU/twDYnk", "FairyBirdGameManger", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;

      /**
       * @fileName FairyBirdGameManger.ts
       * @author zhangqiong
       * @date 2025/01/09 15:59:19"
       * @description
       */
      var FairyBirdGameManger = exports('FairyBirdGameManger', (_dec = ccclass('FairyBirdGameManger'), _dec2 = property(CCInteger), _dec3 = property(Node), _dec4 = property(Node), _dec5 = property(Label), _dec6 = property(Label), _dec7 = property(Node), _dec(_class = (_class2 = (_class3 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(FairyBirdGameManger, _Component);
        function FairyBirdGameManger() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "moveSpeed", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "gameReadyNode", _descriptor2, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "gameOverNode", _descriptor3, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "goldLabel", _descriptor4, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "silverLabel", _descriptor5, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "bird", _descriptor6, _assertThisInitialized(_this));
          _this.gameState = FairyBirdConst.STATE_READING;
          _this._readyPosition = null;
          _this._gold = 0;
          _this._silver = 0;
          return _this;
        }
        var _proto = FairyBirdGameManger.prototype;
        _proto.onLoad = function onLoad() {
          FairyBirdGameManger._instance = this;
          this._readyPosition = this.bird.position;
        };
        _proto.start = function start() {};
        _proto.update = function update(deltaTime) {};
        _proto.transformGameState = function transformGameState(state) {
          this.gameReadyNode.active = state == FairyBirdConst.STATE_READING;
          this.gameOverNode.active = state == FairyBirdConst.STATE_GAMEOVER;
          this.gameState = state;
          if (state == FairyBirdConst.STATE_READING) {
            var startBtn = Utils.FindChildByName(this.gameReadyNode, "startBtn");
            if (startBtn) {
              startBtn.on(NodeEventType.TOUCH_START, this.onClickStartBtn, this);
            }
            this.bird.setPosition(this._readyPosition);
          } else if (state == FairyBirdConst.STATE_GAMEOVER) {
            var _startBtn = Utils.FindChildByName(this.gameOverNode, "startBtn");
            if (_startBtn) {
              _startBtn.on(NodeEventType.TOUCH_START, this.onClickReStart, this);
            }
          }
        };
        _proto.onClickStartBtn = function onClickStartBtn() {
          this.transformGameState(FairyBirdConst.STATE_GAMEING);
        };
        _proto.onClickReStart = function onClickReStart() {
          this.transformGameState(FairyBirdConst.STATE_READING);
        };
        _createClass(FairyBirdGameManger, [{
          key: "gold",
          get: function get() {
            return this._gold;
          },
          set: function set(value) {
            this._gold = value;
            if (this.goldLabel) {
              this.goldLabel.string = "" + value;
            }
          }
        }, {
          key: "silver",
          get: function get() {
            return this._silver;
          },
          set: function set(value) {
            this._silver = value;
            if (this.silverLabel) {
              this.silverLabel.string = "" + value;
            }
          }
        }], [{
          key: "instance",
          get: function get() {
            return this._instance;
          }
        }]);
        return FairyBirdGameManger;
      }(Component), _class3._instance = null, _class3), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "moveSpeed", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 200;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "gameReadyNode", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "gameOverNode", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "goldLabel", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "silverLabel", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "bird", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/FairybirdMainPanel.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './BaseView.ts', './ViewRegisterMgr.ts', './PanelEnum.ts', './LayerManager.ts', './FairyBirdGameManger.ts', './FairyBirdConst.ts'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, BaseView, registerView, PanelType, LayerType, FairyBirdGameManger, FairyBirdConst;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }, function (module) {
      BaseView = module.default;
    }, function (module) {
      registerView = module.registerView;
    }, function (module) {
      PanelType = module.PanelType;
    }, function (module) {
      LayerType = module.LayerType;
    }, function (module) {
      FairyBirdGameManger = module.FairyBirdGameManger;
    }, function (module) {
      FairyBirdConst = module.FairyBirdConst;
    }],
    execute: function () {
      var _dec, _class;
      cclegacy._RF.push({}, "2bc56J0gMNEi5Xf0wn9QzrS", "FairybirdMainPanel", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var FairybirdMainPanel = exports('FairybirdMainPanel', (_dec = ccclass('FairybirdMainPanel'), _dec(_class = /*#__PURE__*/function (_BaseView) {
        _inheritsLoose(FairybirdMainPanel, _BaseView);
        function FairybirdMainPanel() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _BaseView.call.apply(_BaseView, [this].concat(args)) || this;
          _this.seed = 5;
          _this.initSeed = 5;
          _this.logRandomArray = [];
          return _this;
        }
        var _proto = FairybirdMainPanel.prototype;
        _proto.onOpen = function onOpen(fromUI) {
          for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
            args[_key2 - 1] = arguments[_key2];
          }
          console.log("成功打开了", fromUI, args);
          var count = 10;
          for (var i = 0; i < count; i++) {
            console.log("random value:" + this.seedRandom());
          }
          FairyBirdGameManger.instance.transformGameState(FairyBirdConst.STATE_READING);
        };
        _proto.setRandomSeed = function setRandomSeed(seed) {
          this.initSeed = seed;
          console.error("收到随机数", this.initSeed);
        };
        _proto.seedRandom = function seedRandom() {
          if (this.logRandomArray.length < 30) {
            this.logRandomArray.push(this.seed);
          }
          this.seed = (this.seed * 9301 + 49297) % 233280;
          var value = this.seed / 233280.0;
          return value;
        };
        _proto.onClose = function onClose() {};
        _proto.start = function start() {};
        _proto.update = function update(deltaTime) {
          // console.log("long deltatime",deltaTime)
        };
        return FairybirdMainPanel;
      }(BaseView)) || _class));
      registerView({
        viewCls: FairybirdMainPanel,
        id: PanelType.FairybirdMainPanel,
        layer: LayerType.view
      });
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/FairyBirdPipe.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './FairyBirdGameManger.ts', './FairyBirdPipeManger.ts', './FairyBirdConst.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Prefab, instantiate, Component, FairyBirdGameManger, FairyBirdPipeManger, FairyBirdConst;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Prefab = module.Prefab;
      instantiate = module.instantiate;
      Component = module.Component;
    }, function (module) {
      FairyBirdGameManger = module.FairyBirdGameManger;
    }, function (module) {
      FairyBirdPipeManger = module.FairyBirdPipeManger;
    }, function (module) {
      FairyBirdConst = module.FairyBirdConst;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;
      cclegacy._RF.push({}, "179e91xHLFMw5T3SJJnqC/p", "FairyBirdPipe", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var FairyBirdPipe = exports('FairyBirdPipe', (_dec = ccclass('FairyBirdPipe'), _dec2 = property(Prefab), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(FairyBirdPipe, _Component);
        function FairyBirdPipe() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "coin", _descriptor, _assertThisInitialized(_this));
          _this.coinNode = null;
          return _this;
        }
        var _proto = FairyBirdPipe.prototype;
        _proto.start = function start() {};
        _proto.instanceCoin = function instanceCoin() {
          if (!this.coinNode) {
            var node = instantiate(this.coin);
            this.node.addChild(node);
            this.coinNode = node;
          } else if (this.coinNode && !this.coinNode.parent) {
            this.node.addChild(this.coinNode);
          }
        };
        _proto.update = function update(deltaTime) {
          var _this2 = this;
          if (FairyBirdGameManger.instance.gameState != FairyBirdConst.STATE_GAMEING) {
            return;
          }
          var p = this.node.getPosition();
          this.node.setPosition(p.x - FairyBirdGameManger.instance.moveSpeed * deltaTime, p.y);
          var p2 = this.node.getPosition();
          if (p2.x < -1440) {
            this.scheduleOnce(function () {
              _this2.node.removeFromParent();
              FairyBirdPipeManger.instance.relasePipe(_this2.node);
            }, 0);
          }
        };
        return FairyBirdPipe;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "coin", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/FairyBirdPipeManger.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './FairyBirdPipe.ts', './FairyBirdConst.ts', './FairyBirdGameManger.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, cclegacy, _decorator, Prefab, CCInteger, NodePool, instantiate, math, Component, FairyBirdPipe, FairyBirdConst, FairyBirdGameManger;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Prefab = module.Prefab;
      CCInteger = module.CCInteger;
      NodePool = module.NodePool;
      instantiate = module.instantiate;
      math = module.math;
      Component = module.Component;
    }, function (module) {
      FairyBirdPipe = module.FairyBirdPipe;
    }, function (module) {
      FairyBirdConst = module.FairyBirdConst;
    }, function (module) {
      FairyBirdGameManger = module.FairyBirdGameManger;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2, _class3;
      cclegacy._RF.push({}, "b66fcw4ACNGHbny7wJ7NKrB", "FairyBirdPipeManger", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;

      /**
       * @fileName FairyBirdPipeManger.ts
       * @author zhangqiong
       * @date 2025/01/09 16:05:46"
       * @description
       */
      var FairyBirdPipeManger = exports('FairyBirdPipeManger', (_dec = ccclass('FairyBirdPipeManger'), _dec2 = property(Prefab), _dec3 = property(CCInteger), _dec(_class = (_class2 = (_class3 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(FairyBirdPipeManger, _Component);
        function FairyBirdPipeManger() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "prafab", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "rate", _descriptor2, _assertThisInitialized(_this));
          _this._timer = 0;
          _this._nodePool = void 0;
          return _this;
        }
        var _proto = FairyBirdPipeManger.prototype;
        _proto.onLoad = function onLoad() {
          FairyBirdPipeManger._instance = this;
        };
        _proto.start = function start() {
          this._nodePool = new NodePool();
        };
        _proto.cratePipe = function cratePipe() {
          var node = instantiate(this.prafab);
          return node;
        };
        _proto.update = function update(deltaTime) {
          if (FairyBirdGameManger.instance.gameState != FairyBirdConst.STATE_GAMEING) {
            return;
          }
          this._timer += deltaTime;
          if (this._timer >= this.rate) {
            this._timer = 0;
            var pipe = this.cratePipe();
            this.node.addChild(pipe);
            var p = this.node.getWorldPosition();
            var y = math.randomRangeInt(-100, 140);
            pipe.setWorldPosition(p);
            pipe.getComponent(FairyBirdPipe).instanceCoin();
            // let p2 = this.node.getPosition();
            pipe.setPosition(0, y);
          }
        };
        _proto.relasePipe = function relasePipe(node) {
          if (this._nodePool) {
            this._nodePool.put(node);
            return true;
          }
          return false;
        };
        _createClass(FairyBirdPipeManger, null, [{
          key: "instance",
          get: function get() {
            return this._instance;
          }
        }]);
        return FairyBirdPipeManger;
      }(Component), _class3._instance = null, _class3), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "prafab", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "rate", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 1.5;
        }
      })), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/FBird.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Behaviour.ts', './FairyBirdConst.ts', './FairyBirdGameManger.ts', './FCoin.ts'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, RigidBody2D, input, Input, math, Behaviour, FairyBirdConst, FairyBirdGameManger, FCoin;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      RigidBody2D = module.RigidBody2D;
      input = module.input;
      Input = module.Input;
      math = module.math;
    }, function (module) {
      Behaviour = module.Behaviour;
    }, function (module) {
      FairyBirdConst = module.FairyBirdConst;
    }, function (module) {
      FairyBirdGameManger = module.FairyBirdGameManger;
    }, function (module) {
      FCoin = module.FCoin;
    }],
    execute: function () {
      var _dec, _class;
      cclegacy._RF.push({}, "202366LCRVGrYoUfx+6SY0R", "FBird", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;

      /**
       * @fileName FBird.ts
       * @author zhangqiong
       * @date 2025/01/09 20:15:26"
       * @description
       */
      var FBird = exports('FBird', (_dec = ccclass('FBird'), _dec(_class = /*#__PURE__*/function (_Behaviour) {
        _inheritsLoose(FBird, _Behaviour);
        function FBird() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Behaviour.call.apply(_Behaviour, [this].concat(args)) || this;
          _this.rig2d = void 0;
          _this.rotateSpeed = 30;
          return _this;
        }
        var _proto = FBird.prototype;
        _proto.onLoad = function onLoad() {
          _Behaviour.prototype.onLoad.call(this);
          this.rig2d = this.getComponent(RigidBody2D);
        };
        _proto.start = function start() {
          input.on(Input.EventType.TOUCH_START, this.onTouchStart, this);
        };
        _proto.onDestroy = function onDestroy() {
          _Behaviour.prototype.onDestroy.call(this);
          input.off(Input.EventType.TOUCH_START, this.onTouchStart, this);
        };
        _proto.onTouchStart = function onTouchStart() {
          this.rig2d.linearVelocity = math.v2(0, 10);
          this.node.angle = 30;
        };
        _proto.update = function update(deltaTime) {
          if (FairyBirdGameManger.instance.gameState != FairyBirdConst.STATE_GAMEING) {
            this.rig2d.enabled = false;
            return;
          }
          this.rig2d.enabled = true;
          this.node.angle -= this.rotateSpeed * deltaTime;
          if (this.node.angle < -60) {
            this.node.angle = -60;
          }
        };
        _proto.onCollisionEnter2D = function onCollisionEnter2D(selfCollider, otherCollider, contact) {
          if (otherCollider.tag == FairyBirdConst.TAG_LAND) {
            console.log("游戏结束");
            FairyBirdGameManger.instance.transformGameState(FairyBirdConst.STATE_GAMEOVER);
          } else if (otherCollider.tag == FairyBirdConst.TAG_PIPE) {
            console.log("游戏结束");
            FairyBirdGameManger.instance.transformGameState(FairyBirdConst.STATE_GAMEOVER);
          } else if (otherCollider.tag == FairyBirdConst.TAG_COIN) {
            var fcoin = otherCollider.node.getComponent(FCoin);
            if (fcoin) {
              if (fcoin.type == 0) {
                console.log("吃到金币了");
                FairyBirdGameManger.instance.gold += 10;
              } else if (fcoin.type == 1) {
                console.log("吃到银币了");
                FairyBirdGameManger.instance.silver += 5;
              }
            }
            this.scheduleOnce(function () {
              otherCollider.node.removeFromParent();
              console.log("吃到金币了");
            }, 0);
          }
        };
        return FBird;
      }(Behaviour)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/FBMoveBg.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './FairyBirdGameManger.ts', './FairyBirdConst.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, Component, FairyBirdGameManger, FairyBirdConst;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Component = module.Component;
    }, function (module) {
      FairyBirdGameManger = module.FairyBirdGameManger;
    }, function (module) {
      FairyBirdConst = module.FairyBirdConst;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;
      cclegacy._RF.push({}, "abf56q2Fv1Jo5omKRjW+B8G", "FBMoveBg", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var FBMoveBg = exports('FBMoveBg', (_dec = ccclass('FBMoveBg'), _dec2 = property(Node), _dec3 = property(Node), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(FBMoveBg, _Component);
        function FBMoveBg() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "obj1", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "obj2", _descriptor2, _assertThisInitialized(_this));
          _this.moveDistance = 0;
          return _this;
        }
        var _proto = FBMoveBg.prototype;
        _proto.start = function start() {
          this.moveDistance = FairyBirdGameManger.instance.moveSpeed;
        };
        _proto.update = function update(deltaTime) {
          if (FairyBirdGameManger.instance.gameState != FairyBirdConst.STATE_GAMEING) {
            return;
          }
          var p1 = this.obj1.getPosition();
          var p2 = this.obj2.getPosition();
          this.obj1.setPosition(p1.x - this.moveDistance * deltaTime, p1.y);
          this.obj2.setPosition(p2.x - this.moveDistance * deltaTime, p2.y);
          p1 = this.obj1.getPosition();
          if (p1.x < -1335) {
            p2 = this.obj2.getPosition();
            this.obj1.setPosition(p2.x + 1334, p2.y);
          }
          p2 = this.obj2.getPosition();
          if (p2.x < -1335) {
            p1 = this.obj1.getPosition();
            this.obj2.setPosition(p1.x + 1334, p1.y);
          }
        };
        return FBMoveBg;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "obj1", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "obj2", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/FCoin.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, SpriteFrame, math, Sprite, Component;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      SpriteFrame = module.SpriteFrame;
      math = module.math;
      Sprite = module.Sprite;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;
      cclegacy._RF.push({}, "038c5dA7nJHGY+QR/NI5gow", "FCoin", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;

      /**
       * @fileName FCoin.ts
       * @author zhangqiong
       * @date 2025/01/09 20:48:57"
       * @description
       */
      var FCoin = exports('FCoin', (_dec = ccclass('FCoin'), _dec2 = property([SpriteFrame]), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(FCoin, _Component);
        function FCoin() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "spriteFrames", _descriptor, _assertThisInitialized(_this));
          _this.type = 0;
          return _this;
        }
        var _proto = FCoin.prototype;
        _proto.start = function start() {
          this.type = math.randomRangeInt(0, 2);
          this.node.getComponent(Sprite).spriteFrame = this.spriteFrames[this.type];
        };
        _proto.update = function update(deltaTime) {};
        return FCoin;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "spriteFrames", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/FightConfig.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './HashMap.ts'], function (exports) {
  var _createClass, cclegacy, HashMap;
  return {
    setters: [function (module) {
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      HashMap = module.HashMap;
    }],
    execute: function () {
      cclegacy._RF.push({}, "bfe12ULREpFUZPGSLT1sec7", "FightConfig", undefined);
      /**
       * @fileName FightConfig.ts
       * @author zhangqiong
       * @date 2024/12/31 19:41:34"
       * @description
       */
      var FightConfig = exports('FightConfig', /*#__PURE__*/function () {
        function FightConfig() {
          this._heroMap = void 0;
          this._skilsMap = void 0;
          this._gameConfigObj = void 0;
          this._heroMap = new HashMap();
          this._skilsMap = new HashMap();
        }
        var _proto = FightConfig.prototype;
        _proto.init = function init(config) {
          this._gameConfigObj = config;
          var heros = config.heros;
          for (var key in heros) {
            if (Object.prototype.hasOwnProperty.call(heros, key)) {
              var element = heros[key];
              var hid = Number(key);
              this._heroMap.put(hid, element);
            }
          }
          var skills = config.skills;
          for (var _key in skills) {
            var skillConfig = skills[_key];
            this._skilsMap.put(skillConfig.skillId, skillConfig);
          }
        };
        _proto.getSkillConfigs = function getSkillConfigs() {
          if (!this._skilsMap) {
            return [];
          }
          return this._skilsMap.values();
        };
        _proto.getSkillConfig = function getSkillConfig(skillId) {
          if (!this._skilsMap) {
            return null;
          }
          return this._skilsMap.get(skillId);
        };
        _proto.getHeroConfigs = function getHeroConfigs() {
          if (!this._heroMap) {
            return [];
          }
          return this._heroMap.values();
        };
        _proto.getHeroConfig = function getHeroConfig(hid) {
          if (!this._heroMap) {
            return null;
          }
          return this._heroMap.get(hid);
        };
        _createClass(FightConfig, null, [{
          key: "instance",
          get: function get() {
            if (!this._instance) {
              this._instance = new FightConfig();
            }
            return this._instance;
          }
        }]);
        return FightConfig;
      }());
      FightConfig._instance = void 0;
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/FightHeroInfo.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './FightConfig.ts', './EntityInfo.ts', './FightSkillGroupInfo.ts', './FightSkillInfo.ts', './FightMgr.ts'], function (exports) {
  var _inheritsLoose, _createClass, cclegacy, FightConfig, EntityInfo, FightSkillGroupInfo, FightSkillInfo, FightMgr;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      FightConfig = module.FightConfig;
    }, function (module) {
      EntityInfo = module.EntityInfo;
    }, function (module) {
      FightSkillGroupInfo = module.FightSkillGroupInfo;
    }, function (module) {
      FightSkillInfo = module.FightSkillInfo;
    }, function (module) {
      FightMgr = module.FightMgr;
    }],
    execute: function () {
      cclegacy._RF.push({}, "fa0c1FkfBZNF683OP8bYNeb", "FightHeroInfo", undefined);

      /**
       * @fileName FightHeroInfo.ts
       * @author zhangqiong
       * @date 2024/12/26 19:43:10"
       * @description
       */
      var FightHeroInfo = exports('FightHeroInfo', /*#__PURE__*/function (_EntityInfo) {
        _inheritsLoose(FightHeroInfo, _EntityInfo);
        function FightHeroInfo() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _EntityInfo.call.apply(_EntityInfo, [this].concat(args)) || this;
          _this.playerId = 0;
          _this.spineId = 0;
          _this.camp = 0;
          _this.site = 0;
          _this.hp = 0;
          _this.normalMaxHp = 0;
          _this._maxHp = 0;
          _this.mp = 0;
          _this.maxMp = 1000;
          _this.shield = 0;
          _this.shieldMax = 0;
          _this.heroConfig = void 0;
          _this.fightSkills = void 0;
          return _this;
        }
        var _proto = FightHeroInfo.prototype;
        _proto.setData = function setData(playerId, data, type) {
          if (type === void 0) {
            type = 1;
          }
          this.playerId = playerId;
          this.heroConfig = data;
          this.normalMaxHp = data.maxHp;
          this.hp = data.maxHp;
          this.maxMp = data.maxMp;
          this.camp = data.comp;
          this.site = data.site;
          this.setEntityId(playerId, type, data.spineId);
          this.spineId = data.spineId;
          this.fightSkills = new FightSkillGroupInfo();
          var skillIds = data.skillIds;
          var skillInfos = [];
          for (var i = 0; i < skillIds.length; i++) {
            var id = skillIds[i];
            var skillConfigVo = FightConfig.instance.getSkillConfig(id);
            var skillInfo = new FightSkillInfo();
            skillInfo.setData(skillConfigVo);
            skillInfos.push(skillInfo);
          }
          this.fightSkills.add(skillInfos);
        }

        /***上限的血条 */;
        /***恢复MP */
        _proto.addMp = function addMp(mp) {
          this.mp += mp;
          this.mp = Math.max(Math.min(this.mp, this.maxMp), 0);
        }

        /***使用MP */;
        _proto.useMp = function useMp() {
          if (!FightMgr.instance.isEnd) this.mp = 0;
        };
        _createClass(FightHeroInfo, [{
          key: "maxHp",
          get: /**获取总血量，包括BUFF的 */
          function get() {
            return Math.max(this.normalMaxHp + this._maxHp, 1);
          },
          set: function set(hp) {
            this._maxHp = hp;
          }
        }]);
        return FightHeroInfo;
      }(EntityInfo));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/FightMgr.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './FindTargetInfo.ts', './GameConst.ts', './FightUtil.ts', './ViewManager.ts', './PanelEnum.ts'], function (exports) {
  var _createClass, cclegacy, FindTargetInfo, GameConst, FightUtil, viewManager, PanelType;
  return {
    setters: [function (module) {
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      FindTargetInfo = module.FindTargetInfo;
    }, function (module) {
      GameConst = module.GameConst;
    }, function (module) {
      FightUtil = module.FightUtil;
    }, function (module) {
      viewManager = module.viewManager;
    }, function (module) {
      PanelType = module.PanelType;
    }],
    execute: function () {
      cclegacy._RF.push({}, "804beaJBcJAnZ3TmGa2HePe", "FightMgr", undefined);

      /**
       * @fileName FightMgr.ts
       * @author zhangqiong
       * @date 2024/12/27 19:50:35"
       * @description
       */
      var FightMgr = exports('FightMgr', /*#__PURE__*/function () {
        function FightMgr() {
          this.fightTime = 0;
          this.entitys = [];
          /***死亡实体顺序表 */
          this.dieEntitys = [];
          this.fightEnd = null;
          this.isEnd = false;
          this.seed = 5;
          this.initSeed = 5;
          this.index = 0;
          this.logRandomArr = [];
        }
        var _proto = FightMgr.prototype;
        _proto.reset = function reset() {
          this.dieEntitys = [];
          this.entitys = [];
          this.fightTime = 0;
          this.isEnd = false;
        };
        _proto.setRandomSeed = function setRandomSeed(seed) {
          this.initSeed = seed;
        };
        _proto.resRandomSeed = function resRandomSeed() {
          this.seed = this.initSeed;
        };
        _proto.seedRandom = function seedRandom() {
          if (this.logRandomArr.length < 30) {
            this.logRandomArr.push(this.seed);
          }
          this.seed == (this.seed * 9301 + 49297) % 233280;
          var r = this.seed / 2333280.0;
          return r;
        };
        _proto.randomInt = function randomInt(min, max, stpeLen) {
          if (max === void 0) {
            max = 0;
          }
          if (stpeLen === void 0) {
            stpeLen = 1;
          }
          if (min > max) {
            var temp = min;
            min = max;
            max = temp;
          }
          var deltaRange = max - min + 1 * stpeLen;
          var randomNum = this.seedRandom() * deltaRange;
          return Math.floor(randomNum / stpeLen) * stpeLen;
        };
        _proto.isRandTrue = function isRandTrue(rate) {
          var random = this.randomInt(0, 10000);
          return random <= rate;
        };
        _proto.randomProbability = function randomProbability(array) {
          var sum = 0;
          var temp = [];
          for (var i = 0; i < array.length; i++) {
            sum += array[i];
            temp.push(sum);
          }
          if (sum == 0) {
            return 0;
          }
          var a;
          do {
            a = this.randomInt(0, sum);
          } while (a == 0);
          for (var j = 0; j < temp.length; j++) {
            if (a > temp[j]) {
              continue;
            }
            return j;
          }
        };
        _proto.randomArray = function randomArray(array) {
          var cloneArray = array.concat();
          var leng = cloneArray.length;
          for (var i = 0; i < leng; i++) {
            var index = Math.floor(this.seedRandom() * cloneArray.length);
            var temp = cloneArray[index];
            cloneArray[index] = cloneArray[i];
            cloneArray[i] = temp;
          }
          return cloneArray;
        };
        _proto.addEntity = function addEntity(entity) {
          entity.isRemoveTime = false;
          this.entitys.push(entity);
        };
        _proto.removeEntity = function removeEntity(entity) {
          entity.isRemoveTime = true;
        };
        _proto.getEntitys = function getEntitys() {
          return this.entitys;
        }

        /**实体死亡 */;
        _proto.entityToDie = function entityToDie(e) {
          this.addDieEntity(e);
        }

        /***增加死亡实体 */;
        _proto.addDieEntity = function addDieEntity(e) {
          e.isRemoveTime = true;
          if (this.dieEntitys.indexOf(e) == -1) {
            this.dieEntitys.push(e);
          }
        };
        _proto.start = function start(fightEnd) {
          this.fightEnd = fightEnd;
          for (var i = 0; i < this.entitys.length; i++) {
            var element = this.entitys[i];
          }
        };
        _proto.doActiveSkillStopHandler = function doActiveSkillStopHandler() {
          return this.isEnd;
        };
        _proto.doFrameHandler = function doFrameHandler() {
          var enemyNum = 0;
          var heroNum = 0;
          if (!this.doActiveSkillStopHandler()) {
            this.index++;
            for (var index = 0; index < this.entitys.length; index++) {
              var element = this.entitys[index];
              var isMustActiveSkill = false;
              if (!element.isRemoveTime) {
                if (element.checkNextFrame()) {
                  element.check(isMustActiveSkill);
                }
                if (element.data.camp == 0) {
                  heroNum++;
                } else {
                  enemyNum++;
                }
              }
            }
          }
          if (enemyNum == 0 && heroNum > 0) {
            this.isEnd = true;
            for (var _index = 0; _index < this.entitys.length; _index++) {
              var _element = this.entitys[_index];
              if (!_element.isRemoveTime) {
                _element.setIsWin(true);
              }
            }
            console.error("赢了");
            viewManager.open(PanelType.AFKResultPanel, true);
          } else if (heroNum == 0 && enemyNum > 0) {
            this.isEnd = true;
            for (var _index2 = 0; _index2 < this.entitys.length; _index2++) {
              var _element2 = this.entitys[_index2];
              if (!_element2.isRemoveTime) {
                _element2.setIsWin(true);
              }
            }
            console.error("输了");
            viewManager.open(PanelType.AFKResultPanel, false);
          }
          return 0;
        };
        _proto.getCanSelectEntitys = function getCanSelectEntitys() {
          var results = [];
          var checkEntitys = this.entitys.concat();
          for (var index = 0; index < checkEntitys.length; index++) {
            var element = checkEntitys[index];
            if (element.canSelect() && !element.isRemoveTime) {
              results.push(element);
            }
          }
          return results;
        };
        _proto.findMainEntity = function findMainEntity(from, targetType, isPaichuNotSelect) {
          if (isPaichuNotSelect === void 0) {
            isPaichuNotSelect = 0;
          }
          var arr = [];
          var entitys = this.getCanSelectEntitys();
          var findInfo = new FindTargetInfo();
          findInfo.enemys = entitys;
          findInfo.form = from;
          // findInfo.summon = 1
          findInfo.type = 1;
          findInfo.isPaiChuNotSelect = isPaichuNotSelect;
          switch (targetType) {
            case GameConst.Main_JuLiZuiJin:
              arr = FightUtil.instance.findLatelyOrFarEntity(true, findInfo);
              break;
            case GameConst.Main_JuLiZuiYuan:
              arr = FightUtil.instance.findLatelyOrFarEntity(false, findInfo);
              break;
            case GameConst.Main_XueBaiFenZuiDi:
              arr = FightUtil.instance.findLowHpEntity(true, findInfo);
              break;
            case GameConst.Main_XueBaiFenZuiGao:
              arr = FightUtil.instance.findLowHpEntity(false, findInfo);
              break;
            case GameConst.Main_ChuShiDuiChengWeiZhi:
              arr = FightUtil.instance.findDuiChenEntity(findInfo);
              break;
            case GameConst.Main_DangQianMuBiao:
              //默认选最近
              arr = FightUtil.instance.findLatelyOrFarEntity(true, findInfo);
              break;
          }

          //没目标找最近
          if (arr.length == 0) arr = FightUtil.instance.findLatelyOrFarEntity(true, findInfo);
          return arr;
        };
        _proto.findEntity = function findEntity(form, targetTypes) {
          var results = [];
          var entitys = this.getCanSelectEntitys();
          var findInfo = new FindTargetInfo();
          findInfo.enemys = entitys;
          findInfo.form = form;
          findInfo.type = targetTypes[1];
          findInfo.num = targetTypes[2];
          var targetType = targetTypes[0];
          switch (targetType) {
            case GameConst.JuLiZuiJin:
              results = FightUtil.instance.findLatelyOrFarEntity(false, findInfo);
              break;
            case GameConst.JuLiZuiYuan:
              results = FightUtil.instance.findLatelyOrFarEntity(true, findInfo);
              break;
            case GameConst.SuiJiBuKeChongFu:
              results = FightUtil.instance.findRandomEntity(false, findInfo);
              break;
            case GameConst.SuiJiKeChongFu:
              results = FightUtil.instance.findRandomEntity(true, findInfo);
              break;
            case GameConst.ChuShiDuiChengWeiZhi:
              results = FightUtil.instance.findDuiChenEntity(findInfo);
              break;
            case GameConst.XueZuiDi:
              results = FightUtil.instance.findLowHpEntity(true, findInfo, false);
              break;
            case GameConst.XueZuiGao:
              results = FightUtil.instance.findLowHpEntity(false, findInfo, false);
              break;
          }

          // let enemys: FightRoleEntity[] = [];
          // for (let i: number = 0; i < entitys.length; i++) {
          //     let entity: FightRoleEntity = entitys[i];
          //     if (form.data.camp == 0) {
          //         if (entity.data.camp == 1) {
          //             enemys.push(entity)
          //         }
          //     } else if (form.data.camp == 1) {
          //         if (entity.data.camp == 0) {
          //             enemys.push(entity);
          //         }
          //     }
          // }
          // let index: number = randomRangeInt(0, enemys.length - 1) //this.randomInt(0, enemys.length - 1);
          // results = [enemys[index]];

          return results;
        };
        _createClass(FightMgr, null, [{
          key: "instance",
          get: function get() {
            if (!this._instance) {
              this._instance = new FightMgr();
            }
            return this._instance;
          }
        }]);
        return FightMgr;
      }());
      FightMgr._instance = null;
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/FightRoleEntity.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './RoleEntity.ts', './FightMgr.ts', './FightUtil.ts', './GameConst.ts', './HeadBar.ts', './AssetMgr.ts', './ViewConst.ts', './Handler.ts'], function (exports) {
  var _inheritsLoose, _asyncToGenerator, _regeneratorRuntime, cclegacy, math, RoleEntity, FightMgr, FightUtil, GameConst, HeadBar, AssetMgr, ViewConst, Handler;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _asyncToGenerator = module.asyncToGenerator;
      _regeneratorRuntime = module.regeneratorRuntime;
    }, function (module) {
      cclegacy = module.cclegacy;
      math = module.math;
    }, function (module) {
      RoleEntity = module.RoleEntity;
    }, function (module) {
      FightMgr = module.FightMgr;
    }, function (module) {
      FightUtil = module.FightUtil;
    }, function (module) {
      GameConst = module.GameConst;
    }, function (module) {
      HeadBar = module.HeadBar;
    }, function (module) {
      AssetMgr = module.default;
    }, function (module) {
      ViewConst = module.default;
    }, function (module) {
      Handler = module.Handler;
    }],
    execute: function () {
      cclegacy._RF.push({}, "937ce0DwwZEgI3DXHqJi4/L", "FightRoleEntity", undefined);

      /**
       * @fileName FightRoleEntity.ts
       * @author zhangqiong
       * @date 2024/12/26 20:40:29"
       * @description
       */
      var FightRoleEntity = exports('FightRoleEntity', /*#__PURE__*/function (_RoleEntity) {
        _inheritsLoose(FightRoleEntity, _RoleEntity);
        function FightRoleEntity() {
          var _this;
          _this = _RoleEntity.call(this) || this;
          _this.isAI = false;
          _this.isDie = false;
          _this.isFight = false;
          _this.selectTargets = [];
          _this.selectMainTarget = null;
          _this.skillInfo = null;
          _this.isUseCtrSkill = false;
          _this.headBar = null;
          _this.isWin = false;
          return _this;
        }
        var _proto = FightRoleEntity.prototype;
        _proto.updateHeadPos = function updateHeadPos() {
          if (this.headBar) {
            var pos = this.getLocation();
            var bounds = this.getBounds();
            var x = pos.x;
            var y = pos.y;
            var height = bounds[3];
            var yy = height + y;
            this.headBar.node.setPosition(x, yy);
            // this.head.y = yy + this.role.y;
          }
        };

        _proto.initHeadBar = /*#__PURE__*/function () {
          var _initHeadBar = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
            var node, container;
            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) switch (_context.prev = _context.next) {
                case 0:
                  _context.next = 2;
                  return AssetMgr.instance.createPrefab(ViewConst.defaultPrefabPathPrefix + "afk/headBar");
                case 2:
                  node = _context.sent;
                  if (node) {
                    _context.next = 6;
                    break;
                  }
                  console.log("加载预制体失败");
                  return _context.abrupt("return");
                case 6:
                  this.headBar = node.getComponent(HeadBar);
                  container = this.mScene.getChildContainer(GameConst.ROLE_NAME_LAYER);
                  node.parent = container;
                  this.updateHeadPos();
                  this.updateHeadInfo();
                case 11:
                case "end":
                  return _context.stop();
              }
            }, _callee, this);
          }));
          function initHeadBar() {
            return _initHeadBar.apply(this, arguments);
          }
          return initHeadBar;
        }();
        _proto.updateHeadInfo = function updateHeadInfo() {
          if (this.data && this.headBar) {
            this.headBar.setName(this.data.site + "_" + (this.data.camp == 0 ? "队友" : "敌人") + "_" + this.data.heroConfig.spineId);
            this.headBar.setData(this.data);
          }
        };
        _proto.setData = /*#__PURE__*/function () {
          var _setData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(hero) {
            return _regeneratorRuntime().wrap(function _callee2$(_context2) {
              while (1) switch (_context2.prev = _context2.next) {
                case 0:
                  _RoleEntity.prototype.setData.call(this, hero);
                  this.isAI = true;
                // if (hero.camp == 1) {
                //     this.isAI = true;
                // }
                case 2:
                case "end":
                  return _context2.stop();
              }
            }, _callee2, this);
          }));
          function setData(_x) {
            return _setData.apply(this, arguments);
          }
          return setData;
        }();
        _proto.nextRoleFrame = function nextRoleFrame() {
          this.nextPlayerFrame();
          this.move();
        };
        _proto.move = function move() {
          this.setSpeed(this.data.heroConfig.speed);
          _RoleEntity.prototype.move.call(this);
        };
        _proto.check = function check(isMustActiveSkill) {
          if (isMustActiveSkill === void 0) {
            isMustActiveSkill = false;
          }
          this.nextRoleFrame();
          if (this.isDie || this.isWin) {
            return;
          }
          this.data.fightSkills.nextFrame();
          //攻击中而且无按到释放主动技能的标记就不执行下面的动作
          if (this.isFight && !this.isUseCtrSkill && !isMustActiveSkill) {
            return;
          }
          if (isMustActiveSkill) {
            //强制手动主动技的话，强制设置一下
            this.isUseCtrSkill = true;
            this.isFight = true;
          }
          this.checkSkill(isMustActiveSkill);
          this.checkSelectTarget();
          this.attack();
        };
        _proto.canSelect = function canSelect() {
          return !this.isDie && !this.isRemoveTime;
        };
        _proto.canAttack = function canAttack() {
          return true;
        };
        _proto.checkSelectTarget = function checkSelectTarget() {
          if (this.skillInfo) {
            //有技能的时候才判断选择目标
            if (this.selectTargets.length == 0) {
              //无目标时选择最近的目标
              this.onNotSelectTarget();
            } else {
              this.onHasSelectTarget();
            }
          }
        }

        /***有目标时的选择方式*/;
        _proto.onHasSelectTarget = function onHasSelectTarget() {}

        /***无目标时的选择方式 */;
        _proto.onNotSelectTarget = function onNotSelectTarget() {
          //其他的话，则按照当前技能特效来变化目标\
          var targets = this.skillInfo.cfg.targetTypes;

          // let isSelect = this.skillInfo.skillEffects[0].skillEffCfg.pz_selectTarget;//是否忽略不可选中
          this.selectTargets = FightMgr.instance.findEntity(this, targets);
          if (this.selectTargets.length == 0) {
            if (targets[0] == GameConst.MiJi) {
              //最密集找不到就普攻
              this.skillInfo = this.data.fightSkills.getSkillByIndex(0);
            } else if (targets[0] != GameConst.MaxMp) {
              //无目标的时候，选最近的
              var tempTargets = targets.concat();
              tempTargets[0] = GameConst.DangQianMuBiao;
              this.selectTargets = FightMgr.instance.findEntity(this, tempTargets);
            }
            if (this.selectTargets.length == 0) {
              this.onSelectTargetNull();
            }
          }
        }

        /***在技能选中后还是找不到目标，默认是处理使用掉这个技能 */;
        _proto.onSelectTargetNull = function onSelectTargetNull() {
          //还是空的，那就当使用了这个技能了
          this.data.fightSkills.useSkill(this.skillInfo.skillId);
          this.skillInfo = null;
        };
        _proto.checkSkillMainTarget = function checkSkillMainTarget() {
          if (this.selectTargets.length == 0) {
            if (this.selectMainTarget) {
              //有目标是要判断目标是否不可选中
              if (!this.selectMainTarget.canSelect()) this.clearMainTarget();
            }
            if (!this.selectMainTarget || this.skillInfo.cfg.target != GameConst.Main_DangQianMuBiao) {
              //当前无目标，或者技能要改变主目标的时候才会切换
              this.selectMainTarget = FightMgr.instance.findMainEntity(this, this.skillInfo.cfg.target)[0];
            }
          }
        };
        _proto.clearMainTarget = function clearMainTarget() {
          this.selectMainTarget = null;
        }

        /***是否能检测主动技能的释放条件 */;
        _proto.canCheckAngerSkill = function canCheckAngerSkill() {
          if (this.isUseCtrSkill || this.isAI) {
            return true;
          }
          return false;
        };
        _proto.canUseAngerSkill = function canUseAngerSkill() {
          if (!this.canMove()) return false;
          return this.data.mp >= this.data.maxMp;
        };
        _proto.selectAngerSkill = function selectAngerSkill() {
          return this.data.fightSkills.checkAiToCtrAngerSkill(this);
        };
        _proto.selectAngerCheckSelectTarget = function selectAngerCheckSelectTarget() {
          this.selectTargets.length = 0;
        };
        _proto.checkPassSkillBySkillCheck = function checkPassSkillBySkillCheck(from) {
          // FightFormula_SHM_0593.checkPassSkillCon(PassivitySkillType_SHM_8879.ConType_31, this, from_SHM_5537)
        };
        _proto.selectSkill = function selectSkill() {
          // return null;
          return this.data.fightSkills.selectSkill(this);
        }

        /***检测选中的技能 */;
        _proto.checkSkill = function checkSkill(isMustActiveSkill) {
          if (isMustActiveSkill === void 0) {
            isMustActiveSkill = false;
          }
          if (this.skillInfo && !this.isUseCtrSkill && !isMustActiveSkill) {
            //已经选择了技能就进行移动方式释放技能
            this.checkSkillMainTarget();
            return;
          }
          if (this.canCheckAngerSkill() || isMustActiveSkill) {
            //ai控制主动技能
            if (this.canUseAngerSkill() || isMustActiveSkill) {
              //mp足够
              this.skillInfo = this.selectAngerSkill();
              if (this.skillInfo) {
                this.selectAngerCheckSelectTarget();
              }
            }
          }
          if (!this.skillInfo) {
            //优先判断主动技能存在就跳过这个被动的检测了
            this.checkPassSkillBySkillCheck(this);

            //主动技能无选择才选择一个自动技能释放
            this.skillInfo = this.selectSkill();
            if (!this.skillInfo) return;
          }
          //选择技能后看情况重新锁定主要目标
          this.checkSkillMainTarget();
        };
        _proto.checkAttack = function checkAttack(isIgnoreDis) {
          if (isIgnoreDis === void 0) {
            isIgnoreDis = false;
          }
          if (!this.canMove()) {
            return false;
          }
          if (!this.canAttack()) {
            return false;
          }
          if (!isIgnoreDis) {
            var targetPos = this.selectTargets[0] ? this.selectTargets[0].getLocation() : math.v3(0, 0);
            // const targetPos: Vec3 = FightUtil.instance.getScenceRandomPosition();
            var formPos = this.getLocation();
            this.targetMovePoint = FightUtil.instance.getTargetPointByDis(targetPos, formPos, this.skillInfo.cfg.distance);
            if (this.targetMovePoint) {
              this.moveAngle = FightUtil.instance.getAngleByVec(this.x, this.y, this.targetMovePoint.x, this.targetMovePoint.y);
              this.changeDirByAngle(this.moveAngle);
              return false;
            }
          }
          return true;
        };
        _proto.attack = function attack() {
          if (this.selectTargets.length == 0) {
            // console.error(`${this.data.heroConfig.spineId}没有找到攻击对象`);
            return;
          }
          //没有技能
          if (!this.skillInfo) {
            // console.error(`${this.data.heroConfig.spineId}没有找到攻击对象`);
            return;
          }
          if (this.isFight && this.skillInfo.cfg.type != GameConst.Skill_Active)
            //攻击中就不执行下面的动作，主动技是可以打断的
            return;
          if (!this.checkAttack()) {
            return;
          }
          this.data.fightSkills.useSkill(this.skillInfo.skillId);
          if (this.skillInfo.cfg.type == GameConst.Skill_Active) {
            //AI控制的主动技能消耗MP
            this.data.useMp();
            this.headBar.updateMp(this.data.mp / this.data.maxMp);
            this.isUseCtrSkill = false;
          }
          this.stopAction();
          this.startAttackAction(this.skillInfo, this.selectTargets);
        };
        _proto.getTenThousandPlaceValue = function getTenThousandPlaceValue(num) {
          // 确保输入是数字
          if (typeof num !== 'number' || !Number.isFinite(num)) {
            throw new Error('请输入一个有效的数字');
          }

          // 转为整数并取万位值
          var tenThousandPlaceValue = Math.floor(Math.abs(num) / 10000) % 10;
          return tenThousandPlaceValue;
        };
        _proto.startAttackAction = /*#__PURE__*/function () {
          var _startAttackAction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(skillInfo, target) {
            var type, action, index, e;
            return _regeneratorRuntime().wrap(function _callee3$(_context3) {
              while (1) switch (_context3.prev = _context3.next) {
                case 0:
                  console.log("\u7B2C" + FightMgr.instance.index + "\u5E27,\u653B\u51FB\u8005\uFF1A" + this.data.spineId + "\u53D1\u8D77\u6280\u80FD" + skillInfo.skillId + "\u653B\u51FB\u4E86");
                  this.fightStart();
                  this.setSpineKeyFrameHandler(Handler.create(this.onSpineKeyFrame, this));
                  type = this.getTenThousandPlaceValue(skillInfo.skillId);
                  action = type == 1 ? GameConst.Attack : GameConst.Ultimateskill;
                  _context3.next = 7;
                  return this.setAction(action, 1);
                case 7:
                  for (index = 0; index < target.length; index++) {
                    e = target[index]; // await e.setAction(GameConst.BeHit, 1, null)
                    // e.fightEnd();
                    e.hurt(skillInfo.cfg.hurt, this);
                    e.recovery(skillInfo.cfg.recoveyAnger, this);
                  }
                  this.fightEnd();
                case 9:
                case "end":
                  return _context3.stop();
              }
            }, _callee3, this);
          }));
          function startAttackAction(_x2, _x3) {
            return _startAttackAction.apply(this, arguments);
          }
          return startAttackAction;
        }();
        _proto.onSpineKeyFrame = function onSpineKeyFrame(entry, event) {
          // console.log("触发事件", event.data.name, event.intValue, event.floatValue, event.stringValue)
        };
        _proto.fightStart = function fightStart() {
          this.isFight = true;
        };
        _proto.fightEnd = function fightEnd() {
          this.isFight = false;
          this.skillInfo = null;
          this.selectTargets.length = 0;
        };
        _proto.hurt = function hurt(hurtValue, form) {
          this.data.hp = this.data.hp - hurtValue;
          this.headBar.updateHp(this.data.hp / this.data.maxHp);
          if (this.data.hp <= 0) {
            this.die();
          }
        };
        _proto.recovery = function recovery(value, form) {
          this.data.mp += value;
          this.headBar.updateMp(this.data.mp / this.data.maxMp);
        };
        _proto.setIsWin = function setIsWin(win) {
          this.isWin = win;
          if (win) {
            this.setAction(GameConst.Win);
          }
        };
        _proto.die = /*#__PURE__*/function () {
          var _die = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {
            return _regeneratorRuntime().wrap(function _callee4$(_context4) {
              while (1) switch (_context4.prev = _context4.next) {
                case 0:
                  this.stopAction();
                  FightMgr.instance.entityToDie(this);
                  _context4.next = 4;
                  return this.setAction(GameConst.Death);
                case 4:
                  this.active = false;
                  if (this.headBar) this.headBar.node.active = false;
                  this.isDie = true;
                case 7:
                case "end":
                  return _context4.stop();
              }
            }, _callee4, this);
          }));
          function die() {
            return _die.apply(this, arguments);
          }
          return die;
        }();
        return FightRoleEntity;
      }(RoleEntity));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/FightSkillGroupInfo.ts", ['cc', './ArrayUtils.ts', './HashMap.ts', './GameConst.ts'], function (exports) {
  var cclegacy, ArrayUtils, HashMap, GameConst;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      ArrayUtils = module.default;
    }, function (module) {
      HashMap = module.HashMap;
    }, function (module) {
      GameConst = module.GameConst;
    }],
    execute: function () {
      cclegacy._RF.push({}, "4f07dGCsfFHepdBgnFR7yCI", "FightSkillGroupInfo", undefined);
      /**
       * @fileName FightSkillGroupInfo.ts
       * @author zhangqiong
       * @date 2024/12/31 19:29:06"
       * @description
       */
      var FightSkillGroupInfo = exports('FightSkillGroupInfo', /*#__PURE__*/function () {
        function FightSkillGroupInfo() {
          this.activeSkillIndex = -1;
          this.skillMap = void 0;
          this.cdArray = [];
          this.cdMaxArray = [];
          this.cdInitMaxArray = [];
          this.skillIds = [];
          this.skillMap = new HashMap();
        }
        var _proto = FightSkillGroupInfo.prototype;
        _proto.add = function add(skills) {
          for (var index = 0; index < skills.length; index++) {
            var skill = skills[index];
            this.skillMap.put(skill.skillId, skill);
            this.skillIds.push(skill.skillId);
            this.cdArray.push(skill.cfg.firstCd);
            this.cdMaxArray.push(skill.cfg.cd);
            if (skill.cfg.type == GameConst.Skill_Active) {
              this.activeSkillIndex = index;
            }
          }
        };
        _proto.getSkillBySkillId = function getSkillBySkillId(skillId) {
          return this.skillMap.get(skillId);
        };
        _proto.getSkillByIndex = function getSkillByIndex(index) {
          return this.skillMap.get(this.skillIds[index]);
        };
        _proto.nextFrame = function nextFrame() {
          for (var index = 0; index < this.cdArray.length; index++) {
            this.cdArray[index]--;
            if (this.cdArray[index] <= 0) {
              this.cdArray[index] = 0;
            }
          }
        }

        /***
             * 选择技能
             * 释放优先级：只处理自动技能，根据槽位顺序
             * skillSort 优先选择的技能位置-1是不指
             * checkFun 额外的检测方法
             *  */;
        _proto.selectSkill = function selectSkill(entity, skillSort, checkFun) {
          if (skillSort === void 0) {
            skillSort = -1;
          }
          var sk = [];
          for (var i = 0; i < this.cdArray.length; i++) {
            if (this.cdArray[i] == 0) {
              var skInfo = this.skillMap.get(this.skillIds[i]);
              if (!checkFun || checkFun.execute(skInfo)) {
                if (skInfo.cfg.type == GameConst.Skill_Auto) {
                  if (skInfo.cfg.skillType == 1) {
                    sk.push(skInfo);
                  }
                }
              }
            }
          }
          if (sk.length > 0) {
            //优先位置最后的
            ArrayUtils.sortBy2(sk, "skillSort", false, false);
            var choseSkill = sk[0];
            if (skillSort != -1) {
              //优先选择
              for (var i = 0; i < sk.length; i++) {
                if (sk[i].skillSort == skillSort) {
                  choseSkill = sk[i];
                  break;
                }
              }
            }
            return choseSkill;
          }
          return null;
        };
        _proto.checkAiToCtrAngerSkill = function checkAiToCtrAngerSkill(entity, skillSort) {
          if (skillSort === void 0) {
            skillSort = -1;
          }
          var isFirst = false;
          var skInfo = this.skillMap.get(this.skillIds[this.activeSkillIndex]);
          if (skillSort != -1) {
            var tempSkillInfo = this.skillMap.get(this.skillIds[skillSort]);
            if (tempSkillInfo && !this.isSkillCD(tempSkillInfo.skillId)) {
              skInfo = tempSkillInfo;
              isFirst = true;
            }
          }

          // skInfo = this.checkChangeSkill(skInfo, entity);//检查是否有转换
          // skInfo = this.checkChangeSkillRandom(skInfo, entity);//检查是否有转换

          if (isFirst || skInfo && skInfo.checkAiToCtrAngerSkill()) {
            return skInfo;
          }
          return null;
        };
        _proto.isSkillCD = function isSkillCD(skillId) {
          var index = this.skillIds.indexOf(skillId);
          return this.cdArray[index] > 0;
        };
        _proto.useSkill = function useSkill(skillId) {
          var index = this.skillIds.indexOf(skillId);
          this.cdArray[index] = this.cdMaxArray[index];
        };
        _proto.useAngerSkill = function useAngerSkill() {
          var skInfo = this.skillMap.get(this.skillIds[this.activeSkillIndex]);
          return skInfo;
        };
        return FightSkillGroupInfo;
      }());
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/FightSkillInfo.ts", ['cc'], function (exports) {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "c0d14T+zTtFLrOYLrMg5Cy8", "FightSkillInfo", undefined);
      /**
       * @fileName FightSkillInfo.ts
       * @author zhangqiong
       * @date 2024/12/31 15:36:47"
       * @description
       */
      var FightSkillInfo = exports('FightSkillInfo', /*#__PURE__*/function () {
        function FightSkillInfo() {
          this.skillId = void 0;
          this.cfg = void 0;
          /**位置0普攻，1主动，2,3,4其他槽位 */
          this.skillSort = void 0;
        }
        var _proto = FightSkillInfo.prototype;
        _proto.setData = function setData(config) {
          this.cfg = config;
          this.skillId = config.skillId;
        };
        _proto.checkAiToCtrAngerSkill = function checkAiToCtrAngerSkill() {
          return true;
        };
        return FightSkillInfo;
      }());
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/FightUtil.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './GameConst.ts', './ArrayUtils.ts', './FightMgr.ts'], function (exports) {
  var _createClass, cclegacy, math, Vec3, view, randomRangeInt, GameConst, ArrayUtils, FightMgr;
  return {
    setters: [function (module) {
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      math = module.math;
      Vec3 = module.Vec3;
      view = module.view;
      randomRangeInt = module.randomRangeInt;
    }, function (module) {
      GameConst = module.GameConst;
    }, function (module) {
      ArrayUtils = module.default;
    }, function (module) {
      FightMgr = module.FightMgr;
    }],
    execute: function () {
      cclegacy._RF.push({}, "835b0w6aMtI9aydb0ZR8uRY", "FightUtil", undefined);

      /**
       * @fileName FightUtil.ts
       * @author zhangqiong
       * @date 2024/12/28 17:08:26"
       * @description
       */
      var FightUtil = exports('FightUtil', /*#__PURE__*/function () {
        function FightUtil() {}
        var _proto = FightUtil.prototype;
        _proto.getTargetPointByDis = function getTargetPointByDis(target, form, dis) {
          var distance = this.distance(target, form);
          var trueDis = Math.floor(distance - dis);
          if (trueDis < 100) {
            return null;
          }
          var radian = this.radian(target, form);
          var y = Math.sin(radian) * trueDis;
          var x = Math.cos(radian) * trueDis;
          return math.v3(x, y);
        };
        _proto.distance = function distance(p1, p2) {
          var distance = Vec3.distance(p1, p2);
          return distance;
        };
        _proto.radian = function radian(e1, e2) {
          return Math.atan2(e1.y - e2.y, e1.x - e2.x);
        };
        _proto.getAngleByVec = function getAngleByVec(x, y, tx, ty) {
          var angle = Math.atan2(ty - y, tx - x) * 180 / Math.PI;
          if (angle < 0) {
            angle += 360;
          }
          return angle;
        };
        _proto.getScenceRandomPosition = function getScenceRandomPosition() {
          var size = view.getVisibleSize();
          var width = size.width;
          var height = size.height;
          var halfWidth = width / 2;
          var halfHeight = height / 2;
          var x = randomRangeInt(-halfWidth, halfWidth);
          var y = randomRangeInt(-halfHeight, halfHeight);
          return math.v3(x, y);
        };
        _proto.getDirectionByAngle = function getDirectionByAngle(angle) {
          var _dir = 0;
          if (angle > 67.5 && angle < 112.5) {
            _dir = GameConst.S;
          } else if (angle > 22.5 && angle <= 67.5) {
            _dir = GameConst.ES;
          } else if (angle < 22.5 || angle > 360 - 22.5) {
            _dir = GameConst.E;
          } else if (angle > 360 - 67.5 && angle <= 360 - 22.5) {
            _dir = GameConst.NE;
          } else if (angle > 270 - 22.5 && angle <= 360 - 67.5) {
            _dir = GameConst.N;
          } else if (angle > 270 - 67.5 && angle <= 270 - 22.5) {
            _dir = GameConst.WN;
          } else if (angle > 180 - 22.5 && angle <= 270 - 67.5) {
            _dir = GameConst.W;
          } else if (angle > 180 - 67.5 && angle <= 180 - 22.5) {
            _dir = GameConst.SW;
          }
          return _dir;
        };
        _proto.getScaleXByDirection = function getScaleXByDirection(direction) {
          var scaleX = -1;
          switch (direction) {
            case GameConst.RIGHT_UP:
            case GameConst.RIGHT:
            case GameConst.RIGHT_DOWN:
              scaleX = 1;
              break;
          }
          return scaleX;
        };
        _proto.checkSeduce = function checkSeduce(en, type) {
          return type;
        };
        _proto.findLatelyOrFarEntity = function findLatelyOrFarEntity(isLately, findData) {
          var en = findData.form;
          var ens = findData.enemys;
          var type = findData.type || 1;
          var num = findData.num == undefined ? 1 : findData.num;
          var isPaiChu = findData.isPaiChu;
          // let summon: number = findData.summon

          var oldType = type;
          type = this.checkSeduce(en, type);
          var rr = [];
          for (var i = 0; i < ens.length; i++) {
            if (findData.isPaiChuNotSelect == 1 || ens[i].canSelect()) {
              if (!isPaiChu || ens[i] != en) {
                if (type == 3 || type == 2 && ens[i].data.camp == en.data.camp || type == 1 && ens[i].data.camp != en.data.camp) {
                  var tarPos = ens[i].getLocation();
                  var enPos = en.getLocation();
                  var dis = this.distance(tarPos, enPos);
                  ens[i]["findLatelyEntity_dis"] = dis;
                  rr.push(ens[i]);
                }
              }
            }
          }
          if (oldType != type) {
            //打敌方变成打自己友的情况，就要排除自己
            ArrayUtils.removeItem(rr, en);
          }
          ArrayUtils.sortBy2(rr, "findLatelyEntity_dis", isLately, false);
          return rr.slice(0, num);
        }

        /**
         * 选择随机目标
         * @param isRepeat 是否可以重复
         * @param findData 
         * @returns 
         */;
        _proto.findRandomEntity = function findRandomEntity(isRepeat, findData) {
          var en = findData.form;
          var ens = findData.enemys;
          var type = findData.type || 1;
          var num = findData.num == undefined ? 1 : findData.num;
          var isPaiChu = findData.isPaiChu;
          var oldType = type;
          type = this.checkSeduce(en, type);
          var rr = [];
          for (var i = 0; i < ens.length; i++) {
            if (findData.isPaiChuNotSelect == 1 || ens[i].canSelect()) {
              if (!isPaiChu || ens[i] != en) {
                if (type == 3 || type == 2 && ens[i].data.camp == en.data.camp || type == 1 && ens[i].data.camp != en.data.camp) {
                  rr.push(ens[i]);
                }
              }
            }
          }
          var dd = [];
          if (rr.length > 0) {
            if (!isRepeat) {
              rr = FightMgr.instance.randomArray(rr);
              dd = rr.slice(0, num);
            } else {
              while (num > dd.length) {
                var index = FightMgr.instance.randomInt(0, rr.length - 1);
                dd.push(rr[index]);
              }
            }
          }
          if (oldType != type) {
            //打敌方变成打自己友的情况，就要排除自己
            ArrayUtils.removeItem(dd, en);
          }
          return dd;
        }

        /**
         * 选择生命低或高
         * @param isLow 是否低
         * @param findData 
         * @param isPercent 是否百分比
         * @returns 
         */;
        _proto.findLowHpEntity = function findLowHpEntity(isLow, findData, isPercent) {
          if (isPercent === void 0) {
            isPercent = true;
          }
          var en = findData.form;
          var ens = findData.enemys;
          var type = findData.type || 1;
          var num = findData.num == undefined ? 1 : findData.num;
          var isPaiChu = findData.isPaiChu;
          // let summon: number = findData.summon

          var oldType = type;
          type = this.checkSeduce(en, type);
          var rr = [];
          for (var i = 0; i < ens.length; i++) {
            if (findData.isPaiChuNotSelect == 1 || ens[i].canSelect()) {
              if (!isPaiChu || ens[i] != en) {
                if (type == 3 || type == 2 && ens[i].data.camp == en.data.camp || type == 1 && ens[i].data.camp != en.data.camp) {
                  var value = isPercent ? ens[i].data.hp / ens[i].data.maxHp * 10000 : ens[i].data.hp;
                  ens[i]["findLatelyEntity_hp"] = value;
                  rr.push(ens[i]);
                }
              }
            }
          }
          if (oldType != type) {
            //打敌方变成打自己友的情况，就要排除自己
            ArrayUtils.removeItem(rr, en);
          }
          ArrayUtils.sortBy2(rr, "findLatelyEntity_hp", isLow, false);
          return rr.slice(0, num);
        }

        /**
         * 对称位
         * @param findData 
         * @returns 
         */;
        _proto.findDuiChenEntity = function findDuiChenEntity(findData) {
          var en = findData.form;
          var ens = findData.enemys;
          var type = findData.type || 1;
          var num = findData.num == undefined ? 1 : findData.num;
          var isPaiChu = findData.isPaiChu;
          // let summon: number = findData.summon

          type = this.checkSeduce(en, type);
          var rr = [];
          for (var i = 0; i < ens.length; i++) {
            if (findData.isPaiChuNotSelect == 1 || ens[i].canSelect()) {
              if (!isPaiChu || ens[i] != en) {
                if (type == 3 || type == 2 && ens[i].data.camp == en.data.camp || type == 1 && ens[i].data.camp != en.data.camp) {
                  if (ens[i].data.site == en.data.site)
                    //同一位置
                    {
                      rr.push(ens[i]);
                      break;
                    }
                }
              }
            }
          }

          //对称位置无论如任何都要排除自己（被魅惑无可能攻击自己，没被魅惑一定攻击对方）
          if (rr.length > 0) ArrayUtils.removeItem(rr, en);
          return rr;
        };
        _createClass(FightUtil, null, [{
          key: "instance",
          get: function get() {
            if (!this._instance) {
              this._instance = new FightUtil();
            }
            return this._instance;
          }
        }]);
        return FightUtil;
      }());
      FightUtil._instance = void 0;
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/FindTargetInfo.ts", ['cc'], function (exports) {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "ed3b5XozOdITJc6MtUICcmM", "FindTargetInfo", undefined);
      /**
       * @fileName FindTargetInfo.ts
       * @author zhangqiong
       * @date 2024/12/30 19:19:22"
       * @description
       */
      var FindTargetInfo = exports('FindTargetInfo', function FindTargetInfo() {
        this.enemys = [];
        this.form = null;
        this.isPaiChu = false;
        this.isPaiChuNotSelect = 0;
        this.type = void 0;
        this.num = 1;
        this.skillType = 0;
        this.job = 0;
        this.maxMp = 0;
        this.guild = 0;
      });
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Game2048.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Grid.ts', './Game2048Enum.ts', './Tile.ts', './Enum3.ts'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, math, Component, Grid, DirectionType, config2048, Tile, TouchEvent;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      math = module.math;
      Component = module.Component;
    }, function (module) {
      Grid = module.Grid;
    }, function (module) {
      DirectionType = module.DirectionType;
      config2048 = module.config2048;
    }, function (module) {
      Tile = module.Tile;
    }, function (module) {
      TouchEvent = module.TouchEvent;
    }],
    execute: function () {
      var _dec, _class, _class2;
      cclegacy._RF.push({}, "094bfWv+LJIwITzglpKT3vc", "Game2048", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var Game2048 = exports('Game2048', (_dec = ccclass('Game'), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(Game2048, _Component);
        function Game2048() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.grid = void 0;
          _this.startTiles = void 0;
          _this.size = void 0;
          return _this;
        }
        var _proto = Game2048.prototype;
        _proto.onLoad = function onLoad() {
          var _this2 = this;
          Game2048._ins = this;
          this.node.on(TouchEvent.UP, function () {
            _this2.move(DirectionType.UP);
          }, this);
          this.node.on(TouchEvent.RIGHT, function () {
            _this2.move(DirectionType.RIGHT);
          }, this);
          this.node.on(TouchEvent.DOWN, function () {
            _this2.move(DirectionType.DOWN);
          }, this);
          this.node.on(TouchEvent.LEFT, function () {
            _this2.move(DirectionType.LEFT);
          }, this);
        };
        _proto.start = function start() {
          var _this3 = this;
          this.size = config2048.size;
          this.startTiles = config2048.startTiles;
          this.grid = this.node.addComponent(Grid);
          this.grid.setup(this.size);
          this.addStartTiles();
          this.grid.initNode().then(function () {
            _this3.grid.render();
            _this3.grid.printGrid();
          });
          // console.log(this.serialize());
        };

        _proto.update = function update(deltaTime) {};
        _proto.getVector = function getVector(direction) {
          var _map;
          var map = (_map = {}, _map[DirectionType.UP] = math.v2(0, -1), _map[DirectionType.DOWN] = math.v2(0, 1), _map[DirectionType.RIGHT] = math.v2(1, 0), _map[DirectionType.LEFT] = math.v2(-1, 0), _map);
          return map[direction];
        };
        _proto.buildTraversals = function buildTraversals(vector) {
          var traversals = {
            x: [],
            y: []
          };
          for (var pos = 0; pos < this.size; pos++) {
            traversals.x.push(pos);
            traversals.y.push(pos);
          }
          if (vector.x == 1) {
            traversals.x = traversals.x.reverse();
          }
          if (vector.y == 1) {
            traversals.y = traversals.y.reverse();
          }
          return traversals;
        };
        _proto.findFarthestPoint = function findFarthestPoint(cell, vector) {
          var previous;
          do {
            previous = cell;
            cell.set(previous.x + vector.x, previous.y + vector.y);
          } while (this.grid.withinBounds(cell) && this.grid.checkCellAvailable(cell));
          return {
            farthest: previous,
            next: cell
          };
        };
        _proto.prepareTiles = function prepareTiles() {
          this.grid.foreachCell(function (x, y, tile) {
            if (tile) {
              tile.megreFrom = null;
              tile.savePosition();
            }
          });
        }

        // private moveTile(tile: Node, cell: Vec2): void {
        //     this.grid.removeTile(tile);
        //     this.grid.insertTile(tile, cell);
        // }
        ;

        _proto.addStartTiles = function addStartTiles() {
          for (var i = 0; i < this.startTiles; i++) {
            this.addRandomTile();
          }
        };
        _proto.addRandomTile = function addRandomTile() {
          if (this.grid.checkCellsAvailable()) {
            var value = Math.random() < 0.9 ? 2 : 4;
            var tile = this.createTile(this.grid.randomAvailableCell(), value);
            this.grid.insertTile(tile);
          }
        };
        _proto.nextPos = function nextPos(vector, direction) {
          var _map2;
          var map = (_map2 = {}, _map2[DirectionType.UP] = function (v) {
            return math.v2(v.x + 1, v.y);
          }, _map2[DirectionType.DOWN] = function (v) {
            return math.v2(v.x - 1, v.y);
          }, _map2[DirectionType.LEFT] = function (v) {
            return math.v2(v.x, v.y + 1);
          }, _map2[DirectionType.RIGHT] = function (v) {
            return math.v2(v.x, v.y - 1);
          }, _map2);
          var pos = map[direction](vector);
          if (this.grid.withinBounds(pos)) {
            var value = this.grid.getCellValue(pos);
            return {
              pos: pos,
              value: value
            };
          }
          return null;
        };
        _proto.nextNonZore = function nextNonZore(cellPos, direction) {
          var nextPos = this.nextPos(cellPos, direction);
          if (!nextPos) {
            return null;
          }
          var pos = nextPos.pos,
            value = nextPos.value;
          if (!this.grid.withinBounds(pos)) {
            return null;
          }
          if (value == 0) {
            return this.nextNonZore(pos, direction);
          }
          return nextPos;
        };
        _proto.cale = function cale(cellPos, direction) {
          var cellValue = this.grid.getCellValue(cellPos);
          var next = this.nextNonZore(cellPos, direction);
          if (!next) {
            return;
          }
          var cellTile = this.grid.getCellContent(cellPos);
          var pos = next.pos,
            value = next.value;
          var nextTile = this.grid.getCellContent(pos);
          if (cellValue == 0) {
            // this.grid.cells[pos.x][pos.y] = cellNode;
            // this.grid.cells[cellPos.x][cellPos.y] = nextNode;
            this.grid.insertTile(cellTile, pos);
            this.grid.insertTile(nextTile, math.v2(cellPos.x, cellPos.y));
            this.cale(cellPos, direction);
          } else if (cellValue === value) {
            var mergedTile = this.createTile(pos, value * 2);
            // let mergedTile: Tile = mergedNode.getComponent(Tile);
            mergedTile.megreFrom = [cellTile, nextTile];
            // this.grid.cells[pos.x][pos.y] = null;
            // this.grid.cells[cellPos.x][cellPos.y] = mergedNode;
            this.grid.removeTile(null, pos);
            this.grid.insertTile(mergedTile, math.v2(cellPos.x, cellPos.y));
            // this.grid.removeTile()
          }

          var nextPos = this.nextPos(cellPos, direction);
          this.cale(nextPos.pos, direction);
        };
        _proto.move = function move(direction) {
          this.prepareTiles();
          if (direction == DirectionType.UP) {
            for (var i = 0; i < this.size; i++) {
              this.cale(math.v2(0, i), direction);
            }
          } else if (direction == DirectionType.DOWN) {
            for (var _i = 0; _i < this.size; _i++) {
              this.cale(math.v2(this.size - 1, _i), direction);
            }
          } else if (direction == DirectionType.LEFT) {
            for (var _i2 = 0; _i2 < this.size; _i2++) {
              this.cale(math.v2(_i2, 0), direction);
            }
          } else if (direction == DirectionType.RIGHT) {
            for (var _i3 = 0; _i3 < this.size; _i3++) {
              this.cale(math.v2(_i3, this.size - 1), direction);
            }
          }
          this.addRandomTile();
          this.grid.render();
          this.grid.printGrid();
        };
        _proto.positionsEqual = function positionsEqual(first, second) {
          return first.x === second.x && first.y === second.y;
        };
        _proto.createTile = function createTile(pos, value) {
          var tile = new Tile();
          tile.setup(pos, value);
          return tile;
        };
        _proto.serialize = function serialize() {
          return {
            grid: this.grid.serialize()
          };
        };
        return Game2048;
      }(Component), _class2._ins = void 0, _class2)) || _class));
      window["Game2048"] = Game2048;
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Game2048Enum.ts", ['cc'], function (exports) {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "e407aBiWc5Cpb/l/I62tqMx", "Game2048Enum", undefined);
      var DirectionType = exports('DirectionType', /*#__PURE__*/function (DirectionType) {
        DirectionType[DirectionType["UP"] = 0] = "UP";
        DirectionType[DirectionType["RIGHT"] = 1] = "RIGHT";
        DirectionType[DirectionType["DOWN"] = 2] = "DOWN";
        DirectionType[DirectionType["LEFT"] = 3] = "LEFT";
        return DirectionType;
      }({}));
      var config2048 = exports('config2048', {
        tileWidth: 100,
        tileHight: 100,
        size: 4,
        startTiles: 2
      });
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/GameCamera.ts", ['cc'], function (exports) {
  var cclegacy, UITransform;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      UITransform = module.UITransform;
    }],
    execute: function () {
      cclegacy._RF.push({}, "a3b88529T1KQoJSKfL0O65j", "GameCamera", undefined);
      var GameCamera = exports('GameCamera', /*#__PURE__*/function () {
        function GameCamera(viewPortNode, mapNode, roleNode) {
          this.viewPortNode = void 0;
          this.mapNode = void 0;
          this.roleNode = void 0;
          this.xRange = void 0;
          this.yRange = void 0;
          this.lastX = void 0;
          this.lastY = void 0;
          this.viewPortNode = viewPortNode;
          this.mapNode = mapNode;
          this.roleNode = roleNode;
          var viewPortUITrs = this.viewPortNode.getComponent(UITransform);
          var mapUITrs = this.mapNode.getComponent(UITransform);
          if (mapUITrs.width > viewPortUITrs.width) {
            this.xRange = (mapUITrs.width - viewPortUITrs.width) / 2;
          } else {
            this.xRange = 0;
          }
          if (mapUITrs.height > viewPortUITrs.height) {
            this.yRange = (mapUITrs.height - viewPortUITrs.height) / 2;
          } else {
            this.yRange = 0;
          }
          this.lastX = roleNode.position.x;
          this.lastY = roleNode.position.y;
        }
        var _proto = GameCamera.prototype;
        _proto.updatePosition = function updatePosition() {
          if (this.lastX === this.roleNode.position.x && this.lastY === this.roleNode.position.y) {
            return;
          }
          this.lastX = this.roleNode.position.x;
          this.lastX = this.roleNode.position.y;
          //人物和地图中点距离
          var distX = this.roleNode.position.x;
          var distY = this.roleNode.position.y;
          //地图根据距离反向移动，这样人物就能一直处于视口中间

          this.mapNode.setPosition(-distX, -distY);
          //地图边缘检测
          if (this.mapNode.position.x > this.xRange) {
            this.mapNode.setPosition(this.xRange, this.mapNode.position.y);
            console.log("摄像头超过右边界");
          } else if (this.mapNode.position.x < -this.xRange) {
            this.mapNode.setPosition(-this.xRange, this.mapNode.position.y);
            console.log("摄像头超过左边界");
          }
          if (this.mapNode.position.y > this.yRange) {
            this.mapNode.setPosition(this.mapNode.position.x, this.yRange);
            console.log("摄像头超过上边界");
          } else if (this.mapNode.position.y < -this.yRange) {
            this.mapNode.setPosition(this.mapNode.position.x, -this.yRange);
            console.log("摄像头超过下边界");
          }
        };
        return GameCamera;
      }());
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/GameConst.ts", ['cc'], function (exports) {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "08605JgqfRAzLt29kz51t36", "GameConst", undefined);
      /**
       * @fileName GameConst.ts
       * @author zhangqiong
       * @date 2024/12/26 15:19:25"
       * @description
       */
      var GameConst = exports('GameConst', function GameConst() {});
      GameConst.Attack = "att";
      GameConst.Idle = "holdon";
      GameConst.Move = "move";
      GameConst.Skill = "skill";
      GameConst.Ultimateskill = "ultimateskill";
      GameConst.BeHit = "behit";
      GameConst.Death = "death";
      GameConst.Win = "win";
      GameConst.UP = 0;
      GameConst.RIGHT_UP = 1;
      GameConst.RIGHT = 2;
      GameConst.RIGHT_DOWN = 3;
      GameConst.DOWN = 4;
      GameConst.LEFT_DOWN = 5;
      GameConst.LEFT = 6;
      GameConst.LEFT_UP = 7;
      /** 北 上 **/
      GameConst.N = 0;
      /** 右上**/
      GameConst.NE = 1;
      /** 东 右 **/
      GameConst.E = 2;
      /** 右下**/
      GameConst.ES = 3;
      /** 南  下**/
      GameConst.S = 4;
      /**左下**/
      GameConst.SW = 5;
      /** 西 左 **/
      GameConst.W = 6;
      /** 左上**/
      GameConst.WN = 7;
      /** 背景层 **/
      GameConst.BG_LAYER = "bgContainer";
      /** 地图层 **/
      GameConst.MAP_Bottom_Role_LAYER = "bottomRoleContainer";
      /** 地图层 **/
      GameConst.MAP_LAYER = "mapContainer";
      /** 地图装饰层 **/
      GameConst.DECORATE_LAYER = "decorateContainer";
      /** 影子层 **/
      GameConst.MAP_SHADOW_LAYER = "shadowContainer";
      /** 脚底特效层 **/
      GameConst.MAP_MAGIC_LAYER = "magicContainer";
      /** 地图特效层 **/
      GameConst.MAP_EFFECT_LAYER = "mapEffectContainer";
      /** 掉落层 **/
      GameConst.MAP_DROP_LAYER = "dropContainer";
      /** 特效层 **/
      GameConst.EFFECT_Bottom_LAYER = "effectBottomContainer";
      /** 红白特效层 **/
      GameConst.EFFECT_TOP_LAYER = "effectTopContainer";
      /** 角色层 **/
      GameConst.ROLE_LAYER = "roleContainer";
      /** 角色遮罩层 **/
      GameConst.ROLE_NAME_LAYER = "roleNameContainer";
      /** 特效层 **/
      GameConst.EFFECT_LAYER = "effectContainer";
      /** 受击特效层 **/
      GameConst.HIT_EFFECT_LAYER = "hitEffectLayer";
      /** 飘血层层 **/
      GameConst.HURT_EFFECT_LAYER = "hurtContainer";
      /** 中间层 **/
      GameConst.CENTER_LAYER = "centerContainer";
      /** 前景层 **/
      GameConst.TOP_LAYER = "topContainer";
      // 主目标
      /**当前主目标 */
      GameConst.Main_DangQianMuBiao = 1;
      /**血百分比最低主目标 */
      GameConst.Main_XueBaiFenZuiDi = 2;
      /**血百分比最高主目标 */
      GameConst.Main_XueBaiFenZuiGao = 3;
      /**距离最远主目标 */
      GameConst.Main_JuLiZuiYuan = 4;
      /**距离最近主目标 */
      GameConst.Main_JuLiZuiJin = 5;
      /**初始对称位置主目标 */
      GameConst.Main_ChuShiDuiChengWeiZhi = 6;
      //临时目标  一般配置在技能表中
      /**当前目标 */
      GameConst.DangQianMuBiao = 1;
      /**全体 */
      GameConst.QuanTi = 2;
      /**战力最高 */
      GameConst.ZhanLiZuiGao = 3;
      /**攻击最高 */
      GameConst.GongJiZuiGao = 4;
      /**血百分比最低 */
      GameConst.XueBaiFenZuiDi = 5;
      /**血百分比最高 */
      GameConst.XueBaiFenZuiGao = 6;
      /**距离最远 */
      GameConst.JuLiZuiYuan = 7;
      /**距离最近 */
      GameConst.JuLiZuiJin = 8;
      /**初始对称位置 */
      GameConst.ChuShiDuiChengWeiZhi = 9;
      /**最靠前 */
      GameConst.ZuiKaoQian = 10;
      /**最靠后 */
      GameConst.ZuiKaoHou = 11;
      /**前排 */
      GameConst.QianPai = 12;
      /**后排 */
      GameConst.HouPai = 13;
      /**随机不可重复 */
      GameConst.SuiJiBuKeChongFu = 14;
      /**随机可重复 */
      GameConst.SuiJiKeChongFu = 15;
      /**最密集的地方 */
      GameConst.MiJi = 16;
      /**最低防 */
      GameConst.FangYuDi = 17;
      /**指定英雄（光环） */
      GameConst.ZhiDingYingXiong = 18;
      /**最前没有盾 */
      GameConst.FontNotDun = 19;
      /**拥有某个BUFF */
      GameConst.Buff = 20;
      /**血量最低 */
      GameConst.XueZuiDi = 21;
      /**血量最高 */
      GameConst.XueZuiGao = 22;
      /**按攻击类型选取（1物理，2法术） */
      GameConst.GongJiLeiXing = 23;
      /**角度最小,取的纵坐标相差最小的绝对值 */
      GameConst.JiaoDuZuiXiao = 24;
      /**角度最小,指定职业 */
      GameConst.Job = 25;
      /**能量最高排除已满 */
      GameConst.MaxMp = 26;
      /**指定阵营 */
      GameConst.ZhiDingZhenYing = 27;
      /**自己 */
      GameConst.Ziji = 28;
      /**威胁最大 */
      GameConst.WeiXieZuiDa = 29;
      /**最靠近我方半场的横坐标最小的目标 */
      GameConst.ZuiKaoJinWoFangHouPai = 30;
      /**优先选择场上携带buff的目标，若没有携带buff的目标则选择防御最低的 */
      GameConst.BuffOrFangYuDi = 31;
      /**指定半场 1敌方 2我方 */
      GameConst.ZhiDingQuYu = 32;
      /**指定阵营攻击力最高，第4个值填阵营id */
      GameConst.ZhenYingGongJiLiZuiGao = 34;
      /**暴击率最高 */
      GameConst.BaoJiLvZuiGao = 35;
      /**主动技能 */
      GameConst.Skill_Active = 1;
      /**自动技能 */
      GameConst.Skill_Auto = 2;
      /**被动技能 */
      GameConst.Skill_Passive = 3;
      /**被动触发主动技能 */
      GameConst.Skill_PassiveToActive = 4;
      /**神器技能 */
      GameConst.Skill_GodWeapon = 5;
      /**圣龙技能 */
      GameConst.Skill_ShengLong = 6;
      GameConst.Action_Opre_One = 1;
      GameConst.Action_Opre_Quaue = 2;
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/GameElement.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './QuadTree.ts'], function (exports) {
  var _inheritsLoose, _createClass, cclegacy, _decorator, Label, UITransform, Sprite, Color, randomRange, math, Component, QuadTreeRect;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      UITransform = module.UITransform;
      Sprite = module.Sprite;
      Color = module.Color;
      randomRange = module.randomRange;
      math = module.math;
      Component = module.Component;
    }, function (module) {
      QuadTreeRect = module.QuadTreeRect;
    }],
    execute: function () {
      var _dec, _class;
      cclegacy._RF.push({}, "196be8lNWNNdb5ESOo35Ojk", "GameElement", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var GameElement = exports('GameElement', (_dec = ccclass('GameElement'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(GameElement, _Component);
        function GameElement() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this._x = void 0;
          _this._y = void 0;
          _this._width = void 0;
          _this._height = void 0;
          _this.size = void 0;
          _this.dir = void 0;
          _this.speed = 250;
          _this.nameLabel = void 0;
          _this.myself = false;
          return _this;
        }
        var _proto = GameElement.prototype;
        _proto.onLoad = function onLoad() {
          this.nameLabel = this.node.getChildByName("nameLable").getComponent(Label);
          if (this.nameLabel) {
            this.nameLabel.string = this.node.name;
          }
        };
        _proto.start = function start() {
          var uiTransform = this.getComponent(UITransform);
          this.width = uiTransform.width;
          this.height = uiTransform.height;
          // this.size = math.size(this.width, this.height);
        };

        _proto.update = function update(deltaTime) {
          this.UpdatePoint();
          // return
          if (this.myself) {
            return;
          }
          var v = this.dir.clone().multiplyScalar(this.speed * deltaTime);
          var _final = this.node.position.clone().add(v);
          if (_final.x - this.width / 2 < -this.size.width / 2) {
            // - this.width / 2
            this.dir.x = -this.dir.x;
          }
          if (_final.x + this.width / 2 > this.size.width / 2) {
            //+ this.width / 2
            this.dir.x = -this.dir.x;
          }
          if (_final.y - this.height / 2 < -this.size.height / 2) {
            // - this.height / 2
            this.dir.y = -this.dir.y;
          }
          if (_final.y + this.height / 2 > this.size.height / 2) {
            // + this.height / 2
            this.dir.y = -this.dir.y;
          }
          // const pos: Vec3 = this.node.position.clone();
          // this.node.position = this.node.position.clone().add(displacement);
          var newPs = this.node.position.clone().add(this.dir.clone().multiplyScalar(this.speed * deltaTime));
          this.node.setPosition(newPs);
        };
        _proto.UpdatePoint = function UpdatePoint() {
          this.x = this.node.position.x;
          this.y = this.node.position.y;
        };
        _proto.InitDir = function InitDir() {
          this.dir = this.randomInsideUnitCircle(); //Random.insideUnitCircle.normalized;
        };

        _proto.Init = function Init(size, isMyself) {
          if (isMyself === void 0) {
            isMyself = false;
          }
          this.UpdatePoint();
          this.InitDir();
          this.myself = isMyself;
          if (this.myself) {
            this.node.getComponent(Sprite).color = Color.BLACK;
          }
          // Width = Height = transform.localScale.x;
          this.width = this.node.getComponent(UITransform).width;
          this.height = this.node.getComponent(UITransform).height;
          this.size = size;
        };
        _proto.randomInsideUnitCircle = function randomInsideUnitCircle() {
          var angle = randomRange(1, 360) * 2 * Math.PI; // 随机角度
          var radius = Math.sqrt(Math.random()); // 随机半径，平方根保证均匀分布
          var x = Math.cos(angle) * radius;
          var y = Math.sin(angle) * radius;
          return math.v3(x, y, 0).normalize();
        };
        _proto.Click = function Click(off) {
          var sprite = this.node.getComponent(Sprite);
          sprite.color = off ? Color.RED : Color.WHITE;
        };
        _createClass(GameElement, [{
          key: "rect",
          get: function get() {
            return new QuadTreeRect(this.x, this.y, this.width, this.height);
          }
        }, {
          key: "x",
          get: function get() {
            return this._x;
          },
          set: function set(value) {
            this._x = value;
          }
        }, {
          key: "y",
          get: function get() {
            return this._y;
          },
          set: function set(value) {
            this._y = value;
          }
        }, {
          key: "width",
          get: function get() {
            return this._width;
          },
          set: function set(value) {
            this._width = value;
          }
        }, {
          key: "height",
          get: function get() {
            return this._height;
          },
          set: function set(value) {
            this._height = value;
          }
        }]);
        return GameElement;
      }(Component)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/GameEntity.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Entity.ts'], function (exports) {
  var _inheritsLoose, cclegacy, Entity;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      Entity = module.Entity;
    }],
    execute: function () {
      cclegacy._RF.push({}, "1097aDJjh1GrqGdab6KT6HP", "GameEntity", undefined);

      /**
       * @fileName GameEntity.ts
       * @author zhangqiong
       * @date 2024/12/27 17:06:41"
       * @description
       */
      var GameEntity = exports('GameEntity', /*#__PURE__*/function (_Entity) {
        _inheritsLoose(GameEntity, _Entity);
        function GameEntity() {
          var _this;
          _this = _Entity.call(this) || this;
          _this.maxIndex = 1;
          _this.index = 0;
          _this.isRemoveTime = false;
          _this.entityInfo = void 0;
          _this.targetMovePoint = void 0;
          _this.form = void 0;
          _this.oldMoveX = void 0;
          _this.oldMoveY = void 0;
          return _this;
        }
        var _proto = GameEntity.prototype;
        _proto.nextPlayerFrame = function nextPlayerFrame() {};
        _proto.checkNextFrame = function checkNextFrame() {
          this.index++;
          if (this.index >= this.maxIndex) {
            this.index = 0;
            return true;
          }
          return false;
        };
        _proto.canMove = function canMove() {
          return true;
        };
        _proto.move = function move() {
          if (this.canMove() && this.targetMovePoint) {
            this.oldMoveX = this.targetMovePoint.x;
            this.oldMoveY = this.targetMovePoint.y;
            _Entity.prototype.move.call(this, this.targetMovePoint);
          }
        };
        _proto.check = function check() {};
        return GameEntity;
      }(Entity));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/GameManager.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Player.ts', './SpawnPoint.ts', './TransferDoor.ts', './Npc.ts', './Monster.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, cclegacy, _decorator, Prefab, director, instantiate, Vec3, Component, Player, SpawnPoint, TransferDoor, Npc, Monster;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Prefab = module.Prefab;
      director = module.director;
      instantiate = module.instantiate;
      Vec3 = module.Vec3;
      Component = module.Component;
    }, function (module) {
      Player = module.default;
    }, function (module) {
      SpawnPoint = module.default;
    }, function (module) {
      TransferDoor = module.default;
    }, function (module) {
      Npc = module.Npc;
    }, function (module) {
      Monster = module.Monster;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _class3;
      cclegacy._RF.push({}, "ff55acmKi5LqKnsxhJvYbs3", "GameManager", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var GameManager = exports('GameManager', (_dec = ccclass('GameManager'), _dec2 = property(Prefab), _dec3 = property(Prefab), _dec4 = property(Prefab), _dec5 = property(Prefab), _dec6 = property(Prefab), _dec(_class = (_class2 = (_class3 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(GameManager, _Component);
        function GameManager() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          /**
           * 玩家预制体
           */
          _initializerDefineProperty(_this, "playerPrefab", _descriptor, _assertThisInitialized(_this));
          /**
           * 怪物预制体
           */
          _initializerDefineProperty(_this, "monsterPrefab", _descriptor2, _assertThisInitialized(_this));
          /**
           * npc预制体
           */
          _initializerDefineProperty(_this, "npcPrefab", _descriptor3, _assertThisInitialized(_this));
          /**
           * 出生点预制体
           */
          _initializerDefineProperty(_this, "spawnPointPrefab", _descriptor4, _assertThisInitialized(_this));
          /**
           * 传送点预制体
           */
          _initializerDefineProperty(_this, "transferDoorPrefabs", _descriptor5, _assertThisInitialized(_this));
          return _this;
        }
        var _proto = GameManager.prototype;
        _proto.onLoad = function onLoad() {
          if (!GameManager._instance) {
            GameManager._instance = this;
            director.addPersistRootNode(this.node);
            this.init();
          } else {
            this.node.destroy(); //场景里只能有一个GameManager,有多余的必须销毁
          }
        };

        _proto.getPlayer = function getPlayer() {
          var node = instantiate(this.playerPrefab);
          var player = node.getComponent(Player);
          player.node.position = new Vec3(0, 0, 0);
          player.node.active = true;
          return player;
        }

        /**
         * 获得npc
         * @param npcId 
         * @returns 
         */;
        _proto.getNPC = function getNPC() {
          var npc = instantiate(this.npcPrefab).getComponent(Npc);
          npc.node.active = true;
          npc.node.position = new Vec3(0, 0, 0);
          return npc;
        }

        /**
        * 获得怪物
        * @param monsterId 
        * @returns 
        */;
        _proto.getMonster = function getMonster() {
          var monster = instantiate(this.monsterPrefab).getComponent(Monster);
          monster.node.active = true;
          monster.node.position = new Vec3(0, 0, 0);
          return monster;
        }

        /**
        * 获得出生点资源
        * @returns 
        */;
        _proto.getSpawnPoint = function getSpawnPoint() {
          var spawnPoint = instantiate(this.spawnPointPrefab).getComponent(SpawnPoint);
          spawnPoint.node.active = true;
          spawnPoint.node.position = new Vec3(0, 0, 0);
          return spawnPoint;
        }

        /**
         * 获得传送点资源
         * @returns 
         */;
        _proto.getTransferDoor = function getTransferDoor(type) {
          var index = 0;
          if (type < this.transferDoorPrefabs.length) {
            index = type;
          }
          var transferDoor = instantiate(this.transferDoorPrefabs[index]).getComponent(TransferDoor);
          transferDoor.node.active = true;
          transferDoor.node.position = new Vec3(0, 0, 0);
          return transferDoor;
        };
        _proto.init = function init() {};
        _proto.start = function start() {};
        _proto.update = function update(deltaTime) {};
        _createClass(GameManager, null, [{
          key: "instance",
          get: function get() {
            return GameManager._instance;
          }
        }]);
        return GameManager;
      }(Component), _class3._instance = void 0, _class3), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "playerPrefab", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "monsterPrefab", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "npcPrefab", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "spawnPointPrefab", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "transferDoorPrefabs", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      })), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/GameObject.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _inheritsLoose, _createClass, cclegacy, _decorator, Node, director;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      director = module.director;
    }],
    execute: function () {
      var _dec, _class;
      cclegacy._RF.push({}, "8f9d1AmxnVFlKR6f8Cx6a4k", "GameObject", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var GameObject = exports('GameObject', (_dec = ccclass('GameObject'), _dec(_class = /*#__PURE__*/function (_Node) {
        _inheritsLoose(GameObject, _Node);
        function GameObject() {
          return _Node.apply(this, arguments) || this;
        }
        var _proto = GameObject.prototype;
        _proto.setActive = function setActive(value)
        //用这个设置物体的显示与隐藏会安全点
        {
          if (this.active == value) {
            return;
          }
          this.active = value;
        };
        GameObject.Find = function Find(name) {
          var currentScene = director.getScene();
          return this.searchChildByName(currentScene, name);
        };
        GameObject.searchChildByName = function searchChildByName(node, name) {
          var targetNode = node.getChildByName(name);
          if (targetNode) {
            return targetNode;
          }
          var len = node.children.length;
          var searchNode = null;
          for (var i = 0; i < len; i++) {
            searchNode = node.children[i];
            if (searchNode.name == name) {
              targetNode = searchNode;
              return targetNode;
            } else {
              targetNode = this.searchChildByName(searchNode, name);
              if (targetNode) {
                return targetNode;
              }
            }
          }
          return targetNode;
        };
        GameObject.FindObjectOfType = function FindObjectOfType(type) {
          var t = type;
          var currentScene = director.getScene();
          return currentScene.getComponentInChildren(t);
        };
        GameObject.FindObjectsOfType = function FindObjectsOfType(type) {
          var t = type;
          var currentScene = director.getScene();
          return currentScene.getComponentsInChildren(t);
        };
        _createClass(GameObject, [{
          key: "transform",
          get: function get() {
            var node = this;
            return node;
          }
        }, {
          key: "gameObject",
          get: function get() {
            var node = this;
            return node;
          }
        }]);
        return GameObject;
      }(Node)) || _class));
      Node.prototype["setActive"] = GameObject.prototype.setActive;
      Node.prototype["gameObject"] = GameObject.prototype.gameObject;
      Node.prototype["transform"] = GameObject.prototype.transform;
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/GameOverOrWin.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './BaseView.ts', './ViewRegisterMgr.ts', './PanelEnum.ts', './LayerManager.ts', './ViewConst.ts', './Utils.ts', './ViewManager.ts', './AssetMgr.ts', './Enum3.ts', './TowerLauncher.ts', './TowerSceneMap.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _asyncToGenerator, _regeneratorRuntime, cclegacy, _decorator, SpriteFrame, Sprite, Button, BaseView, registerView, PanelType, LayerType, ViewConst, Utils, viewManager, AssetMgr, ViewShowTypes, TowerLauncher, TowerSceneMap;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _asyncToGenerator = module.asyncToGenerator;
      _regeneratorRuntime = module.regeneratorRuntime;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      SpriteFrame = module.SpriteFrame;
      Sprite = module.Sprite;
      Button = module.Button;
    }, function (module) {
      BaseView = module.default;
    }, function (module) {
      registerView = module.registerView;
    }, function (module) {
      PanelType = module.PanelType;
    }, function (module) {
      LayerType = module.LayerType;
    }, function (module) {
      ViewConst = module.default;
    }, function (module) {
      Utils = module.default;
    }, function (module) {
      viewManager = module.viewManager;
    }, function (module) {
      AssetMgr = module.default;
    }, function (module) {
      ViewShowTypes = module.ViewShowTypes;
    }, function (module) {
      TowerLauncher = module.TowerLauncher;
    }, function (module) {
      TowerSceneMap = module.TowerSceneMap;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;
      cclegacy._RF.push({}, "4085bx6yndKv5TD6BJzY4uB", "GameOverOrWin", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var GameOverOrWin = exports('GameOverOrWin', (_dec = ccclass('GameOverOrWin'), _dec2 = property(SpriteFrame), _dec3 = property(SpriteFrame), _dec(_class = (_class2 = /*#__PURE__*/function (_BaseView) {
        _inheritsLoose(GameOverOrWin, _BaseView);
        function GameOverOrWin() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _BaseView.call.apply(_BaseView, [this].concat(args)) || this;
          _this.bg = void 0;
          _this.tryBtn = void 0;
          _this.nextBtn = void 0;
          _initializerDefineProperty(_this, "winSpriteFrame", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "loseSpriteFrame", _descriptor2, _assertThisInitialized(_this));
          _this.showType = ViewShowTypes.ViewAddition;
          return _this;
        }
        var _proto = GameOverOrWin.prototype;
        _proto.onOpen = /*#__PURE__*/function () {
          var _onOpen = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(fromUI) {
            var isWin,
              lose,
              win,
              spriteframe,
              _args = arguments;
            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) switch (_context.prev = _context.next) {
                case 0:
                  isWin = _args.length <= 1 ? undefined : _args[1];
                  _context.next = 3;
                  return AssetMgr.instance.load("resources://tower/res/NormalMordel/GameOverAndWin/gameover0-hd_1/texture");
                case 3:
                  lose = _context.sent;
                  _context.next = 6;
                  return AssetMgr.instance.load("resources://tower/res/NormalMordel/GameOverAndWin/gameover0-hd_8/texture");
                case 6:
                  win = _context.sent;
                  if (this.bg) {
                    spriteframe = new SpriteFrame();
                    spriteframe.texture = isWin ? win : lose;
                    this.bg.spriteFrame = spriteframe;
                  }
                case 8:
                case "end":
                  return _context.stop();
              }
            }, _callee, this);
          }));
          function onOpen(_x) {
            return _onOpen.apply(this, arguments);
          }
          return onOpen;
        }();
        _proto.init = function init() {
          this.bg = Utils.FindChildByName(this.node, "bg").getComponent(Sprite);
          this.tryBtn = Utils.FindChildByName(this.node, "BtnTry").getComponent(Button);
          this.nextBtn = Utils.FindChildByName(this.node, "BtnContinue").getComponent(Button);
          if (this.tryBtn) {
            this.tryBtn.node.on(Button.EventType.CLICK, this.onClickTryAgain, this);
          }
          if (this.nextBtn) {
            this.nextBtn.node.on(Button.EventType.CLICK, this.onClickNext, this);
          }
        };
        _proto.onClickTryAgain = function onClickTryAgain() {
          // TowerLauncher.instance.onGameStar(TowerLauncher.instance.mapId);
          TowerLauncher.instance.restart();
          TowerSceneMap.instance.setMapId(TowerLauncher.instance.mapId);
          viewManager.close();
        };
        _proto.onClickNext = function onClickNext() {
          TowerLauncher.instance.restart();
          TowerSceneMap.instance.setMapId(TowerLauncher.instance.mapId + 1);
          viewManager.close();
        };
        _proto.start = function start() {};
        _proto.update = function update(deltaTime) {};
        return GameOverOrWin;
      }(BaseView), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "winSpriteFrame", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "loseSpriteFrame", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));
      registerView({
        viewCls: GameOverOrWin,
        id: PanelType.GameOverOrWin,
        layer: LayerType.window,
        prefabPathPrefix: ViewConst.defaultPrefabPathPrefix + "tower/"
      });
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/GameScene.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Scene.ts'], function (exports) {
  var _inheritsLoose, cclegacy, Scene;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      Scene = module.Scene;
    }],
    execute: function () {
      cclegacy._RF.push({}, "43ea6TpugBL16mddOSsKgx/", "GameScene", undefined);

      /**
       * @fileName GameScene.ts
       * @author zhangqiong
       * @date 2024/12/26 16:07:57"
       * @description
       */
      var GameScene = exports('GameScene', /*#__PURE__*/function (_Scene) {
        _inheritsLoose(GameScene, _Scene);
        function GameScene() {
          return _Scene.apply(this, arguments) || this;
        }
        return GameScene;
      }(Scene));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Grid.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Game2048Enum.ts', './AssetMgr.ts'], function (exports) {
  var _inheritsLoose, _asyncToGenerator, _regeneratorRuntime, cclegacy, _decorator, math, Label, Component, Sprite, UITransform, config2048, AssetMgr;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _asyncToGenerator = module.asyncToGenerator;
      _regeneratorRuntime = module.regeneratorRuntime;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      math = module.math;
      Label = module.Label;
      Component = module.Component;
      Sprite = module.Sprite;
      UITransform = module.UITransform;
    }, function (module) {
      config2048 = module.config2048;
    }, function (module) {
      AssetMgr = module.default;
    }],
    execute: function () {
      var _dec, _class;
      cclegacy._RF.push({}, "281eb3SsZ5CUL5yQpaRPi8c", "Grid", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var Grid = exports('Grid', (_dec = ccclass('Grid'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(Grid, _Component);
        function Grid() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.cells = void 0;
          _this.cellNodeArray = void 0;
          _this.size = void 0;
          return _this;
        }
        var _proto = Grid.prototype;
        _proto.setup = function setup(size) {
          this.size = size;
          this.cells = this.empty();
          // this.initNode()
        };

        _proto.initNode = /*#__PURE__*/function () {
          var _initNode = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
            var height, width, i, row, j, node, x, y;
            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) switch (_context.prev = _context.next) {
                case 0:
                  this.cellNodeArray = [];
                  if (!(!this.cells || !this.cells.length)) {
                    _context.next = 3;
                    break;
                  }
                  return _context.abrupt("return");
                case 3:
                  height = config2048.size * config2048.tileHight;
                  width = config2048.size * config2048.tileWidth;
                  i = 0;
                case 6:
                  if (!(i < this.cells.length)) {
                    _context.next = 25;
                    break;
                  }
                  row = this.cells[i];
                  this.cellNodeArray[i] = [];
                  j = 0;
                case 10:
                  if (!(j < row.length)) {
                    _context.next = 22;
                    break;
                  }
                  _context.next = 13;
                  return this.createNode(0);
                case 13:
                  node = _context.sent;
                  x = -width / 2 + config2048.tileWidth / 2 + j * config2048.tileWidth;
                  y = height / 2 - config2048.tileHight / 2 - i * config2048.tileHight;
                  node.setPosition(x, y);
                  node.parent = this.node;
                  this.cellNodeArray[i][j] = node;
                case 19:
                  j++;
                  _context.next = 10;
                  break;
                case 22:
                  i++;
                  _context.next = 6;
                  break;
                case 25:
                case "end":
                  return _context.stop();
              }
            }, _callee, this);
          }));
          function initNode() {
            return _initNode.apply(this, arguments);
          }
          return initNode;
        }()
        /**
         * 获取一个空的棋盘
         * @returns 
         */;

        _proto.empty = function empty() {
          var cells = [];
          for (var i = 0; i < this.size; i++) {
            var row = cells[i] = [];
            for (var j = 0; j < this.size; j++) {
              // tile.parent = this.node;
              row.push(null);
            }
          }
          return cells;
        };
        _proto.randomAvailableCell = function randomAvailableCell() {
          var availableCells = this.availableCells();
          if (availableCells.length) {
            return availableCells[Math.floor(Math.random() * availableCells.length)];
          }
          return null;
        }

        /**
         * 获取可用的格子坐标列表
         * @returns 
         */;
        _proto.availableCells = function availableCells() {
          var cells = [];
          this.foreachCell(function (x, y, tile) {
            if (!tile) {
              cells.push(math.v2(x, y));
            }
          });
          return cells;
        }

        /**
         * 遍历整个棋盘
         * @param callBack 
         */;
        _proto.foreachCell = function foreachCell(callBack) {
          for (var x = 0; x < this.size; x++) {
            for (var y = 0; y < this.size; y++) {
              if (callBack) {
                callBack(x, y, this.cells[x][y]);
              }
            }
          }
        }

        /**
         * 检测格子是否是可用状态
         * @param vector 
         * @returns 
         */;
        _proto.checkCellAvailable = function checkCellAvailable(vector) {
          return !this.getCellContent(vector);
        }

        /**
         * 检测格子是否已经被占领
         * @param vector 
         * @returns 
         */;
        _proto.checkCellOccupied = function checkCellOccupied(vector) {
          return !!this.getCellContent(vector);
        }

        /**
         * 检测棋盘是否有可用格子
         * @returns 
         */;
        _proto.checkCellsAvailable = function checkCellsAvailable() {
          return !!this.availableCells().length;
        };
        /**
         * 插入一个格子块
         * @param tile 
         */
        _proto.insertTile = function insertTile(tile, pos) {
          // const tp: Tile = tile.getComponent(Tile);
          var x = pos ? pos.x : tile.positionX;
          var y = pos ? pos.y : tile.positionY;
          this.cells[x][y] = tile;
        };
        /**
         * 移除一个格子块
         * @param tile 
         */
        _proto.removeTile = function removeTile(tile, pos) {
          if (!tile && !pos) {
            console.warn("移除格子时即没有传入格子对象也没有传位置。两个参数至少传一个");
            return;
          }
          var x = pos ? pos.x : tile.positionX;
          var y = pos ? pos.y : tile.positionY;
          this.cells[x][y] = null;
        }

        /**
         * 根据坐标获取格子内容
         * @param vector 
         * @returns 
         */;
        _proto.getCellContent = function getCellContent(vector) {
          if (this.withinBounds(vector)) {
            return this.cells[vector.x][vector.y];
          }
          return null;
        }

        // public getCellTile(vector: Vec2): Tile {
        //     const node: Node = this.getCellContent(vector);
        //     if (!node) {
        //         return null;
        //     }
        //     return node.getComponent(Tile);
        // }

        /**
         * 获取格子值
         * @param vector 
         * @returns 
         */;
        _proto.getCellValue = function getCellValue(vector) {
          var node = this.getCellContent(vector);
          if (!node) {
            return 0;
          }
          return node.value;
        }

        /**
         * 检查坐标是否在区间范围内
         * @param vector 
         * @returns 
         */;
        _proto.withinBounds = function withinBounds(vector) {
          return vector.x >= 0 && vector.x < this.size && vector.y >= 0 && vector.y < this.size;
        };
        _proto.serialize = function serialize() {
          var cellState = [];
          for (var x = 0; x < this.size; x++) {
            var row = cellState[x] = [];
            for (var y = 0; y < this.size; y++) {
              var _tile = this.cells[x][y];
              if (_tile) {
                row.push(_tile.serialize());
              } else {
                row.push(null);
              }
            }
          }
          return {
            size: this.size,
            cells: cellState
          };
        };
        _proto.printGrid = function printGrid() {
          var str = "";
          for (var x = 0; x < this.size; x++) {
            var lineValues = [];
            for (var y = 0; y < this.size; y++) {
              var value = this.getCellValue(math.v2(x, y));
              lineValues.push(value);
            }
            str += lineValues.join(",") + "\n";
          }
          console.log(str);
        };
        _proto.render = function render() {
          for (var i = 0; i < this.cells.length; i++) {
            var cells = this.cells[i];
            for (var j = 0; j < cells.length; j++) {
              var node = this.cellNodeArray[i][j];
              this.setNodeValue(node, this.getCellValue(math.v2(i, j)));
            }
          }
        };
        _proto.createNode = /*#__PURE__*/function () {
          var _createNode = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(value) {
            var path, node, lableNode, spNode, sp;
            return _regeneratorRuntime().wrap(function _callee2$(_context2) {
              while (1) switch (_context2.prev = _context2.next) {
                case 0:
                  path = "resources://prefabs/Title";
                  _context2.next = 3;
                  return AssetMgr.instance.createPrefab(path);
                case 3:
                  node = _context2.sent;
                  if (node) {
                    _context2.next = 6;
                    break;
                  }
                  return _context2.abrupt("return", null);
                case 6:
                  lableNode = node.getChildByName("Label");
                  if (lableNode) {
                    lableNode.getComponent(Label).string = "" + value;
                  }
                  spNode = node.getChildByName("Ghost");
                  if (spNode) {
                    sp = spNode.getComponent(Sprite);
                    sp.sizeMode = Sprite.SizeMode.CUSTOM;
                    sp.getComponent(UITransform).setContentSize(config2048.tileWidth, config2048.tileHight);
                  }
                  return _context2.abrupt("return", node);
                case 11:
                case "end":
                  return _context2.stop();
              }
            }, _callee2);
          }));
          function createNode(_x) {
            return _createNode.apply(this, arguments);
          }
          return createNode;
        }();
        _proto.setNodeValue = function setNodeValue(node, value) {
          if (!node) {
            return;
          }
          var lableNode = node.getChildByName("Label");
          if (lableNode) {
            lableNode.getComponent(Label).string = value > 0 ? "" + value : "";
          }
        };
        _proto.onLoad = function onLoad() {
          this.cells = [];
        };
        _proto.start = function start() {};
        _proto.update = function update(deltaTime) {};
        return Grid;
      }(Component)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Handler.ts", ['cc', './Pool.ts'], function (exports) {
  var cclegacy, Pool;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      Pool = module.Pool;
    }],
    execute: function () {
      cclegacy._RF.push({}, "42571OGuuRIwqH68/X8xnMc", "Handler", undefined);
      // import { Pool } from "./Pool";

      /**
       * @fileName Handler.ts
       * @author zhangqiong
       * @date 2024/12/25 20:41:58"
       * @description
       */
      var Handler = exports('Handler', /*#__PURE__*/function () {
        function Handler(fun, thisObj, param) {
          if (fun === void 0) {
            fun = null;
          }
          if (thisObj === void 0) {
            thisObj = null;
          }
          this.param = void 0;
          this.paramList = void 0;
          this.fun = void 0;
          this.thisObj = void 0;
          this.inPool = void 0;
          this.autoRelease = void 0;
          if (fun != null) {
            this.init(fun, thisObj, param);
          }
        }
        var _proto = Handler.prototype;
        _proto.init = function init(fun, thisObj, param) {
          this.fun = fun;
          this.param = param;
          this.thisObj = thisObj;
        };
        _proto.destroy = function destroy() {
          this.autoRelease = false;
          this.param = null;
          this.paramList = null;
          this.fun = null;
          this.thisObj = null;
        };
        Handler.create = function create(fun, thisObj, param, autoRelesea) {
          if (autoRelesea === void 0) {
            autoRelesea = false;
          }
          if (this.pool == null) this.pool = new Pool(Handler, 1000);

          //添加垃圾代码

          var callBack = this.pool.create();
          callBack.autoRelease = autoRelesea;
          callBack.inPool = false;
          callBack.init(fun, thisObj, param);
          return callBack;
        };
        Handler.relesea = function relesea(callBack) {
          //return;
          callBack.destroy();
          callBack.inPool = true;
          callBack.autoRelease = false;
          this.pool.release(callBack);
        };
        _proto.execute = function execute() {
          if (!this.fun) return;
          // var a: any[] = [];
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          if (this.param != null) {
            //附带的参数加在最前面
            args.unshift(this.param);
          }

          //添加垃圾代码

          var value = this.fun.apply(this.thisObj, args);
          //进行回调
          if (this.autoRelease) {
            if (this.inPool) throw new Error("需要多次调用CallBack的execute方法的，不能设置为自动释放autoRelese");
            this.destroy();
            Handler.relesea(this);
          }
          return value;
        };
        return Handler;
      }());
      Handler.pool = void 0;
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/HashMap.ts", ['cc'], function (exports) {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "d23850qKnNKp7VL8QWfgUXE", "HashMap", undefined);
      var HashMap = exports('HashMap', /*#__PURE__*/function () {
        function HashMap() {
          this.isDestroy = false;
          /** 长度 **/
          this._length = void 0;
          this.obj = void 0;
          this.clear();
        }
        var _proto = HashMap.prototype;
        _proto.clear = function clear() {
          this.obj = {};
          this._length = 0;
        };
        _proto.size = function size() {
          return this._length;
        };
        _proto.getContainer = function getContainer() {
          return this.obj;
        };
        _proto.onDestroy = function onDestroy(obj) {
          var keyNames = ["destroy", "dispose"];
          if (obj instanceof Array) {
            for (var i = 0; i < obj.length; i++) {
              this.destroy(obj[i]);
            }
            return;
          }
          for (var _i = 0; _i < keyNames.length; _i++) {
            if (obj[keyNames[_i]]) {
              obj[keyNames[_i]]();
              return;
            }
          }
        };
        _proto.destroy = function destroy(o) {
          this.isDestroy = true;
          for (var _key in this.obj) {
            this.onDestroy(this.obj[_key]);
          }
          this.obj = null;
        };
        _proto.isEmpty = function isEmpty() {
          return this._length == 0;
        };
        _proto.get = function get(key) {
          return this.obj[key];
        };
        _proto.put = function put(key, value) {
          if (this.obj[key] == null) {
            this._length++;
          }
          this.obj[key] = value;
        };
        _proto.remove = function remove(key) {
          var temp = this.obj[key];
          if (temp != null) {
            delete this.obj[key];
            this._length--;
          }
          return temp;
        };
        _proto.hasKey = function hasKey(key) {
          return this.obj[key] != null;
        };
        _proto.hasValue = function hasValue(value) {
          for (var _key2 in this.obj) {
            if (this.obj[_key2] == value) {
              return true;
            }
          }
          return false;
        };
        _proto.keys = function keys() {
          var ary = [];
          if (this._length != 0) {
            for (var _key3 in this.obj) {
              ary.push(_key3);
            }
            return ary;
          }
          return ary;
        };
        _proto.values = function values() {
          var ary = [];
          if (this._length != 0) {
            for (var _key4 in this.obj) {
              ary.push(this.obj[_key4]);
            }
            return ary;
          }
          return ary;
        };
        _proto.numKeys = function numKeys() {
          var ary = [];
          if (this._length != 0) {
            for (var _key5 in this.obj) {
              ary.push(Number(_key5));
            }
            return ary;
          }
          return ary;
        };
        _proto.forEach = function forEach(fun, thisObj) {
          for (var _key6 in this.obj) {
            fun.call(thisObj, _key6, this.obj[_key6]);
          }
        };
        return HashMap;
      }());
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/HeadBar.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Utils.ts'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, ProgressBar, Label, Component, Utils;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      ProgressBar = module.ProgressBar;
      Label = module.Label;
      Component = module.Component;
    }, function (module) {
      Utils = module.default;
    }],
    execute: function () {
      var _dec, _class;
      cclegacy._RF.push({}, "1d25e3coJ1HZKDDPRjZglvJ", "HeadBar", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var HeadBar = exports('HeadBar', (_dec = ccclass('HeadBar'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(HeadBar, _Component);
        function HeadBar() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.hpPro = void 0;
          _this.mpPro = void 0;
          _this.nameLabel = void 0;
          return _this;
        }
        var _proto = HeadBar.prototype;
        _proto.onLoad = function onLoad() {
          this.hpPro = Utils.FindChildByName(this.node, "hp").getComponent(ProgressBar);
          this.mpPro = Utils.FindChildByName(this.node, "mp").getComponent(ProgressBar);
          this.nameLabel = Utils.FindChildByName(this.node, "name").getComponent(Label);
        };
        _proto.start = function start() {};
        _proto.setName = function setName(name) {
          this.nameLabel.string = name;
        };
        _proto.setData = function setData(hero) {
          this.updateHp(hero.hp / hero.maxHp);
          this.updateMp(hero.mp / hero.maxMp);
        };
        _proto.updateHp = function updateHp(progress) {
          this.hpPro.progress = progress;
        };
        _proto.updateMp = function updateMp(progress) {
          this.mpPro.progress = progress;
        };
        _proto.update = function update(deltaTime) {};
        return HeadBar;
      }(Component)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/HeroConfigVo.ts", ['cc'], function (exports) {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "07a15b+27VNgIIpv+KDlv5t", "HeroConfigVo", undefined);
      /**
       * @fileName HeroConfigVo.ts
       * @author zhangqiong
       * @date 2024/12/26 20:05:23"
       * @description
       */
      var HeroConfigVo = exports('HeroConfigVo', function HeroConfigVo() {
        this.spineId = void 0;
        this.maxHp = void 0;
        this.maxMp = void 0;
        this.comp = void 0;
        this.layer = void 0;
        this.site = void 0;
        this.speed = void 0;
        this.skillIds = void 0;
      });
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/IRoadSeeker.ts", ['cc'], function () {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "99f90Ka5M5NLpeUVKN1UMRB", "IRoadSeeker", undefined);
      /**
       * 寻路接口
       * @author 落日故人 QQ 583051842
       * 
       */
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Joystick.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, cclegacy, _decorator, Node, Vec2, Vec3, math, NodeEventType, Graphics, Color, Component;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Vec2 = module.Vec2;
      Vec3 = module.Vec3;
      math = module.math;
      NodeEventType = module.NodeEventType;
      Graphics = module.Graphics;
      Color = module.Color;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3;
      cclegacy._RF.push({}, "6c02fb63zZKEI3rttdTkFsP", "Joystick", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var Joystick = exports('Joystick', (_dec = ccclass('Joystick'), _dec2 = property(Node), _dec3 = property(Node), _dec4 = property(Node), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(Joystick, _Component);
        function Joystick() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "bg", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "bar", _descriptor2, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "target", _descriptor3, _assertThisInitialized(_this));
          _this.isDragging = false;
          _this.dragOffset = new Vec2();
          _this.startTouchPos = new Vec3();
          _this.centerPosition = math.v3(0, 0);
          _this.joystickRadius = void 0;
          _this.currentDirection = new Vec3();
          return _this;
        }
        var _proto = Joystick.prototype;
        _proto.start = function start() {
          this.joystickRadius = 100; //this.bg.getComponent(UITransform).width / 2;
          this.drawBg();
          this.drawBar();
          this.bar.on(NodeEventType.TOUCH_START, this.onMouseDown, this);
          this.bar.on(NodeEventType.TOUCH_MOVE, this.onMouseMove, this);
          this.bar.on(NodeEventType.TOUCH_END, this.onMouseUp, this);
          this.bar.on(NodeEventType.TOUCH_CANCEL, this.onMouseUp, this);
        };
        _proto.drawBg = function drawBg() {
          var graphics = this.bg.getComponent(Graphics);
          graphics.clear();
          graphics.fillColor = Color.WHITE;
          graphics.circle(0, 0, this.joystickRadius);
          graphics.fill();
        };
        _proto.drawBar = function drawBar() {
          var graphics = this.bar.getComponent(Graphics);
          graphics.clear();
          graphics.fillColor = Color.RED;
          graphics.circle(0, 0, 30);
          graphics.fill();
        };
        _proto.onMouseDown = function onMouseDown(event) {
          this.isDragging = true;
          var locationInNode = event.getLocation();
          this.startTouchPos.set(locationInNode.x, locationInNode.y, 0);
          this.updateJoystickPosition(locationInNode);
          // this.dragOffset.set(locationInNode.x - this.node.position.x, locationInNode.y - this.node.position.y);
        };

        _proto.onMouseMove = function onMouseMove(event) {
          var touchPos = event.getLocation();
          this.updateJoystickPosition(touchPos);
        };
        _proto.updateJoystickPosition = function updateJoystickPosition(touchPos) {
          var deltaX = touchPos.x - this.startTouchPos.x;
          var deltaY = touchPos.y - this.startTouchPos.y;
          var distance = Math.sqrt(deltaX * deltaX + deltaY * deltaY);

          // 如果距离超过了摇杆的半径，限制在边界内
          if (distance > this.joystickRadius) {
            var angle = Math.atan2(deltaY, deltaX);
            var newX = this.joystickRadius * Math.cos(angle);
            var newY = this.joystickRadius * Math.sin(angle);
            this.bar.setPosition(newX, newY, 0);
          } else {
            this.bar.setPosition(deltaX, deltaY, 0);
          }

          // 计算摇杆输入的方向
          this.currentDirection.set(deltaX / this.joystickRadius, deltaY / this.joystickRadius, 0);
        };
        _proto.onMouseUp = function onMouseUp(event) {
          this.isDragging = false;
          this.bar.setPosition(0, 0, 0);
          this.currentDirection.set(0, 0, 0);
        };
        _proto.update = function update(deltaTime) {
          if (this.currentDirection.length() != 0 && this.target) {
            this.target.setPosition(this.target.position.clone().add(this.currentDirection.clone().multiplyScalar(200 * deltaTime)));
          }
        };
        _createClass(Joystick, [{
          key: "direction",
          get: function get() {
            var centerPosition = this.centerPosition.clone();
            var barPosition = this.bar.position.clone();
            var direction = barPosition.subtract(centerPosition);
            return direction;
          }
        }]);
        return Joystick;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "bg", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "bar", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "target", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/LayerManager.ts", ['cc'], function (exports) {
  var cclegacy, UITransform, Node, Widget;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      UITransform = module.UITransform;
      Node = module.Node;
      Widget = module.Widget;
    }],
    execute: function () {
      cclegacy._RF.push({}, "769aa/Wn4ZEkZmhPzTBV/Nk", "LayerManager", undefined);
      var LayerType = exports('LayerType', /*#__PURE__*/function (LayerType) {
        LayerType[LayerType["none"] = 0] = "none";
        LayerType[LayerType["view"] = 1] = "view";
        LayerType[LayerType["window"] = 2] = "window";
        LayerType[LayerType["end"] = 3] = "end";
        return LayerType;
      }({}));
      var LayerManager = exports('default', /*#__PURE__*/function () {
        function LayerManager() {}
        LayerManager.init = function init(root) {
          if (this.inited) {
            return;
          }
          this.layers = {};
          this.inited = true;
          this.root = root;
          var rootTr = this.root.getComponent(UITransform);
          if (!rootTr) {
            rootTr = this.root.addComponent(UITransform);
          }
          this.width = rootTr.width || 750;
          this.height = rootTr.height || 1334;
          for (var type = 0; type < LayerType.end; type++) {
            if (type != LayerType.none) {
              this.createLayer(type);
            }
          }
        };
        LayerManager.createLayer = function createLayer(layer, parent) {
          var node = new Node();
          node.name = "layer_" + layer;
          if (!parent) parent = this.root;
          var uiTr = node.getComponent(UITransform);
          if (!uiTr) {
            uiTr = node.addComponent(UITransform);
          }
          uiTr.setContentSize(this.width, this.height);
          var widget = node.addComponent(Widget);
          widget.left = widget.right = widget.top = widget.bottom = 0;
          widget.target = parent;
          node.parent = parent;
          widget.updateAlignment();
          this.layers[layer] = node;
          return node;
        };
        LayerManager.getLayer = function getLayer(layer) {
          return this.layers[layer];
        };
        return LayerManager;
      }());
      LayerManager.inited = false;
      LayerManager.layers = void 0;
      LayerManager.width = void 0;
      LayerManager.height = void 0;
      LayerManager.root = void 0;
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/main", ['./AreaType.ts', './ArrayUtils.ts', './AssetMgr.ts', './DestroyUtils.ts', './Enum3.ts', './Handler.ts', './Joystick.ts', './MathUtils.ts', './NodeFactory.ts', './Pool.ts', './QuadTree.ts', './ScreenAdaptation.ts', './SpineSkeleton.ts', './StringUtils.ts', './TimeUtils.ts', './Touch.ts', './Utils.ts', './HashMap.ts', './Game2048.ts', './Game2048Enum.ts', './Grid.ts', './Tile.ts', './Background.ts', './Block.ts', './Main.ts', './Render.ts', './config.ts', './enum.ts', './AFKGame.ts', './Containers.ts', './GameConst.ts', './GameScene.ts', './Scene.ts', './Unit.ts', './DepthHelper.ts', './Entity.ts', './FightConfig.ts', './FightMgr.ts', './FightRoleEntity.ts', './FightUtil.ts', './GameEntity.ts', './RoleEntity.ts', './ActionInfo.ts', './EntityInfo.ts', './FightHeroInfo.ts', './FightSkillGroupInfo.ts', './FightSkillInfo.ts', './FindTargetInfo.ts', './AFKResultPanel.ts', './HeadBar.ts', './AFKGameConfigVo.ts', './HeroConfigVo.ts', './SkillConfigVo.ts', './GameElement.ts', './QuadTreeTest.ts', './Behaviour.ts', './EditObjData.ts', './Enum2.ts', './GameCamera.ts', './GameManager.ts', './GameObject.ts', './IRoadSeeker.ts', './MainTest.ts', './RPGConfig.ts', './RPGLauncher.ts', './RPGPanel.ts', './RoleEntity2.ts', './ScenceMap.ts', './SpineTest.ts', './Transform.ts', './Character.ts', './Monster.ts', './Npc.ts', './Player.ts', './MapParams.ts', './EntityLayer.ts', './MapLayer.ts', './AStarRoadSeeker.ts', './BinaryTreeNode.ts', './MapData.ts', './MapRoadUtils.ts', './PathFindingAgent.ts', './RoadNode.ts', './MapRoad45Angle.ts', './MapRoad90Angle.ts', './SpawnPoint.ts', './TransferDoor.ts', './SceneBase.ts', './AnimationPath.ts', './BezierPart.ts', './Boss.ts', './Bullet.ts', './BulletManager.ts', './EffectManager.ts', './Enemy.ts', './GameOverOrWin.ts', './RemoveOrUpLevel.ts', './SelectTowerBuild.ts', './Test.ts', './TouchMove.ts', './TowerCharacter.ts', './TowerConfig.ts', './TowerConst.ts', './TowerGameScene.ts', './TowerGameUIManager.ts', './TowerLauncher.ts', './TowerMapLayer.ts', './TowerSceneMap.ts', './EditPlot.ts', './TowerBuildInfo.ts', './TowerDataDTO.ts', './TowerMapDTO.ts', './FBMoveBg.ts', './FBird.ts', './FCoin.ts', './FairyBirdConst.ts', './FairyBirdGameManger.ts', './FairyBirdPipe.ts', './FairyBirdPipeManger.ts', './FairybirdMainPanel.ts', './MainPanel.ts', './BaseView.ts', './LayerManager.ts', './PanelEnum.ts', './UIExample.ts', './ViewConst.ts', './ViewManager.ts', './ViewRegisterMgr.ts', './ViewRegisterVo.ts'], function () {
  return {
    setters: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null],
    execute: function () {}
  };
});

System.register("chunks:///_virtual/Main.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './enum.ts', './config.ts', './Render.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _asyncToGenerator, _regeneratorRuntime, cclegacy, _decorator, Node, math, Label, Button, input, Input, KeyCode, Component, ItemColor, config, Render;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _asyncToGenerator = module.asyncToGenerator;
      _regeneratorRuntime = module.regeneratorRuntime;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      math = module.math;
      Label = module.Label;
      Button = module.Button;
      input = module.input;
      Input = module.Input;
      KeyCode = module.KeyCode;
      Component = module.Component;
    }, function (module) {
      ItemColor = module.ItemColor;
    }, function (module) {
      config = module.config;
    }, function (module) {
      Render = module.Render;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;
      cclegacy._RF.push({}, "da480qVdqFNTZhxH7gDX6/U", "Main", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var Main = exports('Main', (_dec = ccclass('Main'), _dec2 = property(Node), _dec3 = property(Node), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(Main, _Component);
        function Main() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "startPanel", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "endPanel", _descriptor2, _assertThisInitialized(_this));
          /** 二维数组 */
          _this.dataArray = [];
          _this.eliminateVec2s = [];
          /** 当前形状 */
          _this.currentShape = {
            center: math.v2(0, 0),
            index: 0,
            color: ItemColor.NULL
          };
          /** 计时变量 */
          _this.time = 0;
          /** 游戏进行开关 */
          _this.isOpen = false;
          _this.score = 0;
          _this.scoreLabel = void 0;
          _this.startBtn = void 0;
          _this.pauseBtn = void 0;
          _this.restartBtn = void 0;
          _this._isPause = false;
          return _this;
        }
        var _proto = Main.prototype;
        _proto.findChild = function findChild(name, startNode) {
          startNode = startNode ? startNode : this.node;
          var childs = startNode.children;
          for (var index = 0; index < childs.length; index++) {
            var element = childs[index];
            if (element.name == name) {
              return element;
            }
            var result = this.findChild(name, element);
            if (result != null) {
              return result;
            }
          }
          return null;
        };
        _proto.onLoad = function onLoad() {
          var cBlockWidth = Math.floor(config.sceneWidth / config.col);
          var cBlockHight = Math.floor(config.sceneHeight / config.row);
          config.blockWidth = config.blockHeight = Math.min(cBlockHight, cBlockWidth);
          this.pauseBtn = this.findChild("pause");
          this.restartBtn = this.findChild("restartBtn");
          this.startBtn = this.findChild("startBtn");
          var labelNode = this.findChild("score");
          if (labelNode) {
            this.scoreLabel = labelNode.getComponent(Label);
          }
          this.eliminateVec2s = [];
          this.showEndPanel(false);
          this.updateScore();
          this.pauseBtn.on(Button.EventType.CLICK, this.onClickPause, this);
          this.restartBtn.on(Button.EventType.CLICK, this.onClickRestart, this);

          // this.node.on(Input.EventType.KEY_DOWN, this.onKeyDown, this);
          input.on(Input.EventType.KEY_DOWN, this.onKeyDown, this);
          this.startBtn.on(Button.EventType.CLICK, this.gameStart, this);
        };
        _proto.showEndPanel = function showEndPanel(v, isPause) {
          if (this.endPanel) {
            this.endPanel.active = v;
          }
          this._isPause = !!isPause;
        };
        _proto.updateScore = function updateScore() {
          if (this.scoreLabel) {
            this.scoreLabel.string = "" + this.score;
          }
        };
        _proto.onKeyDown = function onKeyDown(event) {
          if (!this.isOpen) {
            console.warn("游戏未开始");
            return;
          }
          switch (event.keyCode) {
            case KeyCode.ARROW_LEFT:
              this.changeCurrentShapePos(math.v2(0, -1));
              break;
            case KeyCode.ARROW_RIGHT:
              this.changeCurrentShapePos(math.v2(0, 1));
              break;
            case KeyCode.ARROW_DOWN:
              // 添加快速下落
              // this.changeCurrentShapePos(math.v2(1, 0))
              this.fastDown();
              break;
            case KeyCode.ARROW_UP:
              this.changeCurrentShapeIndex();
              break;
          }
        };
        _proto.onClickPause = function onClickPause() {
          this.isOpen = false;
          this.showEndPanel(true, true);
        };
        _proto.onClickRestart = function onClickRestart() {
          if (this._isPause) {
            this.isOpen = true;
            this.showEndPanel(false, false);
          } else {
            this.gameStart();
            this.showEndPanel(false, false);
          }
        };
        _proto.start = function start() {
          // this.gameStart();
        };
        _proto.gameStart = function gameStart() {
          if (this.isOpen) {
            console.warn("游戏正在运行中！！！");
            return;
          }
          if (this.startPanel) {
            this.startPanel.active = false;
          }
          this.getComponent(Render).init();
          this.initData();
          this.render();
          this.randomOneShape();
          this.isOpen = true;
        };
        _proto.initData = function initData() {
          this.dataArray = [];
          for (var i = 0; i < config.row; i++) {
            this.dataArray[i] = [];
            for (var j = 0; j < config.col; j++) {
              this.dataArray[i][j] = ItemColor.NULL;
            }
          }
        };
        _proto.getRandom = function getRandom(min, max) {
          return Math.floor(min + max * Math.random());
        }

        /** 操作变形逻辑 */;
        _proto.changeCurrentShapeIndex = function changeCurrentShapeIndex() {
          this.clearCurrentData(this.currentShape);
          this.currentShape.index += this.currentShape.index === 3 ? -3 : 1;
          if (this.checkCurrentShapeData(this.currentShape)) {
            this.setCurrentData(this.currentShape);
            // cc.find(NodeUrl.Music).emit(MusicEvent.ACTION)
          } else {
            console.warn('操作不合理');
            this.currentShape.index += this.currentShape.index === 0 ? 3 : -1;
          }
        }

        /** 操作逻辑 */;
        _proto.changeCurrentShapePos = function changeCurrentShapePos(v) {
          this.clearCurrentData(this.currentShape);
          this.currentShape.center.x += v.x;
          this.currentShape.center.y += v.y;
          if (this.checkCurrentShapeData(this.currentShape)) {
            this.setCurrentData(this.currentShape);
          } else {
            console.warn('操作不合理');
            this.currentShape.center.x -= v.x;
            this.currentShape.center.y -= v.y;
          }
        };
        _proto.fastDown = /*#__PURE__*/function () {
          var _fastDown = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
            var i;
            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) switch (_context.prev = _context.next) {
                case 0:
                  this.clearCurrentData(this.currentShape);
                  i = this.currentShape.center.x;
                case 2:
                  if (!(i < config.row)) {
                    _context.next = 17;
                    break;
                  }
                  this.currentShape.center.x = i;
                  if (!this.checkCurrentShapeData(this.currentShape)) {
                    _context.next = 7;
                    break;
                  }
                  _context.next = 14;
                  break;
                case 7:
                  console.warn("无法移动。下一个");
                  this.currentShape.center.x = i - 1;
                  this.setCurrentData(this.currentShape);
                  _context.next = 12;
                  return this.checkLines();
                case 12:
                  this.randomOneShape();
                  return _context.abrupt("break", 17);
                case 14:
                  i++;
                  _context.next = 2;
                  break;
                case 17:
                case "end":
                  return _context.stop();
              }
            }, _callee, this);
          }));
          function fastDown() {
            return _fastDown.apply(this, arguments);
          }
          return fastDown;
        }();
        _proto.getCurrentShapeIndexData = function getCurrentShapeIndexData(currentShape) {
          var color = currentShape.color,
            index = currentShape.index;
          var shape = "shape" + color;
          var shapeData = config[shape];
          if (!shapeData) {
            return [];
          }
          var shapeDatas = shapeData[index];
          return shapeDatas || [];
        };
        _proto.randomOneShape = function randomOneShape() {
          var _this2 = this;
          this.currentShape.center.set(config.startPos);
          this.currentShape.color = this.getRandom(1, 7);
          this.currentShape.index = Math.floor(4 * Math.random());
          if (this.checkCurrentShapeData(this.currentShape)) {
            this.setCurrentData(this.currentShape);
          } else {
            this.isOpen = false;
            this.setCurrentData(this.currentShape);
            // cc.find(NodeUrl.Music).emit(MusicEvent.GAME_OVER)
            this.scheduleOnce(function () {
              // 显示游戏开始菜单
              _this2.showEndPanel(true, false);
            }, 2);
          }
        };
        _proto.setCurrentData = function setCurrentData(currentShape) {
          var center = currentShape.center,
            color = currentShape.color;
          var shapeDatas = this.getCurrentShapeIndexData(currentShape);
          for (var i = 0; i < shapeDatas.length; i++) {
            var ele = shapeDatas[i];
            var row = center.x + ele.x;
            var col = center.y + ele.y;
            this.dataArray[row][col] = color;
          }
          this.render();
        }

        /** 根据当前中心点和形状类型清除数据 */;
        _proto.clearCurrentData = function clearCurrentData(currentShape) {
          var center = currentShape.center,
            color = currentShape.color,
            index = currentShape.index;
          var shape = "shape" + color;
          var shapeData = config[shape];
          var datas = shapeData[index];
          for (var i = 0; i < datas.length; i++) {
            var ele = datas[i];
            var row = center.x + ele.x;
            var col = center.y + ele.y;
            this.dataArray[row][col] = ItemColor.NULL;
          }
        };
        _proto.render = function render() {
          var render = this.getComponent(Render);
          if (render) {
            render.render(this.dataArray);
          }
        };
        _proto.checkCurrentShapeData = function checkCurrentShapeData(currentShape) {
          var center = currentShape.center;
          var shapeIndexDatas = this.getCurrentShapeIndexData(currentShape);
          for (var i = 0; i < shapeIndexDatas.length; i++) {
            var v2 = shapeIndexDatas[i];
            var row = center.x + v2.x;
            if (row < 0 || row >= config.row) {
              return false;
            }
            var col = center.y + v2.y;
            if (col < 0 || col >= config.col) {
              return false;
            }
            if (this.dataArray[row][col] !== ItemColor.NULL) {
              return false;
            }
          }
          return true;
        };
        _proto.autoDown = /*#__PURE__*/function () {
          var _autoDown = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {
            return _regeneratorRuntime().wrap(function _callee2$(_context2) {
              while (1) switch (_context2.prev = _context2.next) {
                case 0:
                  this.clearCurrentData(this.currentShape);
                  this.currentShape.center.x += 1;
                  if (!this.checkCurrentShapeData(this.currentShape)) {
                    _context2.next = 6;
                    break;
                  }
                  this.setCurrentData(this.currentShape);
                  _context2.next = 12;
                  break;
                case 6:
                  console.warn("无法移动。下一个");
                  this.currentShape.center.x -= 1;
                  this.setCurrentData(this.currentShape);
                  _context2.next = 11;
                  return this.checkLines();
                case 11:
                  this.randomOneShape();
                case 12:
                case "end":
                  return _context2.stop();
              }
            }, _callee2, this);
          }));
          function autoDown() {
            return _autoDown.apply(this, arguments);
          }
          return autoDown;
        }();
        _proto.checkLines = /*#__PURE__*/function () {
          var _checkLines = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {
            var _this3 = this;
            var row, isFull, i, _i, p, j, render;
            return _regeneratorRuntime().wrap(function _callee3$(_context3) {
              while (1) switch (_context3.prev = _context3.next) {
                case 0:
                  row = config.row - 1;
                  this.eliminateVec2s = [];
                  while (row !== 0) {
                    isFull = true;
                    for (i = 0; i < config.col; i++) {
                      if (this.dataArray[row][i] === ItemColor.NULL) {
                        isFull = false;
                      }
                    }
                    if (isFull) {
                      for (_i = 0; _i < config.col; _i++) {
                        this.eliminateVec2s.push(math.v2(row, _i));
                      }
                      for (p = row; p > 0; p--) {
                        for (j = 0; j < config.col; j++) {
                          this.dataArray[p][j] = this.dataArray[p - 1][j];
                        }
                      }
                      this.score += 1;
                    } else {
                      row--;
                    }
                  }
                  render = this.getComponent(Render);
                  if (render && this.eliminateVec2s.length > 0) {
                    render.playEliminateEff(this.eliminateVec2s).then(function () {
                      _this3.updateScore();
                    });
                  } else {
                    this.updateScore();
                  }
                case 6:
                case "end":
                  return _context3.stop();
              }
            }, _callee3, this);
          }));
          function checkLines() {
            return _checkLines.apply(this, arguments);
          }
          return checkLines;
        }();
        _proto.update = function update(deltaTime) {
          if (!this.isOpen) {
            return;
          }
          this.time += deltaTime;
          if (this.time > 1) {
            this.time = 0;
            // 下落逻辑
            this.autoDown();
          }
        };
        _proto.printDataArray = function printDataArray() {
          var str = "";
          for (var i = 0; i < this.dataArray.length; i++) {
            var cols = this.dataArray[i];
            str += cols.join(",") + "\n";
            // for (let j = 0; j < cols.length; j++) {
            //     const v = cols[j];

            // }
          }

          console.log(str);
        };
        return Main;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "startPanel", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return undefined;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "endPanel", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return undefined;
        }
      })), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/MainPanel.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './BaseView.ts', './ViewRegisterMgr.ts', './PanelEnum.ts', './LayerManager.ts', './Utils.ts', './ViewConst.ts', './ViewManager.ts', './TowerGameScene.ts', './FairybirdMainPanel.ts', './AFKGame.ts'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, NodeEventType, BaseView, registerView, PanelType, LayerType, Utils, ViewConst, viewManager, TowerGameScene, FairybirdMainPanel, AFKGame;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      NodeEventType = module.NodeEventType;
    }, function (module) {
      BaseView = module.default;
    }, function (module) {
      registerView = module.registerView;
    }, function (module) {
      PanelType = module.PanelType;
    }, function (module) {
      LayerType = module.LayerType;
    }, function (module) {
      Utils = module.default;
    }, function (module) {
      ViewConst = module.default;
    }, function (module) {
      viewManager = module.viewManager;
    }, function (module) {
      TowerGameScene = module.TowerGameScene;
    }, function (module) {
      FairybirdMainPanel = module.FairybirdMainPanel;
    }, function (module) {
      AFKGame = module.AFKGame;
    }],
    execute: function () {
      var _dec, _class;
      cclegacy._RF.push({}, "442abgev5ZGjKHGrEz1cBOH", "MainPanel", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var MainPanel = exports('MainPanel', (_dec = ccclass('MainPanel'), _dec(_class = /*#__PURE__*/function (_BaseView) {
        _inheritsLoose(MainPanel, _BaseView);
        function MainPanel() {
          return _BaseView.apply(this, arguments) || this;
        }
        var _proto = MainPanel.prototype;
        _proto.onOpen = function onOpen(fromUI) {
          var _BaseView$prototype$o;
          for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
            args[_key - 1] = arguments[_key];
          }
          (_BaseView$prototype$o = _BaseView.prototype.onOpen).call.apply(_BaseView$prototype$o, [this, fromUI].concat(args));
          console.error(args);
        };
        _proto.init = function init() {
          var _BaseView$prototype$i;
          for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            args[_key2] = arguments[_key2];
          }
          (_BaseView$prototype$i = _BaseView.prototype.init).call.apply(_BaseView$prototype$i, [this].concat(args));
          var node = Utils.FindChildByName(this.node, "btns");
          var childs = node.children;
          for (var index = 0; index < childs.length; index++) {
            var element = childs[index];
            if (element.name.indexOf('btn_') != -1) {
              element.on(NodeEventType.TOUCH_START, this.onClickNode, this);
            }
          }
        };
        _proto.onClickNode = function onClickNode(event) {
          var target = event.target;
          if (target.name.indexOf("btn_") != -1) {
            var sps = target.name.split("_");
            if (sps[1]) {
              switch (sps[1]) {
                case "tower":
                  viewManager.open(TowerGameScene);
                  break;
                case "rpg":
                  console.log("点击rpg");
                  break;
                case "fb":
                  viewManager.open(FairybirdMainPanel);
                  break;
                case "afk":
                  viewManager.open(AFKGame);
                  break;
              }
            }
          }
        };
        _proto.start = function start() {};
        _proto.update = function update(deltaTime) {};
        return MainPanel;
      }(BaseView)) || _class));
      registerView({
        viewCls: MainPanel,
        id: PanelType.MainPanel,
        layer: LayerType.view,
        prefabPathPrefix: ViewConst.defaultPrefabPathPrefix + "main/"
      });
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/MainTest.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './ScenceMap.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, KeyCode, UITransform, Component, ScenceMap;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      KeyCode = module.KeyCode;
      UITransform = module.UITransform;
      Component = module.Component;
    }, function (module) {
      ScenceMap = module.ScenceMap;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3;
      cclegacy._RF.push({}, "cd657OyPtVL8rVNBL7VI0TR", "MainTest", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var MainTest = exports('MainTest', (_dec = ccclass('MainTest'), _dec2 = property(Node), _dec3 = property(Node), _dec4 = property(Node), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(MainTest, _Component);
        function MainTest() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "viewPortNode", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "mapNode", _descriptor2, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "roleNode", _descriptor3, _assertThisInitialized(_this));
          _this.gameCamera = void 0;
          _this.roleSpeed = 10;
          _this.keyCache = {};
          _this.scenceMap = void 0;
          return _this;
        }
        var _proto = MainTest.prototype;
        _proto.onLoad = function onLoad() {
          // this.gameCamera = new GameCamera(this.viewPortNode, this.mapNode, this.roleNode);

          // input.on(Input.EventType.KEY_DOWN, this.onKeyDown, this);
          // input.on(Input.EventType.KEY_UP, this.onKeyUp, this);
          this.scenceMap = this.addComponent(ScenceMap);
          this.scenceMap.mapId = 1;
        };
        _proto.start = function start() {};
        _proto.onKeyDown = function onKeyDown(event) {
          this.setKeyCodeCache(event.keyCode, true);
          // switch (event.keyCode) {
          //     case KeyCode.ARROW_UP:
          //         this.keyCache[KeyCode.ARROW_UP] = true;
          //         console.log("按下Up");
          //         break;
          //     case KeyCode.ARROW_DOWN:
          //         this.keyCache[KeyCode.ARROW_DOWN] = true;
          //         console.log("按下Down");
          //         break;
          //     case KeyCode.ARROW_LEFT:
          //         this.keyCache[KeyCode.ARROW_LEFT] = true;
          //         console.log("按下Left");
          //         break;
          //     case KeyCode.ARROW_RIGHT:
          //         this.keyCache[KeyCode.ARROW_RIGHT] = true;
          //         console.log("按下Right");
          //         break;
          // }
        };

        _proto.onKeyUp = function onKeyUp(event) {
          this.setKeyCodeCache(event.keyCode, false);
          // switch (event.keyCode) {
          //     case KeyCode.ARROW_UP:
          //         this.keyCache[KeyCode.ARROW_UP] = true;
          //         console.log("按下Up");
          //         break;
          //     case KeyCode.ARROW_DOWN:
          //         this.keyCache[KeyCode.ARROW_DOWN] = true;
          //         console.log("按下Down");
          //         break;
          //     case KeyCode.ARROW_LEFT:
          //         this.keyCache[KeyCode.ARROW_LEFT] = true;
          //         console.log("按下Left");
          //         break;
          //     case KeyCode.ARROW_RIGHT:
          //         this.keyCache[KeyCode.ARROW_RIGHT] = true;
          //         console.log("按下Right");
          //         break;
          // }
        };

        _proto.setKeyCodeCache = function setKeyCodeCache(keyCode, isKeepDown) {
          if (isKeepDown === void 0) {
            isKeepDown = false;
          }
          this.keyCache[keyCode] = isKeepDown;
        }

        /**刷新人物移动 */;
        _proto.updateRoleMove = function updateRoleMove() {
          var x = this.roleNode.position.x;
          var y = this.roleNode.position.y;
          //根据按键移动
          if (this.keyCache[KeyCode.ARROW_UP]) {
            this.roleNode.setPosition(x, y += this.roleSpeed);
            // this.roleNode.y += this.roleSpeed;
          }

          if (this.keyCache[KeyCode.ARROW_DOWN]) {
            this.roleNode.setPosition(x, y -= this.roleSpeed);
            // this.roleNode.y -= this.roleSpeed;
          }

          if (this.keyCache[KeyCode.ARROW_LEFT]) {
            this.roleNode.setPosition(x -= this.roleSpeed, y);
            // this.roleNode.x -= this.roleSpeed;
          }

          if (this.keyCache[KeyCode.ARROW_RIGHT]) {
            this.roleNode.setPosition(x += this.roleSpeed, y);
            // this.roleNode.x += this.roleSpeed;
          }

          var roleUITransform = this.roleNode.getComponent(UITransform);
          var roleScale = this.roleNode.scale;
          var mapUITransform = this.mapNode.getComponent(UITransform);
          var bx = this.roleNode.position.x;
          var by = this.roleNode.position.y;
          //边缘检测
          if (this.roleNode.position.x + roleUITransform.width * this.roleNode.scale.x / 2 > mapUITransform.width / 2) {
            bx = mapUITransform.width / 2 - roleUITransform.width * this.roleNode.scale.x / 2;
            this.roleNode.setPosition(bx, by);
            // this.roleNode.position.x = this.mapNode.width / 2 - this.roleNode.width / 2;
            console.log("人物超过地图右边缘");
          } else if (this.roleNode.position.x - roleUITransform.width * this.roleNode.scale.x / 2 < -mapUITransform.width / 2) {
            bx = -mapUITransform.width / 2 + roleUITransform.width * this.roleNode.scale.x / 2;
            this.roleNode.setPosition(bx, by);
            // this.roleNode.x = 
            console.log("人物超过地图左边缘");
          }
          if (this.roleNode.position.y + roleUITransform.height * this.roleNode.scale.y / 2 > mapUITransform.height / 2) {
            by = mapUITransform.height / 2 - roleUITransform.height * this.roleNode.scale.y / 2;
            this.roleNode.setPosition(bx, by);
            // this.roleNode.y = this.mapNode.height / 2 - this.roleNode.height / 2;
            console.log("人物超过地图上边缘");
          } else if (this.roleNode.position.y - roleUITransform.height * this.roleNode.scale.y / 2 < -mapUITransform.height / 2) {
            by = -mapUITransform.height / 2 + roleUITransform.height * this.roleNode.scale.y / 2;
            this.roleNode.setPosition(bx, by);
            // this.roleNode.y = 
            console.log("人物超过地图下边缘");
          }
        };
        _proto.update = function update(deltaTime) {
          // this.updateRoleMove();
          // this.gameCamera.updatePosition();
        };
        return MainTest;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "viewPortNode", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "mapNode", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "roleNode", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/MapData.ts", ['cc'], function (exports) {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "85c90I1mbFJuKY26/Oh7Pp0", "MapData", undefined);
      var MapData = exports('default', function MapData() {
        this.name = void 0;
        this.bgName = void 0;
        this.type = void 0;
        this.mapWidth = void 0;
        this.mapHeight = void 0;
        this.nodeWidth = void 0;
        this.nodeHeight = void 0;
        this.alignment = void 0;
        this.offsetX = void 0;
        this.offsetY = void 0;
        this.roadDataArr = void 0;
        this.mapItems = void 0;
      });
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/MapLayer.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, cclegacy, _decorator, Sprite, Node, UITransform, SpriteFrame, Component;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Sprite = module.Sprite;
      Node = module.Node;
      UITransform = module.UITransform;
      SpriteFrame = module.SpriteFrame;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;
      cclegacy._RF.push({}, "b68808DpwhOBpij/W+1VNnI", "MapLayer", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var MapLayer = exports('default', (_dec = ccclass("MapLayer"), _dec2 = property(Sprite), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(MapLayer, _Component);
        function MapLayer() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "bgImg", _descriptor, _assertThisInitialized(_this));
          _this._mapParams = null;
          return _this;
        }
        var _proto = MapLayer.prototype;
        _proto.update = function update(dt) {};
        _proto.init = function init(mapParams) {
          this._mapParams = mapParams;
          if (!this.bgImg) {
            var bgNode = new Node();
            this.node.addChild(bgNode);
            bgNode.layer = this.node.layer;
            this.bgImg = bgNode.addComponent(Sprite);
            this.bgImg.sizeMode = Sprite.SizeMode.RAW;
            bgNode.getComponent(UITransform).anchorX = 0;
            bgNode.getComponent(UITransform).anchorY = 0;
          }
          var spriteFrame = new SpriteFrame();
          spriteFrame.texture = mapParams.bgTex;
          this.bgImg.spriteFrame = spriteFrame;
          this.getComponent(UITransform).width = this.width;
          this.getComponent(UITransform).height = this.height;
        };
        _createClass(MapLayer, [{
          key: "bgImage",
          get: function get() {
            return this.bgImg;
          }
        }, {
          key: "width",
          get: function get() {
            if (this.bgImg) {
              return this.bgImg.getComponent(UITransform).width;
            }
            return this._mapParams.viewWidth;
          }
        }, {
          key: "height",
          get: function get() {
            if (this.bgImg) {
              return this.bgImg.getComponent(UITransform).height;
            }
            return this._mapParams.viewHeight;
          }
        }]);
        return MapLayer;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "bgImg", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/MapParams.ts", ['cc', './Enum2.ts'], function (exports) {
  var cclegacy, MapType, MapLoadModel;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      MapType = module.MapType;
      MapLoadModel = module.MapLoadModel;
    }],
    execute: function () {
      cclegacy._RF.push({}, "27244yA0LJIeoXhWxSb2Vt/", "MapParams", undefined);

      /**
       * 地图参数
       */
      var MapParams = exports('default', function MapParams() {
        /**
         * 地图名称
         */
        this.name = "";
        /**
         * 底图资源名称
         */
        this.bgName = "";
        /**
         * 地图类型
         */
        this.mapType = MapType.Angle45;
        /**
         * 地图宽
         */
        this.mapWidth = 750;
        /**
         * 地图高
         */
        this.mapHeight = 1600;
        /**
         * 地图单元格宽
         */
        this.ceilWidth = 75;
        /**
         * 地图单元格高
         */
        this.ceilHeight = 75;
        /**
         * 地图视野宽
         */
        this.viewWidth = 750;
        /**
         * 地图视野高
         */
        this.viewHeight = 1334;
        /**
         * 地图切片宽
         */
        this.sliceWidth = 256;
        /**
         * 地图切片高
         */
        this.sliceHeight = 256;
        /**
         * 底图加载模式，是单张还是切片加载
         */
        this.mapLoadModel = MapLoadModel.single;
        /**
         * 地图底图
         */
        this.bgTex = null;
      });
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/MapRoad45Angle.ts", ['cc', './RoadNode.ts'], function (exports) {
  var cclegacy, math, RoadNode;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      math = module.math;
    }, function (module) {
      RoadNode = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "8f288RAwupPzLSHB7dHkSgl", "MapRoad45Angle", undefined);
      var MapRoad45Angle = exports('default', /*#__PURE__*/function () {
        function MapRoad45Angle(row, col, nodeWidth, nodeHeight, halfNodeWidth, halfNodeHeight) {
          this._row = void 0;
          this._col = void 0;
          this._nodeWidth = void 0;
          this._nodeHeight = void 0;
          this._halfNodeWidth = void 0;
          this._halfNodeHeight = void 0;
          this._row = row;
          this._col = col;
          this._nodeWidth = nodeWidth;
          this._nodeHeight = nodeHeight;
          this._halfNodeWidth = halfNodeWidth;
          this._halfNodeHeight = halfNodeHeight;
        }
        var _proto = MapRoad45Angle.prototype;
        _proto.getNodeByPixel = function getNodeByPixel(x, y) {
          var wPoint = this.getWorldPointByPixel(x, y);
          var fPoint = this.getPixelByWorldPoint(wPoint.x, wPoint.y);
          var dPoint = this.getDerectByPixel(x, y);
          var node = new RoadNode();
          node.cx = wPoint.x;
          node.cy = wPoint.y;
          node.px = fPoint.x;
          node.py = fPoint.y;
          node.dx = dPoint.x;
          node.dy = dPoint.y;
          return node;
        };
        _proto.getNodeByDerect = function getNodeByDerect(dx, dy) {
          var fPoint = this.getPixelByDerect(dx, dy);
          var wPoint = this.getWorldPointByPixel(fPoint.x, fPoint.y);
          var node = new RoadNode();
          node.cx = wPoint.x;
          node.cy = wPoint.y;
          node.px = fPoint.x;
          node.py = fPoint.y;
          node.dx = dx;
          node.dy = dy;
          return node;
        };
        _proto.getNodeByWorldPoint = function getNodeByWorldPoint(cx, cy) {
          var point = this.getPixelByWorldPoint(cx, cy);
          return this.getNodeByPixel(point.x, point.y);
        }
        /**
         * 根据像素坐标得到场景世界坐标
         * @param x 
         * @param y 
         */;
        _proto.getWorldPointByPixel = function getWorldPointByPixel(x, y) {
          var cx = Math.ceil(x / this._nodeWidth - 0.5 + y / this._nodeHeight) - 1;
          var cy = this._col - 1 - Math.ceil(x / this._nodeWidth - 0.5 - y / this._nodeHeight);
          return math.v2(cx, cy);
        }
        /**
         * 根据世界坐标获取像素坐标
         * @param cx 
         * @param cy 
         */;
        _proto.getPixelByWorldPoint = function getPixelByWorldPoint(cx, cy) {
          var x = Math.floor((cx + 1 - (cy - (this._col - 1))) * this._halfNodeWidth);
          var y = Math.floor((cx + 1 + (cy - (this._col - 1))) * this._halfNodeHeight);
          return math.v2(x, y);
        };
        _proto.getDerectByPixel = function getDerectByPixel(x, y) {
          var worldPoint = this.getWorldPointByPixel(x, y);
          var pixelPoint = this.getPixelByWorldPoint(worldPoint.x, worldPoint.y);
          var dx = Math.floor(pixelPoint.x / this._nodeWidth) - (pixelPoint.x % this._nodeWidth == 0 ? 1 : 0);
          var dy = Math.floor(pixelPoint.y / this._halfNodeHeight) - 1;
          return math.v2(dx, dy);
        };
        _proto.getDerectByWorldPoint = function getDerectByWorldPoint(cx, cy) {
          var dx = Math.floor((cx - (cy - (this._col - 1))) / 2);
          var dy = cx + (cy - (this._col - 1));
          return math.v2(dx, dy);
        };
        _proto.getPixelByDerect = function getPixelByDerect(dx, dy) {
          var x = Math.floor((dx + dy % 2) * this._nodeWidth + (1 - dy % 2) * this._halfNodeWidth);
          var y = Math.floor((dy + 1) * this._halfNodeHeight);
          return math.v2(x, y);
        };
        return MapRoad45Angle;
      }());
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/MapRoad90Angle.ts", ['cc', './RoadNode.ts'], function (exports) {
  var cclegacy, math, RoadNode;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      math = module.math;
    }, function (module) {
      RoadNode = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "28fe7OzQwFALqUkizw4ReO0", "MapRoad90Angle", undefined);
      var MapRoad90Angle = exports('default', /*#__PURE__*/function () {
        function MapRoad90Angle(row, col, nodeWidth, nodeHeight, _halfNodeWidth, _halfNodeHeight) {
          this._row = void 0;
          this._col = void 0;
          this._nodeWidth = void 0;
          this._nodeHeight = void 0;
          this._halfNodeWidth = void 0;
          this._halfNodeHeight = void 0;
          this._row = row;
          this._col = col;
          this._nodeWidth = nodeWidth;
          this._nodeHeight = nodeHeight;
          this._halfNodeHeight = _halfNodeHeight;
          this._halfNodeWidth = _halfNodeWidth;
        }
        var _proto = MapRoad90Angle.prototype;
        _proto.getDerectByPixel = function getDerectByPixel(x, y) {
          var dx = Math.floor(x / this._nodeWidth);
          var dy = Math.floor(y / this._nodeHeight);
          return math.v2(dx, dy);
        };
        _proto.getDerectByWorldPoint = function getDerectByWorldPoint(cx, cy) {
          return math.v2(cx, cy);
        };
        _proto.getNodeByDerect = function getNodeByDerect(dx, dy) {
          var fPoint = this.getPixelByDerect(dx, dy);
          var wPoint = this.getWorldPointByPixel(fPoint.x, fPoint.y);
          var node = new RoadNode();
          node.cx = wPoint.x;
          node.cy = wPoint.y;
          node.px = fPoint.x;
          node.py = fPoint.y;
          node.dx = dx;
          node.dy = dy;
          return node;
        };
        _proto.getNodeByPixel = function getNodeByPixel(x, y) {
          var wPoint = this.getWorldPointByPixel(x, y);
          var fPoint = this.getPixelByWorldPoint(wPoint.x, wPoint.y);
          var dPoint = this.getDerectByPixel(x, y);
          var node = new RoadNode();
          node.cx = wPoint.x;
          node.cy = wPoint.y;
          node.px = fPoint.x;
          node.py = fPoint.y;
          node.dx = dPoint.x;
          node.dy = dPoint.y;
          return node;
        };
        _proto.getNodeByWorldPoint = function getNodeByWorldPoint(cx, cy) {
          var point = this.getPixelByWorldPoint(cx, cy);
          return this.getNodeByPixel(point.x, point.y);
        };
        _proto.getPixelByDerect = function getPixelByDerect(dx, dy) {
          var x = Math.floor((dx + 1) * this._nodeWidth - this._halfNodeWidth);
          var y = Math.floor((dy + 1) * this._nodeHeight - this._halfNodeHeight);
          return math.v2(x, y);
        };
        _proto.getPixelByWorldPoint = function getPixelByWorldPoint(cx, cy) {
          return this.getPixelByDerect(cx, cy);
        };
        _proto.getWorldPointByPixel = function getWorldPointByPixel(x, y) {
          return this.getDerectByPixel(x, y);
        };
        return MapRoad90Angle;
      }());
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/MapRoadUtils.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Enum2.ts', './RoadNode.ts', './MapRoad45Angle.ts', './MapRoad90Angle.ts'], function (exports) {
  var _createClass, cclegacy, math, MapType, RoadNode, MapRoad45Angle, MapRoad90Angle;
  return {
    setters: [function (module) {
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      math = module.math;
    }, function (module) {
      MapType = module.MapType;
    }, function (module) {
      RoadNode = module.default;
    }, function (module) {
      MapRoad45Angle = module.default;
    }, function (module) {
      MapRoad90Angle = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "fcf41L6Y0lEOKkZoBNNPomb", "MapRoadUtils", undefined);
      var MapRoadUtils = exports('default', /*#__PURE__*/function () {
        function MapRoadUtils() {
          this._mapWidth = void 0;
          this._mapHeight = void 0;
          this._nodeWidth = void 0;
          this._nodeHeight = void 0;
          this._halfNodeWidth = void 0;
          this._halfNodeHeight = void 0;
          this._col = void 0;
          this._row = void 0;
          this._mapType = void 0;
          this._mapRoad = void 0;
        }
        var _proto = MapRoadUtils.prototype;
        _proto.updateMapInfo = function updateMapInfo(mapWidth, mapHeight, nodeWidth, nodeHeight, mapType) {
          this._mapWidth = mapWidth;
          this._mapHeight = mapHeight;
          this._nodeWidth = nodeWidth;
          this._nodeHeight = nodeHeight;
          this._halfNodeWidth = Math.floor(nodeWidth / 2);
          this._halfNodeHeight = Math.floor(nodeHeight / 2);
          this._mapType = mapType;
          switch (this._mapType) {
            case MapType.Angle45:
              this._col = Math.ceil(mapWidth / nodeWidth);
              this._row = Math.ceil(mapHeight / nodeHeight) * 2;
              this._mapRoad = new MapRoad45Angle(this._row, this._col, this._nodeWidth, this._nodeHeight, this._halfNodeWidth, this._halfNodeHeight);
              break;
            case MapType.Angle90:
              this._col = Math.ceil(mapWidth / nodeWidth);
              this._row = Math.ceil(mapHeight / nodeHeight);
              this._mapRoad = new MapRoad90Angle(this._row, this._col, this._nodeWidth, this._nodeHeight, this._halfNodeWidth, this._halfNodeHeight);
              break;
          }
        };
        _proto.getNodeByPixel = function getNodeByPixel(x, y) {
          if (this._mapRoad) {
            return this._mapRoad.getNodeByPixel(x, y);
          }
          return new RoadNode();
        };
        _proto.getNodeByDerect = function getNodeByDerect(dx, dy) {
          if (this._mapRoad) {
            return this._mapRoad.getNodeByDerect(dx, dy);
          }
          return new RoadNode();
        };
        _proto.getNodeByWorldPoint = function getNodeByWorldPoint(cx, cy) {
          if (this._mapRoad) {
            return this._mapRoad.getNodeByWorldPoint(cx, cy);
          }
          return new RoadNode();
        };
        _proto.getWorldPointByPixel = function getWorldPointByPixel(x, y) {
          if (this._mapRoad) {
            return this._mapRoad.getWorldPointByPixel(x, y);
          }
          return math.v2(0, 0);
        };
        _proto.getPixelByWorldPoint = function getPixelByWorldPoint(cx, cy) {
          if (this._mapRoad) {
            return this._mapRoad.getPixelByWorldPoint(cx, cy);
          }
          return math.v2(0, 0);
        };
        _proto.getDerectByPixel = function getDerectByPixel(x, y) {
          if (this._mapRoad) {
            return this._mapRoad.getDerectByPixel(x, y);
          }
          return math.v2(0, 0);
        };
        _proto.getDerectByWorldPoint = function getDerectByWorldPoint(cx, cy) {
          if (this._mapRoad) {
            return this._mapRoad.getDerectByWorldPoint(cx, cy);
          }
          return math.v2(0, 0);
        };
        _proto.getPixelByDerect = function getPixelByDerect(dx, dy) {
          if (this._mapRoad) {
            return this._mapRoad.getPixelByDerect(dx, dy);
          }
          return math.v2(0, 0);
        };
        _createClass(MapRoadUtils, [{
          key: "mapWidth",
          get: function get() {
            return this._mapWidth;
          }
        }, {
          key: "mapHeight",
          get: function get() {
            return this._mapHeight;
          }
        }, {
          key: "nodeWidth",
          get: function get() {
            return this._nodeWidth;
          }
        }, {
          key: "nodeHeight",
          get: function get() {
            return this._nodeHeight;
          }
        }, {
          key: "halfNodeWidth",
          get: function get() {
            return this._halfNodeWidth;
          }
        }, {
          key: "halfNodeHeight",
          get: function get() {
            return this._halfNodeHeight;
          }
        }, {
          key: "col",
          get: function get() {
            return this._col;
          }
        }, {
          key: "row",
          get: function get() {
            return this._row;
          }
        }, {
          key: "mapType",
          get: function get() {
            return this._mapType;
          }
        }], [{
          key: "instance",
          get: function get() {
            if (!this._instance) {
              this._instance = new MapRoadUtils();
            }
            return this._instance;
          }
        }]);
        return MapRoadUtils;
      }());
      MapRoadUtils._instance = void 0;
      window["mapRoadUtils"] = MapRoadUtils.instance;
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/MathUtils.ts", ['cc'], function (exports) {
  var cclegacy, Vec2;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      Vec2 = module.Vec2;
    }],
    execute: function () {
      cclegacy._RF.push({}, "133a8p0X35GQKLoVrhmY7Dm", "MathUtils", undefined);
      var MathUtils = exports('default', /*#__PURE__*/function () {
        function MathUtils() {}
        /**
         * 生成bezier曲线路径点
         * @param anchors - 曲线控制点数组，包含起终点
         * @param count - 生成的曲线点数
         * @returns 生成的曲线点数组
         */
        MathUtils.createBezierPoints = function createBezierPoints(anchors, count) {
          var points = [];
          for (var i = 0; i <= count; i++) {
            var p = this.caculateBezierPoint(anchors, i / count);
            points.push(p);
          }
          return points;
        }

        /**
         * @param points - 曲线控制点数组，包含起终点
         * @param t - 比例，[0, 1]
         * @returns 生成的曲线点
         */;
        MathUtils.caculateBezierPoint = function caculateBezierPoint(points, t) {
          var len = points.length;
          var res = new Vec2(0, 0);
          var combination = function combination(n, m) {
            var nFactorial = 1,
              mFactorial = 1;
            while (m > 0) {
              nFactorial *= n;
              mFactorial *= m;
              n--;
              m--;
            }
            return nFactorial / mFactorial;
          };
          for (var i = 0; i < len; i++) {
            var p = points[i];
            res.x += p.x * combination(len - 1, i) * Math.pow(t, i) * Math.pow(1 - t, len - 1 - i);
            res.y += p.y * combination(len - 1, i) * Math.pow(t, i) * Math.pow(1 - t, len - 1 - i);
          }
          return res;
        }

        /**
         * 弧度转角度
         * @param radian - 弧度
         * @returns 角度
         */;
        MathUtils.RadianToAngle = function RadianToAngle(radian) {
          return radian * 180 / Math.PI;
        }

        /**
         * 角度转弧度
         * @param angle - 角度
         * @returns 弧度
         */;
        MathUtils.AngleToRadian = function AngleToRadian(angle) {
          return angle * Math.PI / 180;
        }

        // class end
        ;

        return MathUtils;
      }());
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Monster.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Character.ts'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, Vec3, Character;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Vec3 = module.Vec3;
    }, function (module) {
      Character = module.default;
    }],
    execute: function () {
      var _dec, _class;
      cclegacy._RF.push({}, "bda92rL8kZC2Lqf5El7yZIo", "Monster", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var Monster = exports('Monster', (_dec = ccclass('Monster'), _dec(_class = /*#__PURE__*/function (_Character) {
        _inheritsLoose(Monster, _Character);
        function Monster() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Character.call.apply(_Character, [this].concat(args)) || this;
          _this.monsterId = 0;
          _this.defaultDir = 0;
          /**
           * 编辑的数据
           */
          _this.editData = null;
          return _this;
        }
        var _proto = Monster.prototype;
        _proto.start = function start() {}

        /**
         * 初始化
         */;
        _proto.init = function init() {
          // this.width = 100;
          // this.height = 100;
          this.direction = this.defaultDir;

          // this.loadRes();
        };

        _proto.update = function update(deltaTime) {};
        _proto.initEditData = function initEditData(editData) {
          this.editData = editData;
          this.objName = editData.objName;
          this.monsterId = Number(editData.objId);
          this.node.position = new Vec3(editData.x, editData.y);
          this.defaultDir = editData.direction;
          // this.isPatrol = editData.isPatrol;
        };

        return Monster;
      }(Character)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/NodeFactory.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _createClass, cclegacy, Node, NodePool;
  return {
    setters: [function (module) {
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      Node = module.Node;
      NodePool = module.NodePool;
    }],
    execute: function () {
      cclegacy._RF.push({}, "a09b6yVv6FPHrG4tGTpPz9D", "NodeFactory", undefined);

      /**
       * @fileName NodeFactory.ts
       * @author zhangqiong
       * @date 2024/12/18 16:36:10"
       * @description
       */
      var NodeFactory = exports('NodeFactory', /*#__PURE__*/function () {
        function NodeFactory() {
          this._nodePool = void 0;
          this._nodePool = new NodePool();
        }
        var _proto = NodeFactory.prototype;
        _proto.createNode = function createNode() {
          var node = null;
          if (this._nodePool.size() > 0) {
            node = this._nodePool.get();
          } else {
            node = new Node();
          }
          return node;
        };
        _proto.release = function release(node) {
          if (this._nodePool) {
            this._nodePool.put(node);
          }
        };
        _createClass(NodeFactory, null, [{
          key: "instance",
          get: function get() {
            if (!NodeFactory._instance) {
              NodeFactory._instance = new NodeFactory();
            }
            return NodeFactory._instance;
          }
        }]);
        return NodeFactory;
      }());
      NodeFactory._instance = void 0;
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Npc.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Character.ts'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, Vec3, Character;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Vec3 = module.Vec3;
    }, function (module) {
      Character = module.default;
    }],
    execute: function () {
      var _dec, _class;
      cclegacy._RF.push({}, "3e83e/tUzBGo59E2vutxtBx", "Npc", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var Npc = exports('Npc', (_dec = ccclass('Npc'), _dec(_class = /*#__PURE__*/function (_Character) {
        _inheritsLoose(Npc, _Character);
        function Npc() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Character.call.apply(_Character, [this].concat(args)) || this;
          _this.npcId = 0;
          _this.defaultDir = 0;
          _this.editData = null;
          return _this;
        }
        var _proto = Npc.prototype;
        _proto.start = function start() {};
        _proto.update = function update(deltaTime) {};
        _proto.init = function init() {
          // this.width = 100;
          // this.height = 100;
          this.direction = this.defaultDir;
          // this.loadRes();
        };

        _proto.initEditData = function initEditData(editData) {
          this.editData = editData;
          this.objName = editData.objName;
          this.npcId = Number(editData.objId);
          this.node.position = new Vec3(editData.x, editData.y);
          this.defaultDir = editData.direction;
          // this.isPatrol = editData.isPatrol;
        };

        return Npc;
      }(Character)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/PanelEnum.ts", ['cc'], function (exports) {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "b7001BgKqtH3K1UCJSzUD69", "PanelEnum", undefined);
      var PanelType = exports('PanelType', /*#__PURE__*/function (PanelType) {
        PanelType[PanelType["none"] = 0] = "none";
        PanelType[PanelType["FairybirdMainPanel"] = 1] = "FairybirdMainPanel";
        PanelType[PanelType["RPGPanel"] = 2] = "RPGPanel";
        PanelType[PanelType["MainPanel"] = 3] = "MainPanel";
        PanelType[PanelType["TowerGameScene"] = 4] = "TowerGameScene";
        PanelType[PanelType["GameOverOrWin"] = 5] = "GameOverOrWin";
        PanelType[PanelType["AFKGame"] = 6] = "AFKGame";
        PanelType[PanelType["AFKResultPanel"] = 7] = "AFKResultPanel";
        return PanelType;
      }({}));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/PathFindingAgent.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './AStarRoadSeeker.ts', './MapRoadUtils.ts'], function (exports) {
  var _createClass, cclegacy, AStarRoadSeeker, MapRoadUtils;
  return {
    setters: [function (module) {
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      AStarRoadSeeker = module.default;
    }, function (module) {
      MapRoadUtils = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "9f52a21pHhE7adxRmXzB/uE", "PathFindingAgent", undefined);
      var PathFindingAgent = exports('default', /*#__PURE__*/function () {
        function PathFindingAgent() {
          this._mapData = void 0;
          this._mapType = void 0;
          this._roadDic = {};
          this._roadSeeker = void 0;
        }
        var _proto = PathFindingAgent.prototype;
        _proto.init = function init(mapData) {
          this._mapData = mapData;
          this._mapType = mapData.type;
          MapRoadUtils.instance.updateMapInfo(mapData.mapWidth, mapData.mapHeight, mapData.nodeWidth, mapData.nodeHeight, mapData.type);
          this._roadDic = {};
          var roadDataArr = this._mapData.roadDataArr;
          var len = this._mapData.roadDataArr.length;
          var len2 = this._mapData.roadDataArr[0].length;
          var value = 0;
          var dx = 0;
          var dy = 0;
          for (var i = 0; i < len; i++) {
            for (var j = 0; j < len2; j++) {
              value = roadDataArr[i][j];
              dx = j;
              dy = i;
              var node = MapRoadUtils.instance.getNodeByDerect(dx, dy);
              node.value = value;
              this._roadDic[node.cx + "_" + node.cy] = node;
            }
          }
          this._roadSeeker = new AStarRoadSeeker(this._roadDic);
        };
        _proto.updateRoadSeekerInfo = function updateRoadSeekerInfo(pathOptimize, pathQuadSeek) {
          this._roadSeeker.setPathOptimize(pathOptimize);
          this._roadSeeker.setPathQuadSeek(pathQuadSeek);
        };
        _proto.setRoadSeekerPassCondition = function setRoadSeekerPassCondition(callback) {
          this._roadSeeker.setRoadNodePassCondition(callback);
        };
        _proto.seekPath = function seekPath(startV2, targetV2) {
          var startNode = this.getRoadNodeByPixel(startV2.x, startV2.y);
          var targetNode = this.getRoadNodeByPixel(targetV2.x, targetV2.y);
          var roadNodeArray = this._roadSeeker.seekPath(startNode, targetNode);
          // const roadNodeArray: RoadNode[] = this._roadSeeker.seekPath2(startNode, targetNode);
          return roadNodeArray;
        };
        _proto.getRoadNodeByPixel = function getRoadNodeByPixel(px, py) {
          var point = MapRoadUtils.instance.getWorldPointByPixel(px, py);
          var node = this.getRoadNode(point.x, point.y);
          // if (this._mapType == MapType.Angle45) {
          //     node = this.getRoadNode(point.x, point.y);
          // }else if(this._mapType == MapType.Angle90) {
          //
          // }
          return node;
        };
        _proto.getRoadNode = function getRoadNode(cx, cy) {
          return this._roadSeeker.getRoadNode(cx, cy);
        };
        _createClass(PathFindingAgent, null, [{
          key: "instance",
          get: function get() {
            if (!this._instance) {
              this._instance = new PathFindingAgent();
            }
            return this._instance;
          }
        }]);
        return PathFindingAgent;
      }());
      PathFindingAgent._instance = void 0;
      window["PathFindingAgent"] = PathFindingAgent.instance;
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Player.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Character.ts'], function (exports) {
  var _inheritsLoose, _createClass, cclegacy, _decorator, Character, CharacterState;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }, function (module) {
      Character = module.default;
      CharacterState = module.CharacterState;
    }],
    execute: function () {
      var _dec, _class;
      cclegacy._RF.push({}, "c3d2cRxQ5ZKgoDAmYovesUc", "Player", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var Player = exports('default', (_dec = ccclass('Player'), _dec(_class = /*#__PURE__*/function (_Character) {
        _inheritsLoose(Player, _Character);
        function Player() {
          return _Character.apply(this, arguments) || this;
        }
        var _proto = Player.prototype;
        _proto.start = function start() {
          _Character.prototype.start.call(this);
        };
        _createClass(Player, [{
          key: "state",
          get: function get() {
            return this._state;
          },
          set: function set(value) {
            this._state = value;
            switch (this._state) {
              case CharacterState.idle:
                if (this.skeleton) {
                  this.skeleton.setAnimation(0, "stand2", true);
                }
                break;
              case CharacterState.walk:
                // this.movieClip.begin = 6;
                // this.movieClip.end = 12;

                if (this.skeleton) {
                  this.skeleton.setAnimation(0, "run", true);
                }
                break;
              case CharacterState.sitdown:
                // this.movieClip.begin = 12;
                // this.movieClip.end = 18;
                break;
              case CharacterState.sitdown_walk:
                // this.movieClip.begin = 18;
                // this.movieClip.end = 24;
                break;
            }
          }
        }]);
        return Player;
      }(Character)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Pool.ts", ['cc', './DestroyUtils.ts'], function (exports) {
  var cclegacy, DestroyUtils;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      DestroyUtils = module.DestroyUtils;
    }],
    execute: function () {
      cclegacy._RF.push({}, "ed13cb+DsJKEYSIjEHK1Gsw", "Pool", undefined);

      /**
       * @fileName Pool.ts
       * @author zhangqiong
       * @date 2024/12/27 20:16:49"
       * @description
       */
      var Pool = exports('Pool', /*#__PURE__*/function () {
        function Pool(clazz, maxIdle, hasStatus) {
          if (maxIdle === void 0) {
            maxIdle = 100;
          }
          if (hasStatus === void 0) {
            hasStatus = false;
          }
          this.$clazz = void 0;
          this.$idles = void 0;
          this.$maxIdle = void 0;
          this.$hasStatus = void 0;
          this.isDestroy = false;
          this.$idles = [];
          this.$clazz = clazz;
          this.$maxIdle = maxIdle;
          this.$hasStatus = hasStatus;
        }
        var _proto = Pool.prototype;
        _proto.create = function create() {
          var $tempObj;
          if (this.$idles.length == 0) $tempObj = new this.$clazz();else $tempObj = this.$idles.pop();

          //添加垃圾代码

          //具备激活接口的对象
          if (this.$hasStatus && $tempObj.hasOwnProperty("activate")) $tempObj["activate"]();
          return $tempObj;
        };
        _proto.destroy = function destroy(o) {
          this.isDestroy = true;
          for (var i = 0; i < this.$idles.length; i++) {
            DestroyUtils.destroy(this.$idles[i]);
          }
          this.$idles = null;
        };
        _proto.release = function release(obj) {
          if (this.$idles.length > this.$maxIdle) {
            DestroyUtils.destroy(obj);
            //添加垃圾代码
          } else {
            if (this.$hasStatus && obj.hasOwnProperty("passivate")) obj["passivate"]();
            this.$idles.push(obj);
          }
        };
        _proto.clear = function clear() {
          // destroy();
          this.$idles = [];
        };
        _proto.isFull = function isFull() {
          if (this.$idles.length > this.$maxIdle) {
            return true;
          }
          return false;
        };
        _proto.getNumIdle = function getNumIdle() {
          return this.$idles.length;
        };
        return Pool;
      }());
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/QuadTree.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './AreaType.ts'], function (exports) {
  var _createForOfIteratorHelperLoose, cclegacy, math, Vec3, AreaType;
  return {
    setters: [function (module) {
      _createForOfIteratorHelperLoose = module.createForOfIteratorHelperLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      math = module.math;
      Vec3 = module.Vec3;
    }, function (module) {
      AreaType = module.AreaType;
    }],
    execute: function () {
      cclegacy._RF.push({}, "1a75eI3kcNDoZkJPVAa2DrA", "QuadTree", undefined);
      var AnchorPointType = exports('AnchorPointType', /*#__PURE__*/function (AnchorPointType) {
        AnchorPointType[AnchorPointType["Center"] = 0] = "Center";
        AnchorPointType[AnchorPointType["LeftDown"] = 1] = "LeftDown";
        return AnchorPointType;
      }({}));
      // QuadTreeRect.ts
      var QuadTreeRect = exports('QuadTreeRect', /*#__PURE__*/function () {
        function QuadTreeRect(x, y, width, height) {
          this.x = x;
          this.y = y;
          this.width = width;
          this.height = height;
        }

        // 检查目标矩形是否完全包含在当前矩形内
        var _proto = QuadTreeRect.prototype;
        _proto.contains = function contains(target, anchorType) {
          if (anchorType === void 0) {
            anchorType = AnchorPointType.Center;
          }
          var contain = false;
          if (anchorType == AnchorPointType.LeftDown) {
            // 矩形 A 的边界
            var ALeft = this.x;
            var ARight = this.x + this.width;
            var ABottom = this.y;
            var ATop = this.y + this.height;

            // 矩形 B 的边界
            var BLeft = target.x;
            var BRight = target.x + target.width;
            var BBottom = target.y;
            var BTop = target.y + target.height;

            // 检查矩形 A 是否包含矩形 B
            return ALeft <= BLeft && ARight >= BRight && ABottom <= BBottom && ATop >= BTop;
          } else if (anchorType == AnchorPointType.Center) {
            contain = Math.abs(target.x - this.x) + target.width / 2 <= this.width / 2 && Math.abs(target.y - this.y) + target.height / 2 <= this.height / 2;
          }
          return contain;
        }

        // 检查两个矩形是否相交
        ;

        _proto.intersects = function intersects(target, anchorType) {
          if (anchorType === void 0) {
            anchorType = AnchorPointType.Center;
          }
          var intersect = false;
          if (anchorType == AnchorPointType.Center) {
            intersect = Math.abs(target.x - this.x) <= (this.width + target.width) / 2 && Math.abs(target.y - this.y) <= (this.height + target.height) / 2;
          } else if (anchorType == AnchorPointType.LeftDown) {
            // 矩形 A 的边界
            var ALeft = target.x;
            var ARight = target.x + target.width;
            var ABottom = target.y;
            var ATop = target.y + target.height;

            // 矩形 B 的边界
            var BLeft = this.x;
            var BRight = this.x + this.width;
            var BBottom = this.y;
            var BTop = this.y + this.height;

            // 检查水平重叠
            var horizontalOverlap = ARight > BLeft && ALeft < BRight;

            // 检查垂直重叠
            var verticalOverlap = ATop > BBottom && ABottom < BTop;

            // 如果水平和垂直都有重叠，则两个矩形相交
            intersect = horizontalOverlap && verticalOverlap;
          }
          return intersect;
        };
        _proto.getIsInRange = function getIsInRange(target, radian, anchorType) {
          if (anchorType === void 0) {
            anchorType = AnchorPointType.Center;
          }
          var targetPos = math.v3(target.x, target.y, 0);
          var curPos = math.v3(this.x, this.y);
          var distance = Vec3.distance(curPos, targetPos);
          return distance < radian;
        };
        return QuadTreeRect;
      }());
      var QuadTree = exports('QuadTree', /*#__PURE__*/function () {
        function QuadTree(rect, maxCount, maxDepth, anchorPointType) {
          if (maxCount === void 0) {
            maxCount = 10;
          }
          if (maxDepth === void 0) {
            maxDepth = 5;
          }
          if (anchorPointType === void 0) {
            anchorPointType = AnchorPointType.Center;
          }
          this.children = [null, null, null, null];
          this.objects = [];
          this.divided = false;
          this.depth = 0;
          this.rect = void 0;
          this.MAX_COUNT = 10;
          this.MAX_DEPTH = 5;
          this.anchorPointType = void 0;
          this.rect = rect;
          this.MAX_COUNT = maxCount;
          this.MAX_DEPTH = maxDepth;
          this.anchorPointType = anchorPointType;
        }

        // 插入对象
        var _proto2 = QuadTree.prototype;
        _proto2.insert = function insert(object) {
          if (!this.rect.contains(object.rect, this.anchorPointType) && !this.rect.intersects(object.rect, this.anchorPointType)) {
            return false; // 对象不在当前节点范围内
          }

          if (this.objects.length < this.MAX_COUNT) {
            this.objects.push(object);
            return true;
          }
          if (this.depth >= this.MAX_DEPTH) {
            return false; // 达到最大深度，无法分裂
          }

          if (!this.divided) {
            this.divide();
          }
          for (var _iterator = _createForOfIteratorHelperLoose(this.children), _step; !(_step = _iterator()).done;) {
            var child = _step.value;
            if (child != null && child.insert(object)) {
              return true;
            }
          }
          return false;
        };
        _proto2.getTargetIndex = function getTargetIndex(node) {
          var X = this.rect.x;
          var Y = this.rect.y;
          var halfWidth = this.rect.width / 2;
          var halfHeight = this.rect.height / 2;
          var min_x = node.rect.x - node.rect.width / 2;
          var min_y = node.rect.y - node.rect.height / 2;
          var max_x = node.rect.x + node.rect.width / 2;
          var max_y = node.rect.y + node.rect.height / 2;
          if (min_x > X + halfWidth || max_x < X - halfWidth || min_y > Y + halfHeight || max_y < Y - halfHeight) return 0;
          var idx = 0;
          var IsLeft = min_x <= X ? true : false;
          var IsRight = max_x >= X ? true : false;
          var IsBottom = min_y <= Y ? true : false;
          var IsTop = max_y >= Y ? true : false;
          if (IsLeft) {
            if (IsTop) idx |= AreaType.LT;
            if (IsBottom) idx |= AreaType.LB;
          }
          if (IsRight) {
            if (IsTop) idx |= AreaType.RT;
            if (IsBottom) idx |= AreaType.RB;
          }
          return idx;
        }

        // 分裂当前节点为四个象限
        ;

        _proto2.divide = function divide() {
          var _this$rect = this.rect,
            x = _this$rect.x,
            y = _this$rect.y,
            width = _this$rect.width,
            height = _this$rect.height;
          var halfWidth = width / 2;
          var halfHeight = height / 2;
          var half2Width = halfWidth / 2;
          var half2Height = halfHeight / 2;
          if (this.anchorPointType == AnchorPointType.Center) {
            this.children[0] = new QuadTree(new QuadTreeRect(x - half2Width, y + half2Height, halfWidth, halfHeight), this.MAX_COUNT, this.MAX_DEPTH);
            this.children[1] = new QuadTree(new QuadTreeRect(x + half2Width, y + half2Height, halfWidth, halfHeight), this.MAX_COUNT, this.MAX_DEPTH);
            this.children[2] = new QuadTree(new QuadTreeRect(x - half2Width, y - half2Height, halfWidth, halfHeight), this.MAX_COUNT, this.MAX_DEPTH);
            this.children[3] = new QuadTree(new QuadTreeRect(x + half2Width, y - half2Height, halfWidth, halfHeight), this.MAX_COUNT, this.MAX_DEPTH);
          } else if (this.anchorPointType == AnchorPointType.LeftDown) {
            this.children[0] = new QuadTree(new QuadTreeRect(x, y + halfHeight, halfWidth, halfHeight), this.MAX_COUNT, this.MAX_DEPTH, this.anchorPointType);
            this.children[1] = new QuadTree(new QuadTreeRect(x + halfWidth, y + halfHeight, halfWidth, halfHeight), this.MAX_COUNT, this.MAX_DEPTH, this.anchorPointType);
            this.children[2] = new QuadTree(new QuadTreeRect(x, y, halfWidth, halfHeight), this.MAX_COUNT, this.MAX_DEPTH, this.anchorPointType);
            this.children[3] = new QuadTree(new QuadTreeRect(x + halfWidth, y, halfWidth, halfHeight), this.MAX_COUNT, this.MAX_DEPTH, this.anchorPointType);
          }
          this.divided = true;
          this.depth++;
        }

        // 查询指定范围内的对象
        ;

        _proto2.query = function query(range, found) {
          if (found === void 0) {
            found = [];
          }
          if (!this.rect.contains(range, this.anchorPointType) && !this.rect.intersects(range, this.anchorPointType)) {
            return found; // 范围不在当前节点内
          }

          for (var _iterator2 = _createForOfIteratorHelperLoose(this.objects), _step2; !(_step2 = _iterator2()).done;) {
            var obj = _step2.value;
            if (range.intersects(obj.rect, this.anchorPointType)) {
              found.push(obj);
            }
          }
          if (this.divided) {
            for (var _iterator3 = _createForOfIteratorHelperLoose(this.children), _step3; !(_step3 = _iterator3()).done;) {
              var child = _step3.value;
              if (child) {
                child.query(range, found);
              }
            }
          }
          return found;
        };
        _proto2.queryInRange = function queryInRange(range, radian, found) {
          if (found === void 0) {
            found = [];
          }
          if (!this.rect.contains(range, this.anchorPointType)) {
            return found; // 范围不在当前节点内
          }

          for (var _iterator4 = _createForOfIteratorHelperLoose(this.objects), _step4; !(_step4 = _iterator4()).done;) {
            var obj = _step4.value;
            if (range.getIsInRange(obj.rect, radian, this.anchorPointType)) {
              found.push(obj);
            }
          }
          if (this.divided) {
            for (var _iterator5 = _createForOfIteratorHelperLoose(this.children), _step5; !(_step5 = _iterator5()).done;) {
              var child = _step5.value;
              if (child) {
                child.queryInRange(range, radian, found);
              }
            }
          }
          return found;
        };
        _proto2.getAllChildNodes = function getAllChildNodes(qtList) {
          qtList.push(this);
          for (var i = 0; i < this.children.length; ++i) {
            var child = this.children[i];
            if (child) {
              child.getAllChildNodes(qtList);
            }
          }
        };
        _proto2.clear = function clear() {
          // 清除当前节点存储的对象
          this.objects.length = 0;

          // 递归清除子节点
          for (var i = 0; i < this.children.length; i++) {
            if (this.children[i]) {
              this.children[i].clear(); // 递归清除子节点
              this.children[i] = null; // 释放子节点
            }
          }

          // 重置分裂状态
          this.divided = false;
          this.depth = 0;
        };
        _proto2.remove = function remove(node) {
          var isRemove = false;
          if (!this.rect.contains(node.rect, this.anchorPointType) && !this.rect.intersects(node.rect, this.anchorPointType)) {
            return isRemove;
          }
          var index = this.objects.indexOf(node);
          if (index > -1) {
            this.objects.splice(index, 1);
            isRemove = true;
          }
          for (var i = 0; i < this.children.length; i++) {
            if (this.children[i]) {
              this.children[i].remove(node); // 递归清除子节点
            }
          }

          return isRemove;
        };
        return QuadTree;
      }());
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/QuadTreeTest.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './QuadTree.ts', './GameElement.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Prefab, Graphics, view, input, Input, NodeEventType, Color, KeyCode, instantiate, math, Component, QuadTreeRect, QuadTree, GameElement;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Prefab = module.Prefab;
      Graphics = module.Graphics;
      view = module.view;
      input = module.input;
      Input = module.Input;
      NodeEventType = module.NodeEventType;
      Color = module.Color;
      KeyCode = module.KeyCode;
      instantiate = module.instantiate;
      math = module.math;
      Component = module.Component;
    }, function (module) {
      QuadTreeRect = module.QuadTreeRect;
      QuadTree = module.QuadTree;
    }, function (module) {
      GameElement = module.GameElement;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3;
      cclegacy._RF.push({}, "8c2a26ybO9FPokS9uAmh6yv", "QuadTreeTest", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var QuadTreeTest = exports('QuadTreeTest', (_dec = ccclass('QuadTreeTest'), _dec2 = property(Prefab), _dec3 = property(GameElement), _dec4 = property(Graphics), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(QuadTreeTest, _Component);
        function QuadTreeTest() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "elementPrefab", _descriptor, _assertThisInitialized(_this));
          _this.quadTree = null;
          _this.size = void 0;
          _this.eleList = new Array();
          _this.IsShow = true;
          _this.qtList = void 0;
          _this.clickList = void 0;
          _this.idIndex = 0;
          _initializerDefineProperty(_this, "myElement", _descriptor2, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "graphics", _descriptor3, _assertThisInitialized(_this));
          _this.radius = 200;
          _this.count = 20;
          return _this;
        }
        var _proto = QuadTreeTest.prototype;
        _proto.onLoad = function onLoad() {
          // this.graphics = this.getComponent(Graphics);
          this.size = view.getViewportRect();
          var rect = new QuadTreeRect(0, 0, this.size.width, this.size.height);
          this.quadTree = new QuadTree(rect);
          this.eleList = [];
          this.qtList = [];
          this.clickList = [];
          input.on(Input.EventType.KEY_DOWN, this.onKeyDown, this);
          this.myElement = this.CreateElemnt(null, true);

          // this.CreateElemnt(math.v3(100, 100, 0))

          this.node.on(NodeEventType.MOUSE_DOWN, this.onMouseDown, this);

          // for (let i: number = 0; i < this.count; i++){
          //     const angle: number = (2 * Math.PI / this.count) * i;
          //     const x: number = this.myElement.node.position.x + this.radius * Math.cos(angle);
          //     const y: number = this.myElement.node.position.y + this.radius * Math.sin(angle);
          //     this.CreateElemnt(math.v3(x, y, 0));
          // }
        };

        _proto.drawSize = function drawSize() {
          this.graphics.clear();
          this.graphics.fillColor = Color.RED;
          this.graphics.strokeColor = Color.RED;
          this.graphics.lineWidth = 10;
          this.graphics.rect(-this.size.width / 2, -this.size.height / 2, this.size.width, this.size.height);
          this.graphics.stroke();
        };
        _proto.onMouseDown = function onMouseDown(event) {
          console.log("输出点击事件坐标", event.getLocationX(), event.getLocationY());
        };
        _proto.onKeyDown = function onKeyDown(event) {
          switch (event.keyCode) {
            case KeyCode.ARROW_LEFT:
              for (var i = 0; i < 5000; i++) {
                this.CreateElemnt();
              }
              break;
            case KeyCode.ARROW_RIGHT:
              for (var _i = 0; _i < 50; _i++) {
                this.CreateElemnt();
              }
              break;
            case KeyCode.ARROW_UP:
              this.myElement = this.CreateElemnt();
              break;
          }
        };
        _proto.start = function start() {
          this.drawSize();
        };
        _proto.update = function update(deltaTime) {
          this.TreeUpdate();
        }

        // private void FixedUpdate() {

        // }
        ;

        _proto.TreeUpdate = function TreeUpdate() {
          // TreeRoot.Clear();
          this.quadTree.clear();
          this.qtList.length = 0;
          for (var i = 0; i < this.clickList.length; i++) {
            this.clickList[i].Click(false);
          }
          this.clickList.length = 0;
          for (var index = 0; index < this.eleList.length; index++) {
            var element = this.eleList[index];
            this.quadTree.insert(element);
          }
          if (this.myElement) {
            this.clickList = this.quadTree.query(this.myElement.rect);
            for (var _i2 = 0; _i2 < this.clickList.length; _i2++) {
              this.clickList[_i2].Click(true);
            }
          }
          if (this.IsShow) {
            var qtList = [];
            this.quadTree.getAllChildNodes(qtList);
            var rects = qtList.map(function (e) {
              return e.rect;
            }, this);
            this.drawRect(rects);
            // for (let i = 0; i < qtList.length; ++i) {

            //     this.drawRect(qtList[i].rect);
            // }
          }
        };

        _proto.drawRect = function drawRect(rect) {
          // this.drawSize();
          this.graphics.clear();
          for (var index = 0; index < rect.length; index++) {
            var element = rect[index];
            this.graphics.fillColor = Color.RED;
            this.graphics.strokeColor = Color.YELLOW;
            this.graphics.lineWidth = 5;
            var x = element.x - element.width / 2;
            var y = element.y - element.height / 2;
            this.graphics.circle(element.x, element.y, 10);
            this.graphics.fill();
            this.graphics.rect(x, y, element.width, element.height);
            this.graphics.stroke();
          }
        };
        _proto.CreateElemnt = function CreateElemnt(pos, isMyself) {
          if (isMyself === void 0) {
            isMyself = false;
          }
          var node = instantiate(this.elementPrefab);
          var gameElement = node.getComponent(GameElement);
          node.name = "Ele " + this.idIndex++;
          gameElement.Init(this.size, isMyself);
          if (!pos) {
            pos = math.v3(0, 0, 0);
          }
          node.setPosition(pos);
          node.parent = this.node;
          if (!isMyself) {
            this.eleList.push(gameElement);
          }
          return gameElement;
        };
        return QuadTreeTest;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "elementPrefab", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "myElement", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "graphics", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/RemoveOrUpLevel.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Utils.ts', './TowerConfig.ts', './TowerLauncher.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, SpriteFrame, NodeEventType, Sprite, Label, Component, Utils, TowerConfig, TowerLauncher;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      SpriteFrame = module.SpriteFrame;
      NodeEventType = module.NodeEventType;
      Sprite = module.Sprite;
      Label = module.Label;
      Component = module.Component;
    }, function (module) {
      Utils = module.default;
    }, function (module) {
      TowerConfig = module.TowerConfig;
    }, function (module) {
      TowerLauncher = module.TowerLauncher;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;
      cclegacy._RF.push({}, "6e98e6rQmFOiIasiiJtk+VC", "RemoveOrUpLevel", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var RemoveOrUpLevel = exports('RemoveOrUpLevel', (_dec = ccclass('RemoveOrUpLevel'), _dec2 = property([SpriteFrame]), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(RemoveOrUpLevel, _Component);
        function RemoveOrUpLevel() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.upCostLabel = null;
          _this.upCostSprite = null;
          _this.removeBackLabel = null;
          _initializerDefineProperty(_this, "upStateSpriteFrames", _descriptor, _assertThisInitialized(_this));
          _this.buildInfo = null;
          _this.isMaxLevel = false;
          _this.handlerCall = void 0;
          _this.handlerObj = void 0;
          return _this;
        }
        var _proto = RemoveOrUpLevel.prototype;
        _proto.onLoad = function onLoad() {
          var upCostNode = Utils.FindChildByName(this.node, "upCostLevel");
          var removeBackNode = Utils.FindChildByName(this.node, "removeBackLabel");
          var upNode = Utils.FindChildByName(this.node, "up");
          var removeNode = Utils.FindChildByName(this.node, "remove");
          if (upNode) {
            upNode.on(NodeEventType.TOUCH_START, this.onClickUpLevel, this);
            this.upCostSprite = upNode.getComponent(Sprite);
          }
          if (removeNode) {
            removeNode.on(NodeEventType.TOUCH_START, this.onClickRemoveTower, this);
          }
          if (upCostNode) {
            this.upCostLabel = upCostNode.getComponent(Label);
          }
          if (removeBackNode) {
            this.removeBackLabel = removeBackNode.getComponent(Label);
          }
        };
        _proto.start = function start() {};
        _proto.onClickUpLevel = function onClickUpLevel(event) {
          if (!this.buildInfo) {
            return;
          }
          if (!this.buildInfo.tower) {
            return;
          }
          if (this.isMaxLevel) {
            return;
          }
          if (this.handlerCall && this.handlerObj) {
            this.handlerCall.call(this.handlerObj, 1, this.buildInfo);
          }
        };
        _proto.onClickRemoveTower = function onClickRemoveTower(event) {
          if (!this.buildInfo) {
            return;
          }
          if (!this.buildInfo.tower) {
            return;
          }
          if (this.handlerCall && this.handlerObj) {
            this.handlerCall.call(this.handlerObj, 2, this.buildInfo);
          }
        };
        _proto.updateInfo = function updateInfo(buildInfo, handlerCall, callObj) {
          if (handlerCall === void 0) {
            handlerCall = null;
          }
          if (callObj === void 0) {
            callObj = null;
          }
          this.buildInfo = buildInfo;
          this.handlerCall = handlerCall;
          this.handlerObj = callObj;
          var tower = this.buildInfo.tower;
          var spriteFrameIndex = 0;
          if (this.buildInfo && tower) {
            var currentLevel = tower.level;
            var nextLevelData = TowerConfig.instance.getTowerConfig(tower.towerId, currentLevel + 1);
            if (nextLevelData) {
              spriteFrameIndex = TowerLauncher.instance.value >= nextLevelData.buildCost ? 0 : 1;
            } else {
              spriteFrameIndex = 2;
            }
            this.upCostLabel.node.active = spriteFrameIndex != 2;
            this.isMaxLevel = spriteFrameIndex == 2;
            if (this.upCostSprite) {
              this.upCostSprite.spriteFrame = this.upStateSpriteFrames[spriteFrameIndex];
            }
            if (this.upCostLabel) {
              this.upCostLabel.string = nextLevelData ? nextLevelData.buildCost.toString() : '0';
            }
            var currentData = TowerConfig.instance.getTowerConfig(tower.towerId, currentLevel);
            if (this.removeBackLabel) {
              this.removeBackLabel.string = currentData ? currentData.removeBack.toString() : "0";
            }
            this.buildInfo.removeBackCost = currentData ? currentData.removeBack : 0;
            this.buildInfo.upLevelCost = nextLevelData ? nextLevelData.buildCost : 0;
          }
        };
        _proto.update = function update(deltaTime) {};
        return RemoveOrUpLevel;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "upStateSpriteFrames", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Render.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './config.ts', './Block.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Prefab, SpriteFrame, Node, Sprite, UITransform, math, instantiate, Component, config, Block;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Prefab = module.Prefab;
      SpriteFrame = module.SpriteFrame;
      Node = module.Node;
      Sprite = module.Sprite;
      UITransform = module.UITransform;
      math = module.math;
      instantiate = module.instantiate;
      Component = module.Component;
    }, function (module) {
      config = module.config;
    }, function (module) {
      Block = module.Block;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5;
      cclegacy._RF.push({}, "7f7ebjS2VtINIkslZ9v65Le", "Render", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var Render = exports('Render', (_dec = ccclass('Render'), _dec2 = property(Prefab), _dec3 = property([SpriteFrame]), _dec4 = property(SpriteFrame), _dec5 = property(Node), _dec6 = property(Node), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(Render, _Component);
        function Render() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "item", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "itemSpriteFrame", _descriptor2, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "backGroundItemSpriteFrame", _descriptor3, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "gamePanel", _descriptor4, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "backgroundPanel", _descriptor5, _assertThisInitialized(_this));
          _this.itemArray = [];
          _this.backGroundArray = [];
          return _this;
        }
        var _proto = Render.prototype;
        _proto.onLoad = function onLoad() {};
        _proto.init = function init() {
          this.itemArray = [];
          this.backGroundArray = [];
          var height = config.row * config.blockHeight;
          var width = config.col * config.blockWidth;
          var panelHeight = 1334;
          var diffH = Math.max(panelHeight - height, 0);
          for (var i = 0; i < config.row; i++) {
            this.itemArray[i] = [];
            this.backGroundArray[i] = [];
            for (var j = 0; j < config.col; j++) {
              var x = -width / 2 + config.blockWidth / 2 + j * config.blockWidth;
              var y = height / 2 - config.blockHeight / 2 - i * config.blockHeight - diffH / 2;
              var backItem = this.backGroundArray[i][j];
              if (!backItem) {
                backItem = this.createBackGroundItem(x, y);
              }
              backItem.getComponent(Sprite).spriteFrame = this.backGroundItemSpriteFrame;
              this.backGroundArray[i][j] = backItem;
              var item = this.itemArray[i][j];
              if (!item) {
                item = this.createItem(x, y);
              }
              this.itemArray[i][j] = item;
            }
          }
        };
        _proto.createBackGroundItem = function createBackGroundItem(x, y) {
          var item = new Node();
          var sprite = item.addComponent(Sprite);
          sprite.spriteFrame = this.backGroundItemSpriteFrame;
          sprite.sizeMode = Sprite.SizeMode.CUSTOM;
          this.node.addChild(item);
          item.setPosition(x, y);
          item.addComponent(UITransform).contentSize = math.size(config.blockWidth, config.blockHeight);
          return item;
        };
        _proto.createItem = function createItem(x, y) {
          var item = instantiate(this.item);
          this.gamePanel.addChild(item);
          item.getComponent(Sprite).sizeMode = Sprite.SizeMode.CUSTOM;
          item.getComponent(UITransform).contentSize = math.size(config.blockWidth, config.blockHeight);
          item.setPosition(x, y);
          return item;
        };
        _proto.render = function render(dataArray) {
          for (var i = 0; i < config.row; i++) {
            for (var j = 0; j < config.col; j++) {
              var color = dataArray[i][j];
              this.itemArray[i][j].getComponent(Sprite).spriteFrame = this.itemSpriteFrame[color - 1];
            }
          }
        };
        _proto.onDestroy = function onDestroy() {
          for (var index = 0; index < this.itemArray.length; index++) {
            var elements = this.itemArray[index];
            for (var j = 0; j < elements.length; j++) {
              var element = elements[j];
              if (element) {
                element.destroy();
              }
            }
          }
          this.itemArray = [];
        };
        _proto.playEliminateEff = function playEliminateEff(eliminateVec2) {
          var _this2 = this;
          return new Promise(function (resolve, reject) {
            var result = 0;
            for (var i = 0; i < eliminateVec2.length; i++) {
              var v2 = eliminateVec2[i];
              var block = _this2.itemArray[v2.x][v2.y].getComponent(Block);
              if (block) {
                block.playEff().then(function (r) {
                  if (r) {
                    result += 1;
                    if (result == eliminateVec2.length) {
                      resolve(true);
                    }
                  }
                });
              }
            }
          });
        };
        return Render;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "item", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return undefined;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "itemSpriteFrame", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "backGroundItemSpriteFrame", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return undefined;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "gamePanel", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return undefined;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "backgroundPanel", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return undefined;
        }
      })), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/RoadNode.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _createClass, cclegacy;
  return {
    setters: [function (module) {
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "a55e93n9ZJI4pyKrRPBGwfB", "RoadNode", undefined);
      var RoadNode = exports('default', /*#__PURE__*/function () {
        function RoadNode() {
          this._px = void 0;
          this._py = void 0;
          this._cx = void 0;
          this._cy = void 0;
          this._dx = void 0;
          this._dy = void 0;
          this._value = void 0;
          this._f = void 0;
          this._g = void 0;
          this._h = void 0;
          this._parent = void 0;
          //-------------二堆叉存储结构-----------------
          this._treeParent = null;
          //二堆叉结构的父节点
          this._left = null;
          //二堆叉结构的左子节点
          this._right = null;
          //二堆叉结构的右子节点
          this._openTag = 0;
          //是否在开启列表标记
          this._closeTag = 0;
        }
        var _proto = RoadNode.prototype;
        //是否在关闭列表标记
        _proto.resetTree = function resetTree() {
          this._treeParent = null;
          this._left = null;
          this._right = null;
        };
        _createClass(RoadNode, [{
          key: "px",
          get: function get() {
            return this._px;
          },
          set: function set(value) {
            this._px = value;
          }
        }, {
          key: "py",
          get: function get() {
            return this._py;
          },
          set: function set(value) {
            this._py = value;
          }
        }, {
          key: "cx",
          get: function get() {
            return this._cx;
          },
          set: function set(value) {
            this._cx = value;
          }
        }, {
          key: "cy",
          get: function get() {
            return this._cy;
          },
          set: function set(value) {
            this._cy = value;
          }
        }, {
          key: "dx",
          get: function get() {
            return this._dx;
          },
          set: function set(value) {
            this._dx = value;
          }
        }, {
          key: "dy",
          get: function get() {
            return this._dy;
          },
          set: function set(value) {
            this._dy = value;
          }
        }, {
          key: "value",
          get: function get() {
            return this._value;
          },
          set: function set(value) {
            this._value = value;
          }
        }, {
          key: "f",
          get: function get() {
            return this._f;
          },
          set: function set(value) {
            this._f = value;
          }
        }, {
          key: "g",
          get: function get() {
            return this._g;
          },
          set: function set(value) {
            this._g = value;
          }
        }, {
          key: "h",
          get: function get() {
            return this._h;
          },
          set: function set(value) {
            this._h = value;
          }
        }, {
          key: "parent",
          get: function get() {
            return this._parent;
          },
          set: function set(value) {
            this._parent = value;
          }

          //-------------二堆叉存储结构-----------------

          /**
           * 二堆叉结构的父节点
           */
        }, {
          key: "treeParent",
          get: function get() {
            return this._treeParent;
          },
          set: function set(value) {
            this._treeParent = value;
          }

          /**
           * 二堆叉结构的左子节点
           */
        }, {
          key: "left",
          get: function get() {
            return this._left;
          },
          set: function set(value) {
            this._left = value;
          }

          /**
           * 二堆叉结构的右子节点
           */
        }, {
          key: "right",
          get: function get() {
            return this._right;
          },
          set: function set(value) {
            this._right = value;
          }

          /**
           * 是否在开启列表标记
           */
        }, {
          key: "openTag",
          get: function get() {
            return this._openTag;
          },
          set: function set(value) {
            this._openTag = value;
          }

          /**
           * 是否在关闭列表标记
           */
        }, {
          key: "closeTag",
          get: function get() {
            return this._closeTag;
          },
          set: function set(value) {
            this._closeTag = value;
          }
        }]);
        return RoadNode;
      }());
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/RoleEntity.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './GameConst.ts', './GameEntity.ts'], function (exports) {
  var _inheritsLoose, _asyncToGenerator, _regeneratorRuntime, cclegacy, GameConst, GameEntity;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _asyncToGenerator = module.asyncToGenerator;
      _regeneratorRuntime = module.regeneratorRuntime;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      GameConst = module.GameConst;
    }, function (module) {
      GameEntity = module.GameEntity;
    }],
    execute: function () {
      cclegacy._RF.push({}, "ba1ccbSf4NP4K6oGNzcY9AN", "RoleEntity", undefined);

      /**
       * @fileName RoleEntity.ts
       * @author zhangqiong
       * @date 2024/12/27 19:28:02"
       * @description
       */
      var RoleEntity = exports('RoleEntity', /*#__PURE__*/function (_GameEntity) {
        _inheritsLoose(RoleEntity, _GameEntity);
        function RoleEntity() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _GameEntity.call.apply(_GameEntity, [this].concat(args)) || this;
          _this.data = void 0;
          _this.scaleSize = 0.4;
          _this.status = 0;
          return _this;
        }
        var _proto = RoleEntity.prototype;
        _proto.init = function init() {
          _GameEntity.prototype.init.call(this);
        };
        _proto.setData = /*#__PURE__*/function () {
          var _setData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(data) {
            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) switch (_context.prev = _context.next) {
                case 0:
                  this.data = data;
                  this.setId(data.getEntityId());
                  // this.setLayer(data.heroConfig.layer);
                  this.setLayer(GameConst.ROLE_LAYER);
                  this.setScale(this.scaleSize, this.scaleSize);
                  this.setSpeed(data.heroConfig.speed);
                case 5:
                case "end":
                  return _context.stop();
              }
            }, _callee, this);
          }));
          function setData(_x) {
            return _setData.apply(this, arguments);
          }
          return setData;
        }();
        return RoleEntity;
      }(GameEntity));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/RoleEntity2.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Utils.ts', './RPGConfig.ts', './Enum2.ts'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, dragonBones, Sprite, math, ProgressBar, Component, Utils, RPGConfig, RPGModelDirection;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      dragonBones = module.dragonBones;
      Sprite = module.Sprite;
      math = module.math;
      ProgressBar = module.ProgressBar;
      Component = module.Component;
    }, function (module) {
      Utils = module.default;
    }, function (module) {
      RPGConfig = module.RPGConfig;
    }, function (module) {
      RPGModelDirection = module.RPGModelDirection;
    }],
    execute: function () {
      var _dec, _class;
      cclegacy._RF.push({}, "9dd40M7uuZB+r5LdWJ10Id2", "RoleEntity", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var RoleEntity = exports('RoleEntity', (_dec = ccclass('RoleEntity'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(RoleEntity, _Component);
        function RoleEntity() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.spNode = void 0;
          _this.progressNode = void 0;
          _this.modelData = void 0;
          _this.diretion = void 0;
          _this.currentDiretion = void 0;
          return _this;
        }
        var _proto = RoleEntity.prototype;
        _proto.onLoad = function onLoad() {
          this.spNode = Utils.FindChildByName(this.node, "player");
          this.progressNode = Utils.FindChildByName(this.node, "ProgressBar");
        };
        _proto.start = function start() {};
        _proto.update = function update(deltaTime) {};
        _proto.playAnimation = function playAnimation(name, time) {
          var _this2 = this;
          if (time === void 0) {
            time = 1;
          }
          return new Promise(function (resolve, reject) {
            if (_this2.spNode) {
              var dr = _this2.spNode.getComponent(dragonBones.ArmatureDisplay);
              if (dr) {
                if (time != 0) {
                  dr.addEventListener(dragonBones.EventObject.COMPLETE, function () {
                    resolve(true);
                  }, _this2);
                  dr.playAnimation(name, time);
                } else {
                  dr.playAnimation(name, time);
                  resolve(true);
                }
              } else {
                reject(false);
              }
            } else {
              reject(false);
            }
          });
        };
        _proto.setModeData = function setModeData(data) {
          this.modelData = data;
          this.diretion = data.camp == 0 ? RPGModelDirection.Left : RPGModelDirection.Right;
          this.currentDiretion = this.diretion;
          if (data.camp == 1) {
            this.node.setScale(-1, 1);
          }
          // this.setColor(data.index);
          this.setHp(data.hp / 100);
        }

        /**
         * 转换方向
         * @returns 
         */;
        _proto.rotationDiretion = function rotationDiretion() {
          var newDiretion = null;
          if (this.currentDiretion == RPGModelDirection.Left) {
            newDiretion = RPGModelDirection.Right;
          } else if (this.currentDiretion == RPGModelDirection.Right) {
            newDiretion = RPGModelDirection.Left;
          }
          var sacleX = 1;
          if (newDiretion === RPGModelDirection.Right) {
            sacleX = -1;
          }
          this.node.setScale(sacleX, 1);
          this.currentDiretion = newDiretion;
          return true;
        };
        _proto.setColor = function setColor(index) {
          if (this.spNode) {
            var color = RPGConfig.ins.colors[index];
            this.spNode.getComponent(Sprite).color = math.color(color);
          }
        };
        _proto.setHp = function setHp(value) {
          if (this.progressNode) {
            var progress = this.progressNode.getComponent(ProgressBar);
            if (progress) {
              progress.progress = value;
            }
          }
        };
        return RoleEntity;
      }(Component)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/RPGConfig.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _createClass, cclegacy, math;
  return {
    setters: [function (module) {
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      math = module.math;
    }],
    execute: function () {
      cclegacy._RF.push({}, "0fdecYzFzNBC6Oqjv7GU04j", "RPGConfig", undefined);
      var RPGStateType = exports('RPGStateType', /*#__PURE__*/function (RPGStateType) {
        RPGStateType[RPGStateType["Death"] = 0] = "Death";
        RPGStateType[RPGStateType["Await"] = 1] = "Await";
        RPGStateType[RPGStateType["Move"] = 2] = "Move";
        RPGStateType[RPGStateType["Attack"] = 3] = "Attack";
        return RPGStateType;
      }({}));
      var RPGConfig = exports('RPGConfig', /*#__PURE__*/function () {
        function RPGConfig() {
          this.leftDatas = void 0;
          this.rightDatas = void 0;
          this.colors = [];
          this.initData();
        }
        var _proto = RPGConfig.prototype;
        _proto.initData = function initData() {
          this.colors = ["#F7AEAE", "#9FADE4", "#E9E58A", "#B6D38B", "#8BD3BF", "#EC4727", "#D1B628", "#548B21", "#2EB19C", "#2E4DB1"];
          this.leftDatas = [{
            index: 0,
            attack: 30,
            def: 5,
            speed: 15,
            hp: 100,
            camp: 0,
            "long": false,
            pos: math.v2(-104.869, 232)
          }, {
            index: 1,
            attack: 35,
            def: 10,
            speed: 20,
            hp: 100,
            camp: 0,
            "long": false,
            pos: math.v2(-104.869, -37.535)
          }, {
            index: 2,
            attack: 40,
            def: 15,
            speed: 35,
            hp: 100,
            camp: 0,
            "long": false,
            pos: math.v2(-250, 389.228)
          }, {
            index: 3,
            attack: 55,
            def: 10,
            speed: 40,
            hp: 100,
            camp: 0,
            "long": false,
            pos: math.v2(-250, 161.407)
          }, {
            index: 4,
            attack: 40,
            def: 5,
            speed: 50,
            hp: 100,
            camp: 0,
            "long": false,
            pos: math.v2(-250, -98.502)
          }];
          this.rightDatas = [{
            index: 5,
            attack: 20,
            def: 5,
            speed: 15,
            hp: 100,
            camp: 1,
            "long": false,
            pos: math.v2(119.743, 232)
          }, {
            index: 6,
            attack: 35,
            def: 10,
            speed: 20,
            hp: 100,
            camp: 1,
            "long": false,
            pos: math.v2(119.743, -37.535)
          }, {
            index: 7,
            attack: 40,
            def: 15,
            speed: 35,
            hp: 100,
            camp: 1,
            "long": false,
            pos: math.v2(250, 389.228)
          }, {
            index: 8,
            attack: 45,
            def: 10,
            speed: 40,
            hp: 100,
            camp: 1,
            "long": false,
            pos: math.v2(250, 161.407)
          }, {
            index: 9,
            attack: 50,
            def: 5,
            speed: 50,
            hp: 100,
            camp: 1,
            "long": false,
            pos: math.v2(250, -98.502)
          }];
        };
        _createClass(RPGConfig, null, [{
          key: "ins",
          get: function get() {
            if (!this._inst) {
              this._inst = new RPGConfig();
            }
            return this._inst;
          }
        }]);
        return RPGConfig;
      }());
      RPGConfig._inst = void 0;
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/RPGLauncher.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, Component;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class, _class2;
      cclegacy._RF.push({}, "f3556t0IwZKtIdYcW+oqHWW", "RPGLauncher", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var RPGLauncher = exports('RPGLauncher', (_dec = ccclass('RPGLauncher'), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(RPGLauncher, _Component);
        function RPGLauncher() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.seed = 5;
          _this.initSeed = 5;
          _this.logRandomArray = [];
          return _this;
        }
        var _proto = RPGLauncher.prototype;
        _proto.onLoad = function onLoad() {
          if (RPGLauncher.ins) {
            this.destroy();
            return;
          } else {
            RPGLauncher.ins = this;
          }
        };
        _proto.start = function start() {};
        _proto.update = function update(deltaTime) {};
        _proto.setRandomSeed = function setRandomSeed(seed) {
          this.initSeed = seed;
          console.error("收到随机数", this.initSeed);
        };
        _proto.seedRandom = function seedRandom() {
          if (this.logRandomArray.length < 30) {
            this.logRandomArray.push(this.seed);
          }
          this.seed = (this.seed * 9301 + 49297) % 233280;
          var value = this.seed / 233280.0;
          return value;
        }

        /**
            * 随机获得int整数 
            * @param minNum:最小范围(0开始)
            * @param maxNum:最大范围
            * @param stepLen:增加范围（整数，默认为1）
            * @return 
            */;
        _proto.randomInt = function randomInt(minNum, maxNum, stepLen) {
          if (maxNum === void 0) {
            maxNum = 0;
          }
          if (stepLen === void 0) {
            stepLen = 1;
          }
          if (minNum > maxNum) {
            var nTemp = minNum;
            minNum = maxNum;
            maxNum = nTemp;
          }
          var nDeltaRange = maxNum - minNum + 1 * stepLen;
          var nRandomNumber = this.seedRandom() * nDeltaRange;
          nRandomNumber += minNum;
          return Math.floor(nRandomNumber / stepLen) * stepLen;
        };
        return RPGLauncher;
      }(Component), _class2.ins = void 0, _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/RPGPanel.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './BaseView.ts', './ViewRegisterMgr.ts', './PanelEnum.ts', './LayerManager.ts', './RPGConfig.ts', './ViewConst.ts', './AssetMgr.ts', './RPGLauncher.ts', './Enum2.ts', './RoleEntity2.ts'], function (exports) {
  var _inheritsLoose, _asyncToGenerator, _regeneratorRuntime, cclegacy, _decorator, tween, math, BaseView, registerView, PanelType, LayerType, RPGConfig, RPGStateType, ViewConst, AssetMgr, RPGLauncher, RPGModelAnimName, RoleEntity;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _asyncToGenerator = module.asyncToGenerator;
      _regeneratorRuntime = module.regeneratorRuntime;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      tween = module.tween;
      math = module.math;
    }, function (module) {
      BaseView = module.default;
    }, function (module) {
      registerView = module.registerView;
    }, function (module) {
      PanelType = module.PanelType;
    }, function (module) {
      LayerType = module.LayerType;
    }, function (module) {
      RPGConfig = module.RPGConfig;
      RPGStateType = module.RPGStateType;
    }, function (module) {
      ViewConst = module.default;
    }, function (module) {
      AssetMgr = module.default;
    }, function (module) {
      RPGLauncher = module.RPGLauncher;
    }, function (module) {
      RPGModelAnimName = module.RPGModelAnimName;
    }, function (module) {
      RoleEntity = module.RoleEntity;
    }],
    execute: function () {
      var _dec, _class;
      cclegacy._RF.push({}, "922c3KvSMVMU7rKEhPU3H4J", "RPGPanel", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var RPGPanel = exports('RPGPanel', (_dec = ccclass('RPGPanel'), _dec(_class = /*#__PURE__*/function (_BaseView) {
        _inheritsLoose(RPGPanel, _BaseView);
        function RPGPanel() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _BaseView.call.apply(_BaseView, [this].concat(args)) || this;
          _this.orderIndex = void 0;
          _this.orderArrary = void 0;
          _this.leftFightModels = void 0;
          _this.rightFightModels = void 0;
          _this.targetIndex = void 0;
          return _this;
        }
        var _proto = RPGPanel.prototype;
        _proto.onOpen = /*#__PURE__*/function () {
          var _onOpen = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(fromUI) {
            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) switch (_context.prev = _context.next) {
                case 0:
                  this.initModelData();
                  _context.next = 3;
                  return this.initModel();
                case 3:
                  this.orderIndex = 0;
                  this.nextAttack();
                case 5:
                case "end":
                  return _context.stop();
              }
            }, _callee, this);
          }));
          function onOpen(_x) {
            return _onOpen.apply(this, arguments);
          }
          return onOpen;
        }();
        _proto.initModelData = function initModelData() {
          this.orderArrary = [];
          for (var i = 0; i < RPGConfig.ins.leftDatas.length; i++) {
            var element = RPGConfig.ins.leftDatas[i];
            var rightData = RPGConfig.ins.rightDatas[i];
            var copyData = {
              index: element.index,
              attack: element.attack,
              def: element.def,
              camp: element.camp,
              hp: element.hp,
              speed: element.speed,
              pos: element.pos,
              "long": element["long"],
              state: RPGStateType.Await
            };
            var copyRightData = {
              index: rightData.index,
              attack: rightData.attack,
              def: rightData.def,
              camp: rightData.camp,
              hp: rightData.hp,
              speed: rightData.speed,
              pos: rightData.pos,
              "long": rightData["long"],
              state: RPGStateType.Await
            };
            this.orderArrary[i] = copyData;
            this.orderArrary[i + 5] = copyRightData;
          }
        };
        _proto.initModel = /*#__PURE__*/function () {
          var _initModel = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {
            var i, data, node;
            return _regeneratorRuntime().wrap(function _callee2$(_context2) {
              while (1) switch (_context2.prev = _context2.next) {
                case 0:
                  this.leftFightModels = [];
                  this.rightFightModels = [];
                  i = 0;
                case 3:
                  if (!(i < this.orderArrary.length)) {
                    _context2.next = 12;
                    break;
                  }
                  data = this.orderArrary[i];
                  _context2.next = 7;
                  return this.createMode(data);
                case 7:
                  node = _context2.sent;
                  if (data.camp === 0) {
                    this.leftFightModels[data.index] = node;
                  } else if (data.camp === 1) {
                    this.rightFightModels[data.index] = node;
                  }
                case 9:
                  i++;
                  _context2.next = 3;
                  break;
                case 12:
                case "end":
                  return _context2.stop();
              }
            }, _callee2, this);
          }));
          function initModel() {
            return _initModel.apply(this, arguments);
          }
          return initModel;
        }();
        _proto.createMode = /*#__PURE__*/function () {
          var _createMode = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(data) {
            var path, node, ctr;
            return _regeneratorRuntime().wrap(function _callee3$(_context3) {
              while (1) switch (_context3.prev = _context3.next) {
                case 0:
                  path = ViewConst.defaultPrefabPathPrefix + "RPGRoleEntity";
                  _context3.next = 3;
                  return AssetMgr.instance.createPrefab(path);
                case 3:
                  node = _context3.sent;
                  if (node) {
                    _context3.next = 6;
                    break;
                  }
                  return _context3.abrupt("return");
                case 6:
                  node.setPosition(data.pos.x, data.pos.y);
                  node.parent = this.node;
                  ctr = node.getComponent(RoleEntity);
                  if (ctr) {
                    ctr.setModeData(data);
                  }
                  ctr.playAnimation(RPGModelAnimName.Idel);
                  return _context3.abrupt("return", node);
                case 12:
                case "end":
                  return _context3.stop();
              }
            }, _callee3, this);
          }));
          function createMode(_x2) {
            return _createMode.apply(this, arguments);
          }
          return createMode;
        }();
        _proto.start = function start() {};
        _proto.update = function update(deltaTime) {};
        _proto.getOrderArraryByCamp = function getOrderArraryByCamp(camp) {
          var result = [];
          for (var i = 0; i < this.orderArrary.length; i++) {
            var data = this.orderArrary[i];
            if (data.camp === camp && data.state != RPGStateType.Death) {
              result.push(data);
            }
          }
          return result;
        };
        _proto.getOrderDataByIndex = function getOrderDataByIndex(index) {
          for (var i = 0; i < this.orderArrary.length; i++) {
            var data = this.orderArrary[i];
            if (data.index === index && data.state != RPGStateType.Death) {
              return data;
            }
          }
          return null;
        };
        _proto.setModelState = function setModelState(obj, state) {
          var _this2 = this;
          if (state == RPGStateType.Move) {
            var targetCamp = 0;
            if (obj.camp == 0) {
              targetCamp = 1;
            }
            var campList = this.getOrderArraryByCamp(targetCamp);
            var index = RPGLauncher.ins.randomInt(0, campList.length - 1);
            console.log("随机出来的下标", index);
            var targetObj = campList[index];
            // for (let i = 0; i < this.orderArrary.length; i++) {
            //     const data = this.orderArrary[i];
            //     if (data.camp === targetCamp && data.state != RPGStateType.Idea) {
            //         targetObj = data;
            //         break;
            //     }
            // }
            this.targetIndex = null;
            if (targetObj) {
              this.targetIndex = targetObj.index;
              this.move(obj, targetObj).then(function (value) {
                _this2.setModelState(obj, RPGStateType.Attack);
              })["catch"](function (err) {
                console.error(err);
              });
            } else {
              if (targetCamp == 1) {
                console.error("你赢了");
              } else {
                console.error("你输了");
              }
            }
          } else if (state == RPGStateType.Attack) {
            if (this.targetIndex != null) {
              if (obj.camp == 0) ;
              var targetData = this.getOrderDataByIndex(this.targetIndex);
              this.attack(obj, targetData).then(function (value1) {
                console.error("执行到攻击返回步骤了");
                _this2.move(obj, obj, true).then(function (value) {
                  if (value1 <= 0) {
                    _this2.setModelState(targetData, RPGStateType.Death);
                  }
                  _this2.orderIndex += 1;
                  _this2.nextAttack();
                })["catch"](function (err) {
                  console.error(err);
                });
              })["catch"](function (err) {
                console.error(err);
              });
            }
          } else if (state == RPGStateType.Death) {
            if (obj) {
              for (var _index = 0; _index < this.orderArrary.length; _index++) {
                var element = this.orderArrary[_index];
                if (element.index == obj.index) {
                  // this.orderArrary.splice(index, 1);
                  element.state = RPGStateType.Death;
                  break;
                }
              }
              var model = this.getTargetModel(obj);
              if (model) {
                console.error(obj.index + "\u88AB\u6253\u6B7B\u4E86!!!!");
                model.removeFromParent();
              }
            }
          }
        }

        // private updateTargetHp(target: IRPGModelData, currentHp: number): void{
        //     if (!target) {
        //         return;
        //     }

        // }
        ;

        _proto.getTargetModel = function getTargetModel(target) {
          var model = null;
          if (target.camp == 0) {
            model = this.leftFightModels[target.index];
          } else if (target.camp == 1) {
            model = this.rightFightModels[target.index];
          }
          return model;
        };
        _proto.attack = function attack(attacker, target) {
          var _this3 = this;
          return new Promise(function (resolve, rejecet) {
            if (!attacker || !target) {
              rejecet("攻击数据为空");
              return;
            }
            var targetData = _this3.orderArrary[target.index];
            if (!targetData) {
              rejecet("攻击对象没找到");
              return;
            }
            var targetCurrentHp = target.hp + target.def - attacker.attack;
            target.hp = targetCurrentHp;
            var model = _this3.getTargetModel(target);
            if (!model) {
              rejecet("目标模型没找到");
              return;
            }
            var modelCtr = model.getComponent(RoleEntity);
            if (!modelCtr) {
              rejecet("模型没有绑定管理脚本");
              return;
            }
            var attackModel = _this3.getTargetModel(attacker);
            if (attackModel) {
              var attackCtr = attackModel.getComponent(RoleEntity);
              if (attackCtr) {
                attackCtr.playAnimation(RPGModelAnimName.Attack).then(function (value) {
                  console.error(attacker.index + " \u653B\u51FB\u4E86" + target.index + ",\u9020\u6210\u4E86" + attacker.attack + "\u4F24\u5BB3,\u9632\u5FA1\u4E86" + target.def + ",\u8FD8\u5269" + target.hp);
                  modelCtr.setHp(targetCurrentHp / 100);
                  resolve(targetCurrentHp);
                })["catch"](function (err) {
                  console.error(err);
                });
              }
            }
          });
        };
        _proto.move = function move(obj, target, isBack) {
          var _this4 = this;
          if (isBack === void 0) {
            isBack = false;
          }
          return new Promise(function (resolve, reject) {
            if (!obj || !target) {
              reject("数据为空");
              return;
            }
            var model = _this4.getTargetModel(obj);
            if (!model) {
              reject("模型为空");
              return;
            }
            var ctr = model.getComponent(RoleEntity);
            if (ctr) {
              if (isBack) {
                ctr.rotationDiretion();
              }
              ctr.playAnimation(RPGModelAnimName.Walk);
            }
            tween(model).to(1, {
              position: math.v3(target.pos.x, target.pos.y, 0)
            }).call(function (target, data) {
              if (ctr) {
                if (isBack) {
                  ctr.rotationDiretion();
                }
                ctr.playAnimation(RPGModelAnimName.Idel, 0);
              }
              resolve(true);
            }, _this4).start();
          });
        };
        _proto.nextAttack = function nextAttack() {
          if (this.orderIndex > 9) {
            this.orderIndex = 0;
          }
          var attacker = this.orderArrary[this.orderIndex];
          if (attacker.state === RPGStateType.Await) {
            this.setModelState(attacker, RPGStateType.Move);
          } else {
            this.orderIndex += 1;
            this.nextAttack();
          }
        };
        return RPGPanel;
      }(BaseView)) || _class));
      registerView({
        viewCls: RPGPanel,
        id: PanelType.RPGPanel,
        layer: LayerType.view
      });
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ScenceMap.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Enum2.ts', './SpawnPoint.ts', './GameManager.ts', './TransferDoor.ts', './Monster.ts', './Npc.ts', './SceneBase.ts'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, Node, Vec3, MapLoadModel, MapItemType, SpawnPoint, GameManager, TransferDoor, Monster, Npc, SceneBase;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Vec3 = module.Vec3;
    }, function (module) {
      MapLoadModel = module.MapLoadModel;
      MapItemType = module.MapItemType;
    }, function (module) {
      SpawnPoint = module.default;
    }, function (module) {
      GameManager = module.GameManager;
    }, function (module) {
      TransferDoor = module.default;
    }, function (module) {
      Monster = module.Monster;
    }, function (module) {
      Npc = module.Npc;
    }, function (module) {
      SceneBase = module.SceneBase;
    }],
    execute: function () {
      var _dec, _class;
      cclegacy._RF.push({}, "d1b96xOPgFGeahphQzjz3qP", "ScenceMap", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var ScenceMap = exports('ScenceMap', (_dec = ccclass('ScenceMap'), _dec(_class = /*#__PURE__*/function (_SceneBase) {
        _inheritsLoose(ScenceMap, _SceneBase);
        function ScenceMap() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _SceneBase.call.apply(_SceneBase, [this].concat(args)) || this;
          // @property(Node)
          // public layer: Node = null;
          //
          // @property(MapLayer)
          // public mapLayer: MapLayer = null;
          //
          // @property(EntityLayer)
          // public entityLayer: EntityLayer = null;
          //
          // @property(Camera)
          // private camera: Camera = null;
          // private _mapData: MapData;
          // private _mapId: number;
          //
          // private targetPos: Vec3 = new Vec3(0, 0, 0);
          //
          // private winSize: Size = new Size();
          // private _mapParams: MapParams = null;
          /**
          * 场景里所有的出生点
          */
          _this.spawnPointList = [];
          /**
           * 场景里所有的传送门
           */
          _this.transferDoorList = [];
          /**
           * 场景里所有的npc
           */
          _this.npcList = [];
          /**
           * 场景里所有的怪物
           */
          _this.monsterList = [];
          _this.player = null;
          return _this;
        }
        var _proto = ScenceMap.prototype;
        // private isInit: boolean = false;
        _proto.start = function start() {
          _SceneBase.prototype.start.call(this);
          // this.winSize = view.getVisibleSize();
          // this.node.setPosition(math.v3(-this.winSize.width / 2, -this.winSize.height / 2));
          this.node.on(Node.EventType.TOUCH_START, this.onMapTouch, this);
          // this.node.on(Node.EventType.TOUCH_START, (event: EventTouch) => {
          //     const screenPoint = event.getLocation();
          //     console.log('全局点击的屏幕坐标:', screenPoint);
          // }, this);

          this.setMapId(1, MapLoadModel.single);
        }

        // public set mapId(value: number) {
        //     this._mapId = value;
        //     this.loadMap(value);
        // }
        //
        // public get mapId(): number{
        //     return this._mapId;
        // }

        // public loadMap(mapId: number, mapLoadModel: MapLoadModel = MapLoadModel.single) {
        //     if (mapLoadModel == MapLoadModel.single) {
        //         this.loadSingleMap(mapId);
        //     } else {
        //         // this.loadSlicesMap(mapId);
        //     }
        // }

        // protected loadSingleMap(mapId: number) {
        //     var dataPath: string = `Map/map${mapId}/map${mapId}`;
        //     resources.load(dataPath, JsonAsset, (error: Error, res: JsonAsset) => {
        //         if (error != null) {
        //             console.log("加载地图数据失败 path = ", dataPath, "error", error);
        //             return;
        //         }
        //
        //         var mapData: MapData = res.json as MapData;
        //
        //         var bgPath: string = dataPath + "/texture";
        //         resources.load(bgPath, Texture2D, (error: Error, tex: Texture2D) => {
        //             if (error != null) {
        //                 console.log("加载地图背景失败 path = ", bgPath, "error", error);
        //                 return;
        //             }
        //             console.log(mapData, tex);
        //             this.init(mapData, tex);
        //             // this.sceneMap.init(mapData, tex, MapLoadModel.single)
        //         });
        //
        //     });
        // }
        ;

        _proto.getMapPath = function getMapPath(mapId) {
          return "Map/map" + mapId + "/map" + mapId;
        };
        _proto.initMapData = function initMapData(mapData) {
          this.initMapElement();
          this.afterInitMapElement();
          this.initPlayer();
          this.setViewToPlayer();
        };
        _proto.initMapElement = function initMapElement() {
          var mapItems = this.mapData.mapItems;
          if (!mapItems) {
            return;
          }
          for (var i = 0; i < mapItems.length; i++) {
            var mapItem = mapItems[i];
            var mapItemType = mapItem.type;
            if (mapItemType == MapItemType.Npc) {
              this.initNpc(mapItem);
            } else if (mapItemType == MapItemType.Monster) {
              this.initMonster(mapItem);
            } else if (mapItemType == MapItemType.Transfer) {
              this.initTransferDoor(mapItem);
            } else if (mapItemType == MapItemType.SpawnPoint) {
              this.initSpawnPoint(mapItem);
            }
          }
        }

        /**
        * 初始化Npc
        */;
        _proto.initNpc = function initNpc(editData) {
          var npc = GameManager.instance.getNPC();
          npc.node.parent = this.entityLayer.node;
          npc.initEditData(editData);
          npc.init();
        }

        /**
         * 初始化怪物
         */;
        _proto.initMonster = function initMonster(editData) {
          var monster = GameManager.instance.getMonster();
          monster.node.parent = this.entityLayer.node;
          monster.initEditData(editData);
          monster.init();
        }

        /**
         * 初始化传送门
         */;
        _proto.initTransferDoor = function initTransferDoor(editData) {
          var transferDoor = GameManager.instance.getTransferDoor(editData.transferType);
          transferDoor.node.parent = this.entityLayer.node;
          transferDoor.initEditData(editData);
          transferDoor.init();
        };
        _proto.initSpawnPoint = function initSpawnPoint(editData) {
          var spawnPoint = GameManager.instance.getSpawnPoint();
          spawnPoint.node.parent = this.entityLayer.node;
          spawnPoint.initEditData(editData);
          spawnPoint.init();
        };
        _proto.initPlayer = function initPlayer() {
          var spawnPoint = this.getSpawnPoint(0);
          this.player = GameManager.instance.getPlayer();
          this.player.node.parent = this.entityLayer.node;
          this.player.node.position = spawnPoint != null ? spawnPoint.node.position : new Vec3(1000, 1000, 0); //如果找得到出生点就初始化在出生点的位置，否则默认一个出生位置点给玩家，防止报错。
        }

        /**
         * 根据id获取出生点
         * @param spawnId 
         * @returns 
         */;
        _proto.getSpawnPoint = function getSpawnPoint(spawnId) {
          if (spawnId === void 0) {
            spawnId = 0;
          }
          for (var i = 0; i < this.spawnPointList.length; i++) {
            if (this.spawnPointList[i].spawnId == spawnId) {
              return this.spawnPointList[i];
            }
          }
          if (spawnId == 0) {
            //如果没有找到匹配的出生点，则寻找默认出生点
            for (var i = 0; i < this.spawnPointList.length; i++) {
              if (this.spawnPointList[i].defaultSpawn) {
                return this.spawnPointList[i];
              }
            }
          }
          console.error("\u5730\u56FE" + this.mapData.name + "\u4E0D\u5B58\u5728\u8FD9\u4E2A\u51FA\u751F\u70B9 spawnId = " + spawnId);
          return null;
        };
        _proto.afterInitMapElement = function afterInitMapElement() {
          this.spawnPointList = this.getComponentsInChildren(SpawnPoint);
          this.transferDoorList = this.getComponentsInChildren(TransferDoor);
          this.npcList = this.getComponentsInChildren(Npc);
          this.monsterList = this.getComponentsInChildren(Monster);
        }

        /**
         * 获得地图参数
         * @param mapData 
         * @param bgTex 
         * @param mapLoadModel 
         * @returns 
         */
        // public getMapParams(mapData: MapData, bgTex: Texture2D, mapLoadModel: MapLoadModel = 1): MapParams {
        //     //初始化底图参数
        //     var mapParams: MapParams = new MapParams();
        //     mapParams.name = mapData.name;
        //     mapParams.bgName = mapData.bgName;
        //     mapParams.mapType = mapData.type;
        //     mapParams.mapWidth = mapData.mapWidth;
        //     mapParams.mapHeight = mapData.mapHeight;
        //     mapParams.ceilWidth = mapData.nodeWidth;
        //     mapParams.ceilHeight = mapData.nodeHeight;
        //     mapParams.viewWidth = mapData.mapWidth > this.winSize.width ? this.winSize.width : mapData.mapWidth;
        //     mapParams.viewHeight = mapData.mapHeight > this.winSize.height ? this.winSize.height : mapData.mapHeight;
        //     mapParams.sliceWidth = 256;
        //     mapParams.sliceHeight = 256;
        //     mapParams.bgTex = bgTex;
        //     mapParams.mapLoadModel = mapLoadModel;
        //
        //     return mapParams;
        // }

        /**
         *把视野定位到给定位置 
        * @param px
        * @param py
        * 
        */
        // public setViewToPoint(px: number, py: number): void {
        //     this.targetPos = new Vec3(px, py).subtract(new Vec3(this.winSize.width / 2, this.winSize.height / 2));
        //
        //     if (this.targetPos.x > this._mapParams.mapWidth - this.winSize.width) {
        //         this.targetPos.x = this._mapParams.mapWidth - this.winSize.width;
        //     } else if (this.targetPos.x < 0) {
        //         this.targetPos.x = 0;
        //
        //     }
        //
        //     if (this.targetPos.y > this._mapParams.mapHeight - this.winSize.height) {
        //         this.targetPos.y = this._mapParams.mapHeight - this.winSize.height;
        //     } else if (this.targetPos.y < 0) {
        //         this.targetPos.y = 0;
        //     }
        //
        //     this.targetPos.z = this.camera.node.position.z;
        //     this.camera.node.position = this.targetPos;
        //
        //     // if (this._mapParams.mapLoadModel == MapLoadModel.slices) {
        //     //     this.mapLayer.loadSliceImage(this.targetPos.x, this.targetPos.y);
        //     // }
        // }

        /**
         * 视图跟随玩家
         * @param dt 
         */
        // public followPlayer(dt: number) {
        //     if (this.player == null) {
        //         return;
        //     }
        //
        //     this.targetPos = this.player.node.position.clone().subtract(new Vec3(this.winSize.width / 2, this.winSize.height / 2));
        //
        //     if (this.targetPos.x > this._mapParams.mapWidth - this.winSize.width) {
        //         this.targetPos.x = this._mapParams.mapWidth - this.winSize.width;
        //     } else if (this.targetPos.x < 0) {
        //         this.targetPos.x = 0;
        //
        //     }
        //
        //     if (this.targetPos.y > this._mapParams.mapHeight - this.winSize.height) {
        //         this.targetPos.y = this._mapParams.mapHeight - this.winSize.height;
        //     } else if (this.targetPos.y < 0) {
        //         this.targetPos.y = 0;
        //     }
        //
        //
        //     this.targetPos.z = this.camera.node.position.z;
        //
        //     //摄像机平滑跟随
        //     this.targetPos = this.camera.node.position.clone().lerp(this.targetPos, dt * 2.0);
        //     // this.camera.node.position = this.targetPos;
        //     this.camera.node.setPosition(this.targetPos);
        //
        //     // if (this._mapParams.mapLoadModel == MapLoadModel.slices) {
        //     //     this.mapLayer.loadSliceImage(this.targetPos.x, this.targetPos.y);
        //     // }
        //
        // }

        /**
         * 将视野对准玩家
         */;
        _proto.setViewToPlayer = function setViewToPlayer() {
          this.setViewToPoint(this.player.node.position.x, this.player.node.position.y);
        };
        _proto.onMapTouch = function onMapTouch(event) {
          var touPos = new Vec3(event.getUILocation().x, event.getUILocation().y);
          var targetPos = new Vec3();
          Vec3.add(targetPos, this.camera.node.position, touPos); //计算点击地图的位置，计算结果输出到targetPos
          console.log("点击的像素坐标", targetPos.x, targetPos.y);
          this.player.navTo(targetPos.x, targetPos.y);
          // console.log(this.player);
        };

        _proto.update = function update(deltaTime) {
          if (!this.isInit) {
            return;
          }
          if (this.player) {
            this.followTarget(this.player.node, deltaTime);
          }
          // this.followPlayer(deltaTime);
        };

        return ScenceMap;
      }(SceneBase)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Scene.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './HashMap.ts', './Containers.ts', './GameConst.ts'], function (exports) {
  var _inheritsLoose, _createForOfIteratorHelperLoose, cclegacy, HashMap, Containers, GameConst;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _createForOfIteratorHelperLoose = module.createForOfIteratorHelperLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      HashMap = module.HashMap;
    }, function (module) {
      Containers = module.Containers;
    }, function (module) {
      GameConst = module.GameConst;
    }],
    execute: function () {
      cclegacy._RF.push({}, "42c54g36UtKNJvCUTUBhfp8", "Scene", undefined);

      /**
       * @fileName Scene.ts
       * @author zhangqiong
       * @date 2024/12/23 15:47:43"
       * @description
       */
      var Scene = exports('Scene', /*#__PURE__*/function (_Containers) {
        _inheritsLoose(Scene, _Containers);
        function Scene() {
          var _this;
          _this = _Containers.call(this) || this;
          _this.id = void 0;
          _this.type = void 0;
          _this.unitMap = void 0;
          _this.unitNameMap = void 0;
          _this.entityTypeMap = void 0;
          _this.depthHelper = void 0;
          _this.layers = [];
          _this._status = void 0;
          _this.queue = [];
          _this.unitMap = new HashMap();
          _this.unitNameMap = new HashMap();
          _this.entityTypeMap = new HashMap();
          _this.queue = [];
          _this.depthHelper = [];
          return _this;
        }
        var _proto = Scene.prototype;
        _proto.init = function init() {
          this.removeDepth();
          this.layers = [GameConst.BG_LAYER, GameConst.MAP_Bottom_Role_LAYER, GameConst.MAP_LAYER, GameConst.DECORATE_LAYER, GameConst.MAP_SHADOW_LAYER, GameConst.MAP_MAGIC_LAYER, GameConst.MAP_EFFECT_LAYER, GameConst.MAP_DROP_LAYER, GameConst.EFFECT_Bottom_LAYER, GameConst.EFFECT_TOP_LAYER, GameConst.ROLE_LAYER, GameConst.ROLE_NAME_LAYER, GameConst.EFFECT_LAYER, GameConst.HIT_EFFECT_LAYER, GameConst.CENTER_LAYER, GameConst.TOP_LAYER, GameConst.HURT_EFFECT_LAYER];
          this.setContainers(this.layers);
          for (var i = 0; i < this.layers.length; i++) {
            var layerName = this.layers[i];
          }
          this.initDepthLayer();
          this.onInit();
        };
        _proto.setSort = function setSort(v) {
          if (this.depthHelper) {
            if (v) {
              for (var _iterator = _createForOfIteratorHelperLoose(this.depthHelper), _step; !(_step = _iterator()).done;) {
                var depth = _step.value;
                depth.start(200);
              }
            } else {
              for (var _iterator2 = _createForOfIteratorHelperLoose(this.depthHelper), _step2; !(_step2 = _iterator2()).done;) {
                var _depth = _step2.value;
                _depth.stop();
              }
            }
          }
        };
        _proto.setDepths = function setDepths(depthLayers, type) {
          for (var i = 0; i < depthLayers.length; i++) {
            var layer = depthLayers[i];
            //todo
            var depthHelper = null;
            depthHelper.layerName = layer;
            depthHelper.setTarget(this.getChildContainer(layer));
            this.depthHelper.push(depthHelper);
          }
          this.setSort(true);
        };
        _proto.initDepthLayer = function initDepthLayer() {};
        _proto.enter = function enter() {};
        _proto.onEnter = function onEnter() {};
        _proto.leave = function leave() {};
        _proto.onLeave = function onLeave() {};
        _proto.onInit = function onInit() {};
        _proto.clear = function clear() {
          this.entityTypeMap.clear();
        };
        _proto.setStatus = function setStatus(status) {
          this._status = status;
        };
        _proto.getStatus = function getStatus() {
          return this._status;
        };
        _proto.resetUnitId = function resetUnitId(oldPartId, newPartId) {
          if (this.unitMap.hasKey(oldPartId)) {
            var unit = this.unitMap.remove(oldPartId);
            this.unitMap.put(newPartId, unit);
          }
        };
        _proto.getId = function getId() {
          return this.id;
        };
        _proto.getName = function getName() {
          return this.name;
        };
        _proto.setLocation = function setLocation(x, y) {
          this.setPosition(x, y);
        };
        _proto.getLocation = function getLocation() {
          return this.position.clone();
        };
        _proto.getLocationScale = function getLocationScale() {
          return this.scale.clone();
        };
        _proto.removeDepth = function removeDepth() {
          if (this.depthHelper) {
            for (var i = 0; i < this.depthHelper.length; i++) {
              this.depthHelper[i].destory();
            }
            this.depthHelper = [];
          }
        };
        _proto.destroy = function destroy() {
          var unitObj = this.unitMap.getContainer();
          this.unitMap.clear();
          this.unitNameMap.clear();
          return _Containers.prototype.destroy.call(this);
        };
        _proto.updateScene = function updateScene() {};
        _proto.addUnit = function addUnit(unit) {
          var isRepeat = false;
          if (this.unitMap.hasKey(unit.getId())) {
            isRepeat = true;
          }
          this.addUnitToTypeMap(unit);
          this.unitMap.put(unit.getId(), unit);
          this.unitNameMap.put(unit.getName(), unit);
          unit.setScene(this);
          if (!isRepeat) {
            this.queue.push(unit);
            this.queueAddChild();
          }
        };
        _proto.addUnitToTypeMap = function addUnitToTypeMap(unit) {
          var units = this.entityTypeMap.get(unit.type);
          if (!units) {
            units = [];
            this.entityTypeMap.put(unit.type, units);
          }
          if (!this.unitMap.hasKey(unit.getId())) {
            units.push(unit);
          }
        };
        _proto.reomveUnitToTypeMap = function reomveUnitToTypeMap(unit) {
          var units = this.entityTypeMap.get(unit.type);
          if (units) {
            for (var index = 0; index < units.length; index++) {
              var element = units[index];
              if (element.getId() == unit.getId()) {
                units.splice(index, 1);
                break;
              }
            }
          }
        };
        _proto.getUnitsByTypes = function getUnitsByTypes(types) {
          var results = [];
          for (var index = 0; index < types.length; index++) {
            var type = types[index];
            var units = this.entityTypeMap.get(type);
            if (units) {
              results = results.concat(units);
            }
          }
          return results;
        };
        _proto.removeUnitById = function removeUnitById(id, isDispose) {
          if (isDispose === void 0) {
            isDispose = false;
          }
          var unit = this.unitMap.remove(id);
          if (unit != null) {
            this.unitNameMap.remove(unit.getName());
            this.removeUnit(unit, isDispose);
          }
          return unit;
        };
        _proto.getUnits = function getUnits(type) {
          if (type === void 0) {
            type = 0;
          }
          if (type == 0) {
            return this.unitMap.values();
          }
          var reuslts = [];
          var values = this.unitMap.values();
          var unit = null;
          for (var i = 0; i < values.length; i++) {
            unit = values[i];
            if (unit.getType() == type) {
              reuslts.push(unit);
            }
          }
          return reuslts;
        };
        _proto.removeUnitByName = function removeUnitByName(name, isDispose) {
          if (isDispose === void 0) {
            isDispose = false;
          }
          var unit = this.getUnitByName(name);
          if (unit != null) {
            return this.removeUnitById(unit.getId(), isDispose);
          }
          return null;
        };
        _proto.getUnitById = function getUnitById(id) {
          return this.unitMap.get(id);
        };
        _proto.getUnitByName = function getUnitByName(unitName) {
          return this.unitNameMap.get(unitName);
        };
        _proto.removeUnit = function removeUnit(unit, isDispose) {
          if (isDispose === void 0) {
            isDispose = false;
          }
          this.reomveUnitToTypeMap(unit);
          var queueIndex = this.queue.indexOf(unit);
          if (queueIndex != -1) {
            this.queue.splice(queueIndex, 1);
          }
          for (var i = 0; i < this.depthHelper.length; i++) {
            var depth = this.depthHelper[i];
            if (depth.layerName == unit.getLayer()) {
              depth.removeChild(unit.getDisplay());
            }
          }
          if (unit.getDisplay().parent == this.getChildContainer(unit.getLayer())) {
            this.getChildContainer(unit.getLayer()).removeChild(unit.getDisplay());
          }
          unit.onRemove();
          if (isDispose) {
            unit.destroy();
          }
        };
        _proto.queueAddChild = function queueAddChild() {
          if (this.queue.length > 0) {
            var unit = this.queue.shift();
            this.getChildContainer(unit.getLayer()).addChild(unit.getDisplay());
            unit.onAdd();
            for (var i = 0; i < this.depthHelper.length; i++) {
              if (this.depthHelper[i].layerName == unit.getLayer() && this.depthHelper != null) {
                this.depthHelper[i].addChild(unit.getDisplay());
              }
            }
          }
        };
        return Scene;
      }(Containers));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SceneBase.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './MapLayer.ts', './EntityLayer.ts', './MapParams.ts', './Enum2.ts', './PathFindingAgent.ts', './TowerLauncher.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, cclegacy, _decorator, Camera, Vec3, Size, view, math, resources, JsonAsset, Texture2D, UITransform, Component, MapLayer, EntityLayer, MapParams, MapLoadModel, PathFindingAgent, TowerLauncher;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Camera = module.Camera;
      Vec3 = module.Vec3;
      Size = module.Size;
      view = module.view;
      math = module.math;
      resources = module.resources;
      JsonAsset = module.JsonAsset;
      Texture2D = module.Texture2D;
      UITransform = module.UITransform;
      Component = module.Component;
    }, function (module) {
      MapLayer = module.default;
    }, function (module) {
      EntityLayer = module.default;
    }, function (module) {
      MapParams = module.default;
    }, function (module) {
      MapLoadModel = module.MapLoadModel;
    }, function (module) {
      PathFindingAgent = module.default;
    }, function (module) {
      TowerLauncher = module.TowerLauncher;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3;
      cclegacy._RF.push({}, "e53e83AZzlJArZ30yyMJRSr", "SceneBase", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var SceneBase = exports('SceneBase', (_dec = ccclass("SceneBase"), _dec2 = property(MapLayer), _dec3 = property(EntityLayer), _dec4 = property(Camera), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SceneBase, _Component);
        function SceneBase() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "mapLayer", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "entityLayer", _descriptor2, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "camera", _descriptor3, _assertThisInitialized(_this));
          _this._mapData = void 0;
          _this._mapId = void 0;
          _this.targetPos = new Vec3(0, 0, 0);
          _this.winSize = new Size();
          _this._mapParams = null;
          _this.isInit = false;
          return _this;
        }
        var _proto = SceneBase.prototype;
        _proto.start = function start() {
          this.winSize = view.getVisibleSize();
          this.node.setPosition(math.v3(-this.winSize.width / 2, -this.winSize.height / 2));
          this.setMapId(1);
        };
        _proto.setMapId = function setMapId(mapId, mapLoadModel) {
          if (mapLoadModel === void 0) {
            mapLoadModel = MapLoadModel.single;
          }
          this._mapId = mapId;
          TowerLauncher.instance.mapId = mapId;
          this.loadMap(mapId);
        };
        _proto.loadMap = function loadMap(mapId, mapLoadModel) {
          if (mapLoadModel === void 0) {
            mapLoadModel = MapLoadModel.single;
          }
          if (mapLoadModel == MapLoadModel.single) {
            this.loadSingleMap(mapId);
          }
        };
        _proto.getMapPath = function getMapPath(mapId) {
          return "";
        };
        _proto.loadSingleMap = function loadSingleMap(mapId) {
          var _this2 = this;
          var dataPath = this.getMapPath(mapId); //`Map/map${mapId}/map${mapId}`;
          resources.load(dataPath, JsonAsset, function (error, res) {
            if (error != null) {
              console.log("加载地图数据失败 path = ", dataPath, "error", error);
              return;
            }
            var mapData = res.json;
            var bgPath = dataPath + "/texture";
            resources.load(bgPath, Texture2D, function (error, tex) {
              if (error != null) {
                console.log("加载地图背景失败 path = ", bgPath, "error", error);
                return;
              }
              console.log(mapData, tex);
              _this2.init(mapData, tex);
              // this.sceneMap.init(mapData, tex, MapLoadModel.single)
            });
          });
        };

        _proto.init = function init(mapData, bgTexture) {
          this._mapData = mapData;
          this._mapParams = this.getMapParams(mapData, bgTexture, MapLoadModel.single);
          this.mapLayer.init(this._mapParams);
          PathFindingAgent.instance.init(mapData);
          var uiTransform = this.node.getComponent(UITransform);
          if (uiTransform) {
            uiTransform.width = this.mapLayer.width;
            uiTransform.height = this.mapLayer.height;
          }
          this.initMapData(mapData);
          this.isInit = true;
        };
        _proto.initMapData = function initMapData(mapData) {}

        /**
         * 获得地图参数
         * @param mapData
         * @param bgTex
         * @param mapLoadModel
         * @returns
         */;
        _proto.getMapParams = function getMapParams(mapData, bgTex, mapLoadModel) {
          if (mapLoadModel === void 0) {
            mapLoadModel = 1;
          }
          //初始化底图参数
          var mapParams = new MapParams();
          mapParams.name = mapData.name;
          mapParams.bgName = mapData.bgName;
          mapParams.mapType = mapData.type;
          mapParams.mapWidth = mapData.mapWidth;
          mapParams.mapHeight = mapData.mapHeight;
          mapParams.ceilWidth = mapData.nodeWidth;
          mapParams.ceilHeight = mapData.nodeHeight;
          mapParams.viewWidth = mapData.mapWidth > this.winSize.width ? this.winSize.width : mapData.mapWidth;
          mapParams.viewHeight = mapData.mapHeight > this.winSize.height ? this.winSize.height : mapData.mapHeight;
          mapParams.sliceWidth = 256;
          mapParams.sliceHeight = 256;
          mapParams.bgTex = bgTex;
          mapParams.mapLoadModel = mapLoadModel;
          return mapParams;
        }

        /**
         *把视野定位到给定位置
         * @param px
         * @param py
         *
         */;
        _proto.setViewToPoint = function setViewToPoint(px, py) {
          this.targetPos = new Vec3(px, py).subtract(new Vec3(this.winSize.width / 2, this.winSize.height / 2));
          if (this.targetPos.x > this._mapParams.mapWidth - this.winSize.width) {
            this.targetPos.x = this._mapParams.mapWidth - this.winSize.width;
          } else if (this.targetPos.x < 0) {
            this.targetPos.x = 0;
          }
          if (this.targetPos.y > this._mapParams.mapHeight - this.winSize.height) {
            this.targetPos.y = this._mapParams.mapHeight - this.winSize.height;
          } else if (this.targetPos.y < 0) {
            this.targetPos.y = 0;
          }
          this.targetPos.z = this.camera.node.position.z;
          this.camera.node.position = this.targetPos;

          // if (this._mapParams.mapLoadModel == MapLoadModel.slices) {
          //     this.mapLayer.loadSliceImage(this.targetPos.x, this.targetPos.y);
          // }
        }

        /**
         * 视图跟随
         * @param targetNode
         * @param dt
         */;
        _proto.followTarget = function followTarget(targetNode, dt) {
          if (targetNode == null) {
            return;
          }
          this.targetPos = targetNode.position.clone().subtract(new Vec3(this.winSize.width / 2, this.winSize.height / 2));
          if (this.targetPos.x > this._mapParams.mapWidth - this.winSize.width) {
            this.targetPos.x = this._mapParams.mapWidth - this.winSize.width;
          } else if (this.targetPos.x < 0) {
            this.targetPos.x = 0;
          }
          if (this.targetPos.y > this._mapParams.mapHeight - this.winSize.height) {
            this.targetPos.y = this._mapParams.mapHeight - this.winSize.height;
          } else if (this.targetPos.y < 0) {
            this.targetPos.y = 0;
          }
          this.targetPos.z = this.camera.node.position.z;

          //摄像机平滑跟随
          this.targetPos = this.camera.node.position.clone().lerp(this.targetPos, dt * 2.0);
          // this.camera.node.position = this.targetPos;
          this.camera.node.setPosition(this.targetPos);

          // if (this._mapParams.mapLoadModel == MapLoadModel.slices) {
          //     this.mapLayer.loadSliceImage(this.targetPos.x, this.targetPos.y);
          // }
        };

        _createClass(SceneBase, [{
          key: "mapData",
          get: function get() {
            return this._mapData;
          }
        }, {
          key: "mapId",
          get: function get() {
            return this._mapId;
          }
        }]);
        return SceneBase;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "mapLayer", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "entityLayer", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "camera", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ScreenAdaptation.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _inheritsLoose, cclegacy, Size, _decorator, view, ResolutionPolicy, Component;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      Size = module.Size;
      _decorator = module._decorator;
      view = module.view;
      ResolutionPolicy = module.ResolutionPolicy;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class;
      cclegacy._RF.push({}, "2f8d0JsBS9FpZnKkLVuU8oh", "ScreenAdaptation", undefined);
      /** 
       * 画布的标准化尺寸，就是之前说的
       * iPad 设备中的画布尺寸 = 1001 x 1334 (其中 1001 ≈ 1668/1.6672)
       * iPhone16设备中的画布尺寸 = 750 x1626（其中 1626 = 2556/1.572）
       */
      var G_VIEW_SIZE = exports('G_VIEW_SIZE', new Size(0, 0));
      var ccclass = _decorator.ccclass,
        property = _decorator.property;

      /**
       * @fileName ScreenAdaptation.ts
       * @author zhangqiong
       * @date 2025/01/15 19:57:43"
       * @description
       */

      var ScreenAdaptation = exports('ScreenAdaptation', (_dec = ccclass('ScreenAdaptation'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(ScreenAdaptation, _Component);
        function ScreenAdaptation() {
          return _Component.apply(this, arguments) || this;
        }
        var _proto = ScreenAdaptation.prototype;
        _proto.start = function start() {
          this.adapterScreen();
        };
        _proto.update = function update(dt) {
          // this.adapterScreen();
        };
        _proto.adapterScreen = function adapterScreen() {
          var resolutionPolicy = view.getResolutionPolicy();
          var designSize = view.getDesignResolutionSize();
          // let frameSize =  screen.windowSize;
          var frameW = screen.width;
          var frameH = screen.height;
          /** 是否是屏幕更宽 */
          var isScreenWidthLarger = frameW / frameH > designSize.width / designSize.height;
          var targetResolutionPolicy = isScreenWidthLarger ? ResolutionPolicy.FIXED_HEIGHT : ResolutionPolicy.FIXED_WIDTH;
          if (targetResolutionPolicy !== resolutionPolicy.getContentStrategy().strategy) {
            /** 保证设计分辨率的内容都能显示出来 */
            view.setDesignResolutionSize(designSize.width, designSize.height, targetResolutionPolicy);
          }

          /** 实际的尺寸会和设计分辨率在一个维度，但是宽或高更大 */
          if (isScreenWidthLarger) {
            G_VIEW_SIZE.width = Math.ceil(designSize.height * screen.width / screen.height);
            G_VIEW_SIZE.height = designSize.height;
          } else {
            G_VIEW_SIZE.width = designSize.width;
            G_VIEW_SIZE.height = Math.ceil(designSize.width * screen.height / screen.width);
          }
          console.log("\u5C4F\u5E55" + (isScreenWidthLarger ? "更宽, 高度适配" : "更高, 宽度适配") + " \u8BBE\u8BA1\u5206\u8FA8\u7387\u6BD4\u4F8B\u4E0B\u7684\u5C4F\u5E55\u5C3A\u5BF8: " + G_VIEW_SIZE.width + "x" + G_VIEW_SIZE.height);
        };
        return ScreenAdaptation;
      }(Component)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SelectTowerBuild.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './TowerConfig.ts', './TowerLauncher.ts', './TowerGameUIManager.ts'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, NodeEventType, resources, Texture2D, Sprite, SpriteFrame, Component, TowerConfig, TowerLauncher, TowerGameUIManager;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      NodeEventType = module.NodeEventType;
      resources = module.resources;
      Texture2D = module.Texture2D;
      Sprite = module.Sprite;
      SpriteFrame = module.SpriteFrame;
      Component = module.Component;
    }, function (module) {
      TowerConfig = module.TowerConfig;
    }, function (module) {
      TowerLauncher = module.TowerLauncher;
    }, function (module) {
      TowerGameUIManager = module.TowerGameUIManager;
    }],
    execute: function () {
      var _dec, _class;
      cclegacy._RF.push({}, "d36e5yXmYBLAbSfwD/EaKem", "SelectTowerBuild", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var SelectTowerBuild = exports('SelectTowerBuild', (_dec = ccclass('SelectTowerBuild'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SelectTowerBuild, _Component);
        function SelectTowerBuild() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.callBack = void 0;
          _this.callObj = void 0;
          _this.towerId = void 0;
          _this.level = void 0;
          _this.buildInfo = void 0;
          _this.towerData = null;
          return _this;
        }
        var _proto = SelectTowerBuild.prototype;
        _proto.start = function start() {
          this.node.on(NodeEventType.TOUCH_START, this.onTouchNode, this);
        };
        _proto.onTouchNode = function onTouchNode(event) {
          if (!this.towerData) {
            console.error("当前选中塔的配置不存在");
            return;
          }
          if (TowerLauncher.instance.value >= this.towerData.buildCost) {
            if (this.callBack && this.callObj) {
              this.buildInfo.selectedTowerId = this.towerId;
              this.callBack.call(this.callObj, this.buildInfo);
              TowerGameUIManager.instance.showSelectTower(false);
            }
          }
        };
        _proto.setTowerId = function setTowerId(id, level) {
          var _this2 = this;
          if (level === void 0) {
            level = 1;
          }
          this.towerId = id;
          this.level = level;
          var towerData = TowerConfig.instance.getTowerConfig(this.towerId, this.level);
          if (towerData) {
            this.towerData = towerData;
            var canBuild = TowerLauncher.instance.value >= towerData.buildCost;
            var buildPath = "tower/res/NormalMordel/Game/Tower/" + this.towerId + "/CanClick" + (canBuild ? 1 : 0) + "/texture";
            resources.load(buildPath, Texture2D, function (err, tex) {
              if (err) {
                console.error(err.stack);
                return;
              }
              var sprite = _this2.node.getComponent(Sprite);
              var spf = new SpriteFrame();
              spf.texture = tex;
              sprite.spriteFrame = spf;
            });
          }
        };
        _proto.setBuildInfo = function setBuildInfo(buildInfo) {
          this.buildInfo = buildInfo;
        };
        _proto.setClickCall = function setClickCall(call, callObj) {
          this.callBack = call;
          this.callObj = callObj;
        };
        _proto.update = function update(deltaTime) {};
        return SelectTowerBuild;
      }(Component)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SkillConfigVo.ts", ['cc'], function (exports) {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "80a24vn2JxCCZo1Wy0j2NqX", "SkillConfigVo", undefined);
      /**
       * @fileName SkillConfigVo.ts
       * @author zhangqiong
       * @date 2024/12/31 19:36:56"
       * @description
       */
      var SkillConfigVo = exports('SkillConfigVo', function SkillConfigVo() {
        this.skillId = void 0;
        this.firstCd = void 0;
        this.cd = void 0;
        /** 1表示能量技能，2自动释放技能，3被动技能，4被动触发主动技能, 5神器技能.6圣龙技能 */
        this.type = void 0;
        /** 主目标 */
        this.target = void 0;
        /** 1普攻 2技能 */
        this.skillType = void 0;
        //选择目标类型 0：选择类型 1: 选择阵营类型 1 不同阵营 2 同阵营 3 全部
        this.targetTypes = void 0;
        /** 施法距离 */
        this.distance = void 0;
        /** 技能伤害 */
        this.hurt = void 0;
        /** 恢复的能量 */
        this.recoveyAnger = void 0;
      });
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SpawnPoint.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, CCInteger, CCBoolean, Vec3, Component;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      CCInteger = module.CCInteger;
      CCBoolean = module.CCBoolean;
      Vec3 = module.Vec3;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;
      cclegacy._RF.push({}, "7bac4jmsgdBK4STLC9vrcL4", "SpawnPoint", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;

      /**
       * 地图出生点
       */
      var SpawnPoint = exports('default', (_dec = ccclass('SpawnPoint'), _dec2 = property(CCInteger), _dec3 = property(CCBoolean), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SpawnPoint, _Component);
        function SpawnPoint() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          /**
           * 在本地图，出生点Id
           */
          _initializerDefineProperty(_this, "spawnId", _descriptor, _assertThisInitialized(_this));
          /**
           * 是否是默认出生点
           */
          _initializerDefineProperty(_this, "defaultSpawn", _descriptor2, _assertThisInitialized(_this));
          /**
           * 编辑的数据
           */
          _this.editData = null;
          return _this;
        }
        var _proto = SpawnPoint.prototype;
        // LIFE-CYCLE CALLBACKS:
        // onLoad () {}
        _proto.start = function start() {
          //this.node.opacity = 0;
        }

        /**
         * 初始化
         */;
        _proto.init = function init() {}

        /**
         * 初始化编辑数据
         * @param editData 
         */;
        _proto.initEditData = function initEditData(editData) {
          this.editData = editData;
          this.node.position = new Vec3(editData.x, editData.y);
          this.spawnId = editData.spawnId;
          this.defaultSpawn = editData.defaultSpawn;
        }

        // update (dt) {}
        ;

        return SpawnPoint;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "spawnId", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "defaultSpawn", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      })), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SpineSkeleton.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './GameConst.ts', './ActionInfo.ts'], function (exports) {
  var _inheritsLoose, _createClass, cclegacy, _decorator, sp, resources, Component, GameConst, ActionInfo;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      sp = module.sp;
      resources = module.resources;
      Component = module.Component;
    }, function (module) {
      GameConst = module.GameConst;
    }, function (module) {
      ActionInfo = module.ActionInfo;
    }],
    execute: function () {
      var _dec, _class;
      cclegacy._RF.push({}, "16367xy4HNNnbe2kwjBErJJ", "SpineSkeleton", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var SpineSkeleton = exports('SpineSkeleton', (_dec = ccclass('SpineSkeleton'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SpineSkeleton, _Component);
        function SpineSkeleton() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.skeleton = null;
          _this.playTimes = -1;
          _this._currentTimes = 0;
          _this._currentAnimationName = void 0;
          _this._endAnimationName = void 0;
          _this.keyFrameHandler = void 0;
          _this.runing = false;
          _this.animationQueue = void 0;
          _this.currentInfo = void 0;
          _this._rosolve = void 0;
          return _this;
        }
        var _proto = SpineSkeleton.prototype;
        _proto.onLoad = function onLoad() {
          this.skeleton = this.node.getComponent(sp.Skeleton);
          if (!this.skeleton) {
            this.skeleton = this.node.addComponent(sp.Skeleton);
          }
          this.animationQueue = [];
          // this.skeleton.setCompleteListener(this.onAnimationComplete);
        };

        _proto.start = function start() {};
        _proto.setSpineId = function setSpineId(spineId, animationName) {
          var _this2 = this;
          if (animationName === void 0) {
            animationName = GameConst.Idle;
          }
          return new Promise(function (resolve, reject) {
            var skeletonPath = "spine/body/afk/hero/sanim_" + spineId;
            resources.load(skeletonPath, sp.SkeletonData, function (err, data) {
              if (err) {
                reject(err);
                return;
              }
              _this2.skeleton.skeletonData = data;
              _this2.skeleton.setCompleteListener(_this2.onAimationComplete);
              var info = new ActionInfo(animationName);
              _this2.setAnimation(info);
              resolve();
            });
          });
        };
        _proto._onPlay = function _onPlay(info) {
          var _this3 = this;
          if (!info) {
            return;
          }
          if (this.skeleton && info.name != this._currentAnimationName) {
            this._currentTimes = 0;
            this._endAnimationName = info.endActionName;
            this._currentAnimationName = info.name;
            this.playTimes = info.times;
            this.skeleton.loop = true;
            if (this.playTimes != -1) {
              this.skeleton.setCompleteListener(function (enter) {
                if (_this3.playTimes != -1) {
                  _this3._currentTimes++;
                  if (_this3._currentTimes >= _this3.playTimes) {
                    _this3.clear();
                    _this3.next();
                  }
                }
              });
            } else {
              this.skeleton.setCompleteListener(null);
            }
            this.skeleton.setEventListener(function (entry, event) {
              if (_this3.keyFrameHandler) {
                _this3.keyFrameHandler.execute(entry, event);
              }
            });
            this.skeleton.animation = info.name;
          }
        };
        _proto.setAnimation = function setAnimation(info) {
          var _this4 = this;
          return new Promise(function (resolve, reject) {
            if (!info) {
              reject("信息有误");
              return;
            }
            if (_this4.skeleton && info.name != _this4._currentAnimationName) {
              _this4._currentTimes = 0;
              _this4._endAnimationName = info.endActionName;
              _this4._currentAnimationName = info.name;
              _this4.playTimes = info.times;
              _this4.skeleton.loop = true;
              if (_this4.playTimes != -1) {
                _this4.skeleton.setCompleteListener(function (enter) {
                  if (_this4.playTimes != -1) {
                    _this4._currentTimes++;
                    if (_this4._currentTimes >= _this4.playTimes) {
                      _this4.clear();
                      resolve();
                    }
                  }
                });
              } else {
                _this4.skeleton.setCompleteListener(null);
              }
              _this4.skeleton.setEventListener(function (entry, event) {
                if (_this4.keyFrameHandler) {
                  _this4.keyFrameHandler.execute(entry, event);
                }
              });
              _this4.skeleton.animation = info.name;
              if (info.times == -1) {
                resolve();
              }
            } else {
              resolve();
            }
          });
          // if (oper == GameConst.Action_Opre_One) {
          //     this.killAll();
          // }
          // this.animationQueue.push(info);
          // if (!this.runing) {
          //     if (this.animationQueue.length > 0)//判断队列中是否还有动作
          //     {
          //         this.runing = true;
          //         this.nextRun();
          //     }
          // }
        };

        _proto.killAll = function killAll() {
          this.runCurrent();
          this.animationQueue = [];
          this.runing = false;
        };
        _proto.runCurrent = function runCurrent() {
          if (this.currentInfo) {
            if (this.currentInfo.handler) {
              this.currentInfo.handler.execute();
            }
            // if (this.currentInfo.endActionName) {
            //     this.playEndAnimation(this.currentInfo.endActionName)
            // }
          }
        };

        _proto.nextRun = function nextRun() {
          this.runCurrent();
          this.currentInfo = this.animationQueue.shift();
          this._onPlay(this.currentInfo);
        };
        _proto.next = function next() {
          if (this.animationQueue.length <= 0) {
            //队列无的话，停止
            this.runing = false;
            if (this.currentInfo) {
              if (this.currentInfo.handler) {
                this.currentInfo.handler.execute();
              }
            }
          } else {
            this.nextRun();
          }
        };
        _proto.playEndAnimation = function playEndAnimation(name) {
          var endAnimationName = name ? name : GameConst.Idle;
          var endInfo = new ActionInfo(endAnimationName);
          this.setAnimation(endInfo);
        };
        _proto.clear = function clear() {
          this.playTimes = -1;
          this._currentTimes = 0;
        };
        _proto.onAimationComplete = function onAimationComplete(entery) {
          if (this.playTimes == -1) {
            return;
          }
          this._currentTimes++;
          if (this._currentTimes >= this.playTimes) {
            this.clear();
            // this.playEndAnimation(GameConst.Idle);
            return;
          }
        };
        _proto.update = function update(deltaTime) {};
        _createClass(SpineSkeleton, [{
          key: "currentAnimation",
          get: function get() {
            return this._currentAnimationName;
          }
        }]);
        return SpineSkeleton;
      }(Component)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SpineTest.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, sp, resources, Component;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      sp = module.sp;
      resources = module.resources;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class;
      cclegacy._RF.push({}, "b8acb/5pnZI8oLkiBHchNQC", "SpineTest", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var SpineTest = exports('SpineTest', (_dec = ccclass('SpineTest'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SpineTest, _Component);
        function SpineTest() {
          return _Component.apply(this, arguments) || this;
        }
        var _proto = SpineTest.prototype;
        _proto.start = function start() {
          var comp = this.getComponent(sp.Skeleton);
          resources.loadDir("spine/54154/", function (err, assets) {
            console.log(assets);
            var texture = assets[3];
            var skeletonData = assets[2];
            // let asset = new sp.SkeletonData();
            // asset._nativeAsset = assets[1];
            // asset.atlasText = assets[0];
            // asset.textures = [texture];
            // asset.textureNames = ['E54154.png'];
            // asset._uuid = ske; // 可以传入任意字符串，但不能为空
            // asset._nativeUrl = ske; // 传入一个二进制路径用作 initSkeleton 时的 filePath 参数使用
            comp.skeletonData = skeletonData;
            // let ani = comp.setAnimation(0, 'walk', true);
            // assetManager.loadRemote(image, (error, img: ImageAsset) => {
          });

          // assetManager.loadAny([{ url: atlas, ext: '.txt' }, { url: ske, ext: '.bin' }], (error, assets) => {

          //     // });
          // });
        };

        _proto.update = function update(deltaTime) {};
        return SpineTest;
      }(Component)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/StringUtils.ts", ['cc'], function (exports) {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "ff123rNIqNHT52+G7NGRrI2", "StringUtils", undefined);
      /**
       * @class: StringUtils
       * @description: 字符串工具类
       * @author: Ran
       * @time: 2024-08-12 20:06:31
       */
      var StringUtils = exports('default', /*#__PURE__*/function () {
        function StringUtils() {}
        /**
         * 判断空字符串
         * @param str - 
         * @returns 
         */
        StringUtils.empty = function empty(str) {
          return str == null || str == "" || str.length <= 0;
        }

        /**
         * 生成富文本
         * @param str - 字符串
         * @param color - 颜色
         * @param size - 字体大小
         * @returns 富文本字符串
         */;
        StringUtils.generateRichText = function generateRichText(str, color, size) {
          var ret = "";
          ret = this.colorRichText(str, color);
          ret = this.sizeRichText(ret, size);
          return ret;
        }

        /**
         * 颜色富文本
         * @param str - 字符串
         * @param color - 颜色
         * @returns 富文本字符串
         */;
        StringUtils.colorRichText = function colorRichText(str, color) {
          if (color === null) return str;
          var ele = "<color=" + color + ">%d</color>";
          return ele.replace("%d", str);
        }

        /**
         * 字号富文本
         * @param str - 字符串
         * @param size - 字号
         * @returns 富文本字符串
         */;
        StringUtils.sizeRichText = function sizeRichText(str, size) {
          if (size === null) return str;
          var ele = "<size=" + size + ">%d</size>";
          return ele.replace("%d", str);
        }

        /**
         * 加粗富文本
         * @param str - 字符串
         * @returns 富文本字符串
         */;
        StringUtils.boldRichText = function boldRichText(str) {
          var ele = "<b>%d</b>";
          return ele.replace("%d", str);
        }

        // class end
        ;

        return StringUtils;
      }());
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Test.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, Component;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;
      cclegacy._RF.push({}, "9ead4JPW05I/rCLq5Lz5uJg", "Test", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var Test = exports('Test', (_dec = ccclass('Test'), _dec2 = property(Node), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(Test, _Component);
        function Test() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "targetNode", _descriptor, _assertThisInitialized(_this));
          _this.speed = 200;
          return _this;
        }
        var _proto = Test.prototype;
        _proto.start = function start() {};
        _proto.update = function update(deltaTime) {
          var currentPos = this.node.position.clone();
          var targetPos = this.targetNode.position.clone();
          var radian = Math.atan2(targetPos.y - currentPos.y, targetPos.x - currentPos.x);
          var direction = targetPos.subtract(currentPos).normalize();
          var angle = radian / Math.PI * 180;
          this.node.angle = angle - 90;
          var displacement = direction.multiplyScalar(this.speed * deltaTime);
          this.node.position = this.node.position.clone().add(displacement);
        };
        return Test;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "targetNode", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Tile.ts", ['cc'], function (exports) {
  var cclegacy, _decorator, Vec2;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Vec2 = module.Vec2;
    }],
    execute: function () {
      cclegacy._RF.push({}, "3f1f85sfylNpbAWlo4ssk/l", "Tile", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var Tile = exports('Tile', /*#__PURE__*/function () {
        function Tile() {
          this.positionX = void 0;
          this.positionY = void 0;
          this.value = void 0;
          this.megreFrom = null;
          this.previousPosition = new Vec2(0, 0);
        }
        var _proto = Tile.prototype;
        _proto.setup = function setup(pos, value) {
          this.positionX = pos.x;
          this.positionY = pos.y;
          this.value = value || 2;
          this.megreFrom = null;
          this.previousPosition = new Vec2(0, 0);
        };
        _proto.savePosition = function savePosition() {
          this.previousPosition.set(this.positionX, this.positionY);
        };
        _proto.updatePosition = function updatePosition(position) {
          this.positionX = position.x;
          this.positionY = position.y;
        };
        _proto.serialize = function serialize() {
          return {
            position: {
              x: this.positionX,
              y: this.positionY
            },
            value: this.value
          };
        };
        return Tile;
      }());
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TimeUtils.ts", ['cc'], function (exports) {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "d28fa+G49BMypt6Smeva8UQ", "TimeUtils", undefined);
      /**
       * @class: DateUtils
       * @description: 日期工具类
       * @author: Ran
       * @time: 2024-08-12 20:07:39
       */
      var TimeUitls = exports('default', /*#__PURE__*/function () {
        function TimeUitls() {}
        /**
         * 格式化秒数
         * @param second ：秒
         * @param format ：格式，缺省为hh:mm:ss
         * @returns 时间字符串
         */
        TimeUitls.formatSecond = function formatSecond(second, format) {
          if (format === void 0) {
            format = "hh:mm:ss";
          }
          var h = 0,
            m = 0,
            s = 0;
          if (second >= 3600) {
            h = Math.floor(second / 3600);
            second -= h * 3600;
          }
          if (second >= 60) {
            m = Math.floor(second / 60);
            second -= m * 60;
          }
          s = second;
          var formatArr = format.split(":");
          switch (formatArr.length) {
            case 1:
              return "" + (s < 10 && formatArr[0].length >= 2 ? "0" : "") + s;
            case 2:
              return "" + (m < 10 && formatArr[1].length >= 2 ? "0" : "") + m + ":" + (s < 10 && formatArr[0].length >= 2 ? "0" : "") + s;
            case 3:
              return "" + (h < 10 && formatArr[2].length >= 2 ? "0" : "") + h + ":" + (m < 10 && formatArr[1].length >= 2 ? "0" : "") + m + ":" + (s < 10 && formatArr[0].length >= 2 ? "0" : "") + s;
          }
          return "";
        }

        // class end
        ;

        return TimeUitls;
      }());
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Touch.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Enum3.ts'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, Node, misc, Component, TouchEvent;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      misc = module.misc;
      Component = module.Component;
    }, function (module) {
      TouchEvent = module.TouchEvent;
    }],
    execute: function () {
      var _dec, _class;
      cclegacy._RF.push({}, "81bb0/FB2RIr4GT21W+y8dV", "Touch", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var Touch = exports('Touch', (_dec = ccclass('Touch'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(Touch, _Component);
        function Touch() {
          return _Component.apply(this, arguments) || this;
        }
        var _proto = Touch.prototype;
        _proto.start = function start() {};
        _proto.onLoad = function onLoad() {
          this.registerEvent();
        };
        _proto.registerEvent = function registerEvent() {
          var _this = this;
          this.node.on(Node.EventType.TOUCH_END, function (e) {
            var startPoint = e.getStartLocation();
            var endPoint = e.getLocation();
            var v = endPoint.subtract(startPoint);
            var radians = Math.atan2(v.y, v.x);
            var degrees = misc.radiansToDegrees(radians);
            var index = Math.floor(degrees / 45);
            _this.emitEventByIndex(index);
          }, this);
        };
        _proto.emitEventByIndex = function emitEventByIndex(index) {
          // 8 方向判断
          if (index === 0 || index === -1) {
            this.node.emit(TouchEvent.RIGHT);
          } else if (index === 1 || index === 2) {
            this.node.emit(TouchEvent.UP);
          } else if (index === -2 || index === -3) {
            this.node.emit(TouchEvent.DOWN);
          } else if (index === -4 || index === 3 || index === 4) {
            this.node.emit(TouchEvent.LEFT);
          } else {
            console.error("无此方向");
          }
        };
        _proto.update = function update(deltaTime) {};
        return Touch;
      }(Component)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TouchMove.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, Node, Vec2, Component;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Vec2 = module.Vec2;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class;
      cclegacy._RF.push({}, "06965eGdi5HrrZ1LrLSfO4l", "TouchMove", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var TouchMove = exports('TouchMove', (_dec = ccclass('TouchMove'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(TouchMove, _Component);
        function TouchMove() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.isDragging = false;
          _this.dragOffset = new Vec2();
          return _this;
        }
        var _proto = TouchMove.prototype;
        _proto.start = function start() {
          this.node.on(Node.EventType.TOUCH_START, this.onTouchStart, this);
          this.node.on(Node.EventType.TOUCH_MOVE, this.onTouchMove, this);
          this.node.on(Node.EventType.TOUCH_END, this.onTouchEnd, this);
          this.node.on(Node.EventType.TOUCH_CANCEL, this.onTouchEnd, this);
        };
        _proto.onTouchStart = function onTouchStart(event) {
          this.isDragging = true;
          var locationInNode = event.getLocation(); //this.node.convertToNodeSpaceAR(touch.getLocation());
          this.dragOffset.set(locationInNode.x - this.node.position.x, locationInNode.y - this.node.position.y);
        };
        _proto.onTouchMove = function onTouchMove(event) {
          if (this.isDragging) {
            // const touch = event.getTouch();
            var locationInNode = event.getLocation(); //this.node.convertToNodeSpaceAR(touch.getLocation());
            this.node.setPosition(locationInNode.x - this.dragOffset.x, locationInNode.y - this.dragOffset.y);
          }
        };
        _proto.onTouchEnd = function onTouchEnd(event) {
          this.isDragging = false;
        };
        _proto.update = function update(deltaTime) {};
        return TouchMove;
      }(Component)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TowerBuildInfo.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _inheritsLoose, _createClass, cclegacy, _decorator, Component;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class;
      cclegacy._RF.push({}, "ea529TTVC1LXLXfnGNnpTip", "TowerBuildInfo", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var TowerBuildInfo = exports('TowerBuildInfo', (_dec = ccclass('TowerBuildInfo'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(TowerBuildInfo, _Component);
        function TowerBuildInfo() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.road = void 0;
          _this.selectedTowerId = void 0;
          _this.removeBackCost = void 0;
          _this.upLevelCost = void 0;
          _this.tower = void 0;
          return _this;
        }
        var _proto = TowerBuildInfo.prototype;
        _proto.start = function start() {};
        _proto.update = function update(deltaTime) {};
        _createClass(TowerBuildInfo, [{
          key: "id",
          get: function get() {
            if (!this.road) {
              return null;
            }
            return this.road.cx + "_" + this.road.cy;
          }
        }]);
        return TowerBuildInfo;
      }(Component)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TowerCharacter.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Enemy.ts', './TowerLauncher.ts', './Character.ts', './BulletManager.ts', './TowerDataDTO.ts', './TowerConfig.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, cclegacy, _decorator, Node, Prefab, Graphics, CCInteger, CCBoolean, SpriteFrame, Animation, Color, Sprite, UITransform, Enemy, TowerLauncher, Character, BulletManager, TowerDataDTO, TowerConfig;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Prefab = module.Prefab;
      Graphics = module.Graphics;
      CCInteger = module.CCInteger;
      CCBoolean = module.CCBoolean;
      SpriteFrame = module.SpriteFrame;
      Animation = module.Animation;
      Color = module.Color;
      Sprite = module.Sprite;
      UITransform = module.UITransform;
    }, function (module) {
      Enemy = module.Enemy;
    }, function (module) {
      TowerLauncher = module.TowerLauncher;
    }, function (module) {
      Character = module.default;
    }, function (module) {
      BulletManager = module.BulletManager;
    }, function (module) {
      TowerDataDTO = module.TowerDataDTO;
    }, function (module) {
      TowerConfig = module.TowerConfig;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7;
      cclegacy._RF.push({}, "c685bNc3pFOWJmYrl+ckRxI", "TowerCharacter", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var TowerCharacter = exports('TowerCharacter', (_dec = ccclass('TowerCharacter'), _dec2 = property(Node), _dec3 = property(Prefab), _dec4 = property(Graphics), _dec5 = property(CCInteger), _dec6 = property({
        tooltip: "控制炮塔是否需要旋转",
        type: CCBoolean
      }), _dec7 = property({
        tooltip: "炮塔等级外观资源",
        type: [SpriteFrame]
      }), _dec8 = property(CCBoolean), _dec(_class = (_class2 = /*#__PURE__*/function (_Character) {
        _inheritsLoose(TowerCharacter, _Character);
        function TowerCharacter() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Character.call.apply(_Character, [this].concat(args)) || this;
          _this.lockTarget = null;
          _initializerDefineProperty(_this, "tempLockTarget", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "bulletPrefab", _descriptor2, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "graphics", _descriptor3, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "range", _descriptor4, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "fortIsRotate", _descriptor5, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "TowerSpriteFrame", _descriptor6, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "isTest", _descriptor7, _assertThisInitialized(_this));
          _this.fireRate = 0.3;
          _this.timeSinceLastFire = 0;
          _this.fort = null;
          _this.enemyList = void 0;
          _this.animation = null;
          _this._level = 1;
          _this._towerData = null;
          _this.towerId = 0;
          return _this;
        }
        var _proto = TowerCharacter.prototype;
        _proto.onLoad = function onLoad() {
          _Character.prototype.onLoad.call(this);
          this.fort = this.node.getChildByName("fort");
          if (this.fort) {
            this.animation = this.fort.getComponent(Animation);
          }
          // this.node.on(NodeEventType.TOUCH_START, this.onClickNode, this);
          this.enemyList = {};
        };
        _proto.onClickNode = function onClickNode(event) {
          this.createBullet();
        };
        _proto.start = function start() {
          if (TowerLauncher.instance && TowerLauncher.instance.isDebug) {
            this.drawRange();
          }
        };
        _proto.drawRange = function drawRange() {
          this.graphics.clear();
          this.graphics.strokeColor = Color.RED;
          this.graphics.lineWidth = 5;
          this.graphics.circle(0, 0, this.range);
          this.graphics.stroke();
        };
        _proto.getTarget = function getTarget() {
          if (!this.enemyList) {
            return null;
          }
          var enemyKeys = Object.keys(this.enemyList);
          if (enemyKeys.length <= 0) {
            return null;
          }
          var index = -1;
          var minHp = Number.MAX_VALUE;
          for (var i = 0; i < enemyKeys.length; i++) {
            var enemy = this.enemyList[enemyKeys[i]];
            if (enemy.hp < minHp) {
              minHp = enemy.hp;
              index = i;
            }
          }
          if (index != -1) {
            return this.enemyList[enemyKeys[index]];
          }
          return this.enemyList[enemyKeys[0]];
        };
        _proto.update = function update(deltaTime) {
          if (!this.isTest && TowerLauncher.instance && (TowerLauncher.instance.gameOver || TowerLauncher.instance.pause)) {
            return;
          }
          this.timeSinceLastFire += deltaTime;
          this.enemyList = {};
          var foundList = [];
          if (TowerLauncher.instance && TowerLauncher.instance.quadTree) {
            foundList = TowerLauncher.instance.quadTree.queryInRange(this.rect, this.range);
          }
          // const foundEnemyList:Enemy[] = [];
          if (foundList.length > 0) {
            for (var i = 0; i < foundList.length; i++) {
              var e = foundList[i];
              if (e instanceof Enemy) {
                this.enemyList[e.uuid] = e;
              }
            }
          }
          var enemy = this.getTarget();
          this.lockTarget = enemy ? enemy.node : this.tempLockTarget;
          if (this.lockTarget && this.fortIsRotate) {
            var currentPos = this.node.position.clone();
            var targetPos = this.lockTarget.position.clone();
            var radian = Math.atan2(targetPos.y - currentPos.y, targetPos.x - currentPos.x);
            var angle = radian / Math.PI * 180;
            this.fort.angle = angle; //- 90

            // this.node.lookAt(this.lockTarget.worldPosition,math.v3(0,1,0));
            // this.node.eulerAngles = math.v3(0,0,this.node.eulerAngles.z)
          }

          if (this.lockTarget && this.timeSinceLastFire > this.fireRate) {
            this.timeSinceLastFire = 0;
            console.log("创建子弹了");
            this.playFireAnimation();
          }
          // this.transform.lookAtZ(targetPos);
        };

        _proto.playFireAnimation = function playFireAnimation() {
          if (this.animation) {
            var clips = this.animation.clips;
            var names = clips.map(function (clip) {
              return clip.name;
            }, this);
            this.animation.on(Animation.EventType.FINISHED, this.onAnimationFinished, this);
            this.animation.play(names[Math.max(0, this.level - 1)]);
          }
        }

        /**
         * 更新炮塔外观
         */;
        _proto.updateTowerOutward = function updateTowerOutward() {
          if (this.fort) {
            var fortSprinte = this.fort.getComponent(Sprite);
            if (fortSprinte) {
              fortSprinte.spriteFrame = this.TowerSpriteFrame[Math.max(0, this.level - 1)];
            }
          }
        };
        _proto.updateLevel = function updateLevel(level) {
          this._level = level;
          this.updateTowerOutward();
          this._towerData = TowerConfig.instance.getTowerConfig(this.towerId, this.level);
        };
        _proto.onAnimationFinished = function onAnimationFinished() {
          this.createBullet();
        };
        _proto.createBullet = function createBullet() {
          if (!this.lockTarget || TowerLauncher.instance && (TowerLauncher.instance.gameOver || TowerLauncher.instance.pause)) {
            return;
          }
          var bullet = BulletManager.instance.create(this.bulletPrefab);
          var node = bullet.node;
          // const pos = new Vec3();
          var pos = this.node.position.clone();
          var fortRadius = this.fort.getComponent(UITransform).width / 2;
          var angle = this.fort.angle;
          var x = pos.x + fortRadius * Math.cos(angle);
          var y = pos.y + fortRadius * Math.sin(angle);
          node.setPosition(x, y);
          // bullet.targetNode = this.lockTarget;
          node.parent = this.node.parent;
          var direction = this.lockTarget.position.clone().subtract(this.node.position.clone());
          bullet["short"](direction, this);
        };
        _createClass(TowerCharacter, [{
          key: "towerData",
          get: function get() {
            if (!this._towerData) {
              this._towerData = new TowerDataDTO();
              this._towerData.buildCost = 100;
              this._towerData.harm = 10;
              this._towerData.speed = 300;
              this._towerData.removeBack = 90;
            }
            return this._towerData;
          },
          set: function set(value) {
            this._towerData = value;
          }
        }, {
          key: "level",
          get: function get() {
            return this._level;
          }
        }]);
        return TowerCharacter;
      }(Character), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "tempLockTarget", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "bulletPrefab", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "graphics", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "range", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 100;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "fortIsRotate", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return true;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "TowerSpriteFrame", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "isTest", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      })), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TowerConfig.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './TowerLauncher.ts', './TowerDataDTO.ts', './TowerMapDTO.ts'], function (exports) {
  var _createClass, cclegacy, _decorator, resources, TowerLauncher, TowerDataDTO, TowerMapDTO;
  return {
    setters: [function (module) {
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      resources = module.resources;
    }, function (module) {
      TowerLauncher = module.TowerLauncher;
    }, function (module) {
      TowerDataDTO = module.TowerDataDTO;
    }, function (module) {
      TowerMapDTO = module.TowerMapDTO;
    }],
    execute: function () {
      cclegacy._RF.push({}, "024e1/UrblCvpLKieiVb4pK", "TowerConfig", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var TowerConfig = exports('TowerConfig', /*#__PURE__*/function () {
        function TowerConfig() {
          this._config = null;
          this._towerData = void 0;
          this._mapData = void 0;
          this.init();
        }
        var _proto = TowerConfig.prototype;
        _proto.init = function init() {};
        _proto.loadConfig = function loadConfig() {
          return new Promise(function (resolve, reject) {
            resources.load("tower/config", function (err, data) {
              if (err) {
                reject(err);
                return;
              }
              resolve(data);
            });
          });
        };
        _proto.initConfig = function initConfig(config) {
          this._config = config.json;
          this._towerData = {};
          this._mapData = {};
          var towersData = this._config["towers"];
          if (towersData) {
            for (var _key in towersData) {
              var towerId = Number(_key);
              var towrData = towersData[_key];
              var idDtoMap = this._towerData[towerId];
              if (!idDtoMap) {
                idDtoMap = {};
              }
              for (var levelKey in towrData) {
                if (Object.prototype.hasOwnProperty.call(towrData, levelKey)) {
                  var element = towrData[levelKey];
                  var dto = new TowerDataDTO();
                  dto.buildCost = element.buildCost;
                  dto.removeBack = element.removeBack;
                  dto.harm = element.harm;
                  dto.speed = element.speed;
                  idDtoMap[levelKey] = dto;
                }
              }
              this._towerData[towerId] = idDtoMap;
            }
          }
          var themeConfigs = this._config["theme"];
          for (var _key2 in themeConfigs) {
            var theme = Number(_key2);
            var themeData = this._mapData[theme];
            if (!themeData) {
              themeData = {};
            }
            var configData = themeConfigs[_key2];
            if (!configData) {
              continue;
            }
            for (var configDataKey in configData) {
              var mapConfig = configData[configDataKey];
              var _mapData = new TowerMapDTO();
              _mapData.canBuildTowerIds = mapConfig.towers;
              _mapData.startValue = mapConfig.startValue;
              _mapData.enemyCount = mapConfig.enemyCount;
              themeData[configDataKey] = _mapData;
            }
            this._mapData[theme] = themeData;
          }
          // TowerLauncher.instance.value = this._config["startValue"];
          var mapData = this.getMapData();
          if (mapData) {
            TowerLauncher.instance.value = mapData.startValue;
          }
        };
        _proto.getConfig = function getConfig(key) {
          if (!this._config) {
            return null;
          }
          return this._config[key];
        };
        _proto.getMapData = function getMapData(themeId, mapId) {
          if (themeId === void 0) {
            themeId = TowerLauncher.instance.theme;
          }
          if (mapId === void 0) {
            mapId = TowerLauncher.instance.mapId;
          }
          if (!this._mapData) {
            return null;
          }
          var themeConfigs = this._mapData[themeId];
          if (!themeConfigs) {
            return null;
          }
          var theme = themeConfigs["map" + mapId];
          return theme;
        };
        _proto.getTowerConfig = function getTowerConfig(towerId, level) {
          if (level === void 0) {
            level = 1;
          }
          if (!this._towerData) {
            return null;
          }
          var towerData = this._towerData[towerId];
          if (!towerData) {
            return null;
          }
          return towerData["level" + level];
        };
        _createClass(TowerConfig, null, [{
          key: "instance",
          get: function get() {
            if (!TowerConfig._instance) {
              TowerConfig._instance = new TowerConfig();
            }
            return TowerConfig._instance;
          }
        }]);
        return TowerConfig;
      }());
      TowerConfig._instance = void 0;
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TowerConst.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _createClass, cclegacy;
  return {
    setters: [function (module) {
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "b96a1/UGG1GsIYdJzPH2+aj", "TowerConst", undefined);
      var TowerConst = exports('TowerConst', /*#__PURE__*/function () {
        function TowerConst() {
          this.ColliderTag_Boss = 1;
          this.ColliderTag_Enemy = 2;
          this.ColliderTag_Bullet = 3;
        }
        _createClass(TowerConst, null, [{
          key: "instance",
          get: function get() {
            if (!this._instance) {
              this._instance = new TowerConst();
            }
            return this._instance;
          }
        }]);
        return TowerConst;
      }());
      TowerConst._instance = void 0;
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TowerDataDTO.ts", ['cc'], function (exports) {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "c1445wiXudFgIm5Jtc1mcnx", "TowerDataDTO", undefined);
      var TowerDataDTO = exports('TowerDataDTO', function TowerDataDTO() {
        this.buildCost = void 0;
        this.removeBack = void 0;
        this.harm = void 0;
        this.speed = void 0;
      });
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TowerGameScene.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './BaseView.ts', './ViewRegisterMgr.ts', './PanelEnum.ts', './LayerManager.ts', './ViewConst.ts'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, BaseView, registerView, PanelType, LayerType, ViewConst;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }, function (module) {
      BaseView = module.default;
    }, function (module) {
      registerView = module.registerView;
    }, function (module) {
      PanelType = module.PanelType;
    }, function (module) {
      LayerType = module.LayerType;
    }, function (module) {
      ViewConst = module.default;
    }],
    execute: function () {
      var _dec, _class;
      cclegacy._RF.push({}, "0a80eWIP15IiJC23Tc8ca/3", "TowerGameScene", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var TowerGameScene = exports('TowerGameScene', (_dec = ccclass('TowerGameScene'), _dec(_class = /*#__PURE__*/function (_BaseView) {
        _inheritsLoose(TowerGameScene, _BaseView);
        function TowerGameScene() {
          return _BaseView.apply(this, arguments) || this;
        }
        var _proto = TowerGameScene.prototype;
        _proto.start = function start() {};
        _proto.update = function update(deltaTime) {};
        return TowerGameScene;
      }(BaseView)) || _class));
      registerView({
        viewCls: TowerGameScene,
        id: PanelType.TowerGameScene,
        layer: LayerType.view,
        prefabPathPrefix: ViewConst.defaultPrefabPathPrefix + "tower/"
      });
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TowerGameUIManager.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './TowerConfig.ts', './SelectTowerBuild.ts', './RemoveOrUpLevel.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, cclegacy, _decorator, Label, Node, NodePool, Sprite, Component, TowerConfig, SelectTowerBuild, RemoveOrUpLevel;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      Node = module.Node;
      NodePool = module.NodePool;
      Sprite = module.Sprite;
      Component = module.Component;
    }, function (module) {
      TowerConfig = module.TowerConfig;
    }, function (module) {
      SelectTowerBuild = module.SelectTowerBuild;
    }, function (module) {
      RemoveOrUpLevel = module.RemoveOrUpLevel;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3, _class3;
      cclegacy._RF.push({}, "e41482n/ApICY3mWFeB+JSK", "TowerGameUIManager", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var TowerGameUIManager = exports('TowerGameUIManager', (_dec = ccclass('GameUIManager'), _dec2 = property(Label), _dec3 = property(Node), _dec4 = property(Node), _dec(_class = (_class2 = (_class3 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(TowerGameUIManager, _Component);
        function TowerGameUIManager() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "turnipLabel", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "selectedTowerNode", _descriptor2, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "removeOrUpdate", _descriptor3, _assertThisInitialized(_this));
          _this._nodePool = null;
          return _this;
        }
        var _proto = TowerGameUIManager.prototype;
        _proto.onLoad = function onLoad() {
          if (!TowerGameUIManager._instance) {
            TowerGameUIManager._instance = this;
          } else {
            this.destroy();
          }
        };
        _proto.start = function start() {
          this._nodePool = new NodePool();
        };
        _proto.update = function update(deltaTime) {};
        _proto.updateValue = function updateValue(value) {
          if (this.turnipLabel) {
            this.turnipLabel.string = value.toString();
          }
        };
        _proto.showRemoveOrUpdate = function showRemoveOrUpdate(show, buildInfo, selectCall, callObj) {
          if (selectCall === void 0) {
            selectCall = null;
          }
          if (callObj === void 0) {
            callObj = null;
          }
          if (!this.removeOrUpdate) {
            return;
          }
          this.reomoveUpdateState = show;
          if (show && buildInfo) {
            this.removeOrUpdate.setPosition(buildInfo.node.position.clone());
            var script = this.removeOrUpdate.getComponent(RemoveOrUpLevel);
            if (script) {
              script.updateInfo(buildInfo, selectCall, callObj);
            }
          }
        }

        /**
         * 显示选择塔建造
         * @param show 是否显示
         * @param buildInfo
         * @param selectCall 选择回调函数
         * @param selectObj 选择回调函数对象
         */;
        _proto.showSelectTower = function showSelectTower(show, buildInfo, selectCall, selectObj) {
          if (selectCall === void 0) {
            selectCall = null;
          }
          if (selectObj === void 0) {
            selectObj = null;
          }
          if (!this.selectedTowerNode) {
            return false;
          }
          this.selectedTowerState = show;
          var childrenCount = this.selectedTowerNode.children.length;
          for (var i = childrenCount - 1; i >= 0; i--) {
            var child = this.selectedTowerNode.children[i];
            child.removeFromParent();
            this._nodePool.put(child);
          }
          if (show) {
            this.selectedTowerNode.setPosition(buildInfo.node.position.clone());
            var mapData = TowerConfig.instance.getMapData();
            if (mapData) {
              var canBuildTowers = mapData.canBuildTowerIds;
              for (var _i = 0; _i < canBuildTowers.length; _i++) {
                var towerId = canBuildTowers[_i];
                var towerBuild = this.getNode();
                this.selectedTowerNode.addChild(towerBuild.node);
                towerBuild.setTowerId(towerId);
                towerBuild.setBuildInfo(buildInfo);
                towerBuild.setClickCall(selectCall, selectObj);
              }
            }
          }
        };
        _proto.getNode = function getNode() {
          if (this._nodePool.size() > 0) {
            var _node = this._nodePool.get();
            var build = _node.getComponent(SelectTowerBuild);
            if (!build) {
              build = _node.addComponent(SelectTowerBuild);
            }
            _node.addComponent(Sprite);
            return build;
          }
          var node = new Node();
          node.addComponent(Sprite);
          return node.addComponent(SelectTowerBuild);
        };
        _createClass(TowerGameUIManager, [{
          key: "reomoveUpdateState",
          get: function get() {
            if (this.removeOrUpdate) {
              return this.removeOrUpdate.active;
            }
            return false;
          },
          set: function set(show) {
            if (this.removeOrUpdate) {
              this.removeOrUpdate.active = show;
            }
          }
        }, {
          key: "selectedTowerState",
          get: function get() {
            if (this.selectedTowerNode) {
              return this.selectedTowerNode.active;
            }
            return false;
          },
          set: function set(value) {
            if (this.selectedTowerNode) {
              this.selectedTowerNode.active = value;
            }
          }
        }], [{
          key: "instance",
          get: function get() {
            if (!TowerGameUIManager._instance) {
              TowerGameUIManager._instance = new TowerGameUIManager();
            }
            return TowerGameUIManager._instance;
          }
        }]);
        return TowerGameUIManager;
      }(Component), _class3._instance = void 0, _class3), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "turnipLabel", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "selectedTowerNode", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "removeOrUpdate", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TowerLauncher.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Enemy.ts', './QuadTree.ts', './BulletManager.ts', './TowerGameUIManager.ts', './ViewManager.ts', './PanelEnum.ts', './TowerConfig.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, _asyncToGenerator, _regeneratorRuntime, cclegacy, _decorator, Graphics, Color, Component, Enemy, QuadTree, AnchorPointType, QuadTreeRect, BulletManager, TowerGameUIManager, viewManager, PanelType, TowerConfig;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
      _asyncToGenerator = module.asyncToGenerator;
      _regeneratorRuntime = module.regeneratorRuntime;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Graphics = module.Graphics;
      Color = module.Color;
      Component = module.Component;
    }, function (module) {
      Enemy = module.Enemy;
    }, function (module) {
      QuadTree = module.QuadTree;
      AnchorPointType = module.AnchorPointType;
      QuadTreeRect = module.QuadTreeRect;
    }, function (module) {
      BulletManager = module.BulletManager;
    }, function (module) {
      TowerGameUIManager = module.TowerGameUIManager;
    }, function (module) {
      viewManager = module.viewManager;
    }, function (module) {
      PanelType = module.PanelType;
    }, function (module) {
      TowerConfig = module.TowerConfig;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor, _class3;
      cclegacy._RF.push({}, "d1c78JbMBZGZZoWCxl3zSdU", "TowerLauncher", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var TowerLauncher = exports('TowerLauncher', (_dec = ccclass('TowerLauncher'), _dec2 = property(Graphics), _dec(_class = (_class2 = (_class3 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(TowerLauncher, _Component);
        function TowerLauncher() {
          var _this;
          _this = _Component.call(this) || this;
          _initializerDefineProperty(_this, "graphics", _descriptor, _assertThisInitialized(_this));
          _this.isInit = false;
          _this.speed = 1;
          _this.pause = false;
          _this.theme = 1;
          _this.gameOver = false;
          _this.mapId = 1;
          _this.popEnemyCount = 0;
          _this._value = 0;
          _this._entityLayer = void 0;
          _this._mapLayer = void 0;
          _this._enemyList = void 0;
          _this._towerList = void 0;
          _this._boss = void 0;
          _this._buildInfos = void 0;
          _this._mapPathCache = void 0;
          _this.quadTree = null;
          _this.isDebug = true;
          return _this;
        }
        var _proto = TowerLauncher.prototype;
        _proto.onLoad = function onLoad() {
          if (!TowerLauncher._instance) {
            TowerLauncher._instance = this;
          } else {
            this.destroy();
          }
        };
        _proto.init = function init(entityLayer, mapLayer) {
          this._entityLayer = entityLayer;
          this._mapLayer = mapLayer;
          this._enemyList = {};
          this._towerList = {};
          this._buildInfos = {};
          this._mapPathCache = {};
        };
        _proto.getWorldPath = /*#__PURE__*/function () {
          var _getWorldPath = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
            var mapKey, result;
            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) switch (_context.prev = _context.next) {
                case 0:
                  mapKey = this.theme + "_" + this.mapId;
                  result = this._mapPathCache[mapKey];
                  if (!(result && result.length > 0)) {
                    _context.next = 4;
                    break;
                  }
                  return _context.abrupt("return", result);
                case 4:
                  if (!this._mapLayer) {
                    _context.next = 10;
                    break;
                  }
                  _context.next = 7;
                  return this._mapLayer.animationPath.getWorldPathByMapId(this.mapId, this.theme);
                case 7:
                  result = _context.sent;
                  this._mapPathCache[mapKey] = result;
                  return _context.abrupt("return", result);
                case 10:
                  return _context.abrupt("return", []);
                case 11:
                case "end":
                  return _context.stop();
              }
            }, _callee, this);
          }));
          function getWorldPath() {
            return _getWorldPath.apply(this, arguments);
          }
          return getWorldPath;
        }();
        _proto.addEnemy = function addEnemy(enemy) {
          if (!enemy || !enemy.node) {
            return;
          }
          // this.quadTree.insert(enemy);
          this._enemyList[enemy.uuid] = enemy;
        };
        _proto.removeEnemy = function removeEnemy(enemy) {
          if (!enemy || !enemy.node) {
            return;
          }
          // this.quadTree.remove(enemy);
          delete this._enemyList[enemy.uuid];
        };
        _proto.addBuildInfo = function addBuildInfo(build) {
          this._buildInfos[build.id] = build;
        };
        _proto.getBuildInfo = function getBuildInfo(id) {
          return this._buildInfos[id];
        };
        _proto.getEnemySize = function getEnemySize() {
          if (!this._enemyList) {
            return 0;
          }
          return Object.keys(this._enemyList).length;
        };
        _proto.addBoss = function addBoss(boss) {
          this._boss = boss;
        };
        _proto.addTower = function addTower(tower) {
          if (!tower || !tower.node) {
            return;
          }
          this._towerList[tower.uuid] = tower;
        };
        _proto.removeTower = function removeTower(tower) {
          if (!tower || !tower.node) {
            return;
          }
          delete this._towerList[tower.uuid];
        };
        _proto.onGameStar = function onGameStar(level) {
          // const map:TowerSceneMap = this.node.getComponent(TowerSceneMap);
          // if(map){
          //     map.setMapId(level, MapLoadModel.single);
          // }
          // TowerSceneMap.instance.setMapId(level)
        };
        _proto.start = function start() {
          // console.log("游戏管理脚本")
          // const size: Size = view.getVisibleSize();
          // const rect: QuadTreeRect = new QuadTreeRect(0, 0, size.width, size.height);
          // this.quadTree = new QuadTree<Behaviour>(rect, 10, 5, AnchorPointType.LeftDown);

          // this.onGameStar(1)
        };
        _proto.initQuadTree = function initQuadTree(width, height) {
          var rect = new QuadTreeRect(0, 0, width, height);
          this.quadTree = new QuadTree(rect, 10, 5, AnchorPointType.LeftDown);
        };
        _proto.update = function update(deltaTime) {
          if (!this.isInit || this.gameOver || this.pause) {
            return;
          }
          this.quadTree.clear();
          var bullets = BulletManager.instance.bulletList;
          if (bullets.length > 0) {
            for (var i = 0; i < bullets.length; i++) {
              var bullet = bullets[i];
              this.quadTree.insert(bullet);
            }
          }
          for (var _key in this._towerList) {
            this.quadTree.insert(this._towerList[_key]);
          }
          for (var _key2 in this._enemyList) {
            this.quadTree.insert(this._enemyList[_key2]);
          }
          this.quadTree.insert(this._boss);
          if (bullets.length > 0) {
            for (var _i = 0; _i < bullets.length; _i++) {
              var _bullet = bullets[_i];
              var child = [];
              this.quadTree.query(_bullet.rect, child);
              if (child.length > 0) {
                for (var j = 0; j < child.length; j++) {
                  var e = child[j];
                  if (e instanceof Enemy) {
                    console.log("子弹", _bullet, "打中了", e);
                    e.damage(_bullet.harm);
                    _bullet.node.removeFromParent();
                    BulletManager.instance.release(_bullet);
                    _i--;
                  }
                }
              }
            }
          }
          if (this._boss) {
            var collideBossElements = [];
            this.quadTree.query(this._boss.rect, collideBossElements);
            if (collideBossElements.length > 0) {
              for (var _i2 = 0; _i2 < collideBossElements.length; _i2++) {
                var element = collideBossElements[_i2];
                if (element instanceof Enemy) {
                  console.log("敌人", element, "跟boss碰撞了");
                  this._boss.bleeding();
                  element.die();
                }
              }
            }
          }
          var mapData = TowerConfig.instance.getMapData();
          if (mapData) {
            var maxEnemy = mapData.enemyCount;
            if (this.popEnemyCount >= maxEnemy) {
              this.gameOver = true;
              this.doGameOver(true);
            }
          }
          if (this.isDebug) {
            var qtList = [];
            this.quadTree.getAllChildNodes(qtList);
            var rects = qtList.map(function (e) {
              return e.rect;
            }, this);
            this.drawRect(rects);
          }
        };
        _proto.drawRect = function drawRect(rect) {
          this.graphics.clear();
          for (var index = 0; index < rect.length; index++) {
            var element = rect[index];
            this.graphics.fillColor = Color.RED;
            this.graphics.strokeColor = Color.YELLOW;
            this.graphics.lineWidth = 5;
            var x = element.x;
            var y = element.y;
            this.graphics.circle(element.x, element.y, 10);
            this.graphics.fill();
            this.graphics.rect(x, y, element.width, element.height);
            this.graphics.stroke();
          }
        };
        _proto.drawPoint = function drawPoint(point, radius) {
          if (radius === void 0) {
            radius = 10;
          }
          this.graphics.lineWidth = 5;
          this.graphics.fillColor = Color.RED;
          this.graphics.circle(point.x, point.y, radius);
          this.graphics.fill();
        };
        _proto.doGameOver = function doGameOver(isWin) {
          if (isWin === void 0) {
            isWin = false;
          }
          if (Object.keys(this._enemyList).length > 0) {
            for (var _key3 in this._enemyList) {
              if (Object.prototype.hasOwnProperty.call(this._enemyList, _key3)) {
                var element = this._enemyList[_key3];
                element.node.removeFromParent();
                this.removeEnemy(element);
              }
            }
            this._enemyList = {};
          }
          BulletManager.instance.releaseAll();
          viewManager.open(PanelType.GameOverOrWin, isWin);
        };
        _proto.restart = function restart() {
          this.gameOver = false;
          this.pause = false;
        };
        _createClass(TowerLauncher, [{
          key: "value",
          get: function get() {
            return this._value;
          },
          set: function set(value) {
            this._value = value;
            TowerGameUIManager.instance.updateValue(value);
          }
        }], [{
          key: "instance",
          get: function get() {
            // if (!this._instance) {
            //     this._instance = new TowerLauncher();
            // }
            return this._instance;
          }
        }]);
        return TowerLauncher;
      }(Component), _class3._instance = void 0, _class3), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "graphics", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _class2)) || _class));
      window["TowerLauncher"] = TowerLauncher;
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TowerMapDTO.ts", ['cc'], function (exports) {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "79e45LBSTFIbJndn2KyjUXD", "TowerMapDTO", undefined);
      var TowerMapDTO = exports('TowerMapDTO', function TowerMapDTO() {
        this.canBuildTowerIds = void 0;
        this.startValue = void 0;
        this.enemyCount = void 0;
      });
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TowerMapLayer.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './MapLayer.ts', './TowerLauncher.ts', './AnimationPath.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, cclegacy, _decorator, Sprite, Node, UITransform, resources, Texture2D, SpriteFrame, MapLayer, TowerLauncher, AnimationPath;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Sprite = module.Sprite;
      Node = module.Node;
      UITransform = module.UITransform;
      resources = module.resources;
      Texture2D = module.Texture2D;
      SpriteFrame = module.SpriteFrame;
    }, function (module) {
      MapLayer = module.default;
    }, function (module) {
      TowerLauncher = module.TowerLauncher;
    }, function (module) {
      AnimationPath = module.AnimationPath;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3;
      cclegacy._RF.push({}, "b4312URXw1D4KM7vEOKPHD6", "TowerMapLayer", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var TowerMapLayer = exports('TowerMapLayer', (_dec = ccclass('TowerMapLayer'), _dec2 = property(Sprite), _dec3 = property(AnimationPath), _dec4 = property(Node), _dec(_class = (_class2 = /*#__PURE__*/function (_MapLayer) {
        _inheritsLoose(TowerMapLayer, _MapLayer);
        function TowerMapLayer() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _MapLayer.call.apply(_MapLayer, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "baseImage", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "animationPath", _descriptor2, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "roadNode", _descriptor3, _assertThisInitialized(_this));
          return _this;
        }
        var _proto = TowerMapLayer.prototype;
        _proto.onLoad = function onLoad() {
          if (!this.animationPath) {
            this.animationPath = this.node.getComponentInChildren(AnimationPath);
          }
        };
        _proto.init = function init(mapParams) {
          _MapLayer.prototype.init.call(this, mapParams);
          if (!this.baseImage) {
            var bgNode = new Node();
            this.node.addChild(bgNode);
            bgNode.layer = this.node.layer;
            this.baseImage = bgNode.addComponent(Sprite);
            this.baseImage.sizeMode = Sprite.SizeMode.RAW;
            bgNode.getComponent(UITransform).anchorX = 0;
            bgNode.getComponent(UITransform).anchorY = 0;
          }
          this.loadBg();
        };
        _proto.loadBg = function loadBg() {
          var _this2 = this;
          var themeId = TowerLauncher.instance.theme;
          var path = "tower/map/theme" + themeId + "/BG" + themeId + "/texture";
          resources.load(path, Texture2D, function (error, tex) {
            if (error != null) {
              console.log("加载地图背景失败 path = ", path, "error", error);
              return;
            }
            var spriteFrame = new SpriteFrame();
            spriteFrame.texture = tex;
            _this2.baseImage.spriteFrame = spriteFrame;
            _this2.getComponent(UITransform).width = _this2.width;
            _this2.getComponent(UITransform).height = _this2.height;
          });
        };
        _createClass(TowerMapLayer, [{
          key: "width",
          get: function get() {
            if (this.baseImage) {
              return this.baseImage.getComponent(UITransform).width;
            }
            return this._mapParams.viewWidth;
          }
        }, {
          key: "height",
          get: function get() {
            if (this.baseImage) {
              return this.baseImage.getComponent(UITransform).height;
            }
            return this._mapParams.viewHeight;
          }
        }]);
        return TowerMapLayer;
      }(MapLayer), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "baseImage", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "animationPath", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "roadNode", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TowerSceneMap.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './SceneBase.ts', './Enum2.ts', './PathFindingAgent.ts', './Boss.ts', './Enemy.ts', './TowerCharacter.ts', './TowerLauncher.ts', './TowerBuildInfo.ts', './TowerMapLayer.ts', './TowerConfig.ts', './TowerGameUIManager.ts', './EffectManager.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, _asyncToGenerator, _regeneratorRuntime, cclegacy, _decorator, Prefab, Node, instantiate, UITransform, math, resources, Sprite, SpriteFrame, NodeEventType, SceneBase, MapItemType, PathOptimize, PathQuadSeek, PathFindingAgent, Boss, Enemy, TowerCharacter, TowerLauncher, TowerBuildInfo, TowerMapLayer, TowerConfig, TowerGameUIManager, EffectManager;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
      _asyncToGenerator = module.asyncToGenerator;
      _regeneratorRuntime = module.regeneratorRuntime;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Prefab = module.Prefab;
      Node = module.Node;
      instantiate = module.instantiate;
      UITransform = module.UITransform;
      math = module.math;
      resources = module.resources;
      Sprite = module.Sprite;
      SpriteFrame = module.SpriteFrame;
      NodeEventType = module.NodeEventType;
    }, function (module) {
      SceneBase = module.SceneBase;
    }, function (module) {
      MapItemType = module.MapItemType;
      PathOptimize = module.PathOptimize;
      PathQuadSeek = module.PathQuadSeek;
    }, function (module) {
      PathFindingAgent = module.default;
    }, function (module) {
      Boss = module.Boss;
    }, function (module) {
      Enemy = module.Enemy;
    }, function (module) {
      TowerCharacter = module.TowerCharacter;
    }, function (module) {
      TowerLauncher = module.TowerLauncher;
    }, function (module) {
      TowerBuildInfo = module.TowerBuildInfo;
    }, function (module) {
      TowerMapLayer = module.TowerMapLayer;
    }, function (module) {
      TowerConfig = module.TowerConfig;
    }, function (module) {
      TowerGameUIManager = module.TowerGameUIManager;
    }, function (module) {
      EffectManager = module.EffectManager;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _class3;
      cclegacy._RF.push({}, "dba7ck8uaxPArkxJ561JqIv", "TowerSceneMap", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var TowerSceneMap = exports('TowerSceneMap', (_dec = ccclass('TowerSceneMap'), _dec2 = property(Prefab), _dec3 = property(TowerMapLayer), _dec4 = property(Prefab), _dec5 = property([Prefab]), _dec6 = property(Node), _dec(_class = (_class2 = (_class3 = /*#__PURE__*/function (_SceneBase) {
        _inheritsLoose(TowerSceneMap, _SceneBase);
        function TowerSceneMap() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _SceneBase.call.apply(_SceneBase, [this].concat(args)) || this;
          _initializerDefineProperty(_this, "bossPrefab", _descriptor, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "mapLayer", _descriptor2, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "enemyPrefab", _descriptor3, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "towerPrefab", _descriptor4, _assertThisInitialized(_this));
          _initializerDefineProperty(_this, "effectLayer", _descriptor5, _assertThisInitialized(_this));
          _this.spawnPointDatas = [];
          _this.maxEnemy = 10;
          _this.boss = null;
          _this.createEnemyDelay = 2;
          _this._time = 0;
          return _this;
        }
        var _proto = TowerSceneMap.prototype;
        _proto.onLoad = function onLoad() {
          // this.mapLayer =
          TowerSceneMap._instance = this;
        }

        // private mapPath: Vec2[] = [];
        ;

        _proto.start = function start() {
          _SceneBase.prototype.start.call(this);

          // this.winSize = view.getVisibleSize();
        };

        _proto.getMapPath = function getMapPath(mapId) {
          var themeId = TowerLauncher.instance.theme;
          return "tower/map/theme" + themeId + "/level" + mapId + "/level_" + themeId + "_" + mapId;
        };
        _proto.initMapElement = function initMapElement() {
          var mapItems = this.mapData.mapItems;
          if (!mapItems) {
            return;
          }
          TowerLauncher.instance.init(this.entityLayer, this.mapLayer);
          for (var i = 0; i < mapItems.length; i++) {
            var mapItem = mapItems[i];
            var mapItemType = mapItem.type;
            if (mapItemType == MapItemType.Npc) {
              this.initBoss(mapItem);
            } else if (mapItemType == MapItemType.Monster) ;else if (mapItemType == MapItemType.Transfer) ;else if (mapItemType == MapItemType.SpawnPoint) {
              this.initSpawnPoint(mapItem);
            }
          }
        };
        _proto.initSpawnPoint = function initSpawnPoint(mapItem) {
          this.spawnPointDatas.push(mapItem);
        };
        _proto.initBoss = function initBoss(mapItem) {
          var node = instantiate(this.bossPrefab);
          var boss = node.getComponent(Boss);
          this.boss = boss;
          node.active = true;
          node.parent = this.entityLayer.node;
          boss.initEditData(mapItem);
          boss.init();
          TowerLauncher.instance.addBoss(boss);
        };
        _proto.initMapData = function initMapData(mapData) {
          this.isInit = false;
          var len = mapData.roadDataArr.length;
          var len2 = mapData.roadDataArr[0].length;
          var dx = 0;
          var dy = 0;
          for (var i = 0; i < len; i++) {
            for (var j = 0; j < len2; j++) {
              mapData.roadDataArr[i][j];
              dx = j;
              dy = i;
              var node = PathFindingAgent.instance.getRoadNode(dx, dy);
              this.createRoad(node);
            }
          }
          var uiTransform = this.node.getComponent(UITransform);
          var width = uiTransform ? uiTransform.width : 0;
          var height = uiTransform ? uiTransform.height : 0;
          this.node.setPosition(math.v3(-width / 2, -height / 2));
          TowerLauncher.instance.initQuadTree(width, height);
          this.spawnPointDatas = [];
          this.entityLayer.node.removeAllChildren();
          this.mapLayer.roadNode.removeAllChildren();
          PathFindingAgent.instance.setRoadSeekerPassCondition(this.onRoadSeekerPassCondition.bind(this));
          EffectManager.instance.initEffectLayer(this.effectLayer);
          this.initMapElement();
          TowerConfig.instance.loadConfig().then(function (config) {
            TowerConfig.instance.initConfig(config);
            TowerLauncher.instance.isInit = true;
          })["catch"](function (err) {
            console.error(err);
          });

          // TowerLauncher.instance.getWorldPath().then((paths: Vec2[]) => {
          //     // this.mapPath = paths;
          //
          //     TowerConfig.instance.loadConfig().then((config: any) => {
          //         TowerConfig.instance.initConfig(config);
          //         TowerLauncher.instance.isInit = true;
          //     }).catch(err => {
          //         console.error(err);
          //     })
          // }).catch(err => {
          //
          // });

          // this.createEnemy();
        };

        _proto.createRoad = function createRoad(road) {
          var _this2 = this;
          if (!road) {
            return;
          }
          if (road.value == 1) {
            return;
          }
          if (road.value == 0) {
            return;
          }
          var greenRoadPath = "tower/res/NormalMordel/Game/Grid/texture";
          var blueRoadPath = "tower/res/NormalMordel/Game/Grid/texture";
          var path = greenRoadPath;
          if (road.value == 3) {
            path = blueRoadPath;
          }
          resources.load(path, function (error, tex) {
            var bgNode = new Node();
            _this2.node.addChild(bgNode);
            bgNode.layer = _this2.node.layer;
            var sprite = bgNode.addComponent(Sprite);
            sprite.sizeMode = Sprite.SizeMode.CUSTOM;
            bgNode.getComponent(UITransform).width = _this2.mapData.nodeWidth;
            bgNode.getComponent(UITransform).height = _this2.mapData.nodeHeight;
            bgNode.getComponent(UITransform).anchorX = 0.5;
            bgNode.getComponent(UITransform).anchorY = 0.5;
            var sp = new SpriteFrame();
            sp.texture = tex;
            sprite.spriteFrame = sp;
            bgNode.setPosition(road.px, road.py);
            bgNode.parent = _this2.mapLayer.roadNode;
            var buildInfo = bgNode.addComponent(TowerBuildInfo);
            buildInfo.road = road;
            bgNode.on(NodeEventType.TOUCH_START, _this2.onClickTowerRoad, _this2);
            TowerLauncher.instance.addBuildInfo(buildInfo);
          });
        };
        _proto.onClickTowerRoad = function onClickTowerRoad(event) {
          if (TowerLauncher.instance.gameOver || TowerLauncher.instance.pause || !TowerLauncher.instance.isInit) {
            return;
          }
          var node = event.target;
          var buildInfo = node.getComponent(TowerBuildInfo);
          if (!buildInfo) {
            return;
          }
          if (buildInfo.tower) {
            //console.log("有炮塔了 选择移除还是升级");
            //this.removeTower(buildInfo)
            if (TowerGameUIManager.instance.reomoveUpdateState) {
              TowerGameUIManager.instance.reomoveUpdateState = false;
            } else {
              TowerGameUIManager.instance.showRemoveOrUpdate(true, buildInfo, this.reomveOrUpdateTower, this);
            }
          } else {
            // this.createTower(buildInfo);
            if (TowerGameUIManager.instance.selectedTowerState) {
              TowerGameUIManager.instance.selectedTowerState = false;
            } else {
              TowerGameUIManager.instance.showSelectTower(true, buildInfo, this.createTower, this);
            }
          }
        };
        _proto.reomveOrUpdateTower = function reomveOrUpdateTower(type, buildInfo) {
          if (type == 1) {
            // 升级
            if (buildInfo && buildInfo.tower) {
              buildInfo.tower.updateLevel(buildInfo.tower.level + 1);
            }
          } else if (type == 2) {
            // 移除
            this.removeTower(buildInfo);
          }
          TowerGameUIManager.instance.showRemoveOrUpdate(false);
        }

        // private buildTower(towerId:number,pos:Vec3):void{
        //     console.log("选择建造",towerId);
        //
        //
        // }
        ;

        _proto.createEnemy = /*#__PURE__*/
        function () {
          var _createEnemy = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
            var node, enemy, spawnPoint;
            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) switch (_context.prev = _context.next) {
                case 0:
                  node = instantiate(this.enemyPrefab);
                  node.active = true;
                  enemy = node.getComponent(Enemy);
                  spawnPoint = this.spawnPointDatas[0];
                  node.setPosition(spawnPoint.x, spawnPoint.y);
                  node.parent = this.entityLayer.node;
                  PathFindingAgent.instance.updateRoadSeekerInfo(PathOptimize.none, PathQuadSeek.path_dire_4);

                  // var roadNodeArr: RoadNode[] = PathFindingAgent.instance.seekPath(math.v2(node.position.x, node.position.y), math.v2(this.boss.x, this.boss.y));

                  enemy.navTo(this.boss.x, this.boss.y);
                  // this.enemyList.push(enemy);

                  // enemy.navigationByPath(this.mapPath);
                  TowerLauncher.instance.addEnemy(enemy);
                case 9:
                case "end":
                  return _context.stop();
              }
            }, _callee, this);
          }));
          function createEnemy() {
            return _createEnemy.apply(this, arguments);
          }
          return createEnemy;
        }();
        _proto.createTower = function createTower(buildInfo) {
          console.log("选择建造", buildInfo.selectedTowerId);
          var node = instantiate(this.towerPrefab[Math.max(0, buildInfo.selectedTowerId - 1)]);
          node.active = true;
          var tower = node.getComponent(TowerCharacter);
          tower.towerId = buildInfo.selectedTowerId;
          tower.updateLevel(1);
          node.parent = this.entityLayer.node;
          node.setPosition(buildInfo.node.position.x, buildInfo.node.position.y);
          buildInfo.tower = tower;
          TowerLauncher.instance.addTower(tower);
        };
        _proto.removeTower = function removeTower(buildInfo) {
          if (!buildInfo.tower) {
            return;
          }
          buildInfo.tower.node.removeFromParent();
          TowerLauncher.instance.removeTower(buildInfo.tower);
          buildInfo.tower = null;
          if (buildInfo.removeBackCost != 0) {
            TowerLauncher.instance.value += buildInfo.removeBackCost;
          }
        }

        /**
         * 检测塔防地图路径点是否通过的条件
         * @param road
         * @private
         */;
        _proto.onRoadSeekerPassCondition = function onRoadSeekerPassCondition(road) {
          if (!road || road.value == 1 || road.value == 3) {
            return false;
          }
          return true;
        };
        _proto.update = function update(deltaTime) {
          if (TowerLauncher.instance.gameOver || TowerLauncher.instance.pause || !TowerLauncher.instance.isInit) {
            return;
          }
          this._time += deltaTime;
          if (this._time >= this.createEnemyDelay) {
            var count = TowerLauncher.instance.getEnemySize();
            if (count < this.maxEnemy) {
              console.log("创建一个敌人");
              this.createEnemy();
            }
            this._time = 0;
          }
        };
        _createClass(TowerSceneMap, null, [{
          key: "instance",
          get: function get() {
            return this._instance;
          }
        }]);
        return TowerSceneMap;
      }(SceneBase), _class3._instance = null, _class3), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "bossPrefab", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "mapLayer", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "enemyPrefab", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "towerPrefab", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "effectLayer", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TransferDoor.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, cclegacy, _decorator, CCString, CCInteger, Label, Vec3, Component;
  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      CCString = module.CCString;
      CCInteger = module.CCInteger;
      Label = module.Label;
      Vec3 = module.Vec3;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3;
      cclegacy._RF.push({}, "81275RZmxBNOIMFeons0oZc", "TransferDoor", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;

      /**
       * 传送门
       */
      var TransferDoor = exports('default', (_dec = ccclass('TransferDoor'), _dec2 = property(CCString), _dec3 = property(CCInteger), _dec4 = property(Label), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(TransferDoor, _Component);
        function TransferDoor() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          /**
           * 传送到目标地图Id
           */
          _initializerDefineProperty(_this, "targetMapId", _descriptor, _assertThisInitialized(_this));
          /**
           * 传送到目标地图的出生点Id
           */
          _initializerDefineProperty(_this, "targetMapSpawnId", _descriptor2, _assertThisInitialized(_this));
          /**
           * 魔法值
           */
          _initializerDefineProperty(_this, "nameTxt", _descriptor3, _assertThisInitialized(_this));
          /**
           * 用于显示角色名字的接口
           */
          _this._objName = "";
          /**
           * 编辑的数据
           */
          _this.editData = null;
          return _this;
        }
        var _proto = TransferDoor.prototype;
        // LIFE-CYCLE CALLBACKS:
        // onLoad () {}
        _proto.start = function start() {

          //this.node.opacity = 0;
        }

        /**
         * 初始化
         */;
        _proto.init = function init() {}

        /**
         * 初始化编辑数据
         * @param editData 
         */;
        _proto.initEditData = function initEditData(editData) {
          this.editData = editData;
          this.objName = editData.objName;
          this.node.position = new Vec3(editData.x, editData.y);
          this.targetMapId = editData.targetMapId;
          this.targetMapSpawnId = editData.targetMapSpawnId;
        }

        // update (dt) {}
        ;

        _proto.toString = function toString() {
          return this.targetMapId + "," + this.targetMapSpawnId;
        }

        /**
         * 角色进入传送门
         * @param callback 
         */;
        _proto.onTriggerEnter = function onTriggerEnter(player) {
          if (player != null) {
            console.log("跳转到地图", this.targetMapId, this.targetMapSpawnId);
          }
        }

        /**
         * 角色从传送们出来
         * @param callback 
         */;
        _proto.onTriggerExit = function onTriggerExit(player) {
          //
        };
        _createClass(TransferDoor, [{
          key: "objName",
          get: function get() {
            return this._objName;
          },
          set: function set(value) {
            this._objName = value;
            if (this.nameTxt == null) {
              var _this$node$getChildBy;
              this.nameTxt = (_this$node$getChildBy = this.node.getChildByName("NameTxt")) == null ? void 0 : _this$node$getChildBy.getComponent(Label);
            }
            if (this.nameTxt) {
              this.nameTxt.string = this._objName;
            }
          }
        }]);
        return TransferDoor;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "targetMapId", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return "";
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "targetMapSpawnId", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "nameTxt", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Transform.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _inheritsLoose, _createClass, cclegacy, _decorator, Vec3, Quat, Node;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Vec3 = module.Vec3;
      Quat = module.Quat;
      Node = module.Node;
    }],
    execute: function () {
      var _dec, _class;
      cclegacy._RF.push({}, "a3d30//Iw9F147gC+EuFDcZ", "Transform", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var Transform = exports('Transform', (_dec = ccclass('Transform'), _dec(_class = /*#__PURE__*/function (_Node) {
        _inheritsLoose(Transform, _Node);
        function Transform() {
          return _Node.apply(this, arguments) || this;
        }
        var _proto = Transform.prototype;
        /**
         * 以节点的正Z轴为方向朝向目标
         * @param pos 
         * @param up 
         */
        _proto.lookAtZ = function lookAtZ(pos, up) {
          //super.lookAt(pos, up);

          var outDir = new Vec3();
          Vec3.subtract(outDir, pos, this.worldPosition);
          outDir.normalize();
          var quat = new Quat();
          Quat.fromViewUp(quat, outDir.normalize(), up);
          this.rotation = quat;
        };
        _proto.find = function find(path) {
          return this.getChildByPath(path);
        };
        _proto.getComponentInParent = function getComponentInParent(type) {
          var t = type;
          var component = this.getComponent(t);
          if (!component) {
            component = this.searchParentComponent(this, t);
          }

          //this.getComponent
          return component;
        };
        _proto.searchParentComponent = function searchParentComponent(node, type) {
          var t = type;
          var component = null;
          if (node.parent) {
            component = node.parent.getComponent(t);
            if (component) {
              return component;
            } else {
              component = this.searchParentComponent(node.parent, type);
              if (component) {
                return component;
              }
            }
          }
          return component;
        };
        _createClass(Transform, [{
          key: "transform",
          get: function get() {
            var node = this;
            return node;
          }
        }, {
          key: "gameObject",
          get: function get() {
            var node = this;
            return node;
          }
        }]);
        return Transform;
      }(Node)) || _class));
      Node.prototype["lookAtZ"] = Transform.prototype.lookAtZ;
      Node.prototype["find"] = Transform.prototype.find;
      Node.prototype["getComponentInParent"] = Transform.prototype.getComponentInParent;
      Node.prototype["searchParentComponent"] = Transform.prototype.searchParentComponent;
      //Node.prototype["gameObject"] = GameObject.prototype.gameObject; //GameObject已经设置过了，不用再设置
      //Node.prototype["transform"] = GameObject.prototype.transform; //GameObject已经设置过了，不用再设置
      //Transform.prototype = Node.prototype;
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UIExample.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './LayerManager.ts', './ViewManager.ts', './MainPanel.ts'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, Component, LayerManager, viewManager, MainPanel;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
    }, function (module) {
      LayerManager = module.default;
    }, function (module) {
      viewManager = module.viewManager;
    }, function (module) {
      MainPanel = module.MainPanel;
    }],
    execute: function () {
      var _dec, _class;
      cclegacy._RF.push({}, "15926Uri99IQaMlEWjEH2gQ", "UIExample", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;
      var UIExample = exports('UIExample', (_dec = ccclass('UIExample'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(UIExample, _Component);
        function UIExample() {
          return _Component.apply(this, arguments) || this;
        }
        var _proto = UIExample.prototype;
        _proto.start = function start() {
          LayerManager.init(this.node);
          viewManager.open(MainPanel, "测试测试");
        };
        _proto.update = function update(deltaTime) {};
        return UIExample;
      }(Component)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Unit.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Containers.ts'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, Vec2, UITransform, Vec3, Containers;
  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Vec2 = module.Vec2;
      UITransform = module.UITransform;
      Vec3 = module.Vec3;
    }, function (module) {
      Containers = module.Containers;
    }],
    execute: function () {
      var _dec, _class;
      cclegacy._RF.push({}, "b5577I2andP3KxBIsjzv79g", "Unit", undefined);
      var ccclass = _decorator.ccclass,
        property = _decorator.property;

      /**
       * @fileName Unit.ts
       * @author zhangqiong
       * @date 2024/12/18 16:27:46"
       * @description
       */
      var Unit = exports('Unit', (_dec = ccclass('Unit'), _dec(_class = /*#__PURE__*/function (_Containers) {
        _inheritsLoose(Unit, _Containers);
        function Unit() {
          var _this;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _Containers.call.apply(_Containers, [this].concat(args)) || this;
          _this.type = 0;
          _this.mId = void 0;
          _this.mType = void 0;
          _this.mLayer = void 0;
          _this.mScene = void 0;
          _this.isDestroy = false;
          _this.mLocation = void 0;
          _this._scaleX = void 0;
          _this._scaleY = void 0;
          _this._cibs = void 0;
          return _this;
        }
        var _proto = Unit.prototype;
        _proto.onLoad = function onLoad() {
          this.mLocation = new Vec2();
        };
        _proto.start = function start() {};
        _proto.update = function update(deltaTime) {};
        _proto.setId = function setId(id) {
          this.mId = id;
        };
        _proto.getId = function getId() {
          return this.mId;
        };
        _proto.setName = function setName(name) {
          this.name = name;
        };
        _proto.getName = function getName() {
          return this.name;
        };
        _proto.setScene = function setScene(scene) {
          this.mScene = scene;
        };
        _proto.getScene = function getScene() {
          return this.mScene;
        };
        _proto.setType = function setType(type) {
          this.mType = type;
        };
        _proto.getType = function getType() {
          return this.mType;
        };
        _proto.setLayer = function setLayer(layer) {
          this.mLayer = layer;
        };
        _proto.getLayer = function getLayer() {
          return this.mLayer;
        };
        _proto.remove = function remove(isDispose) {
          if (this.scene) {
            this.mScene.remove;
          } else {
            _Containers.prototype.remove.call(this);
          }
        };
        _proto.destroy = function destroy() {
          this.mId = null;
          this.mLayer = null;
          this.mScene = null;
          this.isDestroy = null;
          this.onDestroy();
          return _Containers.prototype.destroy.call(this);
        };
        _proto.onDestroy = function onDestroy() {};
        _proto.setLocation = function setLocation(x, y) {
          this.setPosition(x, y);
        };
        _proto.getLocation = function getLocation() {
          return this.position.clone();
        };
        _proto.setLocationScale = function setLocationScale(x, y) {
          this._scaleX = x;
          this._scaleY = y;
          this.setScale(x, y);
        };
        _proto.getDisplay = function getDisplay() {
          return this;
        };
        _proto.onAdd = function onAdd() {};
        _proto.onRemove = function onRemove() {};
        _proto.getBounds = function getBounds() {
          var uiTransform = this.getComponent(UITransform);
          var width = uiTransform ? uiTransform.width : 0;
          var height = uiTransform ? uiTransform.height : 0;
          var scale = new Vec3();
          this.getScale(scale);
          width = Math.abs(width * scale.x);
          height = Math.abs(height * scale.y);
          return [0, width, 0, height];
        };
        _proto.checkIn = function checkIn(left, right, top, bottom) {
          if (!this.mScene) {
            return false;
          }
          var b = this.getCheckInBounds();
          var e = b[0] > left && b[0] < right && b[1] > top && b[1] < bottom;
          return e;
        };
        _proto.getCheckInBounds = function getCheckInBounds() {
          if (!this._cibs) {
            this._cibs = [];
          }
          var pos = this.getLocation();
          var sceneScale = this.mScene.getLocationScale();
          var scenePos = this.mScene.getLocation();
          this._cibs[0] = pos.x * sceneScale.x + scenePos.x;
          this._cibs[1] = pos.y * sceneScale.y + scenePos.y;
          return this._cibs;
        };
        _proto.setIsShow = function setIsShow(v) {
          if (this.active && v) {
            return;
          }
          this.active = v;
        };
        return Unit;
      }(Containers)) || _class));
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Utils.ts", ['cc'], function (exports) {
  var cclegacy, Button, Node, Component, BlockInputEvents, js;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      Button = module.Button;
      Node = module.Node;
      Component = module.Component;
      BlockInputEvents = module.BlockInputEvents;
      js = module.js;
    }],
    execute: function () {
      cclegacy._RF.push({}, "2d0e5N24mZO8qHgIq0MnxyA", "Utils", undefined);

      /**
       * @class name : Utils
       * @description : 基本工具类
       * @author : Ran
       * @time : 2022.05.10
       */
      var Utils = exports('default', /*#__PURE__*/function () {
        function Utils() {}
        /**
         * 从子孙节点中找到第一个名字符合的节点，不包括目标节点本身。
         * 使用 深度优先的方式。
         * 若没有找到，则返回null
         * @param targetNode 
         * @param name 
         */
        Utils.FindChildByName = function FindChildByName(targetNode, name) {
          if (!targetNode.children || targetNode.children.length <= 0) return null;
          for (var i = 0; i < targetNode.children.length; i++) {
            var child = targetNode.children[i];
            if (child.name == name) {
              return child;
            }
            var result = this.FindChildByName(child, name);
            if (result != null) return result;
          }
          return null;
        }

        /**
         * 获取显示对象hash值
         * @param obj 显示对象
         * @returns hash值或null
         */;
        Utils.getHashCode = function getHashCode(obj) {
          // return obj._objFlags != null ? obj._objFlags : null;
          return obj._id != null ? obj._id : null;
        }

        /**
         * 添加按钮点击事件
         * @param target - 目标节点或按钮组件
         * @param scriptNode - 响应函数script组件所属节点
         * @param scriptName - 响应函数script组件名称
         * @param functionName - 响应函数名称
         * @param data - 自定义参数
         * @returns true or false
         */;
        Utils.addButtonClickHandler = function addButtonClickHandler(target, scriptNode, scriptName, functionName, data) {
          var button;
          if (target instanceof Button) button = target;else if (target instanceof Node) button = target.getComponent(Button);
          if (!button) {
            console.warn("addButtonClickHandler: target node has no button component");
            return false;
          }
          var h = new Component.EventHandler();
          h.target = scriptNode;
          h.component = scriptName;
          h.handler = functionName;
          h.customEventData = data;
          button.clickEvents = [];
          button.clickEvents.push(h);
          return true;
        }

        /**
         * 节点添加事件，这个方法默认会给节点添加屏蔽点击穿透组件
         * @param target - 事件节点
         * @param eventType - 事件类型
         * @param callback - 回调函数
         * @param callbackObj - 回调函数所属对象
         * @param once - 是否只监听一次
         * @param touchThough - 是否穿透
         */;
        Utils.addNodeEvent = function addNodeEvent(target, eventType, callback, callbackObj, once, touchThough) {
          if (once === void 0) {
            once = false;
          }
          if (touchThough === void 0) {
            touchThough = false;
          }
          if (once) {
            target.once(eventType, callback, callbackObj);
          } else {
            target.on(eventType, callback, callbackObj);
          }
          if (!touchThough) {
            if (!target.getComponent(BlockInputEvents)) {
              target.addComponent(BlockInputEvents);
            }
          }
        }

        /**
         * 查看类是否被ccclass修饰
         * @param constructor - 
         * @returns 
         */;
        Utils.isCCClass = function isCCClass(constructor) {
          return constructor && constructor.hasOwnProperty("__ctors__");
        }

        /**
         * 节点控制脚本挂载
         * @param node - 
         * @param script - 
         */;
        Utils.addNodeScript = function addNodeScript(node, script) {
          if (typeof script == "string") {
            var hasCls = js.getClassByName(script);
            if (hasCls == null) {
              console.error(" ***** " + script + " does not decorated by ccclass ***** ");
              return;
            }
            var has = node.getComponent(script) != null;
            if (!has) node.addComponent(script);
          } else if (typeof script == "function") {
            if (!this.isCCClass(script)) {
              console.error(" ***** " + script + " does not decorated by ccclass ***** ");
              return;
            }
            var _has = node.getComponent(script) != null;
            if (!_has) node.addComponent(script);
          }
        }

        // class end
        ;

        return Utils;
      }());
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ViewConst.ts", ['cc'], function (exports) {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "83c86UK0bpEoKfoIHDHv+sX", "ViewConst", undefined);
      var ViewConst = exports('default', function ViewConst() {});
      /** 默认预制体路径 */
      ViewConst.defaultPrefabPathPrefix = "resources://prefabs/";
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ViewManager.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Enum3.ts', './ViewRegisterMgr.ts', './LayerManager.ts', './StringUtils.ts', './ViewConst.ts', './AssetMgr.ts', './Utils.ts'], function (exports) {
  var _asyncToGenerator, _createForOfIteratorHelperLoose, _regeneratorRuntime, cclegacy, Node, UITransform, view, BlockInputEvents, isValid, js, log, ViewShowTypes, getViewRegisterVo, LayerManager, StringUtils, ViewConst, AssetMgr, Utils;
  return {
    setters: [function (module) {
      _asyncToGenerator = module.asyncToGenerator;
      _createForOfIteratorHelperLoose = module.createForOfIteratorHelperLoose;
      _regeneratorRuntime = module.regeneratorRuntime;
    }, function (module) {
      cclegacy = module.cclegacy;
      Node = module.Node;
      UITransform = module.UITransform;
      view = module.view;
      BlockInputEvents = module.BlockInputEvents;
      isValid = module.isValid;
      js = module.js;
      log = module.log;
    }, function (module) {
      ViewShowTypes = module.ViewShowTypes;
    }, function (module) {
      getViewRegisterVo = module.getViewRegisterVo;
    }, function (module) {
      LayerManager = module.default;
    }, function (module) {
      StringUtils = module.default;
    }, function (module) {
      ViewConst = module.default;
    }, function (module) {
      AssetMgr = module.default;
    }, function (module) {
      Utils = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "484556JSQRI8IRGZiUHI4e8", "ViewManager", undefined);

      /**
       * ViewManager界面管理类
       * 
       * 1.打开界面，根据配置自动加载界面、调用初始化、播放打开动画、隐藏其他界面、屏蔽下方界面点击
       * 2.关闭界面，根据配置自动关闭界面、播放关闭动画、恢复其他界面
       * 3.切换界面，与打开界面类似，但是是将当前栈顶的界面切换成新的界面（先关闭再打开）
       * 4.提供界面缓存功能
       * 
       */
      /** UI栈结构体 */
      var ViewManager = exports('ViewManager', /*#__PURE__*/function () {
        function ViewManager() {
          /** 资源加载计数器，用于生成唯一的资源占用key */
          this.useCount = 0;
          /** 背景UI（有若干层UI是作为背景UI，而不受切换等影响）*/
          this.BackGroundUI = 0;
          /** 是否正在关闭UI */
          this.isClosing = false;
          /** 是否正在打开UI */
          this.isOpening = false;
          /** UI界面缓存（key为UIId，value为UIView节点）*/
          this.ViewCache = {};
          /** UI界面栈（{UIID + UIView + UIArgs}数组）*/
          this.ViewStack = [];
          /** UI待打开列表 */
          this.ViewOpenQueue = [];
          /** UI待关闭列表 */
          this.ViewCloseQueue = [];
          /** UI打开前回调 */
          this.uiOpenBeforeDelegate = null;
          /** UI打开回调 */
          this.uiOpenDelegate = null;
          /** UI关闭回调 */
          this.uiCloseDelegate = null;
        }
        var _proto = ViewManager.prototype;
        /****************** 私有方法，UIManager内部的功能和基础规则 *******************/
        /**
         * 添加防触摸层
         * @param zOrder 屏蔽层的层级
         */
        _proto.preventTouch = function preventTouch(layer, zOrder) {
          var viewContainer = LayerManager.getLayer(layer);
          if (!viewContainer) {
            console.warn(" -----  " + layer + " layer container is null ----- ");
            return;
          }
          var node = new Node();
          node.name = 'preventTouch';
          var uiCom = node.addComponent(UITransform);
          uiCom.setContentSize(view.getVisibleSize());
          node.on(Node.EventType.TOUCH_START, function (event) {
            event.propagationStopped = true;
          }, node);
          viewContainer.addChild(node);
          uiCom.priority = zOrder - 0.01;
          return node;
        }

        /** 自动执行下一个待关闭或待打开的界面 */;
        _proto.autoExecNextUI = function autoExecNextUI() {
          // 逻辑上是先关后开
          if (this.ViewCloseQueue.length > 0) {
            var uiQueueInfo = this.ViewCloseQueue.shift();
            this.close(uiQueueInfo);
          } else if (this.ViewOpenQueue.length > 0) {
            var _uiQueueInfo = this.ViewOpenQueue.shift();
            this.open(_uiQueueInfo.uiId, _uiQueueInfo.uiArgs);
          }
        }

        /**
         * 自动检测动画组件以及特定动画，如存在则播放动画，无论动画是否播放，都执行回调
         * @param aniName 动画名
         * @param aniOverCallback 动画播放完成回调
         */;
        _proto.autoExecAnimation = function autoExecAnimation(uiView, aniName, aniOverCallback) {
          // 暂时先省略动画播放的逻辑
          aniOverCallback();
        }

        /**
         * 自动检测资源预加载组件，如果存在则加载完成后调用completeCallback，否则直接调用
         * @param completeCallback 资源加载完成回调
         */;
        _proto.autoLoadRes = function autoLoadRes(uiView, completeCallback) {
          // 暂时先省略
          completeCallback();
        }

        /** 根据界面显示类型刷新显示 */;
        _proto.updateUI = function updateUI() {
          var hideIndex = 0;
          var showIndex = this.ViewStack.length - 1;
          for (; showIndex >= 0; --showIndex) {
            var mode = this.ViewStack[showIndex].uiView.showType;
            // 无论何种模式，最顶部的UI都是应该显示的
            this.ViewStack[showIndex].uiView.node.active = true;
            if (ViewShowTypes.ViewFullScreen == mode) {
              break;
            } else if (ViewShowTypes.ViewSingle == mode) {
              for (var i = 0; i < this.BackGroundUI; ++i) {
                if (this.ViewStack[i]) {
                  this.ViewStack[i].uiView.node.active = true;
                }
              }
              hideIndex = this.BackGroundUI;
              break;
            }
          }
          // 隐藏不应该显示的部分UI
          for (var hide = hideIndex; hide < showIndex; ++hide) {
            this.ViewStack[hide].uiView.node.active = false;
          }
        }

        /**
         * UI被打开时回调，对UI进行初始化设置，刷新其他界面的显示，并根据
         * @param viewVo 界面注册结构
         * @param uiView 界面对象
         * @param uiInfo 界面栈对应的信息结构
         * @param uiArgs 界面初始化参数
         */;
        _proto.onViewOpen = function onViewOpen(viewVo, uiView, uiInfo, uiArgs) {
          var _this = this;
          if (null == uiView) {
            return;
          }
          // 激活界面
          uiInfo.uiView = uiView;
          uiView.node.active = true;
          var uiCom = uiView.getComponent(UITransform);
          if (!uiCom) {
            uiCom = uiView.addComponent(UITransform);
          }

          // 快速关闭界面的设置，绑定界面中的background，实现快速关闭
          if (uiView.quickClose) {
            var backGround = uiView.node.getChildByName('background');
            if (!backGround) {
              backGround = new Node();
              backGround.name = 'background';
              var _uiCom = backGround.addComponent(UITransform);
              _uiCom.setContentSize(view.getVisibleSize());
              uiView.node.addChild(backGround);
              _uiCom.priority = -1;
            }
            backGround.targetOff(Node.EventType.TOUCH_START);
            backGround.on(Node.EventType.TOUCH_START, function (event) {
              event.propagationStopped = true;
              _this.close(uiView);
            }, backGround);
          }
          var className = this.getViewClassName(viewVo.viewCls);
          // 添加到父节点
          var viewContainer = LayerManager.getLayer(viewVo.layer);
          if (viewContainer == null) {
            console.warn(" ----- open " + className + " field container is null ----- ");
            return;
          }
          viewContainer.addChild(uiView.node);
          uiCom.priority = uiInfo.zOrder || this.ViewStack.length;

          // 刷新其他UI
          this.updateUI();

          // 从那个界面打开的
          var fromUIID = 0;
          if (this.ViewStack.length > 1) {
            fromUIID = this.ViewStack[this.ViewStack.length - 2].uiId;
          }

          // 打开界面之前回调
          // if (this.uiOpenBeforeDelegate) {
          //     this.uiOpenBeforeDelegate(uiId, fromUIID);
          // }

          // 执行onOpen回调
          uiView.onOpen(fromUIID, uiArgs);
          this.autoExecAnimation(uiView, "uiOpen", function () {
            uiView.onOpenAniOver();
            // if (this.uiOpenDelegate) {
            //     this.uiOpenDelegate(uiId, fromUIID);
            // }
          });
        };
        /** 打开界面并添加到界面栈中 */
        _proto.open = /*#__PURE__*/
        function () {
          var _open = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(v, params) {
            var _this2 = this;
            var viewVo, uiInfo, uiIndex;
            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) switch (_context.prev = _context.next) {
                case 0:
                  viewVo = getViewRegisterVo(v);
                  if (viewVo) {
                    _context.next = 4;
                    break;
                  }
                  console.error(" ***** view " + v + " has not registered ***** ");
                  return _context.abrupt("return");
                case 4:
                  uiInfo = {
                    uiId: viewVo.id,
                    uiArgs: params,
                    uiView: null
                  };
                  if (!(this.isOpening || this.isClosing)) {
                    _context.next = 8;
                    break;
                  }
                  // 插入待打开队列
                  this.ViewOpenQueue.push(uiInfo);
                  return _context.abrupt("return");
                case 8:
                  uiIndex = this.getViewIndex(viewVo.id);
                  if (!(-1 != uiIndex)) {
                    _context.next = 12;
                    break;
                  }
                  // 重复打开了同一个界面，直接回到该界面
                  this.closeToView(v, params);
                  return _context.abrupt("return");
                case 12:
                  // 设置UI的zOrder
                  uiInfo.zOrder = this.ViewStack.length + 1;
                  this.ViewStack.push(uiInfo);

                  // 先屏蔽点击
                  if (viewVo.preventTouch) {
                    uiInfo.preventNode = this.preventTouch(viewVo.layer, uiInfo.zOrder);
                  }
                  this.isOpening = true;
                  this.getOrCreateUI(viewVo).then(function (viewNode) {
                    if (uiInfo.isClose || view == null) {
                      console.warn("getOrCreateUI " + viewVo.id + " faile!\n                        close state : " + uiInfo.isClose + " , uiView : " + view);
                      _this2.isOpening = false;
                      if (uiInfo.preventNode) {
                        uiInfo.preventNode.destroy();
                        uiInfo.preventNode = null;
                      }
                      return;
                    }
                    _this2.onViewOpen(viewVo, viewNode, uiInfo, params);
                    _this2.isOpening = false;
                    _this2.autoExecNextUI();
                  });
                case 17:
                case "end":
                  return _context.stop();
              }
            }, _callee, this);
          }));
          function open(_x, _x2) {
            return _open.apply(this, arguments);
          }
          return open;
        }()
        /**
         * 添加阻止输入事件组件
         * @param node - 
         */;

        _proto.addBlockInputEvent = function addBlockInputEvent(node) {
          if (!node) return;
          if (!node.getComponent(BlockInputEvents)) node.addComponent(BlockInputEvents);
        };
        _proto.getOrCreateUI = function getOrCreateUI(viewVo, params) {
          var _this3 = this;
          return new Promise( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(resolve, reject) {
            var uiView, className, prefabPathPrefix, prefabName, prefabPath, node, view;
            return _regeneratorRuntime().wrap(function _callee2$(_context2) {
              while (1) switch (_context2.prev = _context2.next) {
                case 0:
                  if (viewVo) {
                    _context2.next = 3;
                    break;
                  }
                  resolve(null);
                  return _context2.abrupt("return");
                case 3:
                  // 如果找到缓存对象，则直接返回
                  uiView = _this3.ViewCache[viewVo.id];
                  if (!uiView) {
                    _context2.next = 7;
                    break;
                  }
                  resolve(uiView);
                  return _context2.abrupt("return");
                case 7:
                  className = _this3.getViewClassName(viewVo.viewCls);
                  prefabPathPrefix = viewVo.prefabPathPrefix;
                  if (StringUtils.empty(prefabPathPrefix)) {
                    prefabPathPrefix = ViewConst.defaultPrefabPathPrefix;
                  }
                  prefabName = viewVo.prefabName;
                  if (prefabName == null) {
                    prefabName = className;
                  }
                  prefabPath = prefabPathPrefix + prefabName;
                  _context2.next = 15;
                  return AssetMgr.instance.createPrefab(prefabPath);
                case 15:
                  node = _context2.sent;
                  if (node) {
                    _context2.next = 20;
                    break;
                  }
                  console.error(" ***** open " + className + " failed " + prefabName + " is not exist ***** ");
                  resolve(null);
                  return _context2.abrupt("return");
                case 20:
                  node.name = className;
                  Utils.addNodeScript(node, viewVo.viewCls);
                  view = _this3.getViewScript(className, node);
                  if (view) {
                    view.init(params);
                  }
                  if (view.cache) {
                    _this3.ViewCache[viewVo.id] = view;
                  }
                  resolve(view);
                case 26:
                case "end":
                  return _context2.stop();
              }
            }, _callee2);
          })));
        }

        /**
         * 替换栈顶界面
         * @param cls 需要打开的界面类
         * @param uiArgs 界面参数
         */;
        /** 替换栈顶界面 */
        _proto.replace = function replace(v, uiArgs) {
          if (uiArgs === void 0) {
            uiArgs = null;
          }
          var uiId = this.getUnifyParam(v);
          this.close(this.ViewStack[this.ViewStack.length - 1].uiView);
          this.open(uiId, uiArgs);
        }

        /**
         * 关闭当前界面
         * @param closeUI 要关闭的界面
         */;
        _proto.close = function close(closeUI) {
          var _this4 = this;
          var uiCount = this.ViewStack.length;
          if (uiCount < 1 || this.isClosing || this.isOpening) {
            if (closeUI) {
              // 插入待关闭队列
              this.ViewCloseQueue.push(closeUI);
            }
            return;
          }
          var uiInfo;
          if (closeUI) {
            for (var index = this.ViewStack.length - 1; index >= 0; index--) {
              var ui = this.ViewStack[index];
              if (ui.uiView === closeUI) {
                uiInfo = ui;
                this.ViewStack.splice(index, 1);
                break;
              }
            }
          } else {
            uiInfo = this.ViewStack.pop();
          }
          // 找不到这个UI
          if (uiInfo === undefined) {
            return;
          }

          // 关闭当前界面
          var uiId = uiInfo.uiId;
          var uiView = uiInfo.uiView;
          uiInfo.isClose = true;

          // 回收遮罩层
          if (uiInfo.preventNode) {
            uiInfo.preventNode.destroy();
            uiInfo.preventNode = null;
          }
          if (!uiView) {
            return;
          }
          var preUIInfo = this.ViewStack[uiCount - 2];
          // 处理显示模式
          this.updateUI();
          var close = function close() {
            _this4.isClosing = false;
            // 显示之前的界面
            if (preUIInfo && preUIInfo.uiView && _this4.isTopView(preUIInfo.uiId)) {
              // 如果之前的界面弹到了最上方（中间有肯能打开了其他界面）
              preUIInfo.uiView.node.active = true;
              // 回调onTop
              preUIInfo.uiView.onTop(uiId, uiView.onClose());
            } else {
              uiView.onClose();
            }

            // if (this.uiCloseDelegate) {
            //     this.uiCloseDelegate(uiId);
            // }
            if (uiView.cache) {
              _this4.ViewCache[uiId] = uiView;
              uiView.node.removeFromParent();
              log("uiView removeFromParent " + uiInfo.uiId);
            } else {
              // uiView!.releaseAssets();
              uiView.node.destroy();
              log("uiView destroy " + uiInfo.uiId);
            }
            _this4.autoExecNextUI();
          };
          // 执行关闭动画
          this.autoExecAnimation(uiView, "uiClose", close);
        }

        /** 关闭所有界面 */;
        _proto.closeAll = function closeAll() {
          // 不播放动画，也不清理缓存
          for (var _iterator = _createForOfIteratorHelperLoose(this.ViewStack), _step; !(_step = _iterator()).done;) {
            var uiInfo = _step.value;
            uiInfo.isClose = true;
            if (uiInfo.preventNode) {
              uiInfo.preventNode.destroy();
              uiInfo.preventNode = null;
            }
            if (uiInfo.uiView) {
              uiInfo.uiView.onClose();
              // uiInfo.uiView.releaseAssets();
              uiInfo.uiView.node.destroy();
            }
          }
          this.ViewOpenQueue = [];
          this.ViewCloseQueue = [];
          this.ViewStack = [];
          this.isOpening = false;
          this.isClosing = false;
        };
        /**
         * 关闭界面，一直关闭到顶部为uiId的界面，为避免循环打开UI导致UI栈溢出
         * @param uiId 要关闭到的uiId（关闭其顶部的ui）
         * @param uiArgs 打开的参数
         * @param bOpenSelf 
         */
        _proto.closeToView = function closeToView(v, uiArgs, bOpenSelf) {
          if (bOpenSelf === void 0) {
            bOpenSelf = true;
          }
          var idx = this.getViewIndex(v);
          if (-1 == idx) {
            return;
          }
          idx = bOpenSelf ? idx : idx + 1;
          for (var i = this.ViewStack.length - 1; i >= idx; --i) {
            var uiInfo = this.ViewStack.pop();
            if (!uiInfo) {
              continue;
            }
            var _uiId = uiInfo.uiId;
            var uiView = uiInfo.uiView;
            uiInfo.isClose = true;

            // 回收屏蔽层
            if (uiInfo.preventNode) {
              uiInfo.preventNode.destroy();
              uiInfo.preventNode = null;
            }

            // if (this.uiCloseDelegate) {
            //     this.uiCloseDelegate(uiId);
            // }

            if (uiView) {
              uiView.onClose();
              if (uiView.cache) {
                this.ViewCache[_uiId] = uiView;
                uiView.node.removeFromParent();
              } else {
                // uiView.releaseAssets();
                uiView.node.destroy();
              }
            }
          }
          this.updateUI();
          this.ViewOpenQueue = [];
          this.ViewCloseQueue = [];
          bOpenSelf && this.open(v, uiArgs);
        }

        /** 清理界面缓存 */;
        _proto.clearCache = function clearCache() {
          for (var key in this.ViewCache) {
            var ui = this.ViewCache[key];
            if (isValid(ui.node)) {
              if (isValid(ui)) ;
              ui.node.destroy();
            }
          }
          this.ViewCache = {};
        }

        /******************** UI的便捷接口 *******************/;
        _proto.isTopView = function isTopView(uiId) {
          if (this.ViewStack.length == 0) {
            return false;
          }
          return this.ViewStack[this.ViewStack.length - 1].uiId == uiId;
        };
        _proto.getView = function getView(uiId) {
          for (var index = 0; index < this.ViewStack.length; index++) {
            var element = this.ViewStack[index];
            if (uiId == element.uiId) {
              return element.uiView;
            }
          }
          return null;
        };
        _proto.getTopView = function getTopView() {
          if (this.ViewStack.length > 0) {
            return this.ViewStack[this.ViewStack.length - 1].uiView;
          }
          return null;
        };
        _proto.getViewScript = function getViewScript(className, node) {
          return node.getComponent(className);
        }

        /**
         * 获取界面类名
         * @param cls - 界面类
         * @returns 界面类名称字符串
         */;
        _proto.getViewClassName = function getViewClassName(cls) {
          var className = "";
          if (typeof cls === "string") className = cls;else if (typeof cls === "function") className = js.getClassName(cls);else if (typeof cls === "object") className = js.getClassName(cls.constructor);else console.error("ViewManager.getViewClassName: cls is not string or function");
          return className;
        }

        /**
         * 参数归一化
         * @param v 
         */;
        _proto.getUnifyParam = function getUnifyParam(v) {
          var id = null;
          if (typeof v == "number" || typeof v == "string") {
            id = v;
          } else if (typeof v == "function") {
            id = this.getViewClassName(v);
          } else if (typeof v == "object") {
            id = v.id;
          }
          return id;
        };
        _proto.getViewIndex = function getViewIndex(v) {
          var id = this.getUnifyParam(v);
          for (var index = 0; index < this.ViewStack.length; index++) {
            var element = this.ViewStack[index];
            if (id == element.uiId) {
              return index;
            }
          }
          return -1;
        };
        _proto.getIsOpen = function getIsOpen(v) {
          var index = this.getViewIndex(v);
          return index != -1;
        };
        return ViewManager;
      }());
      var viewManager = exports('viewManager', new ViewManager());
      window["viewManager"] = viewManager;
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ViewRegisterMgr.ts", ['cc'], function (exports) {
  var cclegacy, js;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      js = module.js;
    }],
    execute: function () {
      exports({
        getRegisteredViews: getRegisteredViews,
        getViewRegisterVo: getViewRegisterVo,
        registerView: registerView
      });
      cclegacy._RF.push({}, "7bbdf1rmzpIYZ9xAh0zXTaU", "ViewRegisterMgr", undefined);
      var registerViews = [];
      var registerViewDictionary = {};
      var registerViewDictionaryByView = {};
      function registerView(vo) {
        var className = js.getClassName(vo.viewCls);
        if (vo.id == null) {
          vo.id = className;
        }
        registerViews.push(vo);
        registerViewDictionary[vo.id] = vo;
        registerViewDictionaryByView[className] = vo;
      }
      function getRegisteredViews() {
        return registerViews;
      }
      function getViewRegisterVo(value) {
        var vo = null;
        if (typeof value == "number" || typeof value == "string") {
          vo = registerViewDictionary[value];
          if (vo != null) {
            return vo;
          }
          vo = registerViewDictionaryByView[value];
        } else if (typeof value == "function") {
          var className = js.getClassName(value);
          vo = registerViewDictionaryByView[className];
        }
        return vo;
      }
      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ViewRegisterVo.ts", ['cc'], function (exports) {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "ed1027EDmlLsLVYcBYjeW/n", "ViewRegisterVo", undefined);
      var ViewRegisterVo = exports('default', function ViewRegisterVo() {
        this.id = void 0;
        /** 父级id，缺省则挂到root下 */
        this.parent = void 0;
        /** 界面类 */
        this.viewCls = void 0;
        /** 界面层级 */
        this.layer = void 0;
        /** 预制体路径前缀，缺省常量 */
        this.prefabPathPrefix = void 0;
        /** 预制体名称，需要带上除前缀路径外的路径，缺省类名 */
        this.prefabName = void 0;
        this.preventTouch = false;
      });
      cclegacy._RF.pop();
    }
  };
});

(function(r) {
  r('virtual:///prerequisite-imports/main', 'chunks:///_virtual/main'); 
})(function(mid, cid) {
    System.register(mid, [cid], function (_export, _context) {
    return {
        setters: [function(_m) {
            var _exportObj = {};

            for (var _key in _m) {
              if (_key !== "default" && _key !== "__esModule") _exportObj[_key] = _m[_key];
            }
      
            _export(_exportObj);
        }],
        execute: function () { }
    };
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL2ZpbGU6L0U6L0dpdEh1Yi9jb2Nvc0dhbWVzL2Fzc2V0cy9TY3JpcHQvbW9kdWxlcy9BRksvaW5mb3MvZmlsZTovRTovR2l0SHViL2NvY29zR2FtZXMvYXNzZXRzL1NjcmlwdC9tb2R1bGVzL0FGSy9pbmZvcy9BY3Rpb25JbmZvLnRzIiwiLi4vZmlsZTovRTovR2l0SHViL2NvY29zR2FtZXMvYXNzZXRzL1NjcmlwdC9tb2R1bGVzL0FGSy9maWxlOi9FOi9HaXRIdWIvY29jb3NHYW1lcy9hc3NldHMvU2NyaXB0L21vZHVsZXMvQUZLL0FGS0dhbWUudHMiLCIuLi9maWxlOi9FOi9HaXRIdWIvY29jb3NHYW1lcy9hc3NldHMvU2NyaXB0L21vZHVsZXMvQUZLL3Zvcy9maWxlOi9FOi9HaXRIdWIvY29jb3NHYW1lcy9hc3NldHMvU2NyaXB0L21vZHVsZXMvQUZLL3Zvcy9BRktHYW1lQ29uZmlnVm8udHMiLCIuLi9maWxlOi9FOi9HaXRIdWIvY29jb3NHYW1lcy9hc3NldHMvU2NyaXB0L21vZHVsZXMvQUZLL3VpL2ZpbGU6L0U6L0dpdEh1Yi9jb2Nvc0dhbWVzL2Fzc2V0cy9TY3JpcHQvbW9kdWxlcy9BRksvdWkvQUZLUmVzdWx0UGFuZWwudHMiLCIuLi9maWxlOi9FOi9HaXRIdWIvY29jb3NHYW1lcy9hc3NldHMvU2NyaXB0L21vZHVsZXMvVG93ZXJEZWZlbnNlL2ZpbGU6L0U6L0dpdEh1Yi9jb2Nvc0dhbWVzL2Fzc2V0cy9TY3JpcHQvbW9kdWxlcy9Ub3dlckRlZmVuc2UvQW5pbWF0aW9uUGF0aC50cyIsIi4uL2ZpbGU6L0U6L0dpdEh1Yi9jb2Nvc0dhbWVzL2Fzc2V0cy9TY3JpcHQvQ29tbW9uL2ZpbGU6L0U6L0dpdEh1Yi9jb2Nvc0dhbWVzL2Fzc2V0cy9TY3JpcHQvQ29tbW9uL0FyZWFUeXBlLnRzIiwiLi4vZmlsZTovRTovR2l0SHViL2NvY29zR2FtZXMvYXNzZXRzL1NjcmlwdC9Db21tb24vZmlsZTovRTovR2l0SHViL2NvY29zR2FtZXMvYXNzZXRzL1NjcmlwdC9Db21tb24vQXJyYXlVdGlscy50cyIsIi4uL2ZpbGU6L0U6L0dpdEh1Yi9jb2Nvc0dhbWVzL2Fzc2V0cy9TY3JpcHQvQ29tbW9uL2ZpbGU6L0U6L0dpdEh1Yi9jb2Nvc0dhbWVzL2Fzc2V0cy9TY3JpcHQvQ29tbW9uL0Fzc2V0TWdyLnRzIiwiLi4vZmlsZTovRTovR2l0SHViL2NvY29zR2FtZXMvYXNzZXRzL1NjcmlwdC9tb2R1bGVzL1JQRy9tYXAvZmlsZTovRTovR2l0SHViL2NvY29zR2FtZXMvYXNzZXRzL1NjcmlwdC9tb2R1bGVzL1JQRy9tYXAvQVN0YXJSb2FkU2Vla2VyLnRzIiwiLi4vZmlsZTovRTovR2l0SHViL2NvY29zR2FtZXMvYXNzZXRzL1NjcmlwdC9ibG9jay9maWxlOi9FOi9HaXRIdWIvY29jb3NHYW1lcy9hc3NldHMvU2NyaXB0L2Jsb2NrL0JhY2tncm91bmQudHMiLCIuLi9maWxlOi9FOi9HaXRIdWIvY29jb3NHYW1lcy9hc3NldHMvU2NyaXB0L3VpL2ZpbGU6L0U6L0dpdEh1Yi9jb2Nvc0dhbWVzL2Fzc2V0cy9TY3JpcHQvdWkvQmFzZVZpZXcudHMiLCIuLi9maWxlOi9FOi9HaXRIdWIvY29jb3NHYW1lcy9hc3NldHMvU2NyaXB0L21vZHVsZXMvUlBHL2ZpbGU6L0U6L0dpdEh1Yi9jb2Nvc0dhbWVzL2Fzc2V0cy9TY3JpcHQvbW9kdWxlcy9SUEcvQmVoYXZpb3VyLnRzIiwiLi4vZmlsZTovRTovR2l0SHViL2NvY29zR2FtZXMvYXNzZXRzL1NjcmlwdC9tb2R1bGVzL1Rvd2VyRGVmZW5zZS9maWxlOi9FOi9HaXRIdWIvY29jb3NHYW1lcy9hc3NldHMvU2NyaXB0L21vZHVsZXMvVG93ZXJEZWZlbnNlL0JlemllclBhcnQudHMiLCIuLi9maWxlOi9FOi9HaXRIdWIvY29jb3NHYW1lcy9hc3NldHMvU2NyaXB0L21vZHVsZXMvUlBHL21hcC9maWxlOi9FOi9HaXRIdWIvY29jb3NHYW1lcy9hc3NldHMvU2NyaXB0L21vZHVsZXMvUlBHL21hcC9CaW5hcnlUcmVlTm9kZS50cyIsIi4uL2ZpbGU6L0U6L0dpdEh1Yi9jb2Nvc0dhbWVzL2Fzc2V0cy9TY3JpcHQvYmxvY2svZmlsZTovRTovR2l0SHViL2NvY29zR2FtZXMvYXNzZXRzL1NjcmlwdC9ibG9jay9CbG9jay50cyIsIi4uL2ZpbGU6L0U6L0dpdEh1Yi9jb2Nvc0dhbWVzL2Fzc2V0cy9TY3JpcHQvbW9kdWxlcy9Ub3dlckRlZmVuc2UvZmlsZTovRTovR2l0SHViL2NvY29zR2FtZXMvYXNzZXRzL1NjcmlwdC9tb2R1bGVzL1Rvd2VyRGVmZW5zZS9Cb3NzLnRzIiwiLi4vZmlsZTovRTovR2l0SHViL2NvY29zR2FtZXMvYXNzZXRzL1NjcmlwdC9tb2R1bGVzL1Rvd2VyRGVmZW5zZS9maWxlOi9FOi9HaXRIdWIvY29jb3NHYW1lcy9hc3NldHMvU2NyaXB0L21vZHVsZXMvVG93ZXJEZWZlbnNlL0J1bGxldC50cyIsIi4uL2ZpbGU6L0U6L0dpdEh1Yi9jb2Nvc0dhbWVzL2Fzc2V0cy9TY3JpcHQvbW9kdWxlcy9Ub3dlckRlZmVuc2UvZmlsZTovRTovR2l0SHViL2NvY29zR2FtZXMvYXNzZXRzL1NjcmlwdC9tb2R1bGVzL1Rvd2VyRGVmZW5zZS9CdWxsZXRNYW5hZ2VyLnRzIiwiLi4vZmlsZTovRTovR2l0SHViL2NvY29zR2FtZXMvYXNzZXRzL1NjcmlwdC9tb2R1bGVzL1JQRy9jaGFyYWN0ZXIvZmlsZTovRTovR2l0SHViL2NvY29zR2FtZXMvYXNzZXRzL1NjcmlwdC9tb2R1bGVzL1JQRy9jaGFyYWN0ZXIvQ2hhcmFjdGVyLnRzIiwiLi4vZmlsZTovRTovR2l0SHViL2NvY29zR2FtZXMvYXNzZXRzL1NjcmlwdC9ibG9jay9maWxlOi9FOi9HaXRIdWIvY29jb3NHYW1lcy9hc3NldHMvU2NyaXB0L2Jsb2NrL2NvbmZpZy50cyIsIi4uL2ZpbGU6L0U6L0dpdEh1Yi9jb2Nvc0dhbWVzL2Fzc2V0cy9TY3JpcHQvbW9kdWxlcy9BRksvZmlsZTovRTovR2l0SHViL2NvY29zR2FtZXMvYXNzZXRzL1NjcmlwdC9tb2R1bGVzL0FGSy9Db250YWluZXJzLnRzIiwiLi4vZmlsZTovRTovR2l0SHViL2NvY29zR2FtZXMvYXNzZXRzL1NjcmlwdC9tb2R1bGVzL0FGSy9kZXB0aEhlbHBlci9maWxlOi9FOi9HaXRIdWIvY29jb3NHYW1lcy9hc3NldHMvU2NyaXB0L21vZHVsZXMvQUZLL2RlcHRoSGVscGVyL0RlcHRoSGVscGVyLnRzIiwiLi4vZmlsZTovRTovR2l0SHViL2NvY29zR2FtZXMvYXNzZXRzL1NjcmlwdC9Db21tb24vZmlsZTovRTovR2l0SHViL2NvY29zR2FtZXMvYXNzZXRzL1NjcmlwdC9Db21tb24vRGVzdHJveVV0aWxzLnRzIiwiLi4vZmlsZTovRTovR2l0SHViL2NvY29zR2FtZXMvYXNzZXRzL1NjcmlwdC9tb2R1bGVzL1JQRy9maWxlOi9FOi9HaXRIdWIvY29jb3NHYW1lcy9hc3NldHMvU2NyaXB0L21vZHVsZXMvUlBHL0VkaXRPYmpEYXRhLnRzIiwiLi4vZmlsZTovRTovR2l0SHViL2NvY29zR2FtZXMvYXNzZXRzL1NjcmlwdC9tb2R1bGVzL1Rvd2VyRGVmZW5zZS9lZGl0L2ZpbGU6L0U6L0dpdEh1Yi9jb2Nvc0dhbWVzL2Fzc2V0cy9TY3JpcHQvbW9kdWxlcy9Ub3dlckRlZmVuc2UvZWRpdC9FZGl0UGxvdC50cyIsIi4uL2ZpbGU6L0U6L0dpdEh1Yi9jb2Nvc0dhbWVzL2Fzc2V0cy9TY3JpcHQvbW9kdWxlcy9Ub3dlckRlZmVuc2UvZmlsZTovRTovR2l0SHViL2NvY29zR2FtZXMvYXNzZXRzL1NjcmlwdC9tb2R1bGVzL1Rvd2VyRGVmZW5zZS9FZmZlY3RNYW5hZ2VyLnRzIiwiLi4vZmlsZTovRTovR2l0SHViL2NvY29zR2FtZXMvYXNzZXRzL1NjcmlwdC9tb2R1bGVzL1Rvd2VyRGVmZW5zZS9maWxlOi9FOi9HaXRIdWIvY29jb3NHYW1lcy9hc3NldHMvU2NyaXB0L21vZHVsZXMvVG93ZXJEZWZlbnNlL0VuZW15LnRzIiwiLi4vZmlsZTovRTovR2l0SHViL2NvY29zR2FtZXMvYXNzZXRzL1NjcmlwdC9tb2R1bGVzL0FGSy9maWdodC9maWxlOi9FOi9HaXRIdWIvY29jb3NHYW1lcy9hc3NldHMvU2NyaXB0L21vZHVsZXMvQUZLL2ZpZ2h0L0VudGl0eS50cyIsIi4uL2ZpbGU6L0U6L0dpdEh1Yi9jb2Nvc0dhbWVzL2Fzc2V0cy9TY3JpcHQvbW9kdWxlcy9BRksvaW5mb3MvZmlsZTovRTovR2l0SHViL2NvY29zR2FtZXMvYXNzZXRzL1NjcmlwdC9tb2R1bGVzL0FGSy9pbmZvcy9FbnRpdHlJbmZvLnRzIiwiLi4vZmlsZTovRTovR2l0SHViL2NvY29zR2FtZXMvYXNzZXRzL1NjcmlwdC9tb2R1bGVzL1JQRy9sYXllci9maWxlOi9FOi9HaXRIdWIvY29jb3NHYW1lcy9hc3NldHMvU2NyaXB0L21vZHVsZXMvUlBHL2xheWVyL0VudGl0eUxheWVyLnRzIiwiLi4vZmlsZTovRTovR2l0SHViL2NvY29zR2FtZXMvYXNzZXRzL1NjcmlwdC9ibG9jay9maWxlOi9FOi9HaXRIdWIvY29jb3NHYW1lcy9hc3NldHMvU2NyaXB0L2Jsb2NrL2VudW0udHMiLCIuLi9maWxlOi9FOi9HaXRIdWIvY29jb3NHYW1lcy9hc3NldHMvU2NyaXB0L21vZHVsZXMvUlBHL2ZpbGU6L0U6L0dpdEh1Yi9jb2Nvc0dhbWVzL2Fzc2V0cy9TY3JpcHQvbW9kdWxlcy9SUEcvRW51bS50cyIsIi4uL2ZpbGU6L0U6L0dpdEh1Yi9jb2Nvc0dhbWVzL2Fzc2V0cy9TY3JpcHQvQ29tbW9uL2ZpbGU6L0U6L0dpdEh1Yi9jb2Nvc0dhbWVzL2Fzc2V0cy9TY3JpcHQvQ29tbW9uL0VudW0udHMiLCIuLi9maWxlOi9FOi9HaXRIdWIvY29jb3NHYW1lcy9hc3NldHMvU2NyaXB0L21vZHVsZXMvZmFpcnliaXJkL2ZpbGU6L0U6L0dpdEh1Yi9jb2Nvc0dhbWVzL2Fzc2V0cy9TY3JpcHQvbW9kdWxlcy9mYWlyeWJpcmQvRmFpcnlCaXJkQ29uc3QudHMiLCIuLi9maWxlOi9FOi9HaXRIdWIvY29jb3NHYW1lcy9hc3NldHMvU2NyaXB0L21vZHVsZXMvZmFpcnliaXJkL2ZpbGU6L0U6L0dpdEh1Yi9jb2Nvc0dhbWVzL2Fzc2V0cy9TY3JpcHQvbW9kdWxlcy9mYWlyeWJpcmQvRmFpcnlCaXJkR2FtZU1hbmdlci50cyIsIi4uL2ZpbGU6L0U6L0dpdEh1Yi9jb2Nvc0dhbWVzL2Fzc2V0cy9TY3JpcHQvbW9kdWxlcy9mYWlyeWJpcmQvZmlsZTovRTovR2l0SHViL2NvY29zR2FtZXMvYXNzZXRzL1NjcmlwdC9tb2R1bGVzL2ZhaXJ5YmlyZC9GYWlyeWJpcmRNYWluUGFuZWwudHMiLCIuLi9maWxlOi9FOi9HaXRIdWIvY29jb3NHYW1lcy9hc3NldHMvU2NyaXB0L21vZHVsZXMvZmFpcnliaXJkL2ZpbGU6L0U6L0dpdEh1Yi9jb2Nvc0dhbWVzL2Fzc2V0cy9TY3JpcHQvbW9kdWxlcy9mYWlyeWJpcmQvRmFpcnlCaXJkUGlwZS50cyIsIi4uL2ZpbGU6L0U6L0dpdEh1Yi9jb2Nvc0dhbWVzL2Fzc2V0cy9TY3JpcHQvbW9kdWxlcy9mYWlyeWJpcmQvZmlsZTovRTovR2l0SHViL2NvY29zR2FtZXMvYXNzZXRzL1NjcmlwdC9tb2R1bGVzL2ZhaXJ5YmlyZC9GYWlyeUJpcmRQaXBlTWFuZ2VyLnRzIiwiLi4vZmlsZTovRTovR2l0SHViL2NvY29zR2FtZXMvYXNzZXRzL1NjcmlwdC9tb2R1bGVzL2ZhaXJ5YmlyZC9maWxlOi9FOi9HaXRIdWIvY29jb3NHYW1lcy9hc3NldHMvU2NyaXB0L21vZHVsZXMvZmFpcnliaXJkL0ZCaXJkLnRzIiwiLi4vZmlsZTovRTovR2l0SHViL2NvY29zR2FtZXMvYXNzZXRzL1NjcmlwdC9tb2R1bGVzL2ZhaXJ5YmlyZC9maWxlOi9FOi9HaXRIdWIvY29jb3NHYW1lcy9hc3NldHMvU2NyaXB0L21vZHVsZXMvZmFpcnliaXJkL0ZCTW92ZUJnLnRzIiwiLi4vZmlsZTovRTovR2l0SHViL2NvY29zR2FtZXMvYXNzZXRzL1NjcmlwdC9tb2R1bGVzL2ZhaXJ5YmlyZC9maWxlOi9FOi9HaXRIdWIvY29jb3NHYW1lcy9hc3NldHMvU2NyaXB0L21vZHVsZXMvZmFpcnliaXJkL0ZDb2luLnRzIiwiLi4vZmlsZTovRTovR2l0SHViL2NvY29zR2FtZXMvYXNzZXRzL1NjcmlwdC9tb2R1bGVzL0FGSy9maWdodC9maWxlOi9FOi9HaXRIdWIvY29jb3NHYW1lcy9hc3NldHMvU2NyaXB0L21vZHVsZXMvQUZLL2ZpZ2h0L0ZpZ2h0Q29uZmlnLnRzIiwiLi4vZmlsZTovRTovR2l0SHViL2NvY29zR2FtZXMvYXNzZXRzL1NjcmlwdC9tb2R1bGVzL0FGSy9pbmZvcy9maWxlOi9FOi9HaXRIdWIvY29jb3NHYW1lcy9hc3NldHMvU2NyaXB0L21vZHVsZXMvQUZLL2luZm9zL0ZpZ2h0SGVyb0luZm8udHMiLCIuLi9maWxlOi9FOi9HaXRIdWIvY29jb3NHYW1lcy9hc3NldHMvU2NyaXB0L21vZHVsZXMvQUZLL2ZpZ2h0L2ZpbGU6L0U6L0dpdEh1Yi9jb2Nvc0dhbWVzL2Fzc2V0cy9TY3JpcHQvbW9kdWxlcy9BRksvZmlnaHQvRmlnaHRNZ3IudHMiLCIuLi9maWxlOi9FOi9HaXRIdWIvY29jb3NHYW1lcy9hc3NldHMvU2NyaXB0L21vZHVsZXMvQUZLL2ZpZ2h0L2ZpbGU6L0U6L0dpdEh1Yi9jb2Nvc0dhbWVzL2Fzc2V0cy9TY3JpcHQvbW9kdWxlcy9BRksvZmlnaHQvRmlnaHRSb2xlRW50aXR5LnRzIiwiLi4vZmlsZTovRTovR2l0SHViL2NvY29zR2FtZXMvYXNzZXRzL1NjcmlwdC9tb2R1bGVzL0FGSy9pbmZvcy9maWxlOi9FOi9HaXRIdWIvY29jb3NHYW1lcy9hc3NldHMvU2NyaXB0L21vZHVsZXMvQUZLL2luZm9zL0ZpZ2h0U2tpbGxHcm91cEluZm8udHMiLCIuLi9maWxlOi9FOi9HaXRIdWIvY29jb3NHYW1lcy9hc3NldHMvU2NyaXB0L21vZHVsZXMvQUZLL2luZm9zL2ZpbGU6L0U6L0dpdEh1Yi9jb2Nvc0dhbWVzL2Fzc2V0cy9TY3JpcHQvbW9kdWxlcy9BRksvaW5mb3MvRmlnaHRTa2lsbEluZm8udHMiLCIuLi9maWxlOi9FOi9HaXRIdWIvY29jb3NHYW1lcy9hc3NldHMvU2NyaXB0L21vZHVsZXMvQUZLL2ZpZ2h0L2ZpbGU6L0U6L0dpdEh1Yi9jb2Nvc0dhbWVzL2Fzc2V0cy9TY3JpcHQvbW9kdWxlcy9BRksvZmlnaHQvRmlnaHRVdGlsLnRzIiwiLi4vZmlsZTovRTovR2l0SHViL2NvY29zR2FtZXMvYXNzZXRzL1NjcmlwdC9tb2R1bGVzL0FGSy9pbmZvcy9maWxlOi9FOi9HaXRIdWIvY29jb3NHYW1lcy9hc3NldHMvU2NyaXB0L21vZHVsZXMvQUZLL2luZm9zL0ZpbmRUYXJnZXRJbmZvLnRzIiwiLi4vZmlsZTovRTovR2l0SHViL2NvY29zR2FtZXMvYXNzZXRzL1NjcmlwdC9HYW1lMjA0OC9maWxlOi9FOi9HaXRIdWIvY29jb3NHYW1lcy9hc3NldHMvU2NyaXB0L0dhbWUyMDQ4L0dhbWUyMDQ4LnRzIiwiLi4vZmlsZTovRTovR2l0SHViL2NvY29zR2FtZXMvYXNzZXRzL1NjcmlwdC9HYW1lMjA0OC9maWxlOi9FOi9HaXRIdWIvY29jb3NHYW1lcy9hc3NldHMvU2NyaXB0L0dhbWUyMDQ4L0dhbWUyMDQ4RW51bS50cyIsIi4uL2ZpbGU6L0U6L0dpdEh1Yi9jb2Nvc0dhbWVzL2Fzc2V0cy9TY3JpcHQvbW9kdWxlcy9SUEcvZmlsZTovRTovR2l0SHViL2NvY29zR2FtZXMvYXNzZXRzL1NjcmlwdC9tb2R1bGVzL1JQRy9HYW1lQ2FtZXJhLnRzIiwiLi4vZmlsZTovRTovR2l0SHViL2NvY29zR2FtZXMvYXNzZXRzL1NjcmlwdC9tb2R1bGVzL0FGSy9maWxlOi9FOi9HaXRIdWIvY29jb3NHYW1lcy9hc3NldHMvU2NyaXB0L21vZHVsZXMvQUZLL0dhbWVDb25zdC50cyIsIi4uL2ZpbGU6L0U6L0dpdEh1Yi9jb2Nvc0dhbWVzL2Fzc2V0cy9TY3JpcHQvbW9kdWxlcy9maWxlOi9FOi9HaXRIdWIvY29jb3NHYW1lcy9hc3NldHMvU2NyaXB0L21vZHVsZXMvR2FtZUVsZW1lbnQudHMiLCIuLi9maWxlOi9FOi9HaXRIdWIvY29jb3NHYW1lcy9hc3NldHMvU2NyaXB0L21vZHVsZXMvQUZLL2ZpZ2h0L2ZpbGU6L0U6L0dpdEh1Yi9jb2Nvc0dhbWVzL2Fzc2V0cy9TY3JpcHQvbW9kdWxlcy9BRksvZmlnaHQvR2FtZUVudGl0eS50cyIsIi4uL2ZpbGU6L0U6L0dpdEh1Yi9jb2Nvc0dhbWVzL2Fzc2V0cy9TY3JpcHQvbW9kdWxlcy9SUEcvZmlsZTovRTovR2l0SHViL2NvY29zR2FtZXMvYXNzZXRzL1NjcmlwdC9tb2R1bGVzL1JQRy9HYW1lTWFuYWdlci50cyIsIi4uL2ZpbGU6L0U6L0dpdEh1Yi9jb2Nvc0dhbWVzL2Fzc2V0cy9TY3JpcHQvbW9kdWxlcy9SUEcvZmlsZTovRTovR2l0SHViL2NvY29zR2FtZXMvYXNzZXRzL1NjcmlwdC9tb2R1bGVzL1JQRy9HYW1lT2JqZWN0LnRzIiwiLi4vZmlsZTovRTovR2l0SHViL2NvY29zR2FtZXMvYXNzZXRzL1NjcmlwdC9tb2R1bGVzL1Rvd2VyRGVmZW5zZS9maWxlOi9FOi9HaXRIdWIvY29jb3NHYW1lcy9hc3NldHMvU2NyaXB0L21vZHVsZXMvVG93ZXJEZWZlbnNlL0dhbWVPdmVyT3JXaW4udHMiLCIuLi9maWxlOi9FOi9HaXRIdWIvY29jb3NHYW1lcy9hc3NldHMvU2NyaXB0L21vZHVsZXMvQUZLL2ZpbGU6L0U6L0dpdEh1Yi9jb2Nvc0dhbWVzL2Fzc2V0cy9TY3JpcHQvbW9kdWxlcy9BRksvR2FtZVNjZW5lLnRzIiwiLi4vZmlsZTovRTovR2l0SHViL2NvY29zR2FtZXMvYXNzZXRzL1NjcmlwdC9HYW1lMjA0OC9maWxlOi9FOi9HaXRIdWIvY29jb3NHYW1lcy9hc3NldHMvU2NyaXB0L0dhbWUyMDQ4L0dyaWQudHMiLCIuLi9maWxlOi9FOi9HaXRIdWIvY29jb3NHYW1lcy9hc3NldHMvU2NyaXB0L0NvbW1vbi9maWxlOi9FOi9HaXRIdWIvY29jb3NHYW1lcy9hc3NldHMvU2NyaXB0L0NvbW1vbi9IYW5kbGVyLnRzIiwiLi4vZmlsZTovRTovR2l0SHViL2NvY29zR2FtZXMvYXNzZXRzL1NjcmlwdC9Db21tb24vbWFwcy9maWxlOi9FOi9HaXRIdWIvY29jb3NHYW1lcy9hc3NldHMvU2NyaXB0L0NvbW1vbi9tYXBzL0hhc2hNYXAudHMiLCIuLi9maWxlOi9FOi9HaXRIdWIvY29jb3NHYW1lcy9hc3NldHMvU2NyaXB0L21vZHVsZXMvQUZLL3VpL2ZpbGU6L0U6L0dpdEh1Yi9jb2Nvc0dhbWVzL2Fzc2V0cy9TY3JpcHQvbW9kdWxlcy9BRksvdWkvSGVhZEJhci50cyIsIi4uL2ZpbGU6L0U6L0dpdEh1Yi9jb2Nvc0dhbWVzL2Fzc2V0cy9TY3JpcHQvbW9kdWxlcy9BRksvdm9zL2ZpbGU6L0U6L0dpdEh1Yi9jb2Nvc0dhbWVzL2Fzc2V0cy9TY3JpcHQvbW9kdWxlcy9BRksvdm9zL0hlcm9Db25maWdWby50cyIsIi4uL2ZpbGU6L0U6L0dpdEh1Yi9jb2Nvc0dhbWVzL2Fzc2V0cy9TY3JpcHQvbW9kdWxlcy9SUEcvZmlsZTovRTovR2l0SHViL2NvY29zR2FtZXMvYXNzZXRzL1NjcmlwdC9tb2R1bGVzL1JQRy9JUm9hZFNlZWtlci50cyIsIi4uL2ZpbGU6L0U6L0dpdEh1Yi9jb2Nvc0dhbWVzL2Fzc2V0cy9TY3JpcHQvQ29tbW9uL2ZpbGU6L0U6L0dpdEh1Yi9jb2Nvc0dhbWVzL2Fzc2V0cy9TY3JpcHQvQ29tbW9uL0pveXN0aWNrLnRzIiwiLi4vZmlsZTovRTovR2l0SHViL2NvY29zR2FtZXMvYXNzZXRzL1NjcmlwdC91aS9maWxlOi9FOi9HaXRIdWIvY29jb3NHYW1lcy9hc3NldHMvU2NyaXB0L3VpL0xheWVyTWFuYWdlci50cyIsIi4uL2ZpbGU6L0U6L0dpdEh1Yi9jb2Nvc0dhbWVzL2Fzc2V0cy9TY3JpcHQvYmxvY2svZmlsZTovRTovR2l0SHViL2NvY29zR2FtZXMvYXNzZXRzL1NjcmlwdC9ibG9jay9NYWluLnRzIiwiLi4vZmlsZTovRTovR2l0SHViL2NvY29zR2FtZXMvYXNzZXRzL1NjcmlwdC9tb2R1bGVzL21haW4vZmlsZTovRTovR2l0SHViL2NvY29zR2FtZXMvYXNzZXRzL1NjcmlwdC9tb2R1bGVzL21haW4vTWFpblBhbmVsLnRzIiwiLi4vZmlsZTovRTovR2l0SHViL2NvY29zR2FtZXMvYXNzZXRzL1NjcmlwdC9tb2R1bGVzL1JQRy9maWxlOi9FOi9HaXRIdWIvY29jb3NHYW1lcy9hc3NldHMvU2NyaXB0L21vZHVsZXMvUlBHL01haW5UZXN0LnRzIiwiLi4vZmlsZTovRTovR2l0SHViL2NvY29zR2FtZXMvYXNzZXRzL1NjcmlwdC9tb2R1bGVzL1JQRy9tYXAvZmlsZTovRTovR2l0SHViL2NvY29zR2FtZXMvYXNzZXRzL1NjcmlwdC9tb2R1bGVzL1JQRy9tYXAvTWFwRGF0YS50cyIsIi4uL2ZpbGU6L0U6L0dpdEh1Yi9jb2Nvc0dhbWVzL2Fzc2V0cy9TY3JpcHQvbW9kdWxlcy9SUEcvbGF5ZXIvZmlsZTovRTovR2l0SHViL2NvY29zR2FtZXMvYXNzZXRzL1NjcmlwdC9tb2R1bGVzL1JQRy9sYXllci9NYXBMYXllci50cyIsIi4uL2ZpbGU6L0U6L0dpdEh1Yi9jb2Nvc0dhbWVzL2Fzc2V0cy9TY3JpcHQvbW9kdWxlcy9SUEcvaW5mby9maWxlOi9FOi9HaXRIdWIvY29jb3NHYW1lcy9hc3NldHMvU2NyaXB0L21vZHVsZXMvUlBHL2luZm8vTWFwUGFyYW1zLnRzIiwiLi4vZmlsZTovRTovR2l0SHViL2NvY29zR2FtZXMvYXNzZXRzL1NjcmlwdC9tb2R1bGVzL1JQRy9tYXAvbWFwUm9hZC9maWxlOi9FOi9HaXRIdWIvY29jb3NHYW1lcy9hc3NldHMvU2NyaXB0L21vZHVsZXMvUlBHL21hcC9tYXBSb2FkL01hcFJvYWQ0NUFuZ2xlLnRzIiwiLi4vZmlsZTovRTovR2l0SHViL2NvY29zR2FtZXMvYXNzZXRzL1NjcmlwdC9tb2R1bGVzL1JQRy9tYXAvbWFwUm9hZC9maWxlOi9FOi9HaXRIdWIvY29jb3NHYW1lcy9hc3NldHMvU2NyaXB0L21vZHVsZXMvUlBHL21hcC9tYXBSb2FkL01hcFJvYWQ5MEFuZ2xlLnRzIiwiLi4vZmlsZTovRTovR2l0SHViL2NvY29zR2FtZXMvYXNzZXRzL1NjcmlwdC9tb2R1bGVzL1JQRy9tYXAvZmlsZTovRTovR2l0SHViL2NvY29zR2FtZXMvYXNzZXRzL1NjcmlwdC9tb2R1bGVzL1JQRy9tYXAvTWFwUm9hZFV0aWxzLnRzIiwiLi4vZmlsZTovRTovR2l0SHViL2NvY29zR2FtZXMvYXNzZXRzL1NjcmlwdC9Db21tb24vZmlsZTovRTovR2l0SHViL2NvY29zR2FtZXMvYXNzZXRzL1NjcmlwdC9Db21tb24vTWF0aFV0aWxzLnRzIiwiLi4vZmlsZTovRTovR2l0SHViL2NvY29zR2FtZXMvYXNzZXRzL1NjcmlwdC9tb2R1bGVzL1JQRy9jaGFyYWN0ZXIvZmlsZTovRTovR2l0SHViL2NvY29zR2FtZXMvYXNzZXRzL1NjcmlwdC9tb2R1bGVzL1JQRy9jaGFyYWN0ZXIvTW9uc3Rlci50cyIsIi4uL2ZpbGU6L0U6L0dpdEh1Yi9jb2Nvc0dhbWVzL2Fzc2V0cy9TY3JpcHQvQ29tbW9uL2ZpbGU6L0U6L0dpdEh1Yi9jb2Nvc0dhbWVzL2Fzc2V0cy9TY3JpcHQvQ29tbW9uL05vZGVGYWN0b3J5LnRzIiwiLi4vZmlsZTovRTovR2l0SHViL2NvY29zR2FtZXMvYXNzZXRzL1NjcmlwdC9tb2R1bGVzL1JQRy9jaGFyYWN0ZXIvZmlsZTovRTovR2l0SHViL2NvY29zR2FtZXMvYXNzZXRzL1NjcmlwdC9tb2R1bGVzL1JQRy9jaGFyYWN0ZXIvTnBjLnRzIiwiLi4vZmlsZTovRTovR2l0SHViL2NvY29zR2FtZXMvYXNzZXRzL1NjcmlwdC91aS9maWxlOi9FOi9HaXRIdWIvY29jb3NHYW1lcy9hc3NldHMvU2NyaXB0L3VpL1BhbmVsRW51bS50cyIsIi4uL2ZpbGU6L0U6L0dpdEh1Yi9jb2Nvc0dhbWVzL2Fzc2V0cy9TY3JpcHQvbW9kdWxlcy9SUEcvbWFwL2ZpbGU6L0U6L0dpdEh1Yi9jb2Nvc0dhbWVzL2Fzc2V0cy9TY3JpcHQvbW9kdWxlcy9SUEcvbWFwL1BhdGhGaW5kaW5nQWdlbnQudHMiLCIuLi9maWxlOi9FOi9HaXRIdWIvY29jb3NHYW1lcy9hc3NldHMvU2NyaXB0L21vZHVsZXMvUlBHL2NoYXJhY3Rlci9maWxlOi9FOi9HaXRIdWIvY29jb3NHYW1lcy9hc3NldHMvU2NyaXB0L21vZHVsZXMvUlBHL2NoYXJhY3Rlci9QbGF5ZXIudHMiLCIuLi9maWxlOi9FOi9HaXRIdWIvY29jb3NHYW1lcy9hc3NldHMvU2NyaXB0L0NvbW1vbi9maWxlOi9FOi9HaXRIdWIvY29jb3NHYW1lcy9hc3NldHMvU2NyaXB0L0NvbW1vbi9Qb29sLnRzIiwiLi4vZmlsZTovRTovR2l0SHViL2NvY29zR2FtZXMvYXNzZXRzL1NjcmlwdC9Db21tb24vZmlsZTovRTovR2l0SHViL2NvY29zR2FtZXMvYXNzZXRzL1NjcmlwdC9Db21tb24vUXVhZFRyZWUudHMiLCIuLi9maWxlOi9FOi9HaXRIdWIvY29jb3NHYW1lcy9hc3NldHMvU2NyaXB0L21vZHVsZXMvZmlsZTovRTovR2l0SHViL2NvY29zR2FtZXMvYXNzZXRzL1NjcmlwdC9tb2R1bGVzL1F1YWRUcmVlVGVzdC50cyIsIi4uL2ZpbGU6L0U6L0dpdEh1Yi9jb2Nvc0dhbWVzL2Fzc2V0cy9TY3JpcHQvbW9kdWxlcy9Ub3dlckRlZmVuc2UvZmlsZTovRTovR2l0SHViL2NvY29zR2FtZXMvYXNzZXRzL1NjcmlwdC9tb2R1bGVzL1Rvd2VyRGVmZW5zZS9SZW1vdmVPclVwTGV2ZWwudHMiLCIuLi9maWxlOi9FOi9HaXRIdWIvY29jb3NHYW1lcy9hc3NldHMvU2NyaXB0L2Jsb2NrL2ZpbGU6L0U6L0dpdEh1Yi9jb2Nvc0dhbWVzL2Fzc2V0cy9TY3JpcHQvYmxvY2svUmVuZGVyLnRzIiwiLi4vZmlsZTovRTovR2l0SHViL2NvY29zR2FtZXMvYXNzZXRzL1NjcmlwdC9tb2R1bGVzL1JQRy9tYXAvZmlsZTovRTovR2l0SHViL2NvY29zR2FtZXMvYXNzZXRzL1NjcmlwdC9tb2R1bGVzL1JQRy9tYXAvUm9hZE5vZGUudHMiLCIuLi9maWxlOi9FOi9HaXRIdWIvY29jb3NHYW1lcy9hc3NldHMvU2NyaXB0L21vZHVsZXMvQUZLL2ZpZ2h0L2ZpbGU6L0U6L0dpdEh1Yi9jb2Nvc0dhbWVzL2Fzc2V0cy9TY3JpcHQvbW9kdWxlcy9BRksvZmlnaHQvUm9sZUVudGl0eS50cyIsIi4uL2ZpbGU6L0U6L0dpdEh1Yi9jb2Nvc0dhbWVzL2Fzc2V0cy9TY3JpcHQvbW9kdWxlcy9SUEcvZmlsZTovRTovR2l0SHViL2NvY29zR2FtZXMvYXNzZXRzL1NjcmlwdC9tb2R1bGVzL1JQRy9Sb2xlRW50aXR5LnRzIiwiLi4vZmlsZTovRTovR2l0SHViL2NvY29zR2FtZXMvYXNzZXRzL1NjcmlwdC9tb2R1bGVzL1JQRy9maWxlOi9FOi9HaXRIdWIvY29jb3NHYW1lcy9hc3NldHMvU2NyaXB0L21vZHVsZXMvUlBHL1JQR0NvbmZpZy50cyIsIi4uL2ZpbGU6L0U6L0dpdEh1Yi9jb2Nvc0dhbWVzL2Fzc2V0cy9TY3JpcHQvbW9kdWxlcy9SUEcvZmlsZTovRTovR2l0SHViL2NvY29zR2FtZXMvYXNzZXRzL1NjcmlwdC9tb2R1bGVzL1JQRy9SUEdMYXVuY2hlci50cyIsIi4uL2ZpbGU6L0U6L0dpdEh1Yi9jb2Nvc0dhbWVzL2Fzc2V0cy9TY3JpcHQvbW9kdWxlcy9SUEcvZmlsZTovRTovR2l0SHViL2NvY29zR2FtZXMvYXNzZXRzL1NjcmlwdC9tb2R1bGVzL1JQRy9SUEdQYW5lbC50cyIsIi4uL2ZpbGU6L0U6L0dpdEh1Yi9jb2Nvc0dhbWVzL2Fzc2V0cy9TY3JpcHQvbW9kdWxlcy9SUEcvZmlsZTovRTovR2l0SHViL2NvY29zR2FtZXMvYXNzZXRzL1NjcmlwdC9tb2R1bGVzL1JQRy9TY2VuY2VNYXAudHMiLCIuLi9maWxlOi9FOi9HaXRIdWIvY29jb3NHYW1lcy9hc3NldHMvU2NyaXB0L21vZHVsZXMvQUZLL2ZpbGU6L0U6L0dpdEh1Yi9jb2Nvc0dhbWVzL2Fzc2V0cy9TY3JpcHQvbW9kdWxlcy9BRksvU2NlbmUudHMiLCIuLi9maWxlOi9FOi9HaXRIdWIvY29jb3NHYW1lcy9hc3NldHMvU2NyaXB0L21vZHVsZXMvZmlsZTovRTovR2l0SHViL2NvY29zR2FtZXMvYXNzZXRzL1NjcmlwdC9tb2R1bGVzL1NjZW5lQmFzZS50cyIsIi4uL2ZpbGU6L0U6L0dpdEh1Yi9jb2Nvc0dhbWVzL2Fzc2V0cy9TY3JpcHQvQ29tbW9uL2ZpbGU6L0U6L0dpdEh1Yi9jb2Nvc0dhbWVzL2Fzc2V0cy9TY3JpcHQvQ29tbW9uL1NjcmVlbkFkYXB0YXRpb24udHMiLCIuLi9maWxlOi9FOi9HaXRIdWIvY29jb3NHYW1lcy9hc3NldHMvU2NyaXB0L21vZHVsZXMvVG93ZXJEZWZlbnNlL2ZpbGU6L0U6L0dpdEh1Yi9jb2Nvc0dhbWVzL2Fzc2V0cy9TY3JpcHQvbW9kdWxlcy9Ub3dlckRlZmVuc2UvU2VsZWN0VG93ZXJCdWlsZC50cyIsIi4uL2ZpbGU6L0U6L0dpdEh1Yi9jb2Nvc0dhbWVzL2Fzc2V0cy9TY3JpcHQvbW9kdWxlcy9BRksvdm9zL2ZpbGU6L0U6L0dpdEh1Yi9jb2Nvc0dhbWVzL2Fzc2V0cy9TY3JpcHQvbW9kdWxlcy9BRksvdm9zL1NraWxsQ29uZmlnVm8udHMiLCIuLi9maWxlOi9FOi9HaXRIdWIvY29jb3NHYW1lcy9hc3NldHMvU2NyaXB0L21vZHVsZXMvUlBHL3RyYW5zZmVyL2ZpbGU6L0U6L0dpdEh1Yi9jb2Nvc0dhbWVzL2Fzc2V0cy9TY3JpcHQvbW9kdWxlcy9SUEcvdHJhbnNmZXIvU3Bhd25Qb2ludC50cyIsIi4uL2ZpbGU6L0U6L0dpdEh1Yi9jb2Nvc0dhbWVzL2Fzc2V0cy9TY3JpcHQvQ29tbW9uL2ZpbGU6L0U6L0dpdEh1Yi9jb2Nvc0dhbWVzL2Fzc2V0cy9TY3JpcHQvQ29tbW9uL1NwaW5lU2tlbGV0b24udHMiLCIuLi9maWxlOi9FOi9HaXRIdWIvY29jb3NHYW1lcy9hc3NldHMvU2NyaXB0L21vZHVsZXMvUlBHL2ZpbGU6L0U6L0dpdEh1Yi9jb2Nvc0dhbWVzL2Fzc2V0cy9TY3JpcHQvbW9kdWxlcy9SUEcvU3BpbmVUZXN0LnRzIiwiLi4vZmlsZTovRTovR2l0SHViL2NvY29zR2FtZXMvYXNzZXRzL1NjcmlwdC9Db21tb24vZmlsZTovRTovR2l0SHViL2NvY29zR2FtZXMvYXNzZXRzL1NjcmlwdC9Db21tb24vU3RyaW5nVXRpbHMudHMiLCIuLi9maWxlOi9FOi9HaXRIdWIvY29jb3NHYW1lcy9hc3NldHMvU2NyaXB0L21vZHVsZXMvVG93ZXJEZWZlbnNlL1Rvb2xzL2ZpbGU6L0U6L0dpdEh1Yi9jb2Nvc0dhbWVzL2Fzc2V0cy9TY3JpcHQvbW9kdWxlcy9Ub3dlckRlZmVuc2UvVG9vbHMvVGVzdC50cyIsIi4uL2ZpbGU6L0U6L0dpdEh1Yi9jb2Nvc0dhbWVzL2Fzc2V0cy9TY3JpcHQvR2FtZTIwNDgvZmlsZTovRTovR2l0SHViL2NvY29zR2FtZXMvYXNzZXRzL1NjcmlwdC9HYW1lMjA0OC9UaWxlLnRzIiwiLi4vZmlsZTovRTovR2l0SHViL2NvY29zR2FtZXMvYXNzZXRzL1NjcmlwdC9Db21tb24vZmlsZTovRTovR2l0SHViL2NvY29zR2FtZXMvYXNzZXRzL1NjcmlwdC9Db21tb24vVGltZVV0aWxzLnRzIiwiLi4vZmlsZTovRTovR2l0SHViL2NvY29zR2FtZXMvYXNzZXRzL1NjcmlwdC9Db21tb24vZmlsZTovRTovR2l0SHViL2NvY29zR2FtZXMvYXNzZXRzL1NjcmlwdC9Db21tb24vVG91Y2gudHMiLCIuLi9maWxlOi9FOi9HaXRIdWIvY29jb3NHYW1lcy9hc3NldHMvU2NyaXB0L21vZHVsZXMvVG93ZXJEZWZlbnNlL1Rvb2xzL2ZpbGU6L0U6L0dpdEh1Yi9jb2Nvc0dhbWVzL2Fzc2V0cy9TY3JpcHQvbW9kdWxlcy9Ub3dlckRlZmVuc2UvVG9vbHMvVG91Y2hNb3ZlLnRzIiwiLi4vZmlsZTovRTovR2l0SHViL2NvY29zR2FtZXMvYXNzZXRzL1NjcmlwdC9tb2R1bGVzL1Rvd2VyRGVmZW5zZS9pbmZvL2ZpbGU6L0U6L0dpdEh1Yi9jb2Nvc0dhbWVzL2Fzc2V0cy9TY3JpcHQvbW9kdWxlcy9Ub3dlckRlZmVuc2UvaW5mby9Ub3dlckJ1aWxkSW5mby50cyIsIi4uL2ZpbGU6L0U6L0dpdEh1Yi9jb2Nvc0dhbWVzL2Fzc2V0cy9TY3JpcHQvbW9kdWxlcy9Ub3dlckRlZmVuc2UvZmlsZTovRTovR2l0SHViL2NvY29zR2FtZXMvYXNzZXRzL1NjcmlwdC9tb2R1bGVzL1Rvd2VyRGVmZW5zZS9Ub3dlckNoYXJhY3Rlci50cyIsIi4uL2ZpbGU6L0U6L0dpdEh1Yi9jb2Nvc0dhbWVzL2Fzc2V0cy9TY3JpcHQvbW9kdWxlcy9Ub3dlckRlZmVuc2UvZmlsZTovRTovR2l0SHViL2NvY29zR2FtZXMvYXNzZXRzL1NjcmlwdC9tb2R1bGVzL1Rvd2VyRGVmZW5zZS9Ub3dlckNvbmZpZy50cyIsIi4uL2ZpbGU6L0U6L0dpdEh1Yi9jb2Nvc0dhbWVzL2Fzc2V0cy9TY3JpcHQvbW9kdWxlcy9Ub3dlckRlZmVuc2UvZmlsZTovRTovR2l0SHViL2NvY29zR2FtZXMvYXNzZXRzL1NjcmlwdC9tb2R1bGVzL1Rvd2VyRGVmZW5zZS9Ub3dlckNvbnN0LnRzIiwiLi4vZmlsZTovRTovR2l0SHViL2NvY29zR2FtZXMvYXNzZXRzL1NjcmlwdC9tb2R1bGVzL1Rvd2VyRGVmZW5zZS9pbmZvL2ZpbGU6L0U6L0dpdEh1Yi9jb2Nvc0dhbWVzL2Fzc2V0cy9TY3JpcHQvbW9kdWxlcy9Ub3dlckRlZmVuc2UvaW5mby9Ub3dlckRhdGFEVE8udHMiLCIuLi9maWxlOi9FOi9HaXRIdWIvY29jb3NHYW1lcy9hc3NldHMvU2NyaXB0L21vZHVsZXMvVG93ZXJEZWZlbnNlL2ZpbGU6L0U6L0dpdEh1Yi9jb2Nvc0dhbWVzL2Fzc2V0cy9TY3JpcHQvbW9kdWxlcy9Ub3dlckRlZmVuc2UvVG93ZXJHYW1lU2NlbmUudHMiLCIuLi9maWxlOi9FOi9HaXRIdWIvY29jb3NHYW1lcy9hc3NldHMvU2NyaXB0L21vZHVsZXMvVG93ZXJEZWZlbnNlL2ZpbGU6L0U6L0dpdEh1Yi9jb2Nvc0dhbWVzL2Fzc2V0cy9TY3JpcHQvbW9kdWxlcy9Ub3dlckRlZmVuc2UvVG93ZXJHYW1lVUlNYW5hZ2VyLnRzIiwiLi4vZmlsZTovRTovR2l0SHViL2NvY29zR2FtZXMvYXNzZXRzL1NjcmlwdC9tb2R1bGVzL1Rvd2VyRGVmZW5zZS9maWxlOi9FOi9HaXRIdWIvY29jb3NHYW1lcy9hc3NldHMvU2NyaXB0L21vZHVsZXMvVG93ZXJEZWZlbnNlL1Rvd2VyTGF1bmNoZXIudHMiLCIuLi9maWxlOi9FOi9HaXRIdWIvY29jb3NHYW1lcy9hc3NldHMvU2NyaXB0L21vZHVsZXMvVG93ZXJEZWZlbnNlL2luZm8vZmlsZTovRTovR2l0SHViL2NvY29zR2FtZXMvYXNzZXRzL1NjcmlwdC9tb2R1bGVzL1Rvd2VyRGVmZW5zZS9pbmZvL1Rvd2VyTWFwRFRPLnRzIiwiLi4vZmlsZTovRTovR2l0SHViL2NvY29zR2FtZXMvYXNzZXRzL1NjcmlwdC9tb2R1bGVzL1Rvd2VyRGVmZW5zZS9maWxlOi9FOi9HaXRIdWIvY29jb3NHYW1lcy9hc3NldHMvU2NyaXB0L21vZHVsZXMvVG93ZXJEZWZlbnNlL1Rvd2VyTWFwTGF5ZXIudHMiLCIuLi9maWxlOi9FOi9HaXRIdWIvY29jb3NHYW1lcy9hc3NldHMvU2NyaXB0L21vZHVsZXMvVG93ZXJEZWZlbnNlL2ZpbGU6L0U6L0dpdEh1Yi9jb2Nvc0dhbWVzL2Fzc2V0cy9TY3JpcHQvbW9kdWxlcy9Ub3dlckRlZmVuc2UvVG93ZXJTY2VuZU1hcC50cyIsIi4uL2ZpbGU6L0U6L0dpdEh1Yi9jb2Nvc0dhbWVzL2Fzc2V0cy9TY3JpcHQvbW9kdWxlcy9SUEcvdHJhbnNmZXIvZmlsZTovRTovR2l0SHViL2NvY29zR2FtZXMvYXNzZXRzL1NjcmlwdC9tb2R1bGVzL1JQRy90cmFuc2Zlci9UcmFuc2ZlckRvb3IudHMiLCIuLi9maWxlOi9FOi9HaXRIdWIvY29jb3NHYW1lcy9hc3NldHMvU2NyaXB0L21vZHVsZXMvUlBHL2ZpbGU6L0U6L0dpdEh1Yi9jb2Nvc0dhbWVzL2Fzc2V0cy9TY3JpcHQvbW9kdWxlcy9SUEcvVHJhbnNmb3JtLnRzIiwiLi4vZmlsZTovRTovR2l0SHViL2NvY29zR2FtZXMvYXNzZXRzL1NjcmlwdC91aS9maWxlOi9FOi9HaXRIdWIvY29jb3NHYW1lcy9hc3NldHMvU2NyaXB0L3VpL1VJRXhhbXBsZS50cyIsIi4uL2ZpbGU6L0U6L0dpdEh1Yi9jb2Nvc0dhbWVzL2Fzc2V0cy9TY3JpcHQvbW9kdWxlcy9BRksvZmlsZTovRTovR2l0SHViL2NvY29zR2FtZXMvYXNzZXRzL1NjcmlwdC9tb2R1bGVzL0FGSy9Vbml0LnRzIiwiLi4vZmlsZTovRTovR2l0SHViL2NvY29zR2FtZXMvYXNzZXRzL1NjcmlwdC9Db21tb24vZmlsZTovRTovR2l0SHViL2NvY29zR2FtZXMvYXNzZXRzL1NjcmlwdC9Db21tb24vVXRpbHMudHMiLCIuLi9maWxlOi9FOi9HaXRIdWIvY29jb3NHYW1lcy9hc3NldHMvU2NyaXB0L3VpL2ZpbGU6L0U6L0dpdEh1Yi9jb2Nvc0dhbWVzL2Fzc2V0cy9TY3JpcHQvdWkvVmlld0NvbnN0LnRzIiwiLi4vZmlsZTovRTovR2l0SHViL2NvY29zR2FtZXMvYXNzZXRzL1NjcmlwdC91aS9maWxlOi9FOi9HaXRIdWIvY29jb3NHYW1lcy9hc3NldHMvU2NyaXB0L3VpL1ZpZXdNYW5hZ2VyLnRzIiwiLi4vZmlsZTovRTovR2l0SHViL2NvY29zR2FtZXMvYXNzZXRzL1NjcmlwdC91aS9maWxlOi9FOi9HaXRIdWIvY29jb3NHYW1lcy9hc3NldHMvU2NyaXB0L3VpL1ZpZXdSZWdpc3Rlck1nci50cyIsIi4uL2ZpbGU6L0U6L0dpdEh1Yi9jb2Nvc0dhbWVzL2Fzc2V0cy9TY3JpcHQvdWkvZmlsZTovRTovR2l0SHViL2NvY29zR2FtZXMvYXNzZXRzL1NjcmlwdC91aS9WaWV3UmVnaXN0ZXJWby50cyJdLCJuYW1lcyI6WyJBY3Rpb25JbmZvIiwibmFtZSIsImhhbmRsZXIiLCJ0aW1lcyIsImVuZE5hbWUiLCJHYW1lQ29uc3QiLCJJZGxlIiwiZW5kQWN0aW9uTmFtZSIsIl9SRiIsInBvcCIsImNjY2xhc3MiLCJfZGVjb3JhdG9yIiwicHJvcGVydHkiLCJBRktHYW1lIiwiX2RlYyIsIl9jbGFzcyIsIl9CYXNlVmlldyIsIl9pbmhlcml0c0xvb3NlIiwiX3RoaXMiLCJfbGVuIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiYXJncyIsIkFycmF5IiwiX2tleSIsImNhbGwiLCJhcHBseSIsImNvbmNhdCIsInNjZW5lIiwiZ2FtZUNvbmZpZyIsImhlcm9NYXAiLCJlbm1leU1hcCIsInBvc2l0aW9uTWFwIiwiaXNJbml0IiwiX3Byb3RvIiwicHJvdG90eXBlIiwic3RhcnQiLCJ1cGRhdGUiLCJkZWx0YVRpbWUiLCJGaWdodE1nciIsImluc3RhbmNlIiwiZG9GcmFtZUhhbmRsZXIiLCJpbml0IiwiSGFzaE1hcCIsIm9uT3BlbiIsIl9vbk9wZW4iLCJfYXN5bmNUb0dlbmVyYXRvciIsIl9yZWdlbmVyYXRvclJ1bnRpbWUiLCJtYXJrIiwiX2NhbGxlZSIsImZyb21VSSIsImkiLCJsZWZ0Tm9kZU5hbWUiLCJyaWdodE5vZGVOYW1lIiwibGVmdE5vZGUiLCJyaWdodE5vZGUiLCJsZWZ0TWFwIiwicmlnaHRNYXAiLCJoZXJvcyIsImVubWV5cyIsImluZGV4IiwiZWxlbWVudCIsIl9pbmRleCIsIl9lbGVtZW50Iiwid3JhcCIsIl9jYWxsZWUkIiwiX2NvbnRleHQiLCJwcmV2IiwibmV4dCIsImxvYWRDb25maWciLCJHYW1lU2NlbmUiLCJub2RlIiwiYWRkQ2hpbGQiLCJVdGlscyIsIkZpbmRDaGlsZEJ5TmFtZSIsImdldCIsImFjdGl2ZSIsInB1dCIsInBvc2l0aW9uIiwiY2xvbmUiLCJ2YWx1ZXMiLCJjcmVhdGVIZXJvIiwic2V0UmFuZG9tU2VlZCIsInN0b3AiLCJfeCIsIl9sb2FkQ29uZmlnIiwiX2NhbGxlZTIiLCJfdGhpczIiLCJfY2FsbGVlMiQiLCJfY29udGV4dDIiLCJhYnJ1cHQiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsInJlc291cmNlcyIsImxvYWQiLCJKc29uQXNzZXQiLCJlcnIiLCJkYXRhIiwianNvbiIsIkZpZ2h0Q29uZmlnIiwia2V5IiwiT2JqZWN0IiwiaGFzT3duUHJvcGVydHkiLCJoaWQiLCJOdW1iZXIiLCJoZXJvIiwic2V0RmlnaHRIZXJvSW5mbyIsImNvbXAiLCJwbGF5ZXJJZCIsImhlcm9JbmZvIiwiRmlnaHRIZXJvSW5mbyIsInNldERhdGEiLCJnZXRQb3NpdGlvbiIsImluZm8iLCJjYW1wIiwic2l0ZSIsInBvc01hcCIsIm1hdGgiLCJ2MyIsImZpZ2h0SGVybyIsIl90aGlzMyIsImNyZWF0ZSIsIkZpZ2h0Um9sZUVudGl0eSIsIlJJR0hUIiwiTEVGVCIsInRoZW4iLCJlbnRpdHkiLCJzZXRMb2NhdGlvbiIsIngiLCJ5IiwiaW5pdEhlYWRCYXIiLCJlIiwiYWRkRW50aXR5IiwiY29uc29sZSIsImxvZyIsInNwaW5lSWQiLCJnZXRCb3VuZHMiLCJiRXJyIiwiYyIsImRpciIsImFjdGlvbiIsInJlc2xvdmUiLCJnZXRVbml0QnlJZCIsImdldElkIiwiYWRkVW5pdCIsInNldFJvbGUiLCJoZXJvQ29uZmlnIiwidmFsdWUiLCJjaGFuZ2VBY3Rpb25BbmREaXJlY3Rpb24iLCJCYXNlVmlldyIsInJlZ2lzdGVyVmlldyIsInZpZXdDbHMiLCJpZCIsIlBhbmVsVHlwZSIsImxheWVyIiwiTGF5ZXJUeXBlIiwidmlldyIsInByZWZhYlBhdGhQcmVmaXgiLCJWaWV3Q29uc3QiLCJkZWZhdWx0UHJlZmFiUGF0aFByZWZpeCIsIkFGS0dhbWVDb25maWdWbyIsInNraWxscyIsIkFGS1Jlc3VsdFBhbmVsIiwic2hvd1R5cGUiLCJWaWV3U2hvd1R5cGVzIiwiVmlld0FkZGl0aW9uIiwiYnRuIiwic3BpbmUiLCJnZXRDb21wb25lbnQiLCJCdXR0b24iLCJzcCIsIlNrZWxldG9uIiwib24iLCJFdmVudFR5cGUiLCJDTElDSyIsIm9uQ2xpY2tCdG4iLCJ2aWV3TWFuYWdlciIsImNsb3NlIiwicmVzZXQiLCJvcGVuIiwiaXNXaW4iLCJ1bmRlZmluZWQiLCJhY3Rpb25OYW1lIiwiYW5pbWF0aW9uIiwib25Mb2FkIiwiQW5pbWF0aW9uUGF0aCIsIl9Db21wb25lbnQiLCJncmFwaGljcyIsInAycERpc3RhbmNlIiwiQW5pbWF0aW9uIiwiYWRkQ29tcG9uZW50IiwiR3JhcGhpY3MiLCJnZXRXb3JsZFBhdGhCeU1hcElkIiwibWFwSWQiLCJ0aGVtZUlkIiwiVG93ZXJMYXVuY2hlciIsInRoZW1lIiwicGF0aCIsImVycm9yIiwiZ2V0Tm9kZVBhdGgiLCJkcmF3UG9pbnQiLCJDb2xvciIsIlJFRCIsImdldFdvcmxkUGF0aCIsImNsaXBzIiwiY2xpcCIsInRyYWNrIiwidHJhY2tzIiwiY2hhbm5lbHMiLCJ4Y3VydmUiLCJjdXJ2ZSIsInljdXJ2ZSIsInhrZXlGcmFtZSIsInlrZXlGcmFtZSIsImJlemllclBhcnRBcnJheSIsImdldEJlemllclBhcnRBcnJheSIsIl9nZXRQYXRoIiwicEFycmF5IiwiYmV6aWVyIiwiY3JlYXRlUG9zQXJyYXkiLCJwb3NBcnJheSIsInhmcmFtZUFycmF5IiwieWZyYW1lQXJyYXkiLCJtYXhMZW5ndGgiLCJNYXRoIiwibWF4IiwiaiIsInhLZXlGcmFtZSIsInlLZXlGcmFtZSIsIm5leHRYS2V5RnJhbWUiLCJuZXh0WUtleUZyYW1lIiwiYXJyIiwiY3JlYXRlQmV6aWVyUGFydEFycmF5Iiwic3RhcnRYS2V5RnJhbWUiLCJzdGFydFlLZXlGcmFtZSIsImVuZFhLZXlGcmFtZSIsImVuZFlLZXlGcmFtZSIsInN0YXJ0UG9pbnQiLCJ2MiIsImVuZFBvaW50IiwiZGlyZWN0aW9uIiwic3VidHJhY3QiLCJkaXN0YW5jZSIsIm51bVNlZ21lbnRzIiwiZHgiLCJkeSIsInJlc3VsdCIsInB1c2giLCJwb2ludCIsImNvbG9yIiwiY2xlYXIiLCJzdHJva2VDb2xvciIsImZpbGxDb2xvciIsImxpbmVXaWR0aCIsImNpcmNsZSIsImZpbGwiLCJDb21wb25lbnQiLCJBcmVhVHlwZSIsIkxUIiwiUlQiLCJMQiIsIlJCIiwiQXJyYXlVdGlscyIsInJhbmRvbUluZGV4IiwibGVuIiwiY291bnQiLCJyZXBldGl0aW9uIiwicmV0IiwiX2kiLCJmbG9vciIsInJhbmRvbSIsInJhbmRvbVJhbmdlIiwibWluIiwiaW50ZWdlciIsInJlbW92ZUl0ZW0iLCJhcnJheSIsIml0ZW0iLCJzcGxpY2UiLCJzb3J0QnkiLCJfYXJyMSIsInJlIiwiaXNOZXciLCJzb3J0Iiwic29ydEZ1biIsImEiLCJiIiwic29ydEJ5MiIsInAiLCJzb3J0QnkzIiwic29ydEJ5NCIsIl9hcnIyIiwicmVBcnIiLCJhYSIsImJiIiwic29ydEJ5NSIsIkFzc2V0TWdyIiwiZ2V0QnVuZGxlIiwibmFtZU9yVXJsIiwiYnVuZGxlIiwiYXNzZXRNYW5hZ2VyIiwibG9hZEJ1bmRsZSIsIl9sb2FkIiwiY2IiLCJwYXRoUmVzdWx0IiwiYnVuZGxlTmFtZSIsImFzc2V0TmFtZSIsImFzc2V0IiwicGFyc2VBc3NldFBhdGgiLCJzZW50IiwicmVzb3VyY2UiLCJfeDIiLCJwcmVsb2FkIiwiX3ByZWxvYWQiLCJfeDMiLCJpbmRleE9mIiwicmVnZXgiLCJyZWdleEFyciIsIm1hdGNoIiwicmVsZWFzZSIsInJlbGVhc2VCdW5kbGUiLCJyZWxlYXNlQWxsIiwicmVtb3ZlQnVuZGxlIiwiY3JlYXRlUHJlZmFiIiwiX2NyZWF0ZVByZWZhYiIsIl9jYWxsZWUzIiwicHJlZmFiUGF0aCIsIl9jYWxsZWUzJCIsIl9jb250ZXh0MyIsImluc3RhbnRpYXRlIiwiX3g0IiwiYmFzZTY0VG9UZXh0dXJlIiwiX2Jhc2U2NFRvVGV4dHVyZSIsIl9jYWxsZWU0IiwiX2NhbGxlZTQkIiwiX2NvbnRleHQ0IiwiX3g1IiwiYmFzZTY0VG9TcHJpdGVGcmFtZSIsIl9iYXNlNjRUb1Nwcml0ZUZyYW1lIiwiX2NhbGxlZTUiLCJfY2FsbGVlNSQiLCJfY29udGV4dDUiLCJfeDYiLCJfY3JlYXRlQ2xhc3MiLCJfaW5zdGFuY2UiLCJBU3RhclJvYWRTZWVrZXIiLCJyb2FkTm9kZXMiLCJDT1NUX1NUUkFJR0hUIiwiQ09TVF9ESUFHT05BTCIsIm1heFN0ZXAiLCJfb3Blbkxpc3QiLCJfY2xvc2VMaXN0IiwiX2JpbmFyeVRyZWVOb2RlIiwiQmluYXJ5VHJlZU5vZGUiLCJfc3RhcnROb2RlIiwiX2N1cnJlbnROb2RlIiwiX3RhcmdldE5vZGUiLCJfcm9hZE5vZGVzIiwiX3JvdW5kMSIsIl9yb3VuZDIiLCJfcm91bmQiLCJoYW5kbGUiLCJfcGF0aE9wdGltaXplIiwiUGF0aE9wdGltaXplIiwiYmVzdCIsIl9wYXRoUXVhZFNlZWsiLCJQYXRoUXVhZFNlZWsiLCJwYXRoX2RpcmVfOCIsIl9pc1Bhc3NDYWxsQmFjayIsInNlZWtQYXRoIiwic3RhcnROb2RlIiwidGFyZ2V0Tm9kZSIsImlzUGFzc05vZGUiLCJnIiwicmVzZXRUcmVlIiwicmVmbGVzaFRhZyIsInN0ZXAiLCJzZWFyY2hSb3VuZE5vZGVzIiwiaXNUcmVlTnVsbCIsImdldE1pbkZOb2RlIiwiZ2V0UGF0aCIsInNldFJvYWROb2RlSW5DbG9zZUxpc3QiLCJzZWVrUGF0aDIiLCJuZXdNYXhTdGVwIiwiYWJzIiwiY3giLCJjeSIsImNsb3Nlc3ROb2RlIiwiaCIsInRlc3RTZWVrUGF0aFN0ZXAiLCJjYWxsYmFjayIsInRhcmdldCIsInRpbWUiLCJFcnJvciIsImlzQXJyaXZlQmV0d2VlblR3b05vZGVzIiwiZGlzWCIsImRpc1kiLCJkaXJYIiwiZGlyWSIsInJ4IiwicnkiLCJpbnROdW0iLCJkZWNpbWFsIiwicmF0ZSIsImN4MSIsImN5MSIsImN4MiIsImN5MiIsIm5vZGUxIiwiZ2V0Um9hZE5vZGUiLCJub2RlMiIsImlzQ3Jvc3NBdEFkamFjZW50Tm9kZXMiLCJjZWlsIiwic2V0TWF4U2Vla1N0ZXAiLCJzZXRQYXRoT3B0aW1pemUiLCJvcHRpbWl6ZSIsInNldFBhdGhRdWFkU2VlayIsInBhdGhRdWFkU2VlayIsInBhdGhfZGlyZV80Iiwic2V0Um9hZE5vZGVQYXNzQ29uZGl0aW9uIiwiaXNJbkNsb3NlTGlzdCIsImlzSW5Db3JuZXIiLCJzZXROb2RlRlZhbHVlIiwidW5zaGlmdCIsInBhcmVudCIsIm5vbmUiLCJwcmVOb2RlIiwibWlkTm9kZSIsIm5leHROb2RlIiwiYm9vbDEiLCJib29sMiIsImJvb2wzIiwiYmV0dGVyIiwib3B0aW1pemVOb2RlIiwib3B0aW1pemVMZW4iLCJpc0luT3Blbkxpc3QiLCJmIiwicmVtb3ZlVHJlZU5vZGUiLCJhZGRUcmVlTm9kZSIsInNldFJvYWROb2RlSW5PcGVuTGlzdCIsIkJhY2tncm91bmQiLCJfZGVjMiIsIlNwcml0ZUZyYW1lIiwiX2NsYXNzMiIsIl9pbml0aWFsaXplckRlZmluZVByb3BlcnR5IiwiX2Rlc2NyaXB0b3IiLCJfYXNzZXJ0VGhpc0luaXRpYWxpemVkIiwiaXRlbUFycmF5IiwiaGVpZ2h0IiwiY29uZmlnIiwicm93IiwiYmxvY2tIZWlnaHQiLCJ3aWR0aCIsImNvbCIsImJsb2NrV2lkdGgiLCJjcmVhdGVJdGVtIiwiTm9kZSIsInNwcml0ZSIsIlNwcml0ZSIsInNwcml0ZUZyYW1lIiwiaXRlbVNwcml0ZUZyYW1lIiwic2l6ZU1vZGUiLCJTaXplTW9kZSIsIkNVU1RPTSIsInNldFBvc2l0aW9uIiwiVUlUcmFuc2Zvcm0iLCJjb250ZW50U2l6ZSIsInNpemUiLCJvbkRlc3Ryb3kiLCJpdGVtcyIsImRlc3Ryb3kiLCJfYXBwbHlEZWNvcmF0ZWREZXNjcmlwdG9yIiwiY29uZmlndXJhYmxlIiwiZW51bWVyYWJsZSIsIndyaXRhYmxlIiwiaW5pdGlhbGl6ZXIiLCJfQmVoYXZpb3VyIiwicXVpY2tDbG9zZSIsImNhY2hlIiwiVmlld1NpbmdsZSIsIlVJaWQiLCJvbk9wZW5BbmlPdmVyIiwib25DbG9zZSIsIm9uVG9wIiwicHJlSUQiLCJCZWhhdmlvdXIiLCJ1aUluZGV4IiwidG9vbHRpcCIsImNvbGxpZGVyc18yRCIsImNvbGxpZGVyc18zRCIsIl90cmFuc2Zvcm0iLCJfZ2FtZU9iamVjdCIsIl91aVRyYW5zZm9ybSIsIl91aU9wYWNpdHkiLCJfYWxwaGEiLCJfb3BhY2l0eSIsImFkZENvbGxpZGVyRXZlbnRMaXN0ZW5lciIsImFkZDJEQ29sbGlkZXJFdmVudExpc3RlbmVyIiwiYWRkM0RDb2xsaWRlckV2ZW50TGlzdGVuZXIiLCJvblRyaWdnZXJFbnRlcjJEIiwic2VsZkNvbGxpZGVyIiwib3RoZXJDb2xsaWRlciIsImNvbnRhY3QiLCJvblRyaWdnZXJFeGl0MkQiLCJvbkNvbGxpc2lvbkVudGVyMkQiLCJvbkNvbGxpc2lvbkV4aXQyRCIsImdldENvbXBvbmVudHMiLCJDb2xsaWRlcjJEIiwiQ29udGFjdDJEVHlwZSIsIkJFR0lOX0NPTlRBQ1QiLCJFTkRfQ09OVEFDVCIsIm9uVHJpZ2dlckVudGVyIiwiZXZlbnQiLCJvblRyaWdnZXJTdGF5Iiwib25UcmlnZ2VyRXhpdCIsIm9uQ29sbGlzaW9uRW50ZXIiLCJvbkNvbGxpc2lvblN0YXkiLCJvbkNvbGxpc2lvbkV4aXQiLCJDb2xsaWRlciIsInJlbW92ZUFsbENvbGxpZGVyRXZlbnRMaXN0ZW5lciIsIm9mZiIsInBvc3Rpb2lvbiIsIlF1YWRUcmVlUmVjdCIsIlVJT3BhY2l0eSIsInVpVHJhbnNmb3JtIiwic2V0IiwidWlPcGFjaXR5Iiwib3BhY2l0eSIsInRyYW5zZm9ybSIsInBvcyIsInoiLCJ3b3JsZFBvc2l0aW9uIiwiQmV6aWVyUGFydCIsInN0YXJ0UCIsImNQMSIsImNQMiIsImVuZFAiLCJzdGFydFBvcyIsImNQb3MxIiwiY1BvczIiLCJlbmRQb3MiLCJsZW5naHQiLCJnZXRCZXppZXJMZW4iLCJmbiIsInQiLCJsIiwiY1AiLCJsYXN0UCIsInYxIiwidjQiLCJwb3ciLCJzZWVrVGFnIiwib3Blbk5vZGUiLCJyb2FkTm9kZSIsImhlYWQiLCJyaWdodCIsInRyZWVQYXJlbnQiLCJsZWZ0IiwibWluTm9kZSIsIm9wZW5UYWciLCJjbG9zZVRhZyIsImdldE9wZW5MaXN0Iiwib3Blbkxpc3QiLCJzZWFjaFRyZWUiLCJCbG9jayIsInBsYXlFZmYiLCJyZWplY2V0IiwicGxheSIsIkZJTklTSEVEIiwiQm9zcyIsIl9DaGFyYWN0ZXIiLCJwcm9ncmVzcyIsIl9jdXJyZW50SHAiLCJfbWF4SHAiLCJnZXRDaGlsZEJ5TmFtZSIsIlByb2dyZXNzQmFyIiwiaW5pdEVkaXREYXRhIiwiZWRpdERhdGEiLCJWZWMzIiwidXBkYXRlSHAiLCJocCIsImJsZWVkaW5nIiwic2NoZWR1bGVPbmNlIiwicmVtb3ZlRnJvbVBhcmVudCIsImdhbWVPdmVyIiwiZG9HYW1lT3ZlciIsIkNoYXJhY3RlciIsIkJ1bGxldCIsIl9kZWMzIiwiQ0NJbnRlZ2VyIiwiX2Rlc2NyaXB0b3IyIiwiZGlyZWN0aW9uMiIsIlpFUk8iLCJib2R5IiwiaGFybSIsInRhcmdldFBvc2l0aW9uIiwidG93ZXJMZXZlbCIsInRvd2VyIiwiZ2V0VmlzaWJsZVNpemUiLCJkdCIsInBhdXNlIiwiQnVsbGV0TWFuYWdlciIsInJhZGlhbiIsImF0YW4yIiwibm9ybWFsaXplIiwiYW5nbGUiLCJQSSIsImRpc3BsYWNlbWVudCIsIm11bHRpcGx5U2NhbGFyIiwic3BlZWQiLCJhZGQiLCJzaG9ydCIsImxldmVsIiwicGxheUJ1bGxldEFuaW1hdGlvbiIsInRvd2VyRGF0YSIsIm5hbWVzIiwibWFwIiwib25BbmltYXRpb25GaW5pc2hlZCIsIl9idWxsZXRQb29sIiwiYnVsbGV0TGlzdCIsInByZWZhYiIsInBvb2wiLCJOb2RlUG9vbCIsImJ1bGxldCIsIkNoYXJhY3RlclN0YXRlIiwiTGFiZWwiLCJfb2JqTmFtZSIsIl9za2VsZXRvbiIsIl9kaXJlY3Rpb24iLCJfc3RhdGUiLCJfbGFzdFJvYWROb2RlIiwibW92aW5nIiwibW92ZVNwZWVkIiwiX21vdmVBbmdsZSIsIl9yb2FkTm9kZUFyciIsIl9yb2FkTm9kZVZlYzIiLCJfbm9kZUluZGV4Iiwic3BlZWRYIiwic3BlZWRZIiwiZGlyZWN0aW9uWCIsImRpcmVjdGlvblkiLCJzY3JlZW5XaWR0aCIsInNjcmVlbkhlaWdodCIsInZpc2libGVTaXplIiwic3RhdGUiLCJpZGxlIiwibmV4dFZlYyIsInBvc1giLCJwb3NZIiwiZGlyZSIsInJvdW5kIiwieHNwZWVkIiwiY29zIiwieXNwZWVkIiwic2luIiwid2FsayIsInVwZGF0ZUNoYXJhdGVyU3RhdGVCeU5vZGUiLCJhbHBoYSIsIndhbGtCeVJvYWQiLCJyb2FkTm9kZUFyciIsIm5vZGVWZWMyQXJyYXkiLCJweCIsInB5Iiwid29sa0J5VmVjMiIsInZlYzJBcnJheSIsIm1vdmUiLCJuYXZUbyIsInRhcmdldFgiLCJ0YXJnZXRZIiwiUGF0aEZpbmRpbmdBZ2VudCIsIm5hbWVUeHQiLCJfdGhpcyRub2RlJGdldENoaWxkQnkiLCJzdHJpbmciLCJnZXRDb21wb25lbnRJbkNoaWxkcmVuIiwic2NhbGUiLCJza2VsZXRvbiIsInNjYWxlWCIsImdldFJvYWROb2RlQnlQaXhlbCIsInNjZW5lV2lkdGgiLCJzY2VuZUhlaWdodCIsIml0ZW1XaWR0aCIsIml0ZW1IZWlnaHQiLCJWZWMyIiwic2hhcGUxIiwic2hhcGUyIiwic2hhcGUzIiwic2hhcGU0Iiwic2hhcGU1Iiwic2hhcGU2Iiwic2hhcGU3IiwiQ29udGFpbmVycyIsIl9HYW1lT2JqZWN0IiwiY29udGFpbmVyTWFwIiwiZ2V0Q2hpbGRDb250YWluZXIiLCJoYXNLZXkiLCJjb250YWluZXIiLCJOb2RlRmFjdG9yeSIsImNyZWF0ZU5vZGUiLCJzZXRDb250YWluZXJzIiwiUk9MRV9MQVlFUiIsIkVudGl0eUxheWVyIiwiYWRkQ29udGFpbmVyIiwiZGVwdGgiLCJzZXRTaWJsaW5nSW5kZXgiLCJyZW1vdmVDb250YWluZXIiLCJyZW1vdmUiLCJyZW1vdmVDaGlsZCIsIkdhbWVPYmplY3QiLCJEZXN0cm95VXRpbHMiLCJvYmoiLCJrZXlOYW1lcyIsIkVkaXRPYmpEYXRhIiwib2JqSWQiLCJvYmpOYW1lIiwib2JqVHlwZSIsInNraW4iLCJwYXJhbXMiLCJFZGl0TnBjRGF0YSIsIl9FZGl0T2JqRGF0YSIsImlzUGF0cm9sIiwiZGlhbG9ndWVJZCIsInRhc2tJZCIsImZ1bmNJZCIsIm5wY1R5cGUiLCJFZGl0TW9uc3RlckRhdGEiLCJfRWRpdE9iakRhdGEyIiwiX2xlbjIiLCJfa2V5MiIsImZpZ2h0SWQiLCJtb25zdGVyVHlwZSIsIkVkaXRUcmFuc2ZlckRhdGEiLCJfRWRpdE9iakRhdGEzIiwiX2xlbjMiLCJfa2V5MyIsInRhcmdldE1hcElkIiwidGFyZ2V0TWFwU3Bhd25JZCIsInRyYW5zZmVyVHlwZSIsIkVkaXRTcGF3blBvaW50RGF0YSIsIl9FZGl0T2JqRGF0YTQiLCJfdGhpczQiLCJfbGVuNCIsIl9rZXk0Iiwic3Bhd25JZCIsImRlZmF1bHRTcGF3biIsIkVkaXRQbG90IiwiQ0NCb29sZWFuIiwiRWZmZWN0TWFuYWdlciIsIl9ub2RlUG9vbCIsIl9lZmZlY3RMYXllciIsImluaXRFZmZlY3RMYXllciIsImdldE5vZGUiLCJfZ2V0Tm9kZSIsInNob3dFZmZlY3QiLCJlZmZlY3ROYW1lcyIsInBsYXlDbGlwIiwiZmluZCIsIndyYXBNb2RlIiwiRW5lbXkiLCJwcmljZSIsImRhbWFnZSIsImRpZSIsInBvcEVuZW15Q291bnQiLCJyZW1vdmVFbmVteSIsIm5hdmlnYXRpb25CeVBhdGgiLCJwYXRocyIsIkVudGl0eSIsIl9Vbml0IiwibVNjZW5lIiwidXJsIiwicm9sZSIsImRpck1vZGUiLCJyb2xlU3BpbmUiLCJkaXN0IiwibW92ZUFuZ2xlIiwib2xkQW5nbGUiLCJvbGRNb3ZlQW5nbGUiLCJ4U3BlZWQiLCJ5U3BlZWQiLCJjaGFuZ2VEaXJCeUFuZ2xlIiwic2V0RGlyZWN0aW9uIiwiRmlnaHRVdGlsIiwiZ2V0RGlyZWN0aW9uQnlBbmdsZSIsIlNwaW5lU2tlbGV0b24iLCJzZXRTcGluZUlkIiwic3RvcEFjdGlvbiIsInNldEFjdGlvbiIsIm9wZXIiLCJpc0ZvcmNlIiwic2V0QW5pbWF0aW9uIiwiZ2V0Q3VycmVudEFjdGlvbiIsImN1cnJlbnRBbmltYXRpb24iLCJzZXRTcGluZUtleUZyYW1lSGFuZGxlciIsImtleUZyYW1lSGFuZGxlciIsImdldFNjYWxlIiwicmVhbHlzY2FsZVgiLCJnZXRTY2FsZVhCeURpcmVjdGlvbiIsInNldFNjYWxlIiwic2V0U3BlZWQiLCJnZXRTaXplIiwidGFyZ2V0TW92ZVBvaW50IiwiTW92ZSIsImdldExvY2F0aW9uIiwic3FydCIsIm9uTW92ZUVuZCIsInRvTW92ZSIsInNldFNwZWVkWFkiLCJlbmRTcGVlZCIsInRpY2tJbmRleCIsIm5ld1giLCJuZXdZIiwidXBkYXRlSGVhZFBvcyIsIlVuaXQiLCJFbnRpdHlJbmZvIiwiX25hbWUiLCJfZW50aXR5SWQiLCJvbmx5SWQiLCJ0eXBlIiwiaW5zSWQiLCJzZXRFbnRpdHlJZCIsImdldEVudGl0eUlkIiwidiIsInNvcnRaaW5kZXgiLCJhbGxFbnRpdHlOb2RlcyIsImNoaWxkcmVuIiwic2xpY2UiLCJlbnRpcnlDb3VudCIsIkl0ZW1Db2xvciIsIlRvdWNoRXZlbnQiLCJNdXNpY0V2ZW50IiwiTm9kZVVybCIsIlJQR01vZGVsQW5pbU5hbWUiLCJSUEdNb2RlbERpcmVjdGlvbiIsIk1hcFR5cGUiLCJNYXBMb2FkTW9kZWwiLCJNYXBJdGVtVHlwZSIsIkZhaXJ5QmlyZENvbnN0IiwiVEFHX0xBTkQiLCJUQUdfUElQRSIsIlRBR19DT0lOIiwiU1RBVEVfUkVBRElORyIsIlNUQVRFX0dBTUVJTkciLCJTVEFURV9HQU1FT1ZFUiIsIkZhaXJ5QmlyZEdhbWVNYW5nZXIiLCJfZGVjNCIsIl9kZWM1IiwiX2RlYzYiLCJfZGVjNyIsIl9jbGFzczMiLCJfZGVzY3JpcHRvcjMiLCJfZGVzY3JpcHRvcjQiLCJfZGVzY3JpcHRvcjUiLCJfZGVzY3JpcHRvcjYiLCJnYW1lU3RhdGUiLCJfcmVhZHlQb3NpdGlvbiIsIl9nb2xkIiwiX3NpbHZlciIsImJpcmQiLCJ0cmFuc2Zvcm1HYW1lU3RhdGUiLCJnYW1lUmVhZHlOb2RlIiwiZ2FtZU92ZXJOb2RlIiwic3RhcnRCdG4iLCJOb2RlRXZlbnRUeXBlIiwiVE9VQ0hfU1RBUlQiLCJvbkNsaWNrU3RhcnRCdG4iLCJvbkNsaWNrUmVTdGFydCIsImdvbGRMYWJlbCIsInNpbHZlckxhYmVsIiwiRmFpcnliaXJkTWFpblBhbmVsIiwic2VlZCIsImluaXRTZWVkIiwibG9nUmFuZG9tQXJyYXkiLCJzZWVkUmFuZG9tIiwiRmFpcnlCaXJkUGlwZSIsIlByZWZhYiIsImNvaW5Ob2RlIiwiaW5zdGFuY2VDb2luIiwiY29pbiIsInAyIiwiRmFpcnlCaXJkUGlwZU1hbmdlciIsInJlbGFzZVBpcGUiLCJfdGltZXIiLCJjcmF0ZVBpcGUiLCJwcmFmYWIiLCJwaXBlIiwiZ2V0V29ybGRQb3NpdGlvbiIsInJhbmRvbVJhbmdlSW50Iiwic2V0V29ybGRQb3NpdGlvbiIsIkZCaXJkIiwicmlnMmQiLCJyb3RhdGVTcGVlZCIsIlJpZ2lkQm9keTJEIiwiaW5wdXQiLCJJbnB1dCIsIm9uVG91Y2hTdGFydCIsImxpbmVhclZlbG9jaXR5IiwiZW5hYmxlZCIsInRhZyIsImZjb2luIiwiRkNvaW4iLCJnb2xkIiwic2lsdmVyIiwiRkJNb3ZlQmciLCJtb3ZlRGlzdGFuY2UiLCJwMSIsIm9iajEiLCJvYmoyIiwic3ByaXRlRnJhbWVzIiwiX2hlcm9NYXAiLCJfc2tpbHNNYXAiLCJfZ2FtZUNvbmZpZ09iaiIsInNraWxsQ29uZmlnIiwic2tpbGxJZCIsImdldFNraWxsQ29uZmlncyIsImdldFNraWxsQ29uZmlnIiwiZ2V0SGVyb0NvbmZpZ3MiLCJnZXRIZXJvQ29uZmlnIiwiX0VudGl0eUluZm8iLCJub3JtYWxNYXhIcCIsIm1wIiwibWF4TXAiLCJzaGllbGQiLCJzaGllbGRNYXgiLCJmaWdodFNraWxscyIsIm1heEhwIiwiRmlnaHRTa2lsbEdyb3VwSW5mbyIsInNraWxsSWRzIiwic2tpbGxJbmZvcyIsInNraWxsQ29uZmlnVm8iLCJza2lsbEluZm8iLCJGaWdodFNraWxsSW5mbyIsImFkZE1wIiwidXNlTXAiLCJpc0VuZCIsImZpZ2h0VGltZSIsImVudGl0eXMiLCJkaWVFbnRpdHlzIiwiZmlnaHRFbmQiLCJsb2dSYW5kb21BcnIiLCJyZXNSYW5kb21TZWVkIiwiciIsInJhbmRvbUludCIsInN0cGVMZW4iLCJ0ZW1wIiwiZGVsdGFSYW5nZSIsInJhbmRvbU51bSIsImlzUmFuZFRydWUiLCJyYW5kb21Qcm9iYWJpbGl0eSIsInN1bSIsInJhbmRvbUFycmF5IiwiY2xvbmVBcnJheSIsImxlbmciLCJpc1JlbW92ZVRpbWUiLCJyZW1vdmVFbnRpdHkiLCJnZXRFbnRpdHlzIiwiZW50aXR5VG9EaWUiLCJhZGREaWVFbnRpdHkiLCJkb0FjdGl2ZVNraWxsU3RvcEhhbmRsZXIiLCJlbmVteU51bSIsImhlcm9OdW0iLCJpc011c3RBY3RpdmVTa2lsbCIsImNoZWNrTmV4dEZyYW1lIiwiY2hlY2siLCJzZXRJc1dpbiIsImdldENhblNlbGVjdEVudGl0eXMiLCJyZXN1bHRzIiwiY2hlY2tFbnRpdHlzIiwiY2FuU2VsZWN0IiwiZmluZE1haW5FbnRpdHkiLCJmcm9tIiwidGFyZ2V0VHlwZSIsImlzUGFpY2h1Tm90U2VsZWN0IiwiZmluZEluZm8iLCJGaW5kVGFyZ2V0SW5mbyIsImVuZW15cyIsImZvcm0iLCJpc1BhaUNodU5vdFNlbGVjdCIsIk1haW5fSnVMaVp1aUppbiIsImZpbmRMYXRlbHlPckZhckVudGl0eSIsIk1haW5fSnVMaVp1aVl1YW4iLCJNYWluX1h1ZUJhaUZlblp1aURpIiwiZmluZExvd0hwRW50aXR5IiwiTWFpbl9YdWVCYWlGZW5adWlHYW8iLCJNYWluX0NodVNoaUR1aUNoZW5nV2VpWmhpIiwiZmluZER1aUNoZW5FbnRpdHkiLCJNYWluX0RhbmdRaWFuTXVCaWFvIiwiZmluZEVudGl0eSIsInRhcmdldFR5cGVzIiwibnVtIiwiSnVMaVp1aUppbiIsIkp1TGladWlZdWFuIiwiU3VpSmlCdUtlQ2hvbmdGdSIsImZpbmRSYW5kb21FbnRpdHkiLCJTdWlKaUtlQ2hvbmdGdSIsIkNodVNoaUR1aUNoZW5nV2VpWmhpIiwiWHVlWnVpRGkiLCJYdWVadWlHYW8iLCJfUm9sZUVudGl0eSIsImlzQUkiLCJpc0RpZSIsImlzRmlnaHQiLCJzZWxlY3RUYXJnZXRzIiwic2VsZWN0TWFpblRhcmdldCIsImlzVXNlQ3RyU2tpbGwiLCJoZWFkQmFyIiwiYm91bmRzIiwieXkiLCJfaW5pdEhlYWRCYXIiLCJIZWFkQmFyIiwiUk9MRV9OQU1FX0xBWUVSIiwidXBkYXRlSGVhZEluZm8iLCJzZXROYW1lIiwiX3NldERhdGEiLCJuZXh0Um9sZUZyYW1lIiwibmV4dFBsYXllckZyYW1lIiwibmV4dEZyYW1lIiwiY2hlY2tTa2lsbCIsImNoZWNrU2VsZWN0VGFyZ2V0IiwiYXR0YWNrIiwiY2FuQXR0YWNrIiwib25Ob3RTZWxlY3RUYXJnZXQiLCJvbkhhc1NlbGVjdFRhcmdldCIsInRhcmdldHMiLCJjZmciLCJNaUppIiwiZ2V0U2tpbGxCeUluZGV4IiwiTWF4TXAiLCJ0ZW1wVGFyZ2V0cyIsIkRhbmdRaWFuTXVCaWFvIiwib25TZWxlY3RUYXJnZXROdWxsIiwidXNlU2tpbGwiLCJjaGVja1NraWxsTWFpblRhcmdldCIsImNsZWFyTWFpblRhcmdldCIsImNhbkNoZWNrQW5nZXJTa2lsbCIsImNhblVzZUFuZ2VyU2tpbGwiLCJjYW5Nb3ZlIiwic2VsZWN0QW5nZXJTa2lsbCIsImNoZWNrQWlUb0N0ckFuZ2VyU2tpbGwiLCJzZWxlY3RBbmdlckNoZWNrU2VsZWN0VGFyZ2V0IiwiY2hlY2tQYXNzU2tpbGxCeVNraWxsQ2hlY2siLCJzZWxlY3RTa2lsbCIsImNoZWNrQXR0YWNrIiwiaXNJZ25vcmVEaXMiLCJ0YXJnZXRQb3MiLCJmb3JtUG9zIiwiZ2V0VGFyZ2V0UG9pbnRCeURpcyIsImdldEFuZ2xlQnlWZWMiLCJTa2lsbF9BY3RpdmUiLCJ1cGRhdGVNcCIsInN0YXJ0QXR0YWNrQWN0aW9uIiwiZ2V0VGVuVGhvdXNhbmRQbGFjZVZhbHVlIiwiaXNGaW5pdGUiLCJ0ZW5UaG91c2FuZFBsYWNlVmFsdWUiLCJfc3RhcnRBdHRhY2tBY3Rpb24iLCJmaWdodFN0YXJ0IiwiSGFuZGxlciIsIm9uU3BpbmVLZXlGcmFtZSIsIkF0dGFjayIsIlVsdGltYXRlc2tpbGwiLCJodXJ0IiwicmVjb3ZlcnkiLCJyZWNvdmV5QW5nZXIiLCJlbnRyeSIsImh1cnRWYWx1ZSIsIndpbiIsIldpbiIsIl9kaWUiLCJEZWF0aCIsIlJvbGVFbnRpdHkiLCJhY3RpdmVTa2lsbEluZGV4Iiwic2tpbGxNYXAiLCJjZEFycmF5IiwiY2RNYXhBcnJheSIsImNkSW5pdE1heEFycmF5Iiwic2tpbGwiLCJmaXJzdENkIiwiY2QiLCJnZXRTa2lsbEJ5U2tpbGxJZCIsInNraWxsU29ydCIsImNoZWNrRnVuIiwic2siLCJza0luZm8iLCJleGVjdXRlIiwiU2tpbGxfQXV0byIsInNraWxsVHlwZSIsImNob3NlU2tpbGwiLCJpc0ZpcnN0IiwidGVtcFNraWxsSW5mbyIsImlzU2tpbGxDRCIsInVzZUFuZ2VyU2tpbGwiLCJkaXMiLCJ0cnVlRGlzIiwiZTEiLCJlMiIsInR4IiwidHkiLCJnZXRTY2VuY2VSYW5kb21Qb3NpdGlvbiIsImhhbGZXaWR0aCIsImhhbGZIZWlnaHQiLCJfZGlyIiwiUyIsIkVTIiwiRSIsIk5FIiwiTiIsIldOIiwiVyIsIlNXIiwiUklHSFRfVVAiLCJSSUdIVF9ET1dOIiwiY2hlY2tTZWR1Y2UiLCJlbiIsImlzTGF0ZWx5IiwiZmluZERhdGEiLCJlbnMiLCJpc1BhaUNodSIsIm9sZFR5cGUiLCJyciIsInRhclBvcyIsImVuUG9zIiwiaXNSZXBlYXQiLCJkZCIsImlzTG93IiwiaXNQZXJjZW50Iiwiam9iIiwiZ3VpbGQiLCJHYW1lMjA0OCIsImdyaWQiLCJzdGFydFRpbGVzIiwiX2lucyIsIlVQIiwiRGlyZWN0aW9uVHlwZSIsIkRPV04iLCJjb25maWcyMDQ4IiwiR3JpZCIsInNldHVwIiwiYWRkU3RhcnRUaWxlcyIsImluaXROb2RlIiwicmVuZGVyIiwicHJpbnRHcmlkIiwiZ2V0VmVjdG9yIiwiX21hcCIsImJ1aWxkVHJhdmVyc2FscyIsInZlY3RvciIsInRyYXZlcnNhbHMiLCJyZXZlcnNlIiwiZmluZEZhcnRoZXN0UG9pbnQiLCJjZWxsIiwicHJldmlvdXMiLCJ3aXRoaW5Cb3VuZHMiLCJjaGVja0NlbGxBdmFpbGFibGUiLCJmYXJ0aGVzdCIsInByZXBhcmVUaWxlcyIsImZvcmVhY2hDZWxsIiwidGlsZSIsIm1lZ3JlRnJvbSIsInNhdmVQb3NpdGlvbiIsImFkZFJhbmRvbVRpbGUiLCJjaGVja0NlbGxzQXZhaWxhYmxlIiwiY3JlYXRlVGlsZSIsInJhbmRvbUF2YWlsYWJsZUNlbGwiLCJpbnNlcnRUaWxlIiwibmV4dFBvcyIsIl9tYXAyIiwiZ2V0Q2VsbFZhbHVlIiwibmV4dE5vblpvcmUiLCJjZWxsUG9zIiwiY2FsZSIsImNlbGxWYWx1ZSIsImNlbGxUaWxlIiwiZ2V0Q2VsbENvbnRlbnQiLCJuZXh0VGlsZSIsIm1lcmdlZFRpbGUiLCJyZW1vdmVUaWxlIiwicG9zaXRpb25zRXF1YWwiLCJmaXJzdCIsInNlY29uZCIsIlRpbGUiLCJzZXJpYWxpemUiLCJ3aW5kb3ciLCJ0aWxlV2lkdGgiLCJ0aWxlSGlnaHQiLCJHYW1lQ2FtZXJhIiwidmlld1BvcnROb2RlIiwibWFwTm9kZSIsInJvbGVOb2RlIiwieFJhbmdlIiwieVJhbmdlIiwibGFzdFgiLCJsYXN0WSIsInZpZXdQb3J0VUlUcnMiLCJtYXBVSVRycyIsInVwZGF0ZVBvc2l0aW9uIiwiZGlzdFgiLCJkaXN0WSIsIlNraWxsIiwiQmVIaXQiLCJMRUZUX0RPV04iLCJMRUZUX1VQIiwiQkdfTEFZRVIiLCJNQVBfQm90dG9tX1JvbGVfTEFZRVIiLCJNQVBfTEFZRVIiLCJERUNPUkFURV9MQVlFUiIsIk1BUF9TSEFET1dfTEFZRVIiLCJNQVBfTUFHSUNfTEFZRVIiLCJNQVBfRUZGRUNUX0xBWUVSIiwiTUFQX0RST1BfTEFZRVIiLCJFRkZFQ1RfQm90dG9tX0xBWUVSIiwiRUZGRUNUX1RPUF9MQVlFUiIsIkVGRkVDVF9MQVlFUiIsIkhJVF9FRkZFQ1RfTEFZRVIiLCJIVVJUX0VGRkVDVF9MQVlFUiIsIkNFTlRFUl9MQVlFUiIsIlRPUF9MQVlFUiIsIlF1YW5UaSIsIlpoYW5MaVp1aUdhbyIsIkdvbmdKaVp1aUdhbyIsIlh1ZUJhaUZlblp1aURpIiwiWHVlQmFpRmVuWnVpR2FvIiwiWnVpS2FvUWlhbiIsIlp1aUthb0hvdSIsIlFpYW5QYWkiLCJIb3VQYWkiLCJGYW5nWXVEaSIsIlpoaURpbmdZaW5nWGlvbmciLCJGb250Tm90RHVuIiwiQnVmZiIsIkdvbmdKaUxlaVhpbmciLCJKaWFvRHVadWlYaWFvIiwiSm9iIiwiWmhpRGluZ1poZW5ZaW5nIiwiWmlqaSIsIldlaVhpZVp1aURhIiwiWnVpS2FvSmluV29GYW5nSG91UGFpIiwiQnVmZk9yRmFuZ1l1RGkiLCJaaGlEaW5nUXVZdSIsIlpoZW5ZaW5nR29uZ0ppTGladWlHYW8iLCJCYW9KaUx2WnVpR2FvIiwiU2tpbGxfUGFzc2l2ZSIsIlNraWxsX1Bhc3NpdmVUb0FjdGl2ZSIsIlNraWxsX0dvZFdlYXBvbiIsIlNraWxsX1NoZW5nTG9uZyIsIkFjdGlvbl9PcHJlX09uZSIsIkFjdGlvbl9PcHJlX1F1YXVlIiwiR2FtZUVsZW1lbnQiLCJfeSIsIl93aWR0aCIsIl9oZWlnaHQiLCJuYW1lTGFiZWwiLCJteXNlbGYiLCJVcGRhdGVQb2ludCIsImZpbmFsIiwibmV3UHMiLCJJbml0RGlyIiwicmFuZG9tSW5zaWRlVW5pdENpcmNsZSIsIkluaXQiLCJpc015c2VsZiIsIkJMQUNLIiwicmFkaXVzIiwiQ2xpY2siLCJXSElURSIsIkdhbWVFbnRpdHkiLCJfRW50aXR5IiwibWF4SW5kZXgiLCJlbnRpdHlJbmZvIiwib2xkTW92ZVgiLCJvbGRNb3ZlWSIsIkdhbWVNYW5hZ2VyIiwiZGlyZWN0b3IiLCJhZGRQZXJzaXN0Um9vdE5vZGUiLCJnZXRQbGF5ZXIiLCJwbGF5ZXJQcmVmYWIiLCJwbGF5ZXIiLCJQbGF5ZXIiLCJnZXROUEMiLCJucGMiLCJucGNQcmVmYWIiLCJOcGMiLCJnZXRNb25zdGVyIiwibW9uc3RlciIsIm1vbnN0ZXJQcmVmYWIiLCJNb25zdGVyIiwiZ2V0U3Bhd25Qb2ludCIsInNwYXduUG9pbnQiLCJzcGF3blBvaW50UHJlZmFiIiwiU3Bhd25Qb2ludCIsImdldFRyYW5zZmVyRG9vciIsInRyYW5zZmVyRG9vclByZWZhYnMiLCJ0cmFuc2ZlckRvb3IiLCJUcmFuc2ZlckRvb3IiLCJfTm9kZSIsInNldEFjdGl2ZSIsIkZpbmQiLCJjdXJyZW50U2NlbmUiLCJnZXRTY2VuZSIsInNlYXJjaENoaWxkQnlOYW1lIiwic2VhcmNoTm9kZSIsIkZpbmRPYmplY3RPZlR5cGUiLCJGaW5kT2JqZWN0c09mVHlwZSIsImdldENvbXBvbmVudHNJbkNoaWxkcmVuIiwiZ2FtZU9iamVjdCIsIkdhbWVPdmVyT3JXaW4iLCJiZyIsInRyeUJ0biIsIm5leHRCdG4iLCJsb3NlIiwic3ByaXRlZnJhbWUiLCJfYXJncyIsInRleHR1cmUiLCJvbkNsaWNrVHJ5QWdhaW4iLCJvbkNsaWNrTmV4dCIsInJlc3RhcnQiLCJUb3dlclNjZW5lTWFwIiwic2V0TWFwSWQiLCJfU2NlbmUiLCJTY2VuZSIsImNlbGxzIiwiY2VsbE5vZGVBcnJheSIsImVtcHR5IiwiX2luaXROb2RlIiwiYXZhaWxhYmxlQ2VsbHMiLCJjYWxsQmFjayIsImNoZWNrQ2VsbE9jY3VwaWVkIiwicG9zaXRpb25YIiwicG9zaXRpb25ZIiwid2FybiIsImNlbGxTdGF0ZSIsInN0ciIsImxpbmVWYWx1ZXMiLCJqb2luIiwic2V0Tm9kZVZhbHVlIiwiX2NyZWF0ZU5vZGUiLCJsYWJsZU5vZGUiLCJzcE5vZGUiLCJzZXRDb250ZW50U2l6ZSIsImZ1biIsInRoaXNPYmoiLCJwYXJhbSIsInBhcmFtTGlzdCIsImluUG9vbCIsImF1dG9SZWxlYXNlIiwiYXV0b1JlbGVzZWEiLCJQb29sIiwicmVsZXNlYSIsImlzRGVzdHJveSIsIl9sZW5ndGgiLCJnZXRDb250YWluZXIiLCJvIiwiaXNFbXB0eSIsImhhc1ZhbHVlIiwia2V5cyIsImFyeSIsIm51bUtleXMiLCJmb3JFYWNoIiwiaHBQcm8iLCJtcFBybyIsIkhlcm9Db25maWdWbyIsIkpveXN0aWNrIiwiaXNEcmFnZ2luZyIsImRyYWdPZmZzZXQiLCJzdGFydFRvdWNoUG9zIiwiY2VudGVyUG9zaXRpb24iLCJqb3lzdGlja1JhZGl1cyIsImN1cnJlbnREaXJlY3Rpb24iLCJkcmF3QmciLCJkcmF3QmFyIiwiYmFyIiwib25Nb3VzZURvd24iLCJUT1VDSF9NT1ZFIiwib25Nb3VzZU1vdmUiLCJUT1VDSF9FTkQiLCJvbk1vdXNlVXAiLCJUT1VDSF9DQU5DRUwiLCJsb2NhdGlvbkluTm9kZSIsInVwZGF0ZUpveXN0aWNrUG9zaXRpb24iLCJ0b3VjaFBvcyIsImRlbHRhWCIsImRlbHRhWSIsImJhclBvc2l0aW9uIiwiTGF5ZXJNYW5hZ2VyIiwicm9vdCIsImluaXRlZCIsImxheWVycyIsInJvb3RUciIsImVuZCIsImNyZWF0ZUxheWVyIiwidWlUciIsIndpZGdldCIsIldpZGdldCIsInRvcCIsImJvdHRvbSIsInVwZGF0ZUFsaWdubWVudCIsImdldExheWVyIiwiTWFpbiIsImRhdGFBcnJheSIsImVsaW1pbmF0ZVZlYzJzIiwiY3VycmVudFNoYXBlIiwiY2VudGVyIiwiTlVMTCIsImlzT3BlbiIsInNjb3JlIiwic2NvcmVMYWJlbCIsInBhdXNlQnRuIiwicmVzdGFydEJ0biIsIl9pc1BhdXNlIiwiZmluZENoaWxkIiwiY2hpbGRzIiwiY0Jsb2NrV2lkdGgiLCJjQmxvY2tIaWdodCIsImxhYmVsTm9kZSIsInNob3dFbmRQYW5lbCIsInVwZGF0ZVNjb3JlIiwib25DbGlja1BhdXNlIiwib25DbGlja1Jlc3RhcnQiLCJLRVlfRE9XTiIsIm9uS2V5RG93biIsImdhbWVTdGFydCIsImlzUGF1c2UiLCJlbmRQYW5lbCIsImtleUNvZGUiLCJLZXlDb2RlIiwiQVJST1dfTEVGVCIsImNoYW5nZUN1cnJlbnRTaGFwZVBvcyIsIkFSUk9XX1JJR0hUIiwiQVJST1dfRE9XTiIsImZhc3REb3duIiwiQVJST1dfVVAiLCJjaGFuZ2VDdXJyZW50U2hhcGVJbmRleCIsInN0YXJ0UGFuZWwiLCJSZW5kZXIiLCJpbml0RGF0YSIsInJhbmRvbU9uZVNoYXBlIiwiZ2V0UmFuZG9tIiwiY2xlYXJDdXJyZW50RGF0YSIsImNoZWNrQ3VycmVudFNoYXBlRGF0YSIsInNldEN1cnJlbnREYXRhIiwiX2Zhc3REb3duIiwiY2hlY2tMaW5lcyIsImdldEN1cnJlbnRTaGFwZUluZGV4RGF0YSIsInNoYXBlIiwic2hhcGVEYXRhIiwic2hhcGVEYXRhcyIsImVsZSIsImRhdGFzIiwic2hhcGVJbmRleERhdGFzIiwiYXV0b0Rvd24iLCJfYXV0b0Rvd24iLCJfY2hlY2tMaW5lcyIsImlzRnVsbCIsInBsYXlFbGltaW5hdGVFZmYiLCJwcmludERhdGFBcnJheSIsImNvbHMiLCJNYWluUGFuZWwiLCJfQmFzZVZpZXckcHJvdG90eXBlJG8iLCJfQmFzZVZpZXckcHJvdG90eXBlJGkiLCJvbkNsaWNrTm9kZSIsInNwcyIsInNwbGl0IiwiVG93ZXJHYW1lU2NlbmUiLCJNYWluVGVzdCIsImdhbWVDYW1lcmEiLCJyb2xlU3BlZWQiLCJrZXlDYWNoZSIsInNjZW5jZU1hcCIsIlNjZW5jZU1hcCIsInNldEtleUNvZGVDYWNoZSIsIm9uS2V5VXAiLCJpc0tlZXBEb3duIiwidXBkYXRlUm9sZU1vdmUiLCJyb2xlVUlUcmFuc2Zvcm0iLCJyb2xlU2NhbGUiLCJtYXBVSVRyYW5zZm9ybSIsImJ4IiwiYnkiLCJNYXBEYXRhIiwiYmdOYW1lIiwibWFwV2lkdGgiLCJtYXBIZWlnaHQiLCJub2RlV2lkdGgiLCJub2RlSGVpZ2h0IiwiYWxpZ25tZW50Iiwib2Zmc2V0WCIsIm9mZnNldFkiLCJyb2FkRGF0YUFyciIsIm1hcEl0ZW1zIiwiTWFwTGF5ZXIiLCJfbWFwUGFyYW1zIiwibWFwUGFyYW1zIiwiYmdJbWciLCJiZ05vZGUiLCJSQVciLCJhbmNob3JYIiwiYW5jaG9yWSIsImJnVGV4Iiwidmlld1dpZHRoIiwidmlld0hlaWdodCIsIk1hcFBhcmFtcyIsIm1hcFR5cGUiLCJBbmdsZTQ1IiwiY2VpbFdpZHRoIiwiY2VpbEhlaWdodCIsInNsaWNlV2lkdGgiLCJzbGljZUhlaWdodCIsIm1hcExvYWRNb2RlbCIsInNpbmdsZSIsIk1hcFJvYWQ0NUFuZ2xlIiwiaGFsZk5vZGVXaWR0aCIsImhhbGZOb2RlSGVpZ2h0IiwiX3JvdyIsIl9jb2wiLCJfbm9kZVdpZHRoIiwiX25vZGVIZWlnaHQiLCJfaGFsZk5vZGVXaWR0aCIsIl9oYWxmTm9kZUhlaWdodCIsImdldE5vZGVCeVBpeGVsIiwid1BvaW50IiwiZ2V0V29ybGRQb2ludEJ5UGl4ZWwiLCJmUG9pbnQiLCJnZXRQaXhlbEJ5V29ybGRQb2ludCIsImRQb2ludCIsImdldERlcmVjdEJ5UGl4ZWwiLCJSb2FkTm9kZSIsImdldE5vZGVCeURlcmVjdCIsImdldFBpeGVsQnlEZXJlY3QiLCJnZXROb2RlQnlXb3JsZFBvaW50Iiwid29ybGRQb2ludCIsInBpeGVsUG9pbnQiLCJnZXREZXJlY3RCeVdvcmxkUG9pbnQiLCJNYXBSb2FkOTBBbmdsZSIsIk1hcFJvYWRVdGlscyIsIl9tYXBXaWR0aCIsIl9tYXBIZWlnaHQiLCJfbWFwVHlwZSIsIl9tYXBSb2FkIiwidXBkYXRlTWFwSW5mbyIsIkFuZ2xlOTAiLCJNYXRoVXRpbHMiLCJjcmVhdGVCZXppZXJQb2ludHMiLCJhbmNob3JzIiwicG9pbnRzIiwiY2FjdWxhdGVCZXppZXJQb2ludCIsInJlcyIsImNvbWJpbmF0aW9uIiwibiIsIm0iLCJuRmFjdG9yaWFsIiwibUZhY3RvcmlhbCIsIlJhZGlhblRvQW5nbGUiLCJBbmdsZVRvUmFkaWFuIiwibW9uc3RlcklkIiwiZGVmYXVsdERpciIsIm5wY0lkIiwiX21hcERhdGEiLCJfcm9hZERpYyIsIl9yb2FkU2Vla2VyIiwibWFwRGF0YSIsImxlbjIiLCJ1cGRhdGVSb2FkU2Vla2VySW5mbyIsInBhdGhPcHRpbWl6ZSIsInNldFJvYWRTZWVrZXJQYXNzQ29uZGl0aW9uIiwic3RhcnRWMiIsInRhcmdldFYyIiwicm9hZE5vZGVBcnJheSIsInNpdGRvd24iLCJzaXRkb3duX3dhbGsiLCJjbGF6eiIsIm1heElkbGUiLCJoYXNTdGF0dXMiLCIkY2xhenoiLCIkaWRsZXMiLCIkbWF4SWRsZSIsIiRoYXNTdGF0dXMiLCIkdGVtcE9iaiIsImdldE51bUlkbGUiLCJBbmNob3JQb2ludFR5cGUiLCJjb250YWlucyIsImFuY2hvclR5cGUiLCJDZW50ZXIiLCJjb250YWluIiwiTGVmdERvd24iLCJBTGVmdCIsIkFSaWdodCIsIkFCb3R0b20iLCJBVG9wIiwiQkxlZnQiLCJCUmlnaHQiLCJCQm90dG9tIiwiQlRvcCIsImludGVyc2VjdHMiLCJpbnRlcnNlY3QiLCJob3Jpem9udGFsT3ZlcmxhcCIsInZlcnRpY2FsT3ZlcmxhcCIsImdldElzSW5SYW5nZSIsImN1clBvcyIsIlF1YWRUcmVlIiwicmVjdCIsIm1heENvdW50IiwibWF4RGVwdGgiLCJhbmNob3JQb2ludFR5cGUiLCJvYmplY3RzIiwiZGl2aWRlZCIsIk1BWF9DT1VOVCIsIk1BWF9ERVBUSCIsIl9wcm90bzIiLCJpbnNlcnQiLCJvYmplY3QiLCJkaXZpZGUiLCJfaXRlcmF0b3IiLCJfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlckxvb3NlIiwiX3N0ZXAiLCJkb25lIiwiY2hpbGQiLCJnZXRUYXJnZXRJbmRleCIsIlgiLCJZIiwibWluX3giLCJtaW5feSIsIm1heF94IiwibWF4X3kiLCJpZHgiLCJJc0xlZnQiLCJJc1JpZ2h0IiwiSXNCb3R0b20iLCJJc1RvcCIsIl90aGlzJHJlY3QiLCJoYWxmMldpZHRoIiwiaGFsZjJIZWlnaHQiLCJxdWVyeSIsInJhbmdlIiwiZm91bmQiLCJfaXRlcmF0b3IyIiwiX3N0ZXAyIiwiX2l0ZXJhdG9yMyIsIl9zdGVwMyIsInF1ZXJ5SW5SYW5nZSIsIl9pdGVyYXRvcjQiLCJfc3RlcDQiLCJfaXRlcmF0b3I1IiwiX3N0ZXA1IiwiZ2V0QWxsQ2hpbGROb2RlcyIsInF0TGlzdCIsImlzUmVtb3ZlIiwiUXVhZFRyZWVUZXN0IiwicXVhZFRyZWUiLCJlbGVMaXN0IiwiSXNTaG93IiwiY2xpY2tMaXN0IiwiaWRJbmRleCIsImdldFZpZXdwb3J0UmVjdCIsIm15RWxlbWVudCIsIkNyZWF0ZUVsZW1udCIsIk1PVVNFX0RPV04iLCJkcmF3U2l6ZSIsInN0cm9rZSIsImdldExvY2F0aW9uWCIsImdldExvY2F0aW9uWSIsIlRyZWVVcGRhdGUiLCJyZWN0cyIsImRyYXdSZWN0IiwiWUVMTE9XIiwiZWxlbWVudFByZWZhYiIsImdhbWVFbGVtZW50IiwiUmVtb3ZlT3JVcExldmVsIiwidXBDb3N0TGFiZWwiLCJ1cENvc3RTcHJpdGUiLCJyZW1vdmVCYWNrTGFiZWwiLCJidWlsZEluZm8iLCJpc01heExldmVsIiwiaGFuZGxlckNhbGwiLCJoYW5kbGVyT2JqIiwidXBDb3N0Tm9kZSIsInJlbW92ZUJhY2tOb2RlIiwidXBOb2RlIiwicmVtb3ZlTm9kZSIsIm9uQ2xpY2tVcExldmVsIiwib25DbGlja1JlbW92ZVRvd2VyIiwidXBkYXRlSW5mbyIsImNhbGxPYmoiLCJzcHJpdGVGcmFtZUluZGV4IiwiY3VycmVudExldmVsIiwibmV4dExldmVsRGF0YSIsIlRvd2VyQ29uZmlnIiwiZ2V0VG93ZXJDb25maWciLCJ0b3dlcklkIiwiYnVpbGRDb3N0IiwidXBTdGF0ZVNwcml0ZUZyYW1lcyIsInRvU3RyaW5nIiwiY3VycmVudERhdGEiLCJyZW1vdmVCYWNrIiwicmVtb3ZlQmFja0Nvc3QiLCJ1cExldmVsQ29zdCIsImJhY2tHcm91bmRBcnJheSIsInBhbmVsSGVpZ2h0IiwiZGlmZkgiLCJiYWNrSXRlbSIsImNyZWF0ZUJhY2tHcm91bmRJdGVtIiwiYmFja0dyb3VuZEl0ZW1TcHJpdGVGcmFtZSIsImdhbWVQYW5lbCIsImVsZW1lbnRzIiwiZWxpbWluYXRlVmVjMiIsImJsb2NrIiwiX3B4IiwiX3B5IiwiX2N4IiwiX2N5IiwiX2R4IiwiX2R5IiwiX3ZhbHVlIiwiX2YiLCJfZyIsIl9oIiwiX3BhcmVudCIsIl90cmVlUGFyZW50IiwiX2xlZnQiLCJfcmlnaHQiLCJfb3BlblRhZyIsIl9jbG9zZVRhZyIsIl9HYW1lRW50aXR5Iiwic2NhbGVTaXplIiwic3RhdHVzIiwic2V0SWQiLCJzZXRMYXllciIsInByb2dyZXNzTm9kZSIsIm1vZGVsRGF0YSIsImRpcmV0aW9uIiwiY3VycmVudERpcmV0aW9uIiwicGxheUFuaW1hdGlvbiIsImRyIiwiZHJhZ29uQm9uZXMiLCJBcm1hdHVyZURpc3BsYXkiLCJhZGRFdmVudExpc3RlbmVyIiwiRXZlbnRPYmplY3QiLCJDT01QTEVURSIsInNldE1vZGVEYXRhIiwiTGVmdCIsIlJpZ2h0Iiwic2V0SHAiLCJyb3RhdGlvbkRpcmV0aW9uIiwibmV3RGlyZXRpb24iLCJzYWNsZVgiLCJzZXRDb2xvciIsIlJQR0NvbmZpZyIsImlucyIsImNvbG9ycyIsIlJQR1N0YXRlVHlwZSIsImxlZnREYXRhcyIsInJpZ2h0RGF0YXMiLCJkZWYiLCJfaW5zdCIsIlJQR0xhdW5jaGVyIiwibWluTnVtIiwibWF4TnVtIiwic3RlcExlbiIsIm5UZW1wIiwibkRlbHRhUmFuZ2UiLCJuUmFuZG9tTnVtYmVyIiwiUlBHUGFuZWwiLCJvcmRlckluZGV4Iiwib3JkZXJBcnJhcnkiLCJsZWZ0RmlnaHRNb2RlbHMiLCJyaWdodEZpZ2h0TW9kZWxzIiwidGFyZ2V0SW5kZXgiLCJpbml0TW9kZWxEYXRhIiwiaW5pdE1vZGVsIiwibmV4dEF0dGFjayIsInJpZ2h0RGF0YSIsImNvcHlEYXRhIiwiQXdhaXQiLCJjb3B5UmlnaHREYXRhIiwiX2luaXRNb2RlbCIsImNyZWF0ZU1vZGUiLCJfY3JlYXRlTW9kZSIsImN0ciIsIklkZWwiLCJnZXRPcmRlckFycmFyeUJ5Q2FtcCIsImdldE9yZGVyRGF0YUJ5SW5kZXgiLCJzZXRNb2RlbFN0YXRlIiwidGFyZ2V0Q2FtcCIsImNhbXBMaXN0IiwidGFyZ2V0T2JqIiwidGFyZ2V0RGF0YSIsInZhbHVlMSIsIm1vZGVsIiwiZ2V0VGFyZ2V0TW9kZWwiLCJhdHRhY2tlciIsInRhcmdldEN1cnJlbnRIcCIsIm1vZGVsQ3RyIiwiYXR0YWNrTW9kZWwiLCJhdHRhY2tDdHIiLCJpc0JhY2siLCJXYWxrIiwidHdlZW4iLCJ0byIsIl9TY2VuZUJhc2UiLCJzcGF3blBvaW50TGlzdCIsInRyYW5zZmVyRG9vckxpc3QiLCJucGNMaXN0IiwibW9uc3Rlckxpc3QiLCJvbk1hcFRvdWNoIiwiZ2V0TWFwUGF0aCIsImluaXRNYXBEYXRhIiwiaW5pdE1hcEVsZW1lbnQiLCJhZnRlckluaXRNYXBFbGVtZW50IiwiaW5pdFBsYXllciIsInNldFZpZXdUb1BsYXllciIsIm1hcEl0ZW0iLCJtYXBJdGVtVHlwZSIsImluaXROcGMiLCJpbml0TW9uc3RlciIsIlRyYW5zZmVyIiwiaW5pdFRyYW5zZmVyRG9vciIsImluaXRTcGF3blBvaW50IiwiZW50aXR5TGF5ZXIiLCJzZXRWaWV3VG9Qb2ludCIsInRvdVBvcyIsImdldFVJTG9jYXRpb24iLCJjYW1lcmEiLCJmb2xsb3dUYXJnZXQiLCJTY2VuZUJhc2UiLCJfQ29udGFpbmVycyIsInVuaXRNYXAiLCJ1bml0TmFtZU1hcCIsImVudGl0eVR5cGVNYXAiLCJkZXB0aEhlbHBlciIsIl9zdGF0dXMiLCJxdWV1ZSIsInJlbW92ZURlcHRoIiwibGF5ZXJOYW1lIiwiaW5pdERlcHRoTGF5ZXIiLCJvbkluaXQiLCJzZXRTb3J0Iiwic2V0RGVwdGhzIiwiZGVwdGhMYXllcnMiLCJzZXRUYXJnZXQiLCJlbnRlciIsIm9uRW50ZXIiLCJsZWF2ZSIsIm9uTGVhdmUiLCJzZXRTdGF0dXMiLCJnZXRTdGF0dXMiLCJyZXNldFVuaXRJZCIsIm9sZFBhcnRJZCIsIm5ld1BhcnRJZCIsInVuaXQiLCJnZXROYW1lIiwiZ2V0TG9jYXRpb25TY2FsZSIsImRlc3RvcnkiLCJ1bml0T2JqIiwidXBkYXRlU2NlbmUiLCJhZGRVbml0VG9UeXBlTWFwIiwic2V0U2NlbmUiLCJxdWV1ZUFkZENoaWxkIiwidW5pdHMiLCJyZW9tdmVVbml0VG9UeXBlTWFwIiwiZ2V0VW5pdHNCeVR5cGVzIiwidHlwZXMiLCJyZW1vdmVVbml0QnlJZCIsImlzRGlzcG9zZSIsInJlbW92ZVVuaXQiLCJnZXRVbml0cyIsInJldXNsdHMiLCJnZXRUeXBlIiwicmVtb3ZlVW5pdEJ5TmFtZSIsImdldFVuaXRCeU5hbWUiLCJ1bml0TmFtZSIsInF1ZXVlSW5kZXgiLCJnZXREaXNwbGF5Iiwib25SZW1vdmUiLCJzaGlmdCIsIm9uQWRkIiwiQ2FtZXJhIiwiX21hcElkIiwid2luU2l6ZSIsIlNpemUiLCJsb2FkTWFwIiwibG9hZFNpbmdsZU1hcCIsImRhdGFQYXRoIiwiYmdQYXRoIiwiVGV4dHVyZTJEIiwidGV4IiwiYmdUZXh0dXJlIiwiZ2V0TWFwUGFyYW1zIiwibWFwTGF5ZXIiLCJsZXJwIiwiR19WSUVXX1NJWkUiLCJTY3JlZW5BZGFwdGF0aW9uIiwiYWRhcHRlclNjcmVlbiIsInJlc29sdXRpb25Qb2xpY3kiLCJnZXRSZXNvbHV0aW9uUG9saWN5IiwiZGVzaWduU2l6ZSIsImdldERlc2lnblJlc29sdXRpb25TaXplIiwiZnJhbWVXIiwic2NyZWVuIiwiZnJhbWVIIiwiaXNTY3JlZW5XaWR0aExhcmdlciIsInRhcmdldFJlc29sdXRpb25Qb2xpY3kiLCJSZXNvbHV0aW9uUG9saWN5IiwiRklYRURfSEVJR0hUIiwiRklYRURfV0lEVEgiLCJnZXRDb250ZW50U3RyYXRlZ3kiLCJzdHJhdGVneSIsInNldERlc2lnblJlc29sdXRpb25TaXplIiwiU2VsZWN0VG93ZXJCdWlsZCIsIm9uVG91Y2hOb2RlIiwic2VsZWN0ZWRUb3dlcklkIiwiVG93ZXJHYW1lVUlNYW5hZ2VyIiwic2hvd1NlbGVjdFRvd2VyIiwic2V0VG93ZXJJZCIsImNhbkJ1aWxkIiwiYnVpbGRQYXRoIiwic3RhY2siLCJzcGYiLCJzZXRCdWlsZEluZm8iLCJzZXRDbGlja0NhbGwiLCJTa2lsbENvbmZpZ1ZvIiwicGxheVRpbWVzIiwiX2N1cnJlbnRUaW1lcyIsIl9jdXJyZW50QW5pbWF0aW9uTmFtZSIsIl9lbmRBbmltYXRpb25OYW1lIiwicnVuaW5nIiwiYW5pbWF0aW9uUXVldWUiLCJjdXJyZW50SW5mbyIsIl9yb3NvbHZlIiwiYW5pbWF0aW9uTmFtZSIsInNrZWxldG9uUGF0aCIsIlNrZWxldG9uRGF0YSIsInNrZWxldG9uRGF0YSIsInNldENvbXBsZXRlTGlzdGVuZXIiLCJvbkFpbWF0aW9uQ29tcGxldGUiLCJfb25QbGF5IiwibG9vcCIsInNldEV2ZW50TGlzdGVuZXIiLCJraWxsQWxsIiwicnVuQ3VycmVudCIsIm5leHRSdW4iLCJwbGF5RW5kQW5pbWF0aW9uIiwiZW5kQW5pbWF0aW9uTmFtZSIsImVuZEluZm8iLCJlbnRlcnkiLCJTcGluZVRlc3QiLCJsb2FkRGlyIiwiYXNzZXRzIiwiU3RyaW5nVXRpbHMiLCJnZW5lcmF0ZVJpY2hUZXh0IiwiY29sb3JSaWNoVGV4dCIsInNpemVSaWNoVGV4dCIsInJlcGxhY2UiLCJib2xkUmljaFRleHQiLCJUZXN0IiwiY3VycmVudFBvcyIsInByZXZpb3VzUG9zaXRpb24iLCJUaW1lVWl0bHMiLCJmb3JtYXRTZWNvbmQiLCJmb3JtYXQiLCJzIiwiZm9ybWF0QXJyIiwiVG91Y2giLCJyZWdpc3RlckV2ZW50IiwiZ2V0U3RhcnRMb2NhdGlvbiIsInJhZGlhbnMiLCJkZWdyZWVzIiwibWlzYyIsInJhZGlhbnNUb0RlZ3JlZXMiLCJlbWl0RXZlbnRCeUluZGV4IiwiZW1pdCIsIlRvdWNoTW92ZSIsIm9uVG91Y2hNb3ZlIiwib25Ub3VjaEVuZCIsIlRvd2VyQnVpbGRJbmZvIiwicm9hZCIsIlRvd2VyQ2hhcmFjdGVyIiwiX2RlYzgiLCJsb2NrVGFyZ2V0IiwiX2Rlc2NyaXB0b3I3IiwiZmlyZVJhdGUiLCJ0aW1lU2luY2VMYXN0RmlyZSIsImZvcnQiLCJlbmVteUxpc3QiLCJfbGV2ZWwiLCJfdG93ZXJEYXRhIiwiY3JlYXRlQnVsbGV0IiwiaXNEZWJ1ZyIsImRyYXdSYW5nZSIsImdldFRhcmdldCIsImVuZW15S2V5cyIsIm1pbkhwIiwiTUFYX1ZBTFVFIiwiZW5lbXkiLCJpc1Rlc3QiLCJmb3VuZExpc3QiLCJ1dWlkIiwidGVtcExvY2tUYXJnZXQiLCJmb3J0SXNSb3RhdGUiLCJwbGF5RmlyZUFuaW1hdGlvbiIsInVwZGF0ZVRvd2VyT3V0d2FyZCIsImZvcnRTcHJpbnRlIiwiVG93ZXJTcHJpdGVGcmFtZSIsInVwZGF0ZUxldmVsIiwiYnVsbGV0UHJlZmFiIiwiZm9ydFJhZGl1cyIsIlRvd2VyRGF0YURUTyIsIl9jb25maWciLCJpbml0Q29uZmlnIiwidG93ZXJzRGF0YSIsInRvd3JEYXRhIiwiaWREdG9NYXAiLCJsZXZlbEtleSIsImR0byIsInRoZW1lQ29uZmlncyIsInRoZW1lRGF0YSIsImNvbmZpZ0RhdGEiLCJjb25maWdEYXRhS2V5IiwibWFwQ29uZmlnIiwiVG93ZXJNYXBEVE8iLCJjYW5CdWlsZFRvd2VySWRzIiwidG93ZXJzIiwic3RhcnRWYWx1ZSIsImVuZW15Q291bnQiLCJnZXRNYXBEYXRhIiwiZ2V0Q29uZmlnIiwiVG93ZXJDb25zdCIsIkNvbGxpZGVyVGFnX0Jvc3MiLCJDb2xsaWRlclRhZ19FbmVteSIsIkNvbGxpZGVyVGFnX0J1bGxldCIsInVwZGF0ZVZhbHVlIiwidHVybmlwTGFiZWwiLCJzaG93UmVtb3ZlT3JVcGRhdGUiLCJzaG93Iiwic2VsZWN0Q2FsbCIsInJlbW92ZU9yVXBkYXRlIiwicmVvbW92ZVVwZGF0ZVN0YXRlIiwic2NyaXB0Iiwic2VsZWN0T2JqIiwic2VsZWN0ZWRUb3dlck5vZGUiLCJzZWxlY3RlZFRvd2VyU3RhdGUiLCJjaGlsZHJlbkNvdW50IiwiY2FuQnVpbGRUb3dlcnMiLCJ0b3dlckJ1aWxkIiwiYnVpbGQiLCJfZW50aXR5TGF5ZXIiLCJfbWFwTGF5ZXIiLCJfZW5lbXlMaXN0IiwiX3Rvd2VyTGlzdCIsIl9ib3NzIiwiX2J1aWxkSW5mb3MiLCJfbWFwUGF0aENhY2hlIiwiX2dldFdvcmxkUGF0aCIsIm1hcEtleSIsImFuaW1hdGlvblBhdGgiLCJhZGRFbmVteSIsImFkZEJ1aWxkSW5mbyIsImdldEJ1aWxkSW5mbyIsImdldEVuZW15U2l6ZSIsImFkZEJvc3MiLCJib3NzIiwiYWRkVG93ZXIiLCJyZW1vdmVUb3dlciIsIm9uR2FtZVN0YXIiLCJpbml0UXVhZFRyZWUiLCJidWxsZXRzIiwiY29sbGlkZUJvc3NFbGVtZW50cyIsIm1heEVuZW15IiwiVG93ZXJNYXBMYXllciIsIl9NYXBMYXllciIsImJhc2VJbWFnZSIsImxvYWRCZyIsInNwYXduUG9pbnREYXRhcyIsImNyZWF0ZUVuZW15RGVsYXkiLCJfdGltZSIsImluaXRCb3NzIiwiYm9zc1ByZWZhYiIsImNyZWF0ZVJvYWQiLCJyZW1vdmVBbGxDaGlsZHJlbiIsIm9uUm9hZFNlZWtlclBhc3NDb25kaXRpb24iLCJiaW5kIiwiZWZmZWN0TGF5ZXIiLCJncmVlblJvYWRQYXRoIiwiYmx1ZVJvYWRQYXRoIiwib25DbGlja1Rvd2VyUm9hZCIsInJlb212ZU9yVXBkYXRlVG93ZXIiLCJjcmVhdGVUb3dlciIsImNyZWF0ZUVuZW15IiwiX2NyZWF0ZUVuZW15IiwiZW5lbXlQcmVmYWIiLCJ0b3dlclByZWZhYiIsIkNDU3RyaW5nIiwiVHJhbnNmb3JtIiwibG9va0F0WiIsInVwIiwib3V0RGlyIiwicXVhdCIsIlF1YXQiLCJmcm9tVmlld1VwIiwicm90YXRpb24iLCJnZXRDaGlsZEJ5UGF0aCIsImdldENvbXBvbmVudEluUGFyZW50IiwiY29tcG9uZW50Iiwic2VhcmNoUGFyZW50Q29tcG9uZW50IiwiVUlFeGFtcGxlIiwibUlkIiwibVR5cGUiLCJtTGF5ZXIiLCJtTG9jYXRpb24iLCJfc2NhbGVYIiwiX3NjYWxlWSIsIl9jaWJzIiwic2V0VHlwZSIsInNldExvY2F0aW9uU2NhbGUiLCJjaGVja0luIiwiZ2V0Q2hlY2tJbkJvdW5kcyIsInNjZW5lU2NhbGUiLCJzY2VuZVBvcyIsInNldElzU2hvdyIsImdldEhhc2hDb2RlIiwiX2lkIiwiYWRkQnV0dG9uQ2xpY2tIYW5kbGVyIiwic2NyaXB0Tm9kZSIsInNjcmlwdE5hbWUiLCJmdW5jdGlvbk5hbWUiLCJidXR0b24iLCJFdmVudEhhbmRsZXIiLCJjdXN0b21FdmVudERhdGEiLCJjbGlja0V2ZW50cyIsImFkZE5vZGVFdmVudCIsImV2ZW50VHlwZSIsImNhbGxiYWNrT2JqIiwib25jZSIsInRvdWNoVGhvdWdoIiwiQmxvY2tJbnB1dEV2ZW50cyIsImlzQ0NDbGFzcyIsImNvbnN0cnVjdG9yIiwiYWRkTm9kZVNjcmlwdCIsImhhc0NscyIsImpzIiwiZ2V0Q2xhc3NCeU5hbWUiLCJoYXMiLCJWaWV3TWFuYWdlciIsInVzZUNvdW50IiwiQmFja0dyb3VuZFVJIiwiaXNDbG9zaW5nIiwiaXNPcGVuaW5nIiwiVmlld0NhY2hlIiwiVmlld1N0YWNrIiwiVmlld09wZW5RdWV1ZSIsIlZpZXdDbG9zZVF1ZXVlIiwidWlPcGVuQmVmb3JlRGVsZWdhdGUiLCJ1aU9wZW5EZWxlZ2F0ZSIsInVpQ2xvc2VEZWxlZ2F0ZSIsInByZXZlbnRUb3VjaCIsInpPcmRlciIsInZpZXdDb250YWluZXIiLCJ1aUNvbSIsInByb3BhZ2F0aW9uU3RvcHBlZCIsInByaW9yaXR5IiwiYXV0b0V4ZWNOZXh0VUkiLCJ1aVF1ZXVlSW5mbyIsInVpSWQiLCJ1aUFyZ3MiLCJhdXRvRXhlY0FuaW1hdGlvbiIsInVpVmlldyIsImFuaU5hbWUiLCJhbmlPdmVyQ2FsbGJhY2siLCJhdXRvTG9hZFJlcyIsImNvbXBsZXRlQ2FsbGJhY2siLCJ1cGRhdGVVSSIsImhpZGVJbmRleCIsInNob3dJbmRleCIsIm1vZGUiLCJWaWV3RnVsbFNjcmVlbiIsImhpZGUiLCJvblZpZXdPcGVuIiwidmlld1ZvIiwidWlJbmZvIiwiYmFja0dyb3VuZCIsInRhcmdldE9mZiIsImNsYXNzTmFtZSIsImdldFZpZXdDbGFzc05hbWUiLCJmcm9tVUlJRCIsIl9vcGVuIiwiZ2V0Vmlld1JlZ2lzdGVyVm8iLCJnZXRWaWV3SW5kZXgiLCJjbG9zZVRvVmlldyIsInByZXZlbnROb2RlIiwiZ2V0T3JDcmVhdGVVSSIsInZpZXdOb2RlIiwiaXNDbG9zZSIsImFkZEJsb2NrSW5wdXRFdmVudCIsInByZWZhYk5hbWUiLCJnZXRWaWV3U2NyaXB0IiwiZ2V0VW5pZnlQYXJhbSIsImNsb3NlVUkiLCJ1aUNvdW50IiwidWkiLCJwcmVVSUluZm8iLCJpc1RvcFZpZXciLCJjbG9zZUFsbCIsImJPcGVuU2VsZiIsImNsZWFyQ2FjaGUiLCJpc1ZhbGlkIiwiZ2V0VmlldyIsImdldFRvcFZpZXciLCJjbHMiLCJnZXRDbGFzc05hbWUiLCJnZXRJc09wZW4iLCJyZWdpc3RlclZpZXdzIiwicmVnaXN0ZXJWaWV3RGljdGlvbmFyeSIsInJlZ2lzdGVyVmlld0RpY3Rpb25hcnlCeVZpZXciLCJ2byIsImdldFJlZ2lzdGVyZWRWaWV3cyIsIlZpZXdSZWdpc3RlclZvIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztNQUdBOzs7Ozs7VUFNYUEsVUFBVSx5QkFNbkIsU0FBQUEsV0FBbUJDLElBQVksRUFBRUMsT0FBZ0IsRUFBU0MsS0FBYSxFQUFPQyxPQUFlLEVBQW1CO1FBQUEsSUFBL0VGLE9BQWdCO1VBQWhCQSxPQUFnQixHQUFHLElBQUk7O1FBQUEsSUFBRUMsS0FBYTtVQUFiQSxLQUFhLEdBQUcsQ0FBQyxDQUFDOztRQUFBLElBQUVDLE9BQWU7VUFBZkEsT0FBZSxHQUFHQyxTQUFTLENBQUNDLElBQUk7O1FBQUEsS0FMdkdMLElBQUk7UUFBQSxLQUNK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RSxDQUFDLENBQUMsRUFBRSxJQUFJQSxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQ2pFLENBQUMsSUFBSUEsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLElBQUlBLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsSUFBSUEsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxJQUFJQSxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQ3BFOztRQUVERSxNQUFNLEVBQUUsQ0FDSixDQUFDLElBQUlGLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUlBLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxJQUFJQSxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsSUFBSUEsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUNwRSxDQUFDLElBQUlBLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUlBLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxJQUFJQSxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsSUFBSUEsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUNwRSxDQUFDLElBQUlBLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUlBLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxJQUFJQSxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsSUFBSUEsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUNwRSxDQUFDLElBQUlBLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUlBLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxJQUFJQSxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsSUFBSUEsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUN2RTs7UUFFREcsTUFBTSxFQUFFLENBQ0osQ0FBQyxJQUFJSCxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsSUFBSUEsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLElBQUlBLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsSUFBSUEsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUNsRSxDQUFDLElBQUlBLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsSUFBSUEsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLElBQUlBLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsSUFBSUEsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUNqRSxDQUFDLElBQUlBLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJQSxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLElBQUlBLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsSUFBSUEsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUNqRSxDQUFDLElBQUlBLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJQSxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsSUFBSUEsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxJQUFJQSxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQ3JFOztRQUVESSxNQUFNLEVBQUUsQ0FDSixDQUFDLElBQUlKLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxJQUFJQSxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLElBQUlBLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsSUFBSUEsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUNqRSxDQUFDLElBQUlBLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJQSxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsSUFBSUEsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxJQUFJQSxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQ2xFLENBQUMsSUFBSUEsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsSUFBSUEsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLElBQUlBLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsSUFBSUEsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUNuRSxDQUFDLElBQUlBLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxJQUFJQSxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsSUFBSUEsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxJQUFJQSxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQ3JFOztRQUVESyxNQUFNLEVBQUUsQ0FDSixDQUFDLElBQUlMLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxJQUFJQSxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLElBQUlBLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsSUFBSUEsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQ2xFLENBQUMsSUFBSUEsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsSUFBSUEsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUlBLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsSUFBSUEsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUNuRSxDQUFDLElBQUlBLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxJQUFJQSxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsSUFBSUEsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxJQUFJQSxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQ2xFLENBQUMsSUFBSUEsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUlBLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsSUFBSUEsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxJQUFJQSxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQ3BFOztRQUVETSxNQUFNLEVBQUUsQ0FDSixDQUFDLElBQUlOLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxJQUFJQSxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsSUFBSUEsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUlBLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFDbkUsQ0FBQyxJQUFJQSxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJQSxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsSUFBSUEsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxJQUFJQSxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQ25FLENBQUMsSUFBSUEsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLElBQUlBLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxJQUFJQSxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsSUFBSUEsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUNuRSxDQUFDLElBQUlBLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUlBLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJQSxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLElBQUlBLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FDdEU7O1FBRURPLE1BQU0sRUFBRSxDQUNKLENBQUMsSUFBSVAsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsSUFBSUEsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLElBQUlBLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsSUFBSUEsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUNuRSxDQUFDLElBQUlBLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJQSxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsSUFBSUEsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxJQUFJQSxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMs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RSxFQUFFLENBQUNyZ0UsRUFBRSxDQUFDLEdBQUdxZ0UsRUFBRTtRQUNsQ0QsNEJBQTRCLENBQUMvQixTQUFTLENBQUMsR0FBR2dDLEVBQUU7TUFDaEQ7TUFFTyxTQUFTQyxrQkFBa0JBLENBQUFBLEVBQXFCO1FBQ25ELE9BQU9KLGFBQWE7TUFDeEI7TUFNTyxTQUFTekIsaUJBQWlCQSxDQUFDOStELEtBQWMsRUFBa0I7UUFDOUQsSUFBSTBnRSxFQUFrQixHQUFHLElBQUk7UUFDN0IsSUFBSSxPQUFPMWdFLEtBQUssSUFBSSxRQUFRLElBQUksT0FBT0EsS0FBSyxJQUFJLFFBQVEsRUFBRTtVQUN0RDBnRSxFQUFFLEdBQUdGLHNCQUFzQixDQUFDeGdFLEtBQUssQ0FBQztVQUNsQyxJQUFJMGdFLEVBQUUsSUFBSSxJQUFJLEVBQUU7WUFDWixPQUFPQSxFQUFFOztVQUViQSxFQUFFLEdBQUdELDRCQUE0QixDQUFDemdFLEtBQUssQ0FBQztTQUMzQyxNQUFNLElBQUksT0FBT0EsS0FBSyxJQUFJLFVBQVUsRUFBRTtVQUNuQyxJQUFJMCtELFNBQWlCLEdBQUcxQyxFQUFFLENBQUNxRSxZQUFZLENBQUNyZ0UsS0FBSyxDQUFDO1VBQzlDMGdFLEVBQUUsR0FBR0QsNEJBQTRCLENBQUMvQixTQUFTLENBQUM7O1FBRWhELE9BQU9nQyxFQUFFO01BQ2I7Y0FBQyxDQUFBdHBFLEdBQUEsQ0FBQUMsR0FBQTs7Ozs7Ozs7Ozs7OztVQ2pDb0J1cEUsY0FBYywrQkFBQUE7UUFBQSxLQUN4QnZnRSxFQUFFOztRQUNULEtBQ08rUSxNQUFNOztRQUNiLEtBQ09oUixPQUFPOztRQUNkLEtBQ09HLEtBQUs7O1FBQ1osS0FDT0csZ0JBQWdCOztRQUN2QixLQUNPNCtELFVBQVU7UUFBQSxLQUVWdkMsWUFBWSxHQUFhLEtBQUs7TUFBQTtjQWJOLENBQUEzbEUsR0FBQSxDQUFBQyxHQUFBIiwiZmlsZSI6ImFsbC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEhhbmRsZXIgfSBmcm9tIFwiLi4vLi4vLi4vQ29tbW9uL0hhbmRsZXJcIjtcclxuaW1wb3J0IHsgR2FtZUNvbnN0IH0gZnJvbSBcIi4uL0dhbWVDb25zdFwiO1xyXG5cclxuLyoqXHJcbiAqIEBmaWxlTmFtZSBBY3Rpb25JbmZvLnRzXHJcbiAqIEBhdXRob3IgemhhbmdxaW9uZ1xyXG4gKiBAZGF0ZSAyMDI1LzAxLzA0IDIwOjM5OjE5XCJcclxuICogQGRlc2NyaXB0aW9uXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgQWN0aW9uSW5mbyB7XHJcbiAgICBwdWJsaWMgbmFtZTogc3RyaW5nO1xyXG4gICAgcHVibGljIGhhbmRsZXI6IEhhbmRsZXI7XHJcbiAgICBwdWJsaWMgdGltZXM6IG51bWJlciA9IC0xO1xyXG4gICAgcHVibGljIGVuZEFjdGlvbk5hbWU6IHN0cmluZyA9IEdhbWVDb25zdC5JZGxlO1xyXG5cclxuICAgIHB1YmxpYyBjb25zdHJ1Y3RvcihuYW1lOiBzdHJpbmcsIGhhbmRsZXI6IEhhbmRsZXIgPSBudWxsLCB0aW1lczogbnVtYmVyID0gLTEsIGVuZE5hbWU6IHN0cmluZyA9IEdhbWVDb25zdC5JZGxlKSB7XHJcbiAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcclxuICAgICAgICB0aGlzLmhhbmRsZXIgPSBoYW5kbGVyO1xyXG4gICAgICAgIHRoaXMudGltZXMgPSB0aW1lcztcclxuICAgICAgICB0aGlzLmVuZEFjdGlvbk5hbWUgPSBlbmROYW1lO1xyXG4gICAgfVxyXG59IiwiaW1wb3J0IHsgX2RlY29yYXRvciwgQ29tcG9uZW50LCBKc29uQXNzZXQsIG1hdGgsIE5vZGUsIHJlc291cmNlcywgVmVjMiwgVmVjMyB9IGZyb20gJ2NjJztcclxuaW1wb3J0IEJhc2VWaWV3IGZyb20gJy4uLy4uL3VpL0Jhc2VWaWV3JztcclxuaW1wb3J0IHsgcmVnaXN0ZXJWaWV3IH0gZnJvbSAnLi4vLi4vdWkvVmlld1JlZ2lzdGVyTWdyJztcclxuaW1wb3J0IHsgUGFuZWxUeXBlIH0gZnJvbSAnLi4vLi4vdWkvUGFuZWxFbnVtJztcclxuaW1wb3J0IHsgTGF5ZXJUeXBlIH0gZnJvbSAnLi4vLi4vdWkvTGF5ZXJNYW5hZ2VyJztcclxuaW1wb3J0IHsgR2FtZVNjZW5lIH0gZnJvbSAnLi9HYW1lU2NlbmUnO1xyXG5pbXBvcnQgVmlld0NvbnN0IGZyb20gJy4uLy4uL3VpL1ZpZXdDb25zdCc7XHJcbmltcG9ydCB7IEhhc2hNYXAgfSBmcm9tICcuLi8uLi9Db21tb24vbWFwcy9IYXNoTWFwJztcclxuaW1wb3J0IHsgRmlnaHRIZXJvSW5mbyB9IGZyb20gJy4vaW5mb3MvRmlnaHRIZXJvSW5mbyc7XHJcbmltcG9ydCB7IEFGS0dhbWVDb25maWdWbyB9IGZyb20gJy4vdm9zL0FGS0dhbWVDb25maWdWbyc7XHJcbmltcG9ydCB7IEhlcm9Db25maWdWbyB9IGZyb20gJy4vdm9zL0hlcm9Db25maWdWbyc7XHJcbmltcG9ydCB7IEdhbWVDb25zdCB9IGZyb20gJy4vR2FtZUNvbnN0JztcclxuaW1wb3J0IHsgRmlnaHRSb2xlRW50aXR5IH0gZnJvbSAnLi9maWdodC9GaWdodFJvbGVFbnRpdHknO1xyXG5pbXBvcnQgVXRpbHMgZnJvbSAnLi4vLi4vQ29tbW9uL1V0aWxzJztcclxuaW1wb3J0IHsgRmlnaHRNZ3IgfSBmcm9tICcuL2ZpZ2h0L0ZpZ2h0TWdyJztcclxuaW1wb3J0IHsgRmlnaHRDb25maWcgfSBmcm9tICcuL2ZpZ2h0L0ZpZ2h0Q29uZmlnJztcclxuY29uc3QgeyBjY2NsYXNzLCBwcm9wZXJ0eSB9ID0gX2RlY29yYXRvcjtcclxuXHJcbkBjY2NsYXNzKCdBRktHYW1lJylcclxuZXhwb3J0IGNsYXNzIEFGS0dhbWUgZXh0ZW5kcyBCYXNlVmlldyB7XHJcblxyXG4gICAgcHJpdmF0ZSBzY2VuZTogR2FtZVNjZW5lO1xyXG5cclxuICAgIHByaXZhdGUgZ2FtZUNvbmZpZzogQUZLR2FtZUNvbmZpZ1ZvO1xyXG5cclxuICAgIHByaXZhdGUgaGVyb01hcDogSGFzaE1hcDxudW1iZXIsIEZpZ2h0SGVyb0luZm8+O1xyXG4gICAgcHJpdmF0ZSBlbm1leU1hcDogSGFzaE1hcDxudW1iZXIsIEZpZ2h0SGVyb0luZm8+O1xyXG5cclxuICAgIHByaXZhdGUgcG9zaXRpb25NYXA6IEhhc2hNYXA8bnVtYmVyLCBIYXNoTWFwPG51bWJlciwgVmVjMz4+O1xyXG5cclxuICAgIHByaXZhdGUgaXNJbml0OiBib29sZWFuID0gZmFsc2U7XHJcbiAgICBzdGFydCgpIHtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgdXBkYXRlKGRlbHRhVGltZTogbnVtYmVyKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmlzSW5pdCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIEZpZ2h0TWdyLmluc3RhbmNlLmRvRnJhbWVIYW5kbGVyKCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGluaXQoLi4uYXJnczogYW55KTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5oZXJvTWFwID0gbmV3IEhhc2hNYXA8bnVtYmVyLCBGaWdodEhlcm9JbmZvPigpO1xyXG4gICAgICAgIHRoaXMuZW5tZXlNYXAgPSBuZXcgSGFzaE1hcDxudW1iZXIsIEZpZ2h0SGVyb0luZm8+KCk7XHJcbiAgICAgICAgdGhpcy5wb3NpdGlvbk1hcCA9IG5ldyBIYXNoTWFwPG51bWJlciwgSGFzaE1hcDxudW1iZXIsIFZlYzM+PigpO1xyXG4gICAgICAgIHRoaXMuaXNJbml0ID0gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGFzeW5jIG9uT3Blbihmcm9tVUk6IG51bWJlciB8IHN0cmluZywgLi4uYXJnczogYW55KSB7XHJcbiAgICAgICAgYXdhaXQgdGhpcy5sb2FkQ29uZmlnKCk7XHJcbiAgICAgICAgdGhpcy5zY2VuZSA9IG5ldyBHYW1lU2NlbmUoKTtcclxuICAgICAgICB0aGlzLnNjZW5lLmluaXQoKTtcclxuICAgICAgICB0aGlzLnNjZW5lLm5hbWUgPSBcImFma1NjZW5lXCI7XHJcbiAgICAgICAgdGhpcy5ub2RlLmFkZENoaWxkKHRoaXMuc2NlbmUpO1xyXG5cclxuICAgICAgICBmb3IgKGxldCBpOiBudW1iZXIgPSAwOyBpIDwgNTsgaSsrKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGxlZnROb2RlTmFtZTogc3RyaW5nID0gYGxlZnQke2l9YDtcclxuICAgICAgICAgICAgY29uc3QgcmlnaHROb2RlTmFtZTogc3RyaW5nID0gYHJpZ2h0JHtpfWA7XHJcbiAgICAgICAgICAgIGNvbnN0IGxlZnROb2RlOiBOb2RlID0gVXRpbHMuRmluZENoaWxkQnlOYW1lKHRoaXMubm9kZSwgbGVmdE5vZGVOYW1lKTtcclxuICAgICAgICAgICAgY29uc3QgcmlnaHROb2RlOiBOb2RlID0gVXRpbHMuRmluZENoaWxkQnlOYW1lKHRoaXMubm9kZSwgcmlnaHROb2RlTmFtZSk7XHJcbiAgICAgICAgICAgIGxldCBsZWZ0TWFwOiBIYXNoTWFwPG51bWJlciwgVmVjMz4gPSB0aGlzLnBvc2l0aW9uTWFwLmdldCgwKTtcclxuICAgICAgICAgICAgaWYgKCFsZWZ0TWFwKSB7XHJcbiAgICAgICAgICAgICAgICBsZWZ0TWFwID0gbmV3IEhhc2hNYXA8bnVtYmVyLCBWZWMzPigpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGxldCByaWdodE1hcDogSGFzaE1hcDxudW1iZXIsIFZlYzM+ID0gdGhpcy5wb3NpdGlvbk1hcC5nZXQoMSk7XHJcbiAgICAgICAgICAgIGlmICghcmlnaHRNYXApIHtcclxuICAgICAgICAgICAgICAgIHJpZ2h0TWFwID0gbmV3IEhhc2hNYXA8bnVtYmVyLCBWZWMzPigpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGxlZnROb2RlLmFjdGl2ZSA9IHJpZ2h0Tm9kZS5hY3RpdmUgPSBmYWxzZTtcclxuICAgICAgICAgICAgbGVmdE1hcC5wdXQoaSArIDEsIGxlZnROb2RlLnBvc2l0aW9uLmNsb25lKCkpO1xyXG4gICAgICAgICAgICByaWdodE1hcC5wdXQoaSArIDEsIHJpZ2h0Tm9kZS5wb3NpdGlvbi5jbG9uZSgpKTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMucG9zaXRpb25NYXAucHV0KDAsIGxlZnRNYXApO1xyXG4gICAgICAgICAgICB0aGlzLnBvc2l0aW9uTWFwLnB1dCgxLCByaWdodE1hcCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBoZXJvczogRmlnaHRIZXJvSW5mb1tdID0gdGhpcy5oZXJvTWFwLnZhbHVlcygpO1xyXG4gICAgICAgIGNvbnN0IGVubWV5czogRmlnaHRIZXJvSW5mb1tdID0gdGhpcy5lbm1leU1hcC52YWx1ZXMoKTtcclxuXHJcblxyXG4gICAgICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCBoZXJvcy5sZW5ndGg7IGluZGV4KyspIHtcclxuICAgICAgICAgICAgY29uc3QgZWxlbWVudCA9IGhlcm9zW2luZGV4XTtcclxuICAgICAgICAgICAgYXdhaXQgdGhpcy5jcmVhdGVIZXJvKGVsZW1lbnQpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IGVubWV5cy5sZW5ndGg7IGluZGV4KyspIHtcclxuICAgICAgICAgICAgY29uc3QgZWxlbWVudCA9IGVubWV5c1tpbmRleF07XHJcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuY3JlYXRlSGVybyhlbGVtZW50KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgRmlnaHRNZ3IuaW5zdGFuY2Uuc2V0UmFuZG9tU2VlZCg5OTg1NjI2OSk7XHJcbiAgICAgICAgdGhpcy5pc0luaXQgPSB0cnVlO1xyXG5cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGFzeW5jIGxvYWRDb25maWcoKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgICAgICAgcmVzb3VyY2VzLmxvYWQoXCJhZmsvYWZrR2FtZUNvbmZnXCIsIEpzb25Bc3NldCwgKGVyciwgZGF0YTogSnNvbkFzc2V0KSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZXJyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycik7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGhpcy5nYW1lQ29uZmlnID0gZGF0YS5qc29uIGFzIEFGS0dhbWVDb25maWdWbztcclxuICAgICAgICAgICAgICAgIEZpZ2h0Q29uZmlnLmluc3RhbmNlLmluaXQodGhpcy5nYW1lQ29uZmlnKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGhlcm9zID0gdGhpcy5nYW1lQ29uZmlnLmhlcm9zO1xyXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gaGVyb3MpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGhlcm9zLCBrZXkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGVsZW1lbnQ6IEhlcm9Db25maWdWbyA9IGhlcm9zW2tleV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGhpZDogbnVtYmVyID0gTnVtYmVyKGtleSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGhlcm86IEZpZ2h0SGVyb0luZm8gPSB0aGlzLnNldEZpZ2h0SGVyb0luZm8oMTAwMCwgZWxlbWVudCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlbGVtZW50LmNvbXAgPT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5oZXJvTWFwLnB1dChoaWQsIGhlcm8pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lbm1leU1hcC5wdXQoaGlkLCBoZXJvKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJlc29sdmUoKVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH0pXHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBzZXRGaWdodEhlcm9JbmZvKHBsYXllcklkOiBudW1iZXIsIGRhdGE6IEhlcm9Db25maWdWbyk6IEZpZ2h0SGVyb0luZm8ge1xyXG4gICAgICAgIGNvbnN0IGhlcm9JbmZvOiBGaWdodEhlcm9JbmZvID0gbmV3IEZpZ2h0SGVyb0luZm8oKTtcclxuICAgICAgICBoZXJvSW5mby5zZXREYXRhKHBsYXllcklkLCBkYXRhKTtcclxuICAgICAgICByZXR1cm4gaGVyb0luZm87XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBnZXRQb3NpdGlvbihpbmZvOiBGaWdodEhlcm9JbmZvKTogVmVjMyB7XHJcbiAgICAgICAgY29uc3QgY29tcDogbnVtYmVyID0gaW5mby5jYW1wO1xyXG4gICAgICAgIGNvbnN0IHNpdGU6IG51bWJlciA9IGluZm8uc2l0ZTtcclxuICAgICAgICBjb25zdCBwb3NNYXA6IEhhc2hNYXA8bnVtYmVyLCBWZWMzPiA9IHRoaXMucG9zaXRpb25NYXAuZ2V0KGNvbXApO1xyXG4gICAgICAgIGlmICghcG9zTWFwKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBtYXRoLnYzKDAsIDApO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcG9zTWFwLmdldChzaXRlKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGNyZWF0ZUhlcm8oZmlnaHRIZXJvOiBGaWdodEhlcm9JbmZvKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5jcmVhdGUoRmlnaHRSb2xlRW50aXR5LCBmaWdodEhlcm8sIHRoaXMuc2NlbmUsIGZpZ2h0SGVyby5jYW1wID09IDAgPyBHYW1lQ29uc3QuUklHSFQgOiBHYW1lQ29uc3QuTEVGVCkudGhlbihlbnRpdHkgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcG9zaXRpb246IFZlYzMgPSB0aGlzLmdldFBvc2l0aW9uKGZpZ2h0SGVybyk7XHJcbiAgICAgICAgICAgICAgICBlbnRpdHkuc2V0TG9jYXRpb24ocG9zaXRpb24ueCwgcG9zaXRpb24ueSk7XHJcbiAgICAgICAgICAgICAgICBlbnRpdHkuaW5pdEhlYWRCYXIoKS50aGVuKGUgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIEZpZ2h0TWdyLmluc3RhbmNlLmFkZEVudGl0eShlbnRpdHkpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGBoZXJvXyR7ZmlnaHRIZXJvLnNwaW5lSWR9YCwgZW50aXR5LmdldEJvdW5kcygpKVxyXG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUoKTtcclxuICAgICAgICAgICAgICAgIH0pLmNhdGNoKGJFcnIgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlamVjdChiRXJyKTtcclxuICAgICAgICAgICAgICAgIH0pXHJcblxyXG4gICAgICAgICAgICB9KS5jYXRjaChlcnIgPT4ge1xyXG4gICAgICAgICAgICAgICAgcmVqZWN0KGVycik7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfSlcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGNyZWF0ZTxUIGV4dGVuZHMgRmlnaHRSb2xlRW50aXR5PihjOiB7IG5ldygpOiBUIH0sIGluZm86IEZpZ2h0SGVyb0luZm8sIHNjZW5lOiBHYW1lU2NlbmUsIGRpcjogbnVtYmVyID0gR2FtZUNvbnN0LlJJR0hULCBhY3Rpb246IHN0cmluZyA9IEdhbWVDb25zdC5JZGxlKTogUHJvbWlzZTxUPiB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNsb3ZlLCByZWplY3QpID0+IHtcclxuICAgICAgICAgICAgdmFyIGVudGl0eTogVCA9IG5ldyBjKCk7XHJcbiAgICAgICAgICAgIGVudGl0eS5zZXREYXRhKGluZm8pO1xyXG4gICAgICAgICAgICBpZiAoIXNjZW5lLmdldFVuaXRCeUlkKGVudGl0eS5nZXRJZCgpKSkge1xyXG4gICAgICAgICAgICAgICAgc2NlbmUuYWRkVW5pdChlbnRpdHkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVudGl0eS5zZXRSb2xlKGluZm8uaGVyb0NvbmZpZy5zcGluZUlkKS50aGVuKHZhbHVlID0+IHtcclxuICAgICAgICAgICAgICAgIGVudGl0eS5jaGFuZ2VBY3Rpb25BbmREaXJlY3Rpb24oYWN0aW9uLCBkaXIpXHJcbiAgICAgICAgICAgICAgICByZXNsb3ZlKGVudGl0eSk7XHJcbiAgICAgICAgICAgIH0pLmNhdGNoKGVyciA9PiB7XHJcbiAgICAgICAgICAgICAgICByZWplY3QoZXJyKTtcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9KVxyXG5cclxuICAgIH1cclxufVxyXG5cclxucmVnaXN0ZXJWaWV3KHsgdmlld0NsczogQUZLR2FtZSwgaWQ6IFBhbmVsVHlwZS5BRktHYW1lLCBsYXllcjogTGF5ZXJUeXBlLnZpZXcsIHByZWZhYlBhdGhQcmVmaXg6IFZpZXdDb25zdC5kZWZhdWx0UHJlZmFiUGF0aFByZWZpeCArIFwiYWZrL1wiIH0pXHJcblxyXG5cclxuIiwiaW1wb3J0IHsgSGFzaE1hcCB9IGZyb20gXCIuLi8uLi8uLi9Db21tb24vbWFwcy9IYXNoTWFwXCI7XHJcbmltcG9ydCB7IEhlcm9Db25maWdWbyB9IGZyb20gXCIuL0hlcm9Db25maWdWb1wiO1xyXG5pbXBvcnQgeyBTa2lsbENvbmZpZ1ZvIH0gZnJvbSBcIi4vU2tpbGxDb25maWdWb1wiO1xyXG5cclxuLyoqXHJcbiAqIEBmaWxlTmFtZSBBRktHYW1lQ29uZmlnVm8udHNcclxuICogQGF1dGhvciB6aGFuZ3Fpb25nXHJcbiAqIEBkYXRlIDIwMjQvMTIvMjYgMjA6MTc6MTlcIlxyXG4gKiBAZGVzY3JpcHRpb25cclxuICovXHJcbmV4cG9ydCBjbGFzcyBBRktHYW1lQ29uZmlnVm8ge1xyXG4gICAgcHVibGljIGhlcm9zOiB7IFtrZXk6IHN0cmluZ106IEhlcm9Db25maWdWbyB9XHJcbiAgICBwdWJsaWMgc2tpbGxzOiB7IFtrZXk6IHN0cmluZ106IFNraWxsQ29uZmlnVm8gfVxyXG59IiwiaW1wb3J0IHsgX2RlY29yYXRvciwgQnV0dG9uLCBDb21wb25lbnQsIE5vZGUsIHNwIH0gZnJvbSAnY2MnO1xyXG5pbXBvcnQgQmFzZVZpZXcgZnJvbSAnLi4vLi4vLi4vdWkvQmFzZVZpZXcnO1xyXG5pbXBvcnQgeyByZWdpc3RlclZpZXcgfSBmcm9tICcuLi8uLi8uLi91aS9WaWV3UmVnaXN0ZXJNZ3InO1xyXG5pbXBvcnQgeyBQYW5lbFR5cGUgfSBmcm9tICcuLi8uLi8uLi91aS9QYW5lbEVudW0nO1xyXG5pbXBvcnQgeyBMYXllclR5cGUgfSBmcm9tICcuLi8uLi8uLi91aS9MYXllck1hbmFnZXInO1xyXG5pbXBvcnQgVmlld0NvbnN0IGZyb20gJy4uLy4uLy4uL3VpL1ZpZXdDb25zdCc7XHJcbmltcG9ydCBVdGlscyBmcm9tICcuLi8uLi8uLi9Db21tb24vVXRpbHMnO1xyXG5pbXBvcnQgeyB2aWV3TWFuYWdlciB9IGZyb20gJy4uLy4uLy4uL3VpL1ZpZXdNYW5hZ2VyJztcclxuaW1wb3J0IHsgVmlld1Nob3dUeXBlcyB9IGZyb20gJy4uLy4uLy4uL0NvbW1vbi9FbnVtJztcclxuaW1wb3J0IHsgRmlnaHRNZ3IgfSBmcm9tICcuLi9maWdodC9GaWdodE1ncic7XHJcbmNvbnN0IHsgY2NjbGFzcywgcHJvcGVydHkgfSA9IF9kZWNvcmF0b3I7XHJcblxyXG4vKipcclxuICogQGZpbGVOYW1lIEFGS1Jlc3VsdFBhbmVsLnRzXHJcbiAqIEBhdXRob3IgemhhbmdxaW9uZ1xyXG4gKiBAZGF0ZSAyMDI1LzAxLzA3IDE1OjEwOjAwXCJcclxuICogQGRlc2NyaXB0aW9uXHJcbiAqL1xyXG5AY2NjbGFzcygnQUZLUmVzdWx0UGFuZWwnKVxyXG5leHBvcnQgY2xhc3MgQUZLUmVzdWx0UGFuZWwgZXh0ZW5kcyBCYXNlVmlldyB7XHJcbiAgICBwdWJsaWMgc2hvd1R5cGU6IFZpZXdTaG93VHlwZXMgPSBWaWV3U2hvd1R5cGVzLlZpZXdBZGRpdGlvbjtcclxuICAgIHByaXZhdGUgYnRuOiBCdXR0b247XHJcbiAgICBwcml2YXRlIHNwaW5lOiBzcC5Ta2VsZXRvbjtcclxuICAgIHB1YmxpYyBpbml0KC4uLmFyZ3M6IGFueSk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuYnRuID0gVXRpbHMuRmluZENoaWxkQnlOYW1lKHRoaXMubm9kZSwgXCJ0cnlCdG5cIikuZ2V0Q29tcG9uZW50KEJ1dHRvbik7XHJcbiAgICAgICAgdGhpcy5zcGluZSA9IFV0aWxzLkZpbmRDaGlsZEJ5TmFtZSh0aGlzLm5vZGUsIFwic3BpbmVOb2RlXCIpLmdldENvbXBvbmVudChzcC5Ta2VsZXRvbik7XHJcbiAgICAgICAgaWYgKHRoaXMuYnRuKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYnRuLm5vZGUub24oQnV0dG9uLkV2ZW50VHlwZS5DTElDSywgdGhpcy5vbkNsaWNrQnRuLCB0aGlzKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBvbkNsaWNrQnRuKCk6IHZvaWQge1xyXG4gICAgICAgIHZpZXdNYW5hZ2VyLmNsb3NlKHRoaXMpO1xyXG4gICAgICAgIEZpZ2h0TWdyLmluc3RhbmNlLnJlc2V0KCk7XHJcbiAgICAgICAgdmlld01hbmFnZXIub3BlbihQYW5lbFR5cGUuQUZLR2FtZSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIG9uT3Blbihmcm9tVUk6IG51bWJlciB8IHN0cmluZywgLi4uYXJnczogYW55KTogdm9pZCB7XHJcbiAgICAgICAgY29uc3QgaXNXaW46IGJvb2xlYW4gPSBhcmdzWzBdO1xyXG4gICAgICAgIGxldCBhY3Rpb25OYW1lOiBzdHJpbmcgPSBpc1dpbiA/IFwiYW5pbWF0aW9uXzJcIiA6IFwiYW5pbWF0aW9uXzNcIjtcclxuICAgICAgICBpZiAodGhpcy5zcGluZSkge1xyXG4gICAgICAgICAgICB0aGlzLnNwaW5lLmFuaW1hdGlvbiA9IGFjdGlvbk5hbWU7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgb25Mb2FkKCk6IHZvaWQge1xyXG5cclxuICAgIH1cclxuICAgIHN0YXJ0KCkge1xyXG5cclxuICAgIH1cclxuXHJcbiAgICB1cGRhdGUoZGVsdGFUaW1lOiBudW1iZXIpIHtcclxuXHJcbiAgICB9XHJcbn1cclxuXHJcbnJlZ2lzdGVyVmlldyh7IHZpZXdDbHM6IEFGS1Jlc3VsdFBhbmVsLCBpZDogUGFuZWxUeXBlLkFGS1Jlc3VsdFBhbmVsLCBsYXllcjogTGF5ZXJUeXBlLnZpZXcsIHByZWZhYlBhdGhQcmVmaXg6IFZpZXdDb25zdC5kZWZhdWx0UHJlZmFiUGF0aFByZWZpeCArIFwiYWZrL1wiIH0pXHJcbiIsImltcG9ydCB7X2RlY29yYXRvciwgYW5pbWF0aW9uLCBBbmltYXRpb24sIEFuaW1hdGlvbkNsaXAsXHJcbiAgICBDb2xvciwgQ29tcG9uZW50LCBHcmFwaGljcywgbWF0aCwgTm9kZSwgUmVhbEN1cnZlLCBSZWFsS2V5ZnJhbWVWYWx1ZSwgcmVzb3VyY2VzLCBWZWMyfSBmcm9tICdjYyc7XHJcbmltcG9ydCB7QmV6aWVyUGFydH0gZnJvbSBcImRiOi8vYXNzZXRzL1NjcmlwdC9tb2R1bGVzL1Rvd2VyRGVmZW5zZS9CZXppZXJQYXJ0XCI7XHJcbmltcG9ydCB7IFRvd2VyTGF1bmNoZXIgfSBmcm9tICcuL1Rvd2VyTGF1bmNoZXInO1xyXG5jb25zdCB7IGNjY2xhc3MsIHByb3BlcnR5IH0gPSBfZGVjb3JhdG9yO1xyXG5cclxuQGNjY2xhc3MoJ0FuaW1hdGlvblBhdGgnKVxyXG5leHBvcnQgY2xhc3MgQW5pbWF0aW9uUGF0aCBleHRlbmRzIENvbXBvbmVudCB7XHJcbiAgICBwcml2YXRlIGFuaW1hdGlvbjpBbmltYXRpb247XHJcbiAgICBwcml2YXRlIGdyYXBoaWNzOkdyYXBoaWNzO1xyXG5cclxuICAgIHByaXZhdGUgcDJwRGlzdGFuY2U6IG51bWJlciA9IDI1O1xyXG4gICAgcHJvdGVjdGVkIG9uTG9hZCgpIHtcclxuICAgICAgICB0aGlzLmFuaW1hdGlvbiA9IHRoaXMuZ2V0Q29tcG9uZW50KEFuaW1hdGlvbik7XHJcbiAgICAgICAgaWYgKCF0aGlzLmFuaW1hdGlvbikge1xyXG4gICAgICAgICAgICB0aGlzLmFuaW1hdGlvbiA9IHRoaXMubm9kZS5hZGRDb21wb25lbnQoQW5pbWF0aW9uKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5ncmFwaGljcyA9IHRoaXMubm9kZS5nZXRDb21wb25lbnQoR3JhcGhpY3MpO1xyXG4gICAgICAgIGlmICghdGhpcy5ncmFwaGljcykge1xyXG4gICAgICAgICAgICB0aGlzLmdyYXBoaWNzID0gdGhpcy5ub2RlLmFkZENvbXBvbmVudChHcmFwaGljcyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIHRoaXMuZ3JhcGhpY3MuZmlsbENvbG9yID0gbWF0aC5jb2xvcigyNTUsMCwwLDI1NSlcclxuICAgIH1cclxuXHJcbiAgICBzdGFydCgpIHtcclxuICAgICAgICAvLyB0aGlzLmdldFdvcmxkUGF0aCgpXHJcbiAgICAgICAgdGhpcy5nZXRXb3JsZFBhdGhCeU1hcElkKDEpO1xyXG4gICAgfVxyXG5cclxuICAgIHVwZGF0ZShkZWx0YVRpbWU6IG51bWJlcikge1xyXG4gICAgICAgIFxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXRXb3JsZFBhdGhCeU1hcElkKG1hcElkOiBudW1iZXIsIHRoZW1lSWQ6IG51bWJlciA9IFRvd2VyTGF1bmNoZXIuaW5zdGFuY2UudGhlbWUpOiBQcm9taXNlPFZlYzJbXT57XHJcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHsgXHJcbiAgICAgICAgICAgIGNvbnN0IHBhdGg6IHN0cmluZyA9IGBhbmltL21hcC9tYXAke3RoZW1lSWR9XyR7bWFwSWR9YFxyXG4gICAgICAgICAgICByZXNvdXJjZXMubG9hZChwYXRoLCAoZXJyOiBFcnJvciwgZGF0YTogYW55KSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZXJyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnIpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnIpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGRhdGEpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcGF0aDogVmVjMltdID0gdGhpcy5nZXROb2RlUGF0aChkYXRhKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuZHJhd1BvaW50KHBhdGgsIENvbG9yLlJFRCk7XHJcbiAgICAgICAgICAgICAgICByZXNvbHZlKHBhdGgpXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfSlcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgd29ybGQgcGF0aFxyXG4gICAgICpcclxuICAgICAqIEByZXR1cm5zIHdvcmxkIHBhdGhcclxuICAgICAqL1xyXG4gICAgZ2V0V29ybGRQYXRoKCk6IFZlYzJbXSB7XHJcbiAgICAgICAgY29uc3QgY2xpcHM6IEFuaW1hdGlvbkNsaXBbXSA9IHRoaXMuYW5pbWF0aW9uLmNsaXBzO1xyXG4gICAgICAgIGxldCBwYXRoID0gdGhpcy5nZXROb2RlUGF0aChjbGlwc1swXSk7XHJcbiAgICAgICAgY29uc29sZS5sb2cocGF0aCk7XHJcbiAgICAgICAgdGhpcy5kcmF3UG9pbnQocGF0aCxDb2xvci5SRUQpO1xyXG4gICAgICAgIHJldHVybiBwYXRoXHJcbiAgICAgICAgLy8gZm9yIChsZXQgaSA9IDA7IGkgPCBwYXRoLmxlbmd0aDsgaSsrKVxyXG4gICAgICAgIC8vICAgICBwYXRoW2ldID0gdGhpcy5ub2RlLmdldFdvcmxkUG9zaXRpb24ocGF0aFtpXSk7XHJcbiAgICAgICAgLy8gcmV0dXJuIHBhdGg7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKlxyXG4gICAgICogQHJldHVybnMg6IqC54K55Z2Q5qCHXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgZ2V0Tm9kZVBhdGgoY2xpcDpBbmltYXRpb25DbGlwKTogVmVjMltdIHtcclxuICAgICAgICBsZXQgdHJhY2s6YW5pbWF0aW9uLlRyYWNrID0gY2xpcC50cmFja3NbMF07XHJcbiAgICAgICAgY29uc3QgY2hhbm5lbHMgPSB0cmFjay5jaGFubmVscygpO1xyXG4gICAgICAgIGNvbnN0IHhjdXJ2ZTpSZWFsQ3VydmUgPSBjaGFubmVsc1swXS5jdXJ2ZTtcclxuICAgICAgICBjb25zdCB5Y3VydmU6IFJlYWxDdXJ2ZSA9IGNoYW5uZWxzWzFdLmN1cnZlO1xyXG5cclxuICAgICAgICBjb25zdCB4a2V5RnJhbWU6IFJlYWxLZXlmcmFtZVZhbHVlW10gPSB4Y3VydmUudmFsdWVzKCkgYXMgUmVhbEtleWZyYW1lVmFsdWVbXTtcclxuICAgICAgICBjb25zdCB5a2V5RnJhbWU6IFJlYWxLZXlmcmFtZVZhbHVlW10gPSB5Y3VydmUudmFsdWVzKCkgYXMgUmVhbEtleWZyYW1lVmFsdWVbXTtcclxuICAgICAgICAvLyBsZXQgcGF0aHMgPSAgY2xpcC5jdXJ2ZXMvL2NsaXAuY3VydmVEYXRhLnBhdGhzOyAvL+WKqOeUu+i3r+W+hOaVsOe7hFxyXG4gICAgICAgIC8vIGxldCBmcmFtZUFycmF5ID0gcGF0aHNbcGF0aE5hbWVdLnByb3BzLnBvc2l0aW9uOyAvL+WFs+mUruW4p+aVsOe7hOWNs+S4uuS4gOadoei3r+W+hFxyXG4gICAgICAgIGxldCBiZXppZXJQYXJ0QXJyYXk6IFZlYzJbXSA9IHRoaXMuZ2V0QmV6aWVyUGFydEFycmF5KHhrZXlGcmFtZSx5a2V5RnJhbWUpO1xyXG4gICAgICAgIC8vIGxldCBwYXRoOiBWZWMyW10gPSB0aGlzLl9nZXRQYXRoKGJlemllclBhcnRBcnJheSk7XHJcblxyXG4gICAgICAgIHJldHVybiBiZXppZXJQYXJ0QXJyYXk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDlvpfliLDngrnot6/lvoRcclxuICAgICAqIEBwYXJhbSBiZXppZXJQYXJ0QXJyYXkg5puy57q/5pWw57uEXHJcbiAgICAgKiBAcmV0dXJucyBwYXRoIOS4jeWQq+i3r+W+hOi1t+eCueWdkOagh1xyXG4gICAgICovXHJcbiAgICBwcml2YXRlIF9nZXRQYXRoKGJlemllclBhcnRBcnJheTogQmV6aWVyUGFydFtdKTogVmVjMltdIHtcclxuICAgICAgICBsZXQgcEFycmF5OiBWZWMyW10gPSBbXTtcclxuICAgICAgICBsZXQgYmV6aWVyOiBCZXppZXJQYXJ0O1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYmV6aWVyUGFydEFycmF5Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGJlemllciA9IGJlemllclBhcnRBcnJheVtpXTtcclxuICAgICAgICAgICAgYmV6aWVyLmNyZWF0ZVBvc0FycmF5KDE2KTtcclxuICAgICAgICAgICAgcEFycmF5ID0gcEFycmF5LmNvbmNhdChiZXppZXIucG9zQXJyYXkpO1xyXG5cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHBBcnJheTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOeUseWFs+mUruW4p+aVsOe7hCDlvpfliLAg5puy57q/5q615pWw57uEXHJcbiAgICAgKiBAcGFyYW0geGZyYW1lQXJyYXlcclxuICAgICAqIEBwYXJhbSB5ZnJhbWVBcnJheVxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIGdldEJlemllclBhcnRBcnJheSh4ZnJhbWVBcnJheTogUmVhbEtleWZyYW1lVmFsdWVbXSwgeWZyYW1lQXJyYXk6IFJlYWxLZXlmcmFtZVZhbHVlW10pOiBWZWMyW10ge1xyXG4gICAgICAgIGxldCBiZXppZXJQYXJ0QXJyYXk6IFZlYzJbXSA9IFtdO1xyXG5cclxuICAgICAgICBjb25zdCBtYXhMZW5ndGg6IG51bWJlciA9IE1hdGgubWF4KHhmcmFtZUFycmF5Lmxlbmd0aCwgeWZyYW1lQXJyYXkubGVuZ3RoKTtcclxuICAgICAgICAvL+S4pOS4quWFs+mUruW4p+e7hOaIkOS4gOadoei3r+W+hFxyXG4gICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgbWF4TGVuZ3RoIC0gMTsgaisrKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHhLZXlGcmFtZTogUmVhbEtleWZyYW1lVmFsdWUgPSB4ZnJhbWVBcnJheVtqXTtcclxuICAgICAgICAgICAgY29uc3QgeUtleUZyYW1lOiBSZWFsS2V5ZnJhbWVWYWx1ZSA9IHlmcmFtZUFycmF5W2pdO1xyXG4gICAgICAgICAgICBjb25zdCBuZXh0WEtleUZyYW1lOiBSZWFsS2V5ZnJhbWVWYWx1ZSA9IHhmcmFtZUFycmF5W2ogKyAxXTtcclxuICAgICAgICAgICAgY29uc3QgbmV4dFlLZXlGcmFtZTogUmVhbEtleWZyYW1lVmFsdWUgPSB5ZnJhbWVBcnJheVtqICsgMV07XHJcbiAgICAgICAgICAgIGxldCBhcnI6IFZlYzJbXSA9IHRoaXMuY3JlYXRlQmV6aWVyUGFydEFycmF5KHhLZXlGcmFtZSx5S2V5RnJhbWUsbmV4dFhLZXlGcmFtZSxuZXh0WUtleUZyYW1lKTtcclxuICAgICAgICAgICAgYmV6aWVyUGFydEFycmF5ID0gYmV6aWVyUGFydEFycmF5LmNvbmNhdChhcnIpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGJlemllclBhcnRBcnJheTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOeUseS4pOS4quWFs+mUruW4pyDnlJ/miJAg5a6D5Lus5p6E5oiQ55qE6LSd5aGe5bCU5puy57q/5q615pWw57uEXHJcbiAgICAgKiBAcGFyYW0gc3RhcnRYS2V5RnJhbWVcclxuICAgICAqIEBwYXJhbSBzdGFydFlLZXlGcmFtZVxyXG4gICAgICogQHBhcmFtIGVuZFhLZXlGcmFtZVxyXG4gICAgICogQHBhcmFtIGVuZFlLZXlGcmFtZVxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIGNyZWF0ZUJlemllclBhcnRBcnJheShzdGFydFhLZXlGcmFtZTpSZWFsS2V5ZnJhbWVWYWx1ZSxzdGFydFlLZXlGcmFtZTpSZWFsS2V5ZnJhbWVWYWx1ZSwgZW5kWEtleUZyYW1lOlJlYWxLZXlmcmFtZVZhbHVlLGVuZFlLZXlGcmFtZTpSZWFsS2V5ZnJhbWVWYWx1ZSk6IFZlYzJbXSB7XHJcbiAgICAgICAgbGV0IGJlemllclBhcnRBcnJheTogQmV6aWVyUGFydFtdID0gW107XHJcblxyXG4gICAgICAgIGNvbnN0IHN0YXJ0UG9pbnQ6VmVjMiA9IG1hdGgudjIoc3RhcnRYS2V5RnJhbWUudmFsdWUsc3RhcnRZS2V5RnJhbWUudmFsdWUpO1xyXG4gICAgICAgIGNvbnN0IGVuZFBvaW50OlZlYzIgPSBtYXRoLnYyKGVuZFhLZXlGcmFtZS52YWx1ZSxlbmRZS2V5RnJhbWUudmFsdWUpO1xyXG5cclxuXHJcblxyXG4gICAgICAgIGNvbnN0IGRpcmVjdGlvbjpWZWMyID0gZW5kUG9pbnQuc3VidHJhY3Qoc3RhcnRQb2ludCk7XHJcblxyXG4gICAgICAgIGNvbnN0IGRpc3RhbmNlOm51bWJlciA9IGRpcmVjdGlvbi5sZW5ndGgoKTsgLy9WZWMyLmRpc3RhbmNlKHN0YXJ0UG9pbnQsZW5kUG9pbnQpO1xyXG4gICAgICAgIGNvbnN0IG51bVNlZ21lbnRzOiBudW1iZXIgPSBkaXN0YW5jZSAvIHRoaXMucDJwRGlzdGFuY2U7XHJcbiAgICAgICAgY29uc3QgZHggPSBkaXJlY3Rpb24ueCAvIG51bVNlZ21lbnRzOyAgLy8geOi9tOaWueWQkeeahOavj+auteWinumHj1xyXG4gICAgICAgIGNvbnN0IGR5ID0gZGlyZWN0aW9uLnkgLyBudW1TZWdtZW50czsgIC8vIHnovbTmlrnlkJHnmoTmr4/mrrXlop7ph49cclxuXHJcbiAgICAgICAgY29uc3QgcmVzdWx0OlZlYzJbXSA9IFtdO1xyXG5cclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8PSBudW1TZWdtZW50czsgaSsrKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHggPSBzdGFydFBvaW50LnggKyBpICogZHg7XHJcbiAgICAgICAgICAgIGNvbnN0IHkgPSBzdGFydFBvaW50LnkgKyBpICogZHk7XHJcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKG1hdGgudjIoeCwgeSkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG5cclxuICAgICAgICAvLyBsZXQgc3RhcnRQOiBWZWMyLCBjUDE6IFZlYzIsIGNQMjogVmVjMiwgZW5kUDogVmVjMjtcclxuICAgICAgICAvLyBsZXQgbW90aW9uUGF0aCA9IHN0YXJ0S2V5RnJhbWUubW90aW9uUGF0aDsgLy/np7vliqjot6/lvoTmlbDnu4TljbPkuLvmjqfliLbngrnmlbDnu4RcclxuICAgICAgICAvLyBsZXQgbW9QYXRoU1AsIG1vUGF0aEVQOyAvL+S4gOauteabsue6v+S4iueahOmmluWwvuerr+S4u+aOp+WItueCuVxyXG4gICAgICAgIC8vXHJcbiAgICAgICAgLy8gLy/nrKzkuIDmrrVcclxuICAgICAgICAvLyBzdGFydFAgPSBtYXRoLnYyKHN0YXJ0S2V5RnJhbWUudmFsdWVbMF0sIHN0YXJ0S2V5RnJhbWUudmFsdWVbMV0pO1xyXG4gICAgICAgIC8vIG1vUGF0aEVQID0gbW90aW9uUGF0aFswXTtcclxuICAgICAgICAvLyBjUDEgPSBjUDIgPSBtYXRoLnYyKG1vUGF0aEVQWzJdLCBtb1BhdGhFUFszXSk7XHJcbiAgICAgICAgLy8gZW5kUCA9IG1hdGgudjIobW9QYXRoRVBbMF0sIG1vUGF0aEVQWzFdKTtcclxuICAgICAgICAvLyBiZXppZXJQYXJ0QXJyYXkucHVzaChuZXcgQmV6aWVyUGFydChzdGFydFAsIGNQMSwgY1AyLCBlbmRQKSk7XHJcbiAgICAgICAgLy9cclxuICAgICAgICAvLyBmb3IgKGxldCBpID0gMDsgaSA8IG1vdGlvblBhdGgubGVuZ3RoIC0gMTsgaSsrKSB7IC8vMCAtIGxlbiAtIDEsIGxlbiAtIDMgbGVuIC0gMiBsZW4gLTFcclxuICAgICAgICAvLyAgICAgbW9QYXRoU1AgPSBtb3Rpb25QYXRoW2ldO1xyXG4gICAgICAgIC8vICAgICBtb1BhdGhFUCA9IG1vdGlvblBhdGhbaSArIDFdXHJcbiAgICAgICAgLy8gICAgIHN0YXJ0UCA9IG1hdGgudjIobW9QYXRoU1BbMF0sIG1vUGF0aFNQWzFdKTtcclxuICAgICAgICAvLyAgICAgY1AxID0gbWF0aC52Mihtb1BhdGhTUFs0XSwgbW9QYXRoU1BbNV0pO1xyXG4gICAgICAgIC8vICAgICBjUDIgPSBtYXRoLnYyKG1vUGF0aEVQWzJdLCBtb1BhdGhFUFszXSk7XHJcbiAgICAgICAgLy8gICAgIGVuZFAgPSBtYXRoLnYyKG1vUGF0aEVQWzBdLCBtb1BhdGhFUFsxXSk7XHJcbiAgICAgICAgLy8gICAgIGJlemllclBhcnRBcnJheS5wdXNoKG5ldyBCZXppZXJQYXJ0KHN0YXJ0UCwgY1AxLCBjUDIsIGVuZFApKTtcclxuICAgICAgICAvLyB9XHJcbiAgICAgICAgLy9cclxuICAgICAgICAvLyAvL+acgOWQjuS4gOautVxyXG4gICAgICAgIC8vIG1vUGF0aFNQID0gbW90aW9uUGF0aFttb3Rpb25QYXRoLmxlbmd0aCAtIDFdO1xyXG4gICAgICAgIC8vIHN0YXJ0UCA9IG1hdGgudjIobW9QYXRoU1BbMF0sIG1vUGF0aFNQWzFdKTtcclxuICAgICAgICAvLyBjUDEgPSBjUDIgPSBtYXRoLnYyKG1vUGF0aFNQWzRdLCBtb1BhdGhTUFs1XSk7XHJcbiAgICAgICAgLy8gZW5kUCA9IG1hdGgudjIoZW5kS2V5RnJhbWUudmFsdWVbMF0sIGVuZEtleUZyYW1lLnZhbHVlWzFdKTtcclxuICAgICAgICAvLyBiZXppZXJQYXJ0QXJyYXkucHVzaChuZXcgQmV6aWVyUGFydChzdGFydFAsIGNQMSwgY1AyLCBlbmRQKSk7XHJcblxyXG4gICAgICAgIC8vIHJldHVybiBiZXppZXJQYXJ0QXJyYXk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBEcmF3cyBwb2ludFxyXG4gICAgICogQHBhcmFtIHBvaW50IOeCueWdkOagh1xyXG4gICAgICogQHBhcmFtIGNvbG9yIOm7mOiupOminOiJsuS4uue6ouiJslxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIGRyYXdQb2ludChwb2ludDogVmVjMiB8IFZlYzJbXSwgY29sb3I6IENvbG9yID0gbnVsbCkge1xyXG4gICAgICAgIHRoaXMuZ3JhcGhpY3MuY2xlYXIoKTtcclxuICAgICAgICBpZiAoY29sb3IgPT09IG51bGwpXHJcbiAgICAgICAgICAgIHRoaXMuZ3JhcGhpY3Muc3Ryb2tlQ29sb3IgPSBDb2xvci5SRUQ7XHJcbiAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICB0aGlzLmdyYXBoaWNzLnN0cm9rZUNvbG9yID0gY29sb3I7XHJcblxyXG4gICAgICAgIC8vIHRoaXMuZ3JhcGhpY3Muc3Ryb2tlQ29sb3IgPSBjYy5Db2xvci5SRUQ7XHJcbiAgICAgICAgdGhpcy5ncmFwaGljcy5maWxsQ29sb3IgPSBDb2xvci5SRURcclxuICAgICAgICB0aGlzLmdyYXBoaWNzLmxpbmVXaWR0aCA9IDE7XHJcblxyXG4gICAgICAgIGlmICgoPFZlYzJbXT5wb2ludCkubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgKDxWZWMyW10+cG9pbnQpLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmdyYXBoaWNzLmNpcmNsZShwb2ludFtpXS54LCBwb2ludFtpXS55LCAyKTtcclxuICAgICAgICAgICAgICAgIC8vIHRoaXMuZ3JhcGhpY3Muc3Ryb2tlKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmdyYXBoaWNzLmZpbGwoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5ncmFwaGljcy5jaXJjbGUoKDxWZWMyPnBvaW50KS54LCAoPFZlYzI+cG9pbnQpLnksIDIpO1xyXG4gICAgICAgICAgICB0aGlzLmdyYXBoaWNzLmZpbGwoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgfVxyXG59XHJcbiIsImV4cG9ydCBjbGFzcyBBcmVhVHlwZSB7XHJcbiAgICAvLy8gPHN1bW1hcnk+XHJcbiAgICAvLy8g5bem5LiKXHJcbiAgICAvLy8gPC9zdW1tYXJ5PlxyXG4gICAgcHVibGljIHN0YXRpYyAgTFQ6bnVtYmVyID0gMHgwMDAxO1xyXG4gICAgLy8vIDxzdW1tYXJ5PlxyXG4gICAgLy8vIOWPs+S4ilxyXG4gICAgLy8vIDwvc3VtbWFyeT5cclxuICAgIHB1YmxpYyBzdGF0aWMgIFJUOm51bWJlciA9IDB4MDAxMDtcclxuICAgIC8vLyA8c3VtbWFyeT5cclxuICAgIC8vLyDlt6bkuItcclxuICAgIC8vLyA8L3N1bW1hcnk+XHJcbiAgICBwdWJsaWMgc3RhdGljICBMQjpudW1iZXIgPSAweDAxMDA7XHJcbiAgICAvLy8gPHN1bW1hcnk+XHJcbiAgICAvLy8g5Y+z5LiLXHJcbiAgICAvLy8gPC9zdW1tYXJ5PlxyXG4gICAgcHVibGljIHN0YXRpYyAgUkI6bnVtYmVyID0gMHgxMDAwO1xyXG59IiwiLyoqXHJcbiAqIEBjbGFzczogQXJyYXlVdGlsc1xyXG4gKiBAZGVzY3JpcHRpb246IOaVsOe7hOW3peWFt+exu1xyXG4gKiBAYXV0aG9yOiBSYW5cclxuICogQHRpbWU6IDIwMjQtMDgtMTIgMjA6MDU6MDBcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEFycmF5VXRpbHMge1xyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqIOmaj+acuuS4i+agh1xyXG4gICAgICogQHBhcmFtIGxlbiDvvJrmlbDnu4Tplb/luqZcclxuICAgICAqIEBwYXJhbSBjb3VudCDvvJrpnIDopoHnmoTkuIvmoIfkuKrmlbBcclxuICAgICAqIEBwYXJhbSByZXBldGl0aW9uIO+8muS4i+agh+aYr+WQpuWPr+S7pemHjeWkje+8jOe8uuecgeS4umZhbHNlXHJcbiAgICAgKiBAcmV0dXJucyDkuIvmoIfmlbDnu4Qo5pyq5o6S5bqPKVxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgc3RhdGljIHJhbmRvbUluZGV4KGxlbjogbnVtYmVyLCBjb3VudDogbnVtYmVyLCByZXBldGl0aW9uOiBib29sZWFuID0gZmFsc2UpIHtcclxuICAgICAgICBsZXQgcmV0ID0gW107XHJcbiAgICAgICAgbGV0IGtleSA9IHt9O1xyXG4gICAgICAgIGxldCBpID0gMDtcclxuICAgICAgICB3aGlsZSAoaSA8IGNvdW50KSB7XHJcbiAgICAgICAgICAgIGxldCBfaSA9IE1hdGguZmxvb3IoKE1hdGgucmFuZG9tKCkgKiBsZW4gKiAxMDApICUgbGVuKTtcclxuICAgICAgICAgICAgaWYgKGtleVtfaV0gIT0gbnVsbCAmJiAhcmVwZXRpdGlvbikgY29udGludWU7XHJcblxyXG4gICAgICAgICAgICByZXQucHVzaChfaSk7XHJcbiAgICAgICAgICAgIGtleVtfaV0gPSBfaTtcclxuICAgICAgICAgICAgaSsrO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmV0O1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqIOiOt+WPluS4gOS4quiMg+WbtOWGheeahOmaj+acuuaVsO+8jFttaW4sIG1heF1cclxuICAgICAqIEBwYXJhbSBtaW4gLSDmnIDlsI/lgLxcclxuICAgICAqIEBwYXJhbSBtYXggLSDmnIDlpKflgLxcclxuICAgICAqIEBwYXJhbSBpbnRlZ2VyIC0g5piv5ZCm5Y+W5pW077yM57y655yB5Li6dHJ1ZVxyXG4gICAgICogQHJldHVybnMgXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBzdGF0aWMgcmFuZG9tUmFuZ2UobWluOiBudW1iZXIsIG1heDogbnVtYmVyLCBpbnRlZ2VyOiBib29sZWFuID0gdHJ1ZSkge1xyXG4gICAgICAgIHJldHVybiBpbnRlZ2VyID8gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogKG1heCAtIG1pbiArIDEpKSArIG1pbiA6IE1hdGgucmFuZG9tKCkgKiAobWF4IC0gbWluKSArIG1pbjtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc3RhdGljIHJlbW92ZUl0ZW0oYXJyYXk6IEFycmF5PGFueT4sIGl0ZW06IGFueSk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHZhciBpOiBudW1iZXIgPSBhcnJheS5sZW5ndGg7XHJcbiAgICAgICAgd2hpbGUgKGkgPiAwKSB7XHJcbiAgICAgICAgICAgIGktLTtcclxuICAgICAgICAgICAgaWYgKGFycmF5W2ldID09PSBpdGVtKSB7XHJcbiAgICAgICAgICAgICAgICBhcnJheS5zcGxpY2UoaSwgMSk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5a+55pWw57uE55qE6L+b6KGMTlVNQkVS5o6S5bqPXHJcbiAgICAgKiBAcGFyYW0gX2FycjEgXHJcbiAgICAgKiBAcGFyYW0gcmUgdHJ1ZeWNh+W6jyBmYWxzZemZjeW6j1xyXG4gICAgICogQHBhcmFtIGlzTmV3IOaYr+WQpuWIm+W7uuaWsOeahOaVsOe7hFxyXG4gICAgICogQHJldHVybnMgXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBzdGF0aWMgc29ydEJ5PFQ+KF9hcnIxOiBUW10sIHJlOiBib29sZWFuID0gZmFsc2UsIGlzTmV3OiBib29sZWFuID0gdHJ1ZSk6IFRbXSB7XHJcbiAgICAgICAgdmFyIGFycjogVFtdID0gaXNOZXcgPyBfYXJyMS5jb25jYXQoKSA6IF9hcnIxO1xyXG4gICAgICAgIGFyci5zb3J0KHNvcnRGdW4pO1xyXG4gICAgICAgIHJldHVybiBhcnI7XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHNvcnRGdW4oYTogVCwgYjogVCk6IG51bWJlciB7XHJcbiAgICAgICAgICAgIGlmIChhIDwgYikge1xyXG4gICAgICAgICAgICAgICAgaWYgKHJlKSByZXR1cm4gLTE7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gMTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoYSA9PSBiKSByZXR1cm4gMDtcclxuXHJcbiAgICAgICAgICAgIGlmIChyZSkgcmV0dXJuIDE7XHJcblxyXG4gICAgICAgICAgICAvL+a3u+WKoOWeg+WcvuS7o+eggVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIC0xO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFxyXG4gICAgICogQHBhcmFtIF9hcnIxIOWvueixoeaVsOe7hFxyXG4gICAgICogQHBhcmFtIHAg5bGe5oCn5ZCNXHJcbiAgICAgKiBAcGFyYW0gcmUgZmFsc2XpmY3luo8gdHJ1ZeWNh+W6j1xyXG4gICAgICogQHBhcmFtIGlzTmV3IOaYr+WQpuWIm+W7uuaWsOeahOaVsOe7hFxyXG4gICAgICogQHJldHVybnMgXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBzdGF0aWMgc29ydEJ5MjxUPihfYXJyMTogVFtdLCBwOiBzdHJpbmcsIHJlOiBib29sZWFuID0gZmFsc2UsIGlzTmV3OiBib29sZWFuID0gdHJ1ZSk6IFRbXSB7XHJcbiAgICAgICAgdmFyIGFycjogVFtdID0gaXNOZXcgPyBfYXJyMS5jb25jYXQoKSA6IF9hcnIxO1xyXG4gICAgICAgIGFyci5zb3J0KHNvcnRGdW4pO1xyXG5cclxuICAgICAgICBmdW5jdGlvbiBzb3J0RnVuKGE6IFQsIGI6IFQpOiBudW1iZXIge1xyXG4gICAgICAgICAgICBpZiAoYVtwXSA8IGJbcF0pIHtcclxuICAgICAgICAgICAgICAgIGlmIChyZSkgcmV0dXJuIC0xO1xyXG5cclxuICAgICAgICAgICAgICAgIC8v5re75Yqg5Z6D5Zy+5Luj56CBXHJcblxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIDE7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGFbcF0gPT0gYltwXSkgcmV0dXJuIDA7XHJcblxyXG4gICAgICAgICAgICBpZiAocmUpIHJldHVybiAxO1xyXG4gICAgICAgICAgICByZXR1cm4gLTE7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBhcnI7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDlr7nmlbDnu4TnmoTmn5DkupvlsZ7mgKfmjpLluo9cclxuICAgICAqIEBwYXJhbSBfYXJyMSDlr7nosaHmlbDnu4RcclxuICAgICAqIEBwYXJhbSBwIOWxnuaAp+WQjVxyXG4gICAgICogQHBhcmFtIHJlIGZhbHNlIOWNh+W6jyB0cnVlIOmZjeW6j1xyXG4gICAgICogQHBhcmFtIGlzTmV3IOaYr+WQpuWIm+W7uuaWsOeahOaVsOe7hFxyXG4gICAgICogQHJldHVybnMgXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBzdGF0aWMgc29ydEJ5MzxUPihfYXJyMTogVFtdLCBwOiBhbnlbXSwgcmU6IGJvb2xlYW4gPSBmYWxzZSwgaXNOZXc6IGJvb2xlYW4gPSB0cnVlKTogVFtdIHtcclxuICAgICAgICB2YXIgYXJyOiBUW10gPSBpc05ldyA/IF9hcnIxLmNvbmNhdCgpIDogX2FycjE7XHJcbiAgICAgICAgYXJyLnNvcnQoc29ydEZ1bik7XHJcblxyXG4gICAgICAgIC8v5re75Yqg5Z6D5Zy+5Luj56CBXHJcbiAgICAgICAgcmV0dXJuIGFycjtcclxuXHJcbiAgICAgICAgZnVuY3Rpb24gc29ydEZ1bihhOiBULCBiOiBUKTogbnVtYmVyIHtcclxuICAgICAgICAgICAgdmFyIGk6IG51bWJlciA9IDA7XHJcbiAgICAgICAgICAgIHdoaWxlICh0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoYVtwW2ldXSA8IGJbcFtpXV0pIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAocmUpIHJldHVybiAxO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAtMTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGFbcFtpXV0gPiBiW3BbaV1dKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlKSByZXR1cm4gLTE7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDE7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoYVtwW2ldXSA9PSBiW3BbaV1dKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaSsrO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpID49IHAubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gMDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBcclxuICAgICAqIEBwYXJhbSBfYXJyMSBcclxuICAgICAqIEBwYXJhbSBfYXJyMiBcclxuICAgICAqIEBwYXJhbSByZUFyciBcclxuICAgICAqIEBwYXJhbSBpc05ldyBcclxuICAgICAqIEByZXR1cm5zIFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgc3RhdGljIHNvcnRCeTQ8VD4oX2FycjE6IFRbXSwgX2FycjI6IGFueVtdLCByZUFycjogYW55W10sIGlzTmV3OiBib29sZWFuID0gdHJ1ZSk6IFRbXSB7XHJcbiAgICAgICAgdmFyIGFycjogVFtdID0gaXNOZXcgPyBfYXJyMS5jb25jYXQoKSA6IF9hcnIxO1xyXG4gICAgICAgIGlmICghYXJyIHx8IGFyci5sZW5ndGggPT0gMCkgcmV0dXJuIFtdO1xyXG5cclxuICAgICAgICBhcnIuc29ydChzb3J0RnVuKTtcclxuXHJcbiAgICAgICAgLy/mt7vliqDlnoPlnL7ku6PnoIFcclxuXHJcbiAgICAgICAgcmV0dXJuIGFycjtcclxuXHJcbiAgICAgICAgZnVuY3Rpb24gc29ydEZ1bihhOiBhbnksIGI6IGFueSk6IG51bWJlciB7XHJcbiAgICAgICAgICAgIHZhciBpOiBudW1iZXI7XHJcbiAgICAgICAgICAgIHZhciBhYTogT2JqZWN0ID0gYTtcclxuICAgICAgICAgICAgdmFyIGJiOiBPYmplY3QgPSBiO1xyXG4gICAgICAgICAgICB2YXIgcmU6IEJvb2xlYW4gPSBmYWxzZTtcclxuICAgICAgICAgICAgZm9yICh2YXIgajogbnVtYmVyID0gMDsgaiA8IF9hcnIyLmxlbmd0aDsgaisrKSB7XHJcbiAgICAgICAgICAgICAgICBhID0gYWE7XHJcbiAgICAgICAgICAgICAgICBiID0gYmI7XHJcbiAgICAgICAgICAgICAgICByZSA9IHJlQXJyW2pdO1xyXG4gICAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IF9hcnIyW2pdLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYSA9IGFbX2FycjJbal1baV1dO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBfYXJyMltqXS5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGIgPSBiW19hcnIyW2pdW2ldXTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoYSAhPSBiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChhIDwgYikge1xyXG4gICAgICAgICAgICAgICAgaWYgKHJlKSByZXR1cm4gLTE7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gMTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoYSA9PSBiKSByZXR1cm4gMDtcclxuXHJcbiAgICAgICAgICAgIGlmIChyZSkgcmV0dXJuIDE7XHJcbiAgICAgICAgICAgIHJldHVybiAtMTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBcclxuICAgICAqIEBwYXJhbSBfYXJyMSBcclxuICAgICAqIEBwYXJhbSBwIOWxnuaAp+WQjVxyXG4gICAgICogQHBhcmFtIHJlQXJyIGZhbHNlIOWNh+W6jyB0cnVlIOmZjeW6j1xyXG4gICAgICogQHBhcmFtIGlzTmV3IOaYr+WQpuWIm+W7uuaWsOeahOaVsOe7hFxyXG4gICAgICogIOS+i+WtkDpzb3J0Qnk1KGxpc3QsW1widHlwZVwiLFwiaWRcIl0sW2ZhbGVzLHRydWVdLGZhbHNlKTsvL+WvuXR5cGXljYfluo/mjpLlrozlho3lr7lpZOmZjeW6j+aOklxyXG4gICAgICogQHJldHVybnMgXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBzdGF0aWMgc29ydEJ5NTxUPihfYXJyMTogVFtdLCBwOiBhbnlbXSwgcmVBcnI6IGJvb2xlYW5bXSA9IFtdLCBpc05ldzogYm9vbGVhbiA9IHRydWUpOiBhbnlbXSB7XHJcbiAgICAgICAgdmFyIGFycjogVFtdID0gaXNOZXcgPyBfYXJyMS5jb25jYXQoKSA6IF9hcnIxO1xyXG4gICAgICAgIGFyci5zb3J0KHNvcnRGdW4pO1xyXG5cclxuICAgICAgICAvL+a3u+WKoOWeg+WcvuS7o+eggVxyXG5cclxuICAgICAgICByZXR1cm4gYXJyO1xyXG5cclxuICAgICAgICBmdW5jdGlvbiBzb3J0RnVuKGE6IFQsIGI6IFQpOiBudW1iZXIge1xyXG4gICAgICAgICAgICB2YXIgaTogbnVtYmVyID0gMDtcclxuICAgICAgICAgICAgd2hpbGUgKHRydWUpIHtcclxuICAgICAgICAgICAgICAgIHZhciByZTogYm9vbGVhbiA9IHJlQXJyW2ldO1xyXG4gICAgICAgICAgICAgICAgaWYgKGFbcFtpXV0gPCBiW3BbaV1dKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlKSByZXR1cm4gMTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gLTE7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChhW3BbaV1dID4gYltwW2ldXSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChyZSkgcmV0dXJuIC0xO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAxO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKGFbcFtpXV0gPT0gYltwW2ldXSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGkrKztcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaSA+PSBwLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIDA7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIGNsYXNzIGVuZFxyXG59XHJcbiIsImltcG9ydCB7IEFzc2V0LCBhc3NldE1hbmFnZXIsIEFzc2V0TWFuYWdlciwgaW5zdGFudGlhdGUsIE5vZGUsIFByZWZhYiB9IGZyb20gXCJjY1wiO1xyXG5cclxuLyoqXHJcbiAqIEBjbGFzcyBuYW1lIDogQXNzZXRNYW5hZ2VyXHJcbiAqIEBkZXNjcmlwdGlvbiA6IOi1hOa6kOeuoeeQhuexu1xyXG4gKiBAYXV0aG9yIDogUmFuXHJcbiAqIEB0aW1lIDogMjAyMi4wNy4yMFxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQXNzZXRNZ3Ige1xyXG5cclxuXHJcbiAgICBwcml2YXRlIHN0YXRpYyBfaW5zdGFuY2U6IEFzc2V0TWdyO1xyXG4gICAgcHVibGljIHN0YXRpYyBnZXQgaW5zdGFuY2UoKTogQXNzZXRNZ3Ige1xyXG4gICAgICAgIHRoaXMuX2luc3RhbmNlIHx8ICh0aGlzLl9pbnN0YW5jZSA9IG5ldyBBc3NldE1ncigpKTtcclxuICAgICAgICByZXR1cm4gdGhpcy5faW5zdGFuY2U7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog6I635Y+WYnVuZGxl77yM5aaC5p6c5pyq5Yqg6L295YiZ5Yqg6L296K+lYnVuZGxlXHJcbiAgICAgKiBAcGFyYW0gbmFtZU9yVXJsIC0gYnVuZGxl6Lev5b6EXHJcbiAgICAgKiBAcmV0dXJucyBidW5kbGXlr7nosaFcclxuICAgICAqL1xyXG4gICAgcHVibGljIGdldEJ1bmRsZShuYW1lT3JVcmw6IHN0cmluZyk6IFByb21pc2U8QXNzZXRNYW5hZ2VyLkJ1bmRsZT4ge1xyXG4gICAgICAgIGlmICghbmFtZU9yVXJsIHx8IG5hbWVPclVybCA9PT0gXCJcIikgcmV0dXJuIFByb21pc2UucmVqZWN0KFwiICoqKioqIEVSUk9SIEJ1bmRsZSBuYW1lICoqKioqIFwiKTtcclxuICAgICAgICBjb25zdCBidW5kbGUgPSBhc3NldE1hbmFnZXIuZ2V0QnVuZGxlKG5hbWVPclVybCk7XHJcbiAgICAgICAgaWYgKGJ1bmRsZSkgeyByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGJ1bmRsZSk7IH1cclxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2U8QXNzZXRNYW5hZ2VyLkJ1bmRsZT4oKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICAgICAgICBhc3NldE1hbmFnZXIubG9hZEJ1bmRsZShuYW1lT3JVcmwsIChlcnIsIGJ1bmRsZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKGVycikge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYCAqKioqKiBsb2FkIGJ1bmRsZSAke25hbWVPclVybH0gZXJyb3I6ICR7ZXJyfSAqKioqKiBgKTtcclxuICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICByZXNvbHZlKGJ1bmRsZSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqIOWKoOi9veaWh+S7tlxyXG4gICAgICogQHRlbXBsYXRlIFQgZXh0ZW5kcyBjYy5Bc3NldCAtIOi1hOa6kOexu+Wei1xyXG4gICAgICogQHBhcmFtIHBhdGggLSDotYTmupDot6/lvoTvvIzop4TliJnkuLo6IGJ1bmRsZU5hbWU6Ly9hc3NldE5hbWXvvIznvLrnnIFidW5kbGVOYW1l5Li6cmVzb3VyY2VzXHJcbiAgICAgKiBAcmV0dXJucyDotYTmupDlr7nosaFcclxuICAgICAqL1xyXG4gICAgcHVibGljIGFzeW5jIGxvYWQ8VCBleHRlbmRzIEFzc2V0PihwYXRoOiBzdHJpbmcsIGNiPzogRnVuY3Rpb24pOiBQcm9taXNlPFQ+IHtcclxuICAgICAgICBsZXQgcGF0aFJlc3VsdCA9IHRoaXMucGFyc2VBc3NldFBhdGgocGF0aCk7XHJcbiAgICAgICAgaWYgKHBhdGhSZXN1bHQgPT0gbnVsbCkgcmV0dXJuIFByb21pc2UucmVqZWN0KGAgKioqKiogRVJST1IgQnVuZGxlOiAke3BhdGh9ICoqKioqIGApO1xyXG4gICAgICAgIGxldCB7IGJ1bmRsZU5hbWUsIGFzc2V0TmFtZSB9ID0gcGF0aFJlc3VsdDtcclxuICAgICAgICBsZXQgYnVuZGxlID0gYXdhaXQgdGhpcy5nZXRCdW5kbGUoYnVuZGxlTmFtZSk7XHJcbiAgICAgICAgaWYgKCFidW5kbGUpIHtcclxuICAgICAgICAgICAgaWYgKGNiKSB7XHJcbiAgICAgICAgICAgICAgICBjYihgICoqKioqIEVSUk9SIEJ1bmRsZTogJHtidW5kbGVOYW1lfSAqKioqKiBgLCBudWxsKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoYCAqKioqKiBFUlJPUiBCdW5kbGU6ICR7YnVuZGxlTmFtZX0gKioqKiogYCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxldCBhc3NldCA9IGJ1bmRsZS5nZXQoYXNzZXROYW1lKTtcclxuICAgICAgICBpZiAoYXNzZXQpIHtcclxuICAgICAgICAgICAgaWYgKGNiKSB7XHJcbiAgICAgICAgICAgICAgICBjYihudWxsLCBhc3NldCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShhc3NldCBhcyBUKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGNiKSB7XHJcbiAgICAgICAgICAgIGJ1bmRsZS5sb2FkKGFzc2V0TmFtZSwgKGVycjogdW5rbm93biwgYXNzZXQ6IHVua25vd24pID0+IHtcclxuICAgICAgICAgICAgICAgIGNiKGVyciwgYXNzZXQpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2U8VD4oKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICAgICAgICBidW5kbGUubG9hZChhc3NldE5hbWUsIChlcnI6IHVua25vd24sIHJlc291cmNlOiB1bmtub3duKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZXJyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihgICoqKioqIGxvYWQgYXNzZXQgJHtwYXRofSBlcnJvcjogJHtlcnJ9ICoqKioqIGApO1xyXG4gICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmVzb2x2ZShyZXNvdXJjZSBhcyBUKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog6aKE5Yqg6L296LWE5rqQXHJcbiAgICAgKiBAcGFyYW0gcGF0aCAtIOi1hOa6kOi3r+W+hO+8jOinhOWImeS4ujogYnVuZGxlTmFtZTovL2Fzc2V0TmFtZe+8jOe8uuecgWJ1bmRsZU5hbWXkuLpyZXNvdXJjZXNcclxuICAgICAqL1xyXG4gICAgcHVibGljIGFzeW5jIHByZWxvYWQocGF0aDogc3RyaW5nKSB7XHJcbiAgICAgICAgbGV0IHBhdGhSZXN1bHQgPSB0aGlzLnBhcnNlQXNzZXRQYXRoKHBhdGgpO1xyXG4gICAgICAgIGlmIChwYXRoUmVzdWx0ID09IG51bGwpIHJldHVybiBQcm9taXNlLnJlamVjdChgICoqKioqIEVSUk9SIEJ1bmRsZTogJHtwYXRofSAqKioqKiBgKTtcclxuICAgICAgICBsZXQgeyBidW5kbGVOYW1lLCBhc3NldE5hbWUgfSA9IHBhdGhSZXN1bHQ7XHJcbiAgICAgICAgbGV0IGJ1bmRsZSA9IGF3YWl0IHRoaXMuZ2V0QnVuZGxlKGJ1bmRsZU5hbWUpO1xyXG4gICAgICAgIGlmICghYnVuZGxlKSByZXR1cm47XHJcbiAgICAgICAgYnVuZGxlLnByZWxvYWQoYXNzZXROYW1lKTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDop6PmnpDotYTmupDot6/lvoRcclxuICAgICAqIEBwYXJhbSBwYXRoIC0g6LWE5rqQ6Lev5b6E77yM6KeE5YiZ5Li6OiBidW5kbGVOYW1lOi8vYXNzZXROYW1l77yM57y655yBYnVuZGxlTmFtZeS4unJlc291cmNlc1xyXG4gICAgICogQHJldHVybnMg6LWE5rqQ6Lev5b6E5Lit55qEYnVuZGxlTmFtZeWSjGFzc2V0TmFtZVxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIHBhcnNlQXNzZXRQYXRoKHBhdGg6IHN0cmluZykge1xyXG4gICAgICAgIGxldCBidW5kbGVOYW1lOiBzdHJpbmcsIGFzc2V0TmFtZTogc3RyaW5nO1xyXG4gICAgICAgIGlmIChwYXRoLmluZGV4T2YoXCI6XCIpICE9IC0xKSB7XHJcbiAgICAgICAgICAgIGxldCByZWdleCA9IC8oLiopOlxcL1xcLyguKikvO1xyXG4gICAgICAgICAgICBsZXQgcmVnZXhBcnIgPSBwYXRoLm1hdGNoKHJlZ2V4KTtcclxuICAgICAgICAgICAgaWYgKHJlZ2V4QXJyID09IG51bGwgfHwgcmVnZXhBcnIubGVuZ3RoIDw9IDApIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgICBidW5kbGVOYW1lID0gcmVnZXhBcnJbMV07XHJcbiAgICAgICAgICAgIGFzc2V0TmFtZSA9IHJlZ2V4QXJyWzJdO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGJ1bmRsZU5hbWUgPSBcInJlc291cmNlc1wiXHJcbiAgICAgICAgICAgIGFzc2V0TmFtZSA9IHBhdGg7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB7IGJ1bmRsZU5hbWUsIGFzc2V0TmFtZSB9O1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqIOmHiuaUvui1hOa6kFxyXG4gICAgICogQHBhcmFtIHBhdGggLSDotYTmupDot6/lvoTvvIzop4TliJnkuLo6IGJ1bmRsZU5hbWU6Ly9hc3NldE5hbWXvvIznvLrnnIFidW5kbGVOYW1l5Li6cmVzb3VyY2VzXHJcbiAgICAgKiBAcGFyYW0gcmVsZWFzZUJ1bmRsZSAtIOaYr+WQpumHiuaUvmJ1bmRsZe+8jOe8uuecgeS4umZhbHNlXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyByZWxlYXNlKHBhdGg6IHN0cmluZywgcmVsZWFzZUJ1bmRsZTogYm9vbGVhbiA9IGZhbHNlKSB7XHJcbiAgICAgICAgbGV0IHBhdGhSZXN1bHQgPSB0aGlzLnBhcnNlQXNzZXRQYXRoKHBhdGgpO1xyXG4gICAgICAgIGlmIChwYXRoUmVzdWx0ID09IG51bGwpIHJldHVybiBQcm9taXNlLnJlamVjdChgICoqKioqIEVSUk9SIEJ1bmRsZTogJHtwYXRofSAqKioqKiBgKTtcclxuICAgICAgICBsZXQgeyBidW5kbGVOYW1lLCBhc3NldE5hbWUgfSA9IHBhdGhSZXN1bHQ7XHJcbiAgICAgICAgbGV0IGJ1bmRsZSA9IGFzc2V0TWFuYWdlci5nZXRCdW5kbGUoYnVuZGxlTmFtZSk7XHJcbiAgICAgICAgaWYgKCFidW5kbGUpIHJldHVybjtcclxuICAgICAgICBpZiAoIXJlbGVhc2VCdW5kbGUpIHtcclxuICAgICAgICAgICAgYnVuZGxlLnJlbGVhc2UoYXNzZXROYW1lKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLnJlbGVhc2VCdW5kbGUoYnVuZGxlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog6YeK5pS+YnVuZGxlXHJcbiAgICAgKiBAcGFyYW0gYnVuZGxlIC0gYnVuZGxl5ZCN5a2X5oiWYnVuZGxl5a+56LGhXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyByZWxlYXNlQnVuZGxlKGJ1bmRsZTogc3RyaW5nIHwgQXNzZXRNYW5hZ2VyLkJ1bmRsZSkge1xyXG4gICAgICAgIGlmICh0eXBlb2YgYnVuZGxlID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgIGxldCBiID0gYXNzZXRNYW5hZ2VyLmdldEJ1bmRsZShidW5kbGUpO1xyXG4gICAgICAgICAgICBpZiAoIWIpIHJldHVybjtcclxuICAgICAgICAgICAgYi5yZWxlYXNlQWxsKCk7XHJcbiAgICAgICAgICAgIGFzc2V0TWFuYWdlci5yZW1vdmVCdW5kbGUoYik7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgaWYgKCFidW5kbGUpIHJldHVybjtcclxuICAgICAgICAgICAgYnVuZGxlLnJlbGVhc2VBbGwoKTtcclxuICAgICAgICAgICAgYXNzZXRNYW5hZ2VyLnJlbW92ZUJ1bmRsZShidW5kbGUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcblxyXG4gICAgLyog6YeK5pS+5omA5pyJ6LWE5rqQICovXHJcbiAgICBwdWJsaWMgcmVsZWFzZUFsbCgpIHtcclxuICAgICAgICBhc3NldE1hbmFnZXIucmVsZWFzZUFsbCgpO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqIOWIm+W7uumihOWItuS9k1xyXG4gICAgICogQHBhcmFtIHByZWZhYlBhdGgg77ya6aKE5Yi25L2T6Lev5b6E77yM6KeE5YiZ5Li6OiBidW5kbGVOYW1lOi8vYXNzZXROYW1l77yM57y655yBYnVuZGxlTmFtZeS4unJlc291cmNlc1xyXG4gICAgICovXHJcbiAgICBwdWJsaWMgYXN5bmMgY3JlYXRlUHJlZmFiKHByZWZhYlBhdGg6IHN0cmluZyk6IFByb21pc2U8Tm9kZT4ge1xyXG4gICAgICAgIGxldCBwID0gYXdhaXQgdGhpcy5sb2FkPFByZWZhYj4ocHJlZmFiUGF0aCk7XHJcbiAgICAgICAgY29uc3Qgbm9kZSA9IGluc3RhbnRpYXRlKHApO1xyXG4gICAgICAgIHJldHVybiBub2RlO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqIGJhc2U2NOi9rOe6ueeQhlxyXG4gICAgICogQHBhcmFtIGRhdGEgLSBiYXNlNjTnvJbnoIHnmoTlrZfnrKbkuLJcclxuICAgICAqIEByZXR1cm5zIOe6ueeQhlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgYXN5bmMgYmFzZTY0VG9UZXh0dXJlKGRhdGE6IHN0cmluZykge1xyXG4gICAgICAgIC8vIHJldHVybiBuZXcgUHJvbWlzZTxUZXh0dXJlMkQ+KChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgICAvLyAgICAgbGV0IGltZyA9IG5ldyBJbWFnZSgpO1xyXG4gICAgICAgIC8vICAgICBpbWcuc3JjID0gZGF0YTtcclxuICAgICAgICAvLyAgICAgaW1nLm9ubG9hZCA9IChldmVudCkgPT4ge1xyXG4gICAgICAgIC8vICAgICAgICAgbGV0IHRleHR1cmUgPSBuZXcgVGV4dHVyZTJEKCk7XHJcbiAgICAgICAgLy8gICAgICAgICAvLyB0ZXh0dXJlLmluaXRXaXRoRWxlbWVudChpbWcpO1xyXG4gICAgICAgIC8vICAgICAgICAgLy8gdGV4dHVyZS5oYW5kbGVMb2FkZWRUZXh0dXJlKCk7XHJcbiAgICAgICAgLy8gICAgICAgICByZXNvbHZlKHRleHR1cmUpO1xyXG4gICAgICAgIC8vICAgICB9O1xyXG4gICAgICAgIC8vIH0pO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqIGJhc2U2NOi9rOeyvueBtVxyXG4gICAgICogQHBhcmFtIGRhdGEgLSBiYXNlNjTnvJbnoIHnmoTlrZfnrKbkuLJcclxuICAgICAqIEByZXR1cm5zIOeyvueBteaVsOaNrlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgYXN5bmMgYmFzZTY0VG9TcHJpdGVGcmFtZShkYXRhOiBzdHJpbmcpIHtcclxuICAgICAgICAvLyBsZXQgdGV4dHVyZSA9IGF3YWl0IHRoaXMuYmFzZTY0VG9UZXh0dXJlKGRhdGEpO1xyXG4gICAgICAgIC8vIHJldHVybiBuZXcgU3ByaXRlRnJhbWUodGV4dHVyZSk7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8vIGNsYXNzIGVuZFxyXG59XHJcblxyXG4vLyBleHBvcnQgY29uc3QgYXNzZXRNYW5hZ2VyID0gQXNzZXRNZ3IuaW5zdGFuY2U7XHJcbi8vIHdpbmRvd1tcImFzc2V0TWFuYWdlclwiXSA9IGFzc2V0TWFuYWdlcjtcclxuIiwiaW1wb3J0IHsgUGF0aE9wdGltaXplLCBQYXRoUXVhZFNlZWsgfSBmcm9tIFwiLi4vRW51bVwiO1xyXG5pbXBvcnQgSVJvYWRTZWVrZXIgZnJvbSBcIi4uL0lSb2FkU2Vla2VyXCI7XHJcbmltcG9ydCBCaW5hcnlUcmVlTm9kZSBmcm9tIFwiLi9CaW5hcnlUcmVlTm9kZVwiO1xyXG5pbXBvcnQgUm9hZE5vZGUgZnJvbSBcIi4vUm9hZE5vZGVcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEFTdGFyUm9hZFNlZWtlciBpbXBsZW1lbnRzIElSb2FkU2Vla2VyIHtcclxuXHJcbiAgICAvKipcclxuICAgICAqIOaoquWQkeenu+WKqOS4gOS4quagvOWtkOeahOS7o+S7t1xyXG4gICAgICovXHJcbiAgICBwcml2YXRlIENPU1RfU1RSQUlHSFQ6IG51bWJlciA9IDEwO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICog5pac5ZCR56e75Yqo5LiA5Liq5qC85a2Q55qE5Luj5Lu3XHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgQ09TVF9ESUFHT05BTDogbnVtYmVyID0gMTQ7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKuacgOWkp+aQnOWvu+atpemqpOaVsO+8jOi2hei/h+i/meS4quWAvOaXtuihqOekuuaJvuS4jeWIsOebruaghyBcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBtYXhTdGVwOiBudW1iZXIgPSAxMDAwO1xyXG5cclxuICAgIC8qKiBcclxuICAgICAqIOW8gOWQr+WIl+ihqFxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIF9vcGVuTGlzdDogQXJyYXk8Um9hZE5vZGU+O1xyXG4gICAgLyoqXHJcbiAgICAgKiDlhbPpl63liJfooahcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBfY2xvc2VMaXN0OiBBcnJheTxSb2FkTm9kZT47XHJcblxyXG4gICAgcHJpdmF0ZSBfYmluYXJ5VHJlZU5vZGU6IEJpbmFyeVRyZWVOb2RlID0gbmV3IEJpbmFyeVRyZWVOb2RlKCk7XHJcblxyXG4gICAgcHJpdmF0ZSBfc3RhcnROb2RlOiBSb2FkTm9kZTtcclxuXHJcbiAgICBwcml2YXRlIF9jdXJyZW50Tm9kZTogUm9hZE5vZGU7XHJcblxyXG4gICAgcHJpdmF0ZSBfdGFyZ2V0Tm9kZTogUm9hZE5vZGU7XHJcblxyXG4gICAgcHJpdmF0ZSBfcm9hZE5vZGVzOiB7IFtrZXk6IHN0cmluZ106IFJvYWROb2RlIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDnlKjkuo7mo4DntKLkuIDkuKroioLngrnlkajlm7TkuIrkuIvlt6blj7M05Liq54K555qE5ZCR6YeP5pWw57uEIFxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIF9yb3VuZDE6IG51bWJlcltdW10gPSBbWzAsIC0xXSwgWzEsIDBdLCBbMCwgMV0sIFstMSwgMF1dXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDnlKjkuo7mo4DntKLkuIDkuKroioLngrnlkajlm7Q45Liq54K555qE5ZCR6YeP5pWw57uEIFxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIF9yb3VuZDI6IG51bWJlcltdW10gPSBbWzAsIC0xXSwgWzEsIC0xXSwgWzEsIDBdLCBbMSwgMV0sIFswLCAxXSwgWy0xLCAxXSwgWy0xLCAwXSwgWy0xLCAtMV1dXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKueUqOS6juajgOe0ouS4gOS4quiKgueCueWRqOWbtG7kuKrngrnnmoTlkJHph4/mlbDnu4TvvIzpu5jorqQ45pa55ZCRXHJcbiAgICAqL1xyXG4gICAgcHJpdmF0ZSBfcm91bmQ6IG51bWJlcltdW10gPSB0aGlzLl9yb3VuZDI7IFxyXG5cclxuICAgIHByaXZhdGUgaGFuZGxlOiBudW1iZXIgPSAtMTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIOS8mOWMluexu+Wei++8jOm7mOiupOS9v+eUqOacgOefrei3r+W+hOeahOS8mOWMllxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIF9wYXRoT3B0aW1pemU6IFBhdGhPcHRpbWl6ZSA9IFBhdGhPcHRpbWl6ZS5iZXN0O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICog6buY6K6k5L2/55SoOOaWueWQkeWvu+i3r1xyXG4gICAgICovXHJcbiAgICBwcml2YXRlIF9wYXRoUXVhZFNlZWs6IFBhdGhRdWFkU2VlayA9IFBhdGhRdWFkU2Vlay5wYXRoX2RpcmVfODtcclxuXHJcbiAgICAvKipcclxuICAgICAqIOWumuS5ieS4gOS4qui3r+eCueaYr+WQpuiDvemAmui/h++8jOWmguaenOaYr251bGzvvIzliJnnlKjpu5jorqTliKTmlq3mnaHku7ZcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBfaXNQYXNzQ2FsbEJhY2s6IEZ1bmN0aW9uID0gbnVsbDtcclxuXHJcbiAgICBwdWJsaWMgY29uc3RydWN0b3Iocm9hZE5vZGVzOiB7IFtrZXk6IHN0cmluZ106IFJvYWROb2RlIH0pIHtcclxuICAgICAgICB0aGlzLl9yb2FkTm9kZXMgPSByb2FkTm9kZXM7XHJcbiAgICB9XHJcblxyXG5cclxuXHJcbiAgICBzZWVrUGF0aChzdGFydE5vZGU6IFJvYWROb2RlLCB0YXJnZXROb2RlOiBSb2FkTm9kZSk6IEFycmF5PFJvYWROb2RlPiB7XHJcbiAgICAgICAgdGhpcy5fc3RhcnROb2RlID0gc3RhcnROb2RlO1xyXG4gICAgICAgIHRoaXMuX3RhcmdldE5vZGUgPSB0YXJnZXROb2RlO1xyXG4gICAgICAgIHRoaXMuX2N1cnJlbnROb2RlID0gc3RhcnROb2RlO1xyXG5cclxuICAgICAgICBpZiAoIXRoaXMuX3N0YXJ0Tm9kZSB8fCAhdGhpcy5fdGFyZ2V0Tm9kZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gW107XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLl9zdGFydE5vZGUgPT0gdGhpcy5fdGFyZ2V0Tm9kZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gW3RoaXMuX3RhcmdldE5vZGVdO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKCF0aGlzLmlzUGFzc05vZGUodGhpcy5fdGFyZ2V0Tm9kZSkpIHtcclxuICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIuebruagh+S4jeWPr+i+vuWIsFwiKTtcclxuICAgICAgICAgICAgcmV0dXJuIFtdO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLl9zdGFydE5vZGUuZyA9IDA7XHJcbiAgICAgICAgdGhpcy5fc3RhcnROb2RlLnJlc2V0VHJlZSgpO1xyXG4gICAgICAgIHRoaXMuX2JpbmFyeVRyZWVOb2RlLnJlZmxlc2hUYWcoKTtcclxuXHJcbiAgICAgICAgbGV0IHN0ZXA6IG51bWJlciA9IDA7XHJcbiAgICAgICAgd2hpbGUgKHRydWUpIHtcclxuICAgICAgICAgICAgaWYgKHN0ZXAgPiB0aGlzLm1heFN0ZXApIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCLmsqHmnInmib7liLDorqHnrpfnm67moIdcIiwgc3RlcCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gW107XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgc3RlcCsrO1xyXG4gICAgICAgICAgICB0aGlzLnNlYXJjaFJvdW5kTm9kZXModGhpcy5fY3VycmVudE5vZGUpO1xyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMuX2JpbmFyeVRyZWVOb2RlLmlzVHJlZU51bGwoKSkge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIuayoeacieaJvuWIsOebruagh1wiLCBzdGVwKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBbXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLl9jdXJyZW50Tm9kZSA9IHRoaXMuX2JpbmFyeVRyZWVOb2RlLmdldE1pbkZOb2RlKCk7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9jdXJyZW50Tm9kZSA9PSB0aGlzLl90YXJnZXROb2RlKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKFwi5om+5Yiw55uu5qCH5LqGXCIsIHN0ZXApO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0UGF0aCgpO1xyXG4gICAgICAgICAgICAgICAgLy8gcmV0dXJuIFtdO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fYmluYXJ5VHJlZU5vZGUuc2V0Um9hZE5vZGVJbkNsb3NlTGlzdCh0aGlzLl9jdXJyZW50Tm9kZSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgc2Vla1BhdGgyKHN0YXJ0Tm9kZTogUm9hZE5vZGUsIHRhcmdldE5vZGU6IFJvYWROb2RlKTogQXJyYXk8Um9hZE5vZGU+IHtcclxuICAgICAgICB0aGlzLl9zdGFydE5vZGUgPSBzdGFydE5vZGU7XHJcbiAgICAgICAgdGhpcy5fY3VycmVudE5vZGUgPSBzdGFydE5vZGU7XHJcbiAgICAgICAgdGhpcy5fdGFyZ2V0Tm9kZSA9IHRhcmdldE5vZGU7XHJcblxyXG4gICAgICAgIGlmICghdGhpcy5fc3RhcnROb2RlIHx8ICF0aGlzLl90YXJnZXROb2RlKVxyXG4gICAgICAgICAgICByZXR1cm4gW107XHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9zdGFydE5vZGUgPT0gdGhpcy5fdGFyZ2V0Tm9kZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gW3RoaXMuX3RhcmdldE5vZGVdO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIG5ld01heFN0ZXA6IG51bWJlciA9IHRoaXMubWF4U3RlcDtcclxuXHJcbiAgICAgICAgaWYgKCF0aGlzLmlzUGFzc05vZGUodGhpcy5fdGFyZ2V0Tm9kZSkpIHtcclxuICAgICAgICAgICAgLy/lpoLmnpzkuI3og73nm7Tovr7nm67moIfvvIzmnIDlpKflr7vot6/mraXpqqQgPSDkuLrkuKTngrnpl7TnmoTpooTkvLDot53nprvnmoQz5YCNXHJcbiAgICAgICAgICAgIG5ld01heFN0ZXAgPSAoTWF0aC5hYnModGhpcy5fdGFyZ2V0Tm9kZS5jeCAtIHRoaXMuX3N0YXJ0Tm9kZS5jeCkgKyBNYXRoLmFicyh0aGlzLl90YXJnZXROb2RlLmN5IC0gdGhpcy5fc3RhcnROb2RlLmN5KSkgKiAzO1xyXG4gICAgICAgICAgICBpZiAobmV3TWF4U3RlcCA+IHRoaXMubWF4U3RlcCkge1xyXG4gICAgICAgICAgICAgICAgbmV3TWF4U3RlcCA9IHRoaXMubWF4U3RlcDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5fc3RhcnROb2RlLmcgPSAwOyAvL+mHjee9rui1t+Wni+iKgueCueeahGflgLxcclxuICAgICAgICB0aGlzLl9zdGFydE5vZGUucmVzZXRUcmVlKCk7IC8v5riF6Zmk6LW35aeL6IqC54K55Y6f5pyJ55qE5LqM5Y+J5aCG5YWz6IGU5YWz57O7XHJcblxyXG4gICAgICAgIHRoaXMuX2JpbmFyeVRyZWVOb2RlLnJlZmxlc2hUYWcoKTsgLy/liLfmlrDkuozlj4nloIZ0YWfvvIznlKjkuo7lkI7pnaLliKTmlq3mmK/kuI3mmK/lsZ7kuo7lvZPliY3mrKHnmoTlr7vot69cclxuICAgICAgICAvL3RoaXMuX2JpbmFyeVRyZWVOb2RlLmFkZFRyZWVOb2RlKHRoaXMuX3N0YXJ0Tm9kZSk7IC8v5oqK6LW35aeL6IqC54K56K6+572u5Li65LqM5Y+J5aCG57uT5p6E55qE5qC56IqC54K5XHJcblxyXG4gICAgICAgIHZhciBzdGVwOiBudW1iZXIgPSAwO1xyXG5cclxuICAgICAgICB2YXIgY2xvc2VzdE5vZGU6IFJvYWROb2RlID0gbnVsbDsgLy/ot53nprvnm67moIfmnIDov5HnmoTot6/ngrlcclxuXHJcbiAgICAgICAgd2hpbGUgKHRydWUpIHtcclxuICAgICAgICAgICAgaWYgKHN0ZXAgPiBuZXdNYXhTdGVwKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKFwi5rKh5om+5Yiw55uu5qCH6K6h566X5q2l6aqk5Li677yaXCIsIHN0ZXApO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2Vla1BhdGgoc3RhcnROb2RlLCBjbG9zZXN0Tm9kZSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHN0ZXArKztcclxuXHJcbiAgICAgICAgICAgIHRoaXMuc2VhcmNoUm91bmROb2Rlcyh0aGlzLl9jdXJyZW50Tm9kZSk7XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5fYmluYXJ5VHJlZU5vZGUuaXNUcmVlTnVsbCgpKSAvL+S6jOWPieWghuagkemHjOW3sue7j+ayoeacieS7u+S9leWPr+aQnOWvu+eahOeCueS6hu+8jOWImeWvu+i3r+e7k+adn++8jOayoeaJvuWIsOebruagh1xyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKFwi5rKh5om+5Yiw55uu5qCH6K6h566X5q2l6aqk5Li677yaXCIsIHN0ZXApO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2Vla1BhdGgoc3RhcnROb2RlLCBjbG9zZXN0Tm9kZSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMuX2N1cnJlbnROb2RlID0gdGhpcy5fYmluYXJ5VHJlZU5vZGUuZ2V0TWluRk5vZGUoKTtcclxuXHJcblxyXG4gICAgICAgICAgICBpZiAoY2xvc2VzdE5vZGUgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgY2xvc2VzdE5vZGUgPSB0aGlzLl9jdXJyZW50Tm9kZTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9jdXJyZW50Tm9kZS5oIDwgY2xvc2VzdE5vZGUuaCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNsb3Nlc3ROb2RlID0gdGhpcy5fY3VycmVudE5vZGU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9jdXJyZW50Tm9kZSA9PSB0aGlzLl90YXJnZXROb2RlKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKFwi5om+5Yiw55uu5qCH6K6h566X5q2l6aqk5Li677yaXCIsIHN0ZXApO1xyXG4gICAgICAgICAgICAgICAgLy8gcmV0dXJuIFtdO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0UGF0aCgpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fYmluYXJ5VHJlZU5vZGUuc2V0Um9hZE5vZGVJbkNsb3NlTGlzdCh0aGlzLl9jdXJyZW50Tm9kZSk7Ly/miZPlhaXlhbPpl63liJfooajmoIforrBcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICB0ZXN0U2Vla1BhdGhTdGVwKHN0YXJ0Tm9kZTogUm9hZE5vZGUsIHRhcmdldE5vZGU6IFJvYWROb2RlLCBjYWxsYmFjazogRnVuY3Rpb24sIHRhcmdldDogYW55LCB0aW1lOiBudW1iZXIpOiB2b2lkIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJNZXRob2Qgbm90IGltcGxlbWVudGVkLlwiKTtcclxuICAgIH1cclxuICAgIGlzQXJyaXZlQmV0d2VlblR3b05vZGVzKHN0YXJ0Tm9kZTogUm9hZE5vZGUsIHRhcmdldE5vZGU6IFJvYWROb2RlKTogYm9vbGVhbiB7XHJcbiAgICAgICAgaWYgKHN0YXJ0Tm9kZSA9PSB0YXJnZXROb2RlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBkaXNYOiBudW1iZXIgPSBNYXRoLmFicyh0YXJnZXROb2RlLmN4IC0gc3RhcnROb2RlLmN4KTtcclxuICAgICAgICB2YXIgZGlzWTogbnVtYmVyID0gTWF0aC5hYnModGFyZ2V0Tm9kZS5jeSAtIHN0YXJ0Tm9kZS5jeSk7XHJcblxyXG4gICAgICAgIHZhciBkaXJYID0gMDtcclxuXHJcbiAgICAgICAgaWYgKHRhcmdldE5vZGUuY3ggPiBzdGFydE5vZGUuY3gpIHtcclxuICAgICAgICAgICAgZGlyWCA9IDE7XHJcbiAgICAgICAgfSBlbHNlIGlmICh0YXJnZXROb2RlLmN4IDwgc3RhcnROb2RlLmN4KSB7XHJcbiAgICAgICAgICAgIGRpclggPSAtMTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBkaXJZID0gMDtcclxuXHJcbiAgICAgICAgaWYgKHRhcmdldE5vZGUuY3kgPiBzdGFydE5vZGUuY3kpIHtcclxuICAgICAgICAgICAgZGlyWSA9IDE7XHJcbiAgICAgICAgfSBlbHNlIGlmICh0YXJnZXROb2RlLmN5IDwgc3RhcnROb2RlLmN5KSB7XHJcbiAgICAgICAgICAgIGRpclkgPSAtMTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciByeDogbnVtYmVyID0gMDtcclxuICAgICAgICB2YXIgcnk6IG51bWJlciA9IDA7XHJcbiAgICAgICAgdmFyIGludE51bTogbnVtYmVyID0gMDtcclxuICAgICAgICB2YXIgZGVjaW1hbDogbnVtYmVyID0gMDtcclxuXHJcbiAgICAgICAgaWYgKGRpc1ggPiBkaXNZKSB7XHJcbiAgICAgICAgICAgIHZhciByYXRlOiBudW1iZXIgPSBkaXNZIC8gZGlzWDtcclxuXHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZGlzWDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICByeSA9IHN0YXJ0Tm9kZS5jeSArIGkgKiBkaXJZICogcmF0ZTtcclxuICAgICAgICAgICAgICAgIGludE51bSA9IE1hdGguZmxvb3IocnkpO1xyXG4gICAgICAgICAgICAgICAgZGVjaW1hbCA9IHJ5ICUgMTtcclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgY3gxOiBudW1iZXIgPSBzdGFydE5vZGUuY3ggKyBpICogZGlyWDtcclxuICAgICAgICAgICAgICAgIHZhciBjeTE6IG51bWJlciA9IGRlY2ltYWwgPD0gMC41ID8gaW50TnVtIDogaW50TnVtICsgMTtcclxuXHJcbiAgICAgICAgICAgICAgICByeSA9IHN0YXJ0Tm9kZS5jeSArIChpICsgMSkgKiBkaXJZICogcmF0ZTtcclxuICAgICAgICAgICAgICAgIGludE51bSA9IE1hdGguZmxvb3IocnkpO1xyXG4gICAgICAgICAgICAgICAgZGVjaW1hbCA9IHJ5ICUgMTtcclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgY3gyOiBudW1iZXIgPSBzdGFydE5vZGUuY3ggKyAoaSArIDEpICogZGlyWDtcclxuICAgICAgICAgICAgICAgIHZhciBjeTI6IG51bWJlciA9IGRlY2ltYWwgPD0gMC41ID8gaW50TnVtIDogaW50TnVtICsgMTtcclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgbm9kZTE6IFJvYWROb2RlID0gdGhpcy5nZXRSb2FkTm9kZShjeDEsIGN5MSk7XHJcbiAgICAgICAgICAgICAgICB2YXIgbm9kZTI6IFJvYWROb2RlID0gdGhpcy5nZXRSb2FkTm9kZShjeDIsIGN5Mik7XHJcblxyXG4gICAgICAgICAgICAgICAgLy9jYy5sb2coaSArIFwiICA6OiBcIiArIG5vZGUxLmN5LFwiIHl5IFwiLHN0YXJ0Tm9kZS5jeSArIGkgKiByYXRlLHJ5ICUgMSk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLmlzQ3Jvc3NBdEFkamFjZW50Tm9kZXMobm9kZTEsIG5vZGUyKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB2YXIgcmF0ZTogbnVtYmVyID0gZGlzWCAvIGRpc1k7XHJcblxyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRpc1k7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgcnggPSBpICogZGlyWCAqIHJhdGU7XHJcbiAgICAgICAgICAgICAgICBpbnROdW0gPSBkaXJYID4gMCA/IE1hdGguZmxvb3Ioc3RhcnROb2RlLmN4ICsgcngpIDogTWF0aC5jZWlsKHN0YXJ0Tm9kZS5jeCArIHJ4KTtcclxuICAgICAgICAgICAgICAgIGRlY2ltYWwgPSBNYXRoLmFicyhyeCAlIDEpO1xyXG5cclxuICAgICAgICAgICAgICAgIHZhciBjeDE6IG51bWJlciA9IGRlY2ltYWwgPD0gMC41ID8gaW50TnVtIDogaW50TnVtICsgMSAqIGRpclg7XHJcbiAgICAgICAgICAgICAgICB2YXIgY3kxOiBudW1iZXIgPSBzdGFydE5vZGUuY3kgKyBpICogZGlyWTtcclxuXHJcbiAgICAgICAgICAgICAgICByeCA9IChpICsgMSkgKiBkaXJYICogcmF0ZTtcclxuICAgICAgICAgICAgICAgIGludE51bSA9IGRpclggPiAwID8gTWF0aC5mbG9vcihzdGFydE5vZGUuY3ggKyByeCkgOiBNYXRoLmNlaWwoc3RhcnROb2RlLmN4ICsgcngpO1xyXG4gICAgICAgICAgICAgICAgZGVjaW1hbCA9IE1hdGguYWJzKHJ4ICUgMSk7XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIGN4MjogbnVtYmVyID0gZGVjaW1hbCA8PSAwLjUgPyBpbnROdW0gOiBpbnROdW0gKyAxICogZGlyWDtcclxuICAgICAgICAgICAgICAgIHZhciBjeTI6IG51bWJlciA9IHN0YXJ0Tm9kZS5jeSArIChpICsgMSkgKiBkaXJZO1xyXG5cclxuICAgICAgICAgICAgICAgIHZhciBub2RlMTogUm9hZE5vZGUgPSB0aGlzLmdldFJvYWROb2RlKGN4MSwgY3kxKTtcclxuICAgICAgICAgICAgICAgIHZhciBub2RlMjogUm9hZE5vZGUgPSB0aGlzLmdldFJvYWROb2RlKGN4MiwgY3kyKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuaXNDcm9zc0F0QWRqYWNlbnROb2Rlcyhub2RlMSwgbm9kZTIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDliKTmlq3kuKTkuKrnm7jpgrvnmoTngrnmmK/lkKblj6/pgJrov4dcclxuICAgICAqIEBwYXJhbSBub2RlMSBcclxuICAgICAqIEBwYXJhbSBub2RlMiBcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBpc0Nyb3NzQXRBZGphY2VudE5vZGVzKG5vZGUxOiBSb2FkTm9kZSwgbm9kZTI6IFJvYWROb2RlKTogYm9vbGVhbiB7XHJcbiAgICAgICAgaWYgKG5vZGUxID09IG5vZGUyKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8v5Lik5Liq54K55Y+q6KaB5pyJ5LiA5Liq54K55LiN6IO96YCa6L+H5bCx5LiN6IO96YCa6L+HXHJcbiAgICAgICAgaWYgKCF0aGlzLmlzUGFzc05vZGUobm9kZTEpIHx8ICF0aGlzLmlzUGFzc05vZGUobm9kZTIpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBkaXJYID0gbm9kZTIuY3ggLSBub2RlMS5jeDtcclxuICAgICAgICB2YXIgZGlyWSA9IG5vZGUyLmN5IC0gbm9kZTEuY3lcclxuXHJcbiAgICAgICAgLy/lpoLmnpzkuI3mmK/nm7jpgrvnmoTkuKTkuKrngrkg5YiZ5LiN6IO96YCa6L+HXHJcbiAgICAgICAgaWYgKE1hdGguYWJzKGRpclgpID4gMSB8fCBNYXRoLmFicyhkaXJZKSA+IDEpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy/lpoLmnpznm7jpgrvnmoTngrnmmK/lnKjlkIzkuIDooYzvvIzmiJbogIXlkIzkuIDliJfvvIzliJnliKTlrprkuLrlj6/pgJrov4dcclxuICAgICAgICBpZiAoKG5vZGUxLmN4ID09IG5vZGUyLmN4KSB8fCAobm9kZTEuY3kgPT0gbm9kZTIuY3kpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy/lj6rlianlr7nop5Lmg4XlhrXkuoZcclxuICAgICAgICBpZiAoXHJcbiAgICAgICAgICAgIHRoaXMuaXNQYXNzTm9kZSh0aGlzLmdldFJvYWROb2RlKG5vZGUxLmN4LCBub2RlMS5jeSArIGRpclkpKSAmJlxyXG4gICAgICAgICAgICB0aGlzLmlzUGFzc05vZGUodGhpcy5nZXRSb2FkTm9kZSgobm9kZTEuY3ggKyBkaXJYKSwgbm9kZTEuY3kpKVxyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICBpc1Bhc3NOb2RlKG5vZGU6IFJvYWROb2RlKTogYm9vbGVhbiB7XHJcbiAgICAgICAgaWYgKHRoaXMuX2lzUGFzc0NhbGxCYWNrICE9IG51bGwpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2lzUGFzc0NhbGxCYWNrKG5vZGUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAobm9kZSA9PSBudWxsIHx8IG5vZGUudmFsdWUgPT0gMSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG4gICAgZ2V0Um9hZE5vZGUoY3g6IG51bWJlciwgY3k6IG51bWJlcikge1xyXG4gICAgICAgIGNvbnN0IGtleTogc3RyaW5nID0gY3ggKyBcIl9cIiArIGN5O1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9yb2FkTm9kZXNba2V5XTtcclxuICAgIH1cclxuICAgIHNldE1heFNlZWtTdGVwKG1heFN0ZXA6IG51bWJlcikge1xyXG4gICAgICAgIHRoaXMubWF4U3RlcCA9IG1heFN0ZXA7XHJcbiAgICB9XHJcbiAgICBzZXRQYXRoT3B0aW1pemUob3B0aW1pemU6IFBhdGhPcHRpbWl6ZSkge1xyXG4gICAgICAgIHRoaXMuX3BhdGhPcHRpbWl6ZSA9IG9wdGltaXplO1xyXG4gICAgfVxyXG4gICAgc2V0UGF0aFF1YWRTZWVrKHBhdGhRdWFkU2VlazogUGF0aFF1YWRTZWVrKSB7XHJcbiAgICAgICAgdGhpcy5fcGF0aFF1YWRTZWVrID0gcGF0aFF1YWRTZWVrO1xyXG4gICAgICAgIGlmICh0aGlzLl9wYXRoUXVhZFNlZWsgPT0gUGF0aFF1YWRTZWVrLnBhdGhfZGlyZV80KSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3JvdW5kID0gdGhpcy5fcm91bmQxO1xyXG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5fcGF0aFF1YWRTZWVrID09IFBhdGhRdWFkU2Vlay5wYXRoX2RpcmVfOCkge1xyXG4gICAgICAgICAgICB0aGlzLl9yb3VuZCA9IHRoaXMuX3JvdW5kMjtcclxuICAgICAgICB9XHJcblxyXG4gICAgfVxyXG4gICAgc2V0Um9hZE5vZGVQYXNzQ29uZGl0aW9uKGNhbGxiYWNrOiBGdW5jdGlvbikge1xyXG4gICAgICAgIHRoaXMuX2lzUGFzc0NhbGxCYWNrID0gY2FsbGJhY2s7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBzZWFyY2hSb3VuZE5vZGVzKG5vZGU6IFJvYWROb2RlKTogdm9pZHtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuX3JvdW5kLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGN4OiBudW1iZXIgPSBub2RlLmN4ICsgdGhpcy5fcm91bmRbaV1bMF07XHJcbiAgICAgICAgICAgIGNvbnN0IGN5OiBudW1iZXIgPSBub2RlLmN5ICsgdGhpcy5fcm91bmRbaV1bMV07XHJcbiAgICAgICAgICAgIGNvbnN0IG5vZGUyOiBSb2FkTm9kZSA9IHRoaXMuZ2V0Um9hZE5vZGUoY3gsIGN5KTtcclxuICAgICAgICAgICAgaWYgKHRoaXMuaXNQYXNzTm9kZShub2RlMikgJiYgbm9kZTIgIT0gdGhpcy5fc3RhcnROb2RlICYmICF0aGlzLmlzSW5DbG9zZUxpc3Qobm9kZTIpICYmICF0aGlzLmlzSW5Db3JuZXIobm9kZTIpKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNldE5vZGVGVmFsdWUobm9kZTIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGdldFBhdGgoKTogQXJyYXk8Um9hZE5vZGU+e1xyXG4gICAgICAgIGNvbnN0IHJlc3VsdDogQXJyYXk8Um9hZE5vZGU+ID0gW107XHJcbiAgICAgICAgbGV0IG5vZGU6IFJvYWROb2RlID0gdGhpcy5fdGFyZ2V0Tm9kZTtcclxuICAgICAgICB3aGlsZSAobm9kZSAhPSB0aGlzLl9zdGFydE5vZGUpIHtcclxuICAgICAgICAgICAgcmVzdWx0LnVuc2hpZnQobm9kZSk7XHJcbiAgICAgICAgICAgIG5vZGUgPSBub2RlLnBhcmVudDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJlc3VsdC51bnNoaWZ0KHRoaXMuX3N0YXJ0Tm9kZSk7XHJcbiAgICAgICAgaWYgKHRoaXMuX3BhdGhPcHRpbWl6ZSA9PSBQYXRoT3B0aW1pemUubm9uZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgIH1cclxuICAgICAgICAvL+esrOS4gOmYtuauteS8mOWMlu+8miDlr7nmqKrvvIznq5bvvIzmraPmlpzov5vooYzkvJjljJZcclxuICAgICAgICAvL+aKiuWkmuS4quiKgueCuei/nuWcqOS4gOi1t+eahO+8jOaoquWQkeaIluiAheaWnOWQkeeahOS4gOi/nuS4sueCue+8jOmZpOS4pOi+ueeahOeCueS/neeVmVxyXG4gICAgICAgIGZvciAodmFyIGk6IG51bWJlciA9IDE7IGkgPCByZXN1bHQubGVuZ3RoIC0gMTsgaSsrKSB7XHJcbiAgICAgICAgICAgIHZhciBwcmVOb2RlOiBSb2FkTm9kZSA9IHJlc3VsdFtpIC0gMV0gYXMgUm9hZE5vZGU7XHJcbiAgICAgICAgICAgIHZhciBtaWROb2RlOiBSb2FkTm9kZSA9IHJlc3VsdFtpXSBhcyBSb2FkTm9kZTtcclxuICAgICAgICAgICAgdmFyIG5leHROb2RlOiBSb2FkTm9kZSA9IHJlc3VsdFtpICsgMV0gYXMgUm9hZE5vZGU7XHJcblxyXG4gICAgICAgICAgICB2YXIgYm9vbDE6IEJvb2xlYW4gPSBtaWROb2RlLmN4ID09IHByZU5vZGUuY3ggJiYgbWlkTm9kZS5jeCA9PSBuZXh0Tm9kZS5jeDtcclxuICAgICAgICAgICAgdmFyIGJvb2wyOiBCb29sZWFuID0gbWlkTm9kZS5jeSA9PSBwcmVOb2RlLmN5ICYmIG1pZE5vZGUuY3kgPT0gbmV4dE5vZGUuY3k7XHJcbiAgICAgICAgICAgIHZhciBib29sMzogQm9vbGVhbiA9IGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMuX3BhdGhRdWFkU2VlayA9PSBQYXRoUXVhZFNlZWsucGF0aF9kaXJlXzgpIC8v5a+76Lev57G75Z6L5pivOOaWueWQkeaXtuaJjeiAg+iZkeato+aWnOinkui3r+W+hOS8mOWMllxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBib29sMyA9ICgobWlkTm9kZS5jeCAtIHByZU5vZGUuY3gpIC8gKG1pZE5vZGUuY3kgLSBwcmVOb2RlLmN5KSkgKiAoKG5leHROb2RlLmN4IC0gbWlkTm9kZS5jeCkgLyAobmV4dE5vZGUuY3kgLSBtaWROb2RlLmN5KSkgPT0gMVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoYm9vbDEgfHwgYm9vbDIgfHwgYm9vbDMpIHtcclxuICAgICAgICAgICAgICAgIHJlc3VsdC5zcGxpY2UoaSwgMSlcclxuICAgICAgICAgICAgICAgIGktLTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy/lpoLmnpzlr7vot6/nsbvlnovmmK805pa55ZCR5a+76Lev77yM5YiZ55u05o6l6L+U5Zue56ys5LiA6Zi25q6155qE5LyY5YyW57uT5p6c44CCXHJcbiAgICAgICAgLy/vvIjlm6DkuLo05pa55ZCR5a+76Lev5piv55So5LiN5Yiw56ys5LqM6Zi25q615LyY5YyW55qE77yM5ZCm5YiZ6L+b5YWl56ys5LqM6Zi25q615LyY5YyW55qE6K+d77yM6Lev5b6E5bCx5LiN5oyJ5LiK5LiL5bem5Y+z55u46L+e5LqG77yM6L+Z5bm25LiN5pivNOaWueWvu+i3r+aDs+imgeeahOe7k+aenO+8iVxyXG4gICAgICAgIGlmICh0aGlzLl9wYXRoUXVhZFNlZWsgPT0gUGF0aFF1YWRTZWVrLnBhdGhfZGlyZV80KSB7XHJcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvL+WmguaenOWPqumcgOimgeS8mOWMluWIsOesrOS4gOmYtuaute+8jOWImeebtOaOpei/lOWbnuesrOS4gOmYtuauteeahOS8mOWMlue7k+aenFxyXG4gICAgICAgIGlmICh0aGlzLl9wYXRoT3B0aW1pemUgPT0gUGF0aE9wdGltaXplLmJldHRlcikge1xyXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy/nrKzkuozpmLbmrrXkvJjljJbvvJrlr7nkuI3lnKjmqKrvvIznq5bvvIzmraPmlpznmoTmoLzlrZDov5vooYzkvJjljJZcclxuICAgICAgICBmb3IgKHZhciBpOiBudW1iZXIgPSAwOyBpIDwgcmVzdWx0Lmxlbmd0aCAtIDI7IGkrKykge1xyXG4gICAgICAgICAgICB2YXIgc3RhcnROb2RlOiBSb2FkTm9kZSA9IHJlc3VsdFtpXSBhcyBSb2FkTm9kZTtcclxuICAgICAgICAgICAgdmFyIG9wdGltaXplTm9kZTogUm9hZE5vZGUgPSBudWxsO1xyXG5cclxuICAgICAgICAgICAgLy/kvJjlhYjku47lsL7pg6jlr7nmr5TvvIzlpoLmnpzog73nm7Tovr7lsLHmiorkuK3pl7TlpJrkvZnnmoTot6/ngrnliKDmjolcclxuICAgICAgICAgICAgZm9yICh2YXIgajogbnVtYmVyID0gcmVzdWx0Lmxlbmd0aCAtIDE7IGogPiBpICsgMTsgai0tKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgdGFyZ2V0Tm9kZTogUm9hZE5vZGUgPSByZXN1bHRbal0gYXMgUm9hZE5vZGU7XHJcblxyXG4gICAgICAgICAgICAgICAgLy/lnKjnrKzkuIDpmLbmrrXkvJjlt7Lnu4/kvJjljJbov4fmqKrvvIznq5bvvIzmraPmlpzkuobvvIzmiYDku6Xlho3lh7rnjrDmmK/ogq/lrprkuI3og73kvJjljJbnmoTvvIzlj6/ku6Xlv73nlaVcclxuICAgICAgICAgICAgICAgIGlmIChzdGFydE5vZGUuY3ggPT0gdGFyZ2V0Tm9kZS5jeCB8fCBzdGFydE5vZGUuY3kgPT0gdGFyZ2V0Tm9kZS5jeSB8fCBNYXRoLmFicyh0YXJnZXROb2RlLmN4IC0gc3RhcnROb2RlLmN4KSA9PSBNYXRoLmFicyh0YXJnZXROb2RlLmN5IC0gc3RhcnROb2RlLmN5KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmlzQXJyaXZlQmV0d2VlblR3b05vZGVzKHN0YXJ0Tm9kZSwgdGFyZ2V0Tm9kZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICBvcHRpbWl6ZU5vZGUgPSB0YXJnZXROb2RlO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKG9wdGltaXplTm9kZSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIG9wdGltaXplTGVuOiBudW1iZXIgPSBqIC0gaSAtIDE7XHJcbiAgICAgICAgICAgICAgICByZXN1bHQuc3BsaWNlKGkgKyAxLCBvcHRpbWl6ZUxlbik7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzZXROb2RlRlZhbHVlKG5vZGU6IFJvYWROb2RlKTogdm9pZHtcclxuICAgICAgICB2YXIgZzogbnVtYmVyO1xyXG5cclxuICAgICAgICBpZiAobm9kZS5jeCA9PSB0aGlzLl9jdXJyZW50Tm9kZS5jeCB8fCBub2RlLmN5ID09IHRoaXMuX2N1cnJlbnROb2RlLmN5KSB7XHJcbiAgICAgICAgICAgIGcgPSB0aGlzLl9jdXJyZW50Tm9kZS5nICsgdGhpcy5DT1NUX1NUUkFJR0hUO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGcgPSB0aGlzLl9jdXJyZW50Tm9kZS5nICsgdGhpcy5DT1NUX0RJQUdPTkFMO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuaXNJbk9wZW5MaXN0KG5vZGUpKSB7XHJcbiAgICAgICAgICAgIGlmIChnIDwgbm9kZS5nKSB7XHJcbiAgICAgICAgICAgICAgICBub2RlLmcgPSBnO1xyXG5cclxuICAgICAgICAgICAgICAgIG5vZGUucGFyZW50ID0gdGhpcy5fY3VycmVudE5vZGU7XHJcbiAgICAgICAgICAgICAgICBub2RlLmggPSAoTWF0aC5hYnModGhpcy5fdGFyZ2V0Tm9kZS5jeCAtIG5vZGUuY3gpICsgTWF0aC5hYnModGhpcy5fdGFyZ2V0Tm9kZS5jeSAtIG5vZGUuY3kpKSAqIHRoaXMuQ09TVF9TVFJBSUdIVDtcclxuICAgICAgICAgICAgICAgIG5vZGUuZiA9IG5vZGUuZyArIG5vZGUuaDtcclxuXHJcbiAgICAgICAgICAgICAgICAvL+iKgueCueeahGflgLzlt7Lnu4/mlLnlj5jvvIzmioroioLngrnlhYjku47kuozloIblj4nmoJHnu5PmnoTkuK3liKDpmaTvvIzlho3ph43mlrDmt7vliqDov5vkuozloIblj4nmoJFcclxuICAgICAgICAgICAgICAgIHRoaXMuX2JpbmFyeVRyZWVOb2RlLnJlbW92ZVRyZWVOb2RlKG5vZGUpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fYmluYXJ5VHJlZU5vZGUuYWRkVHJlZU5vZGUobm9kZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBub2RlLmcgPSBnO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5fYmluYXJ5VHJlZU5vZGUuc2V0Um9hZE5vZGVJbk9wZW5MaXN0KG5vZGUpOy8v57uZ6IqC54K55omT5YWl5byA5pS+5YiX6KGo55qE5qCH5b+XXHJcbiAgICAgICAgICAgIG5vZGUucmVzZXRUcmVlKCk7XHJcblxyXG4gICAgICAgICAgICBub2RlLnBhcmVudCA9IHRoaXMuX2N1cnJlbnROb2RlO1xyXG4gICAgICAgICAgICBub2RlLmggPSAoTWF0aC5hYnModGhpcy5fdGFyZ2V0Tm9kZS5jeCAtIG5vZGUuY3gpICsgTWF0aC5hYnModGhpcy5fdGFyZ2V0Tm9kZS5jeSAtIG5vZGUuY3kpKSAqIHRoaXMuQ09TVF9TVFJBSUdIVDtcclxuICAgICAgICAgICAgbm9kZS5mID0gbm9kZS5nICsgbm9kZS5oO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5fYmluYXJ5VHJlZU5vZGUuYWRkVHJlZU5vZGUobm9kZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgaXNJbkNsb3NlTGlzdChub2RlOiBSb2FkTm9kZSk6IGJvb2xlYW57XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2JpbmFyeVRyZWVOb2RlLmlzSW5DbG9zZUxpc3Qobm9kZSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBpc0luT3Blbkxpc3Qobm9kZTogUm9hZE5vZGUpOiBib29sZWFue1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9iaW5hcnlUcmVlTm9kZS5pc0luT3Blbkxpc3Qobm9kZSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBpc0luQ29ybmVyKG5vZGU6IFJvYWROb2RlKTogYm9vbGVhbntcclxuICAgICAgICBpZiAodGhpcy5fcGF0aFF1YWRTZWVrID09IFBhdGhRdWFkU2Vlay5wYXRoX2RpcmVfNCkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChub2RlLmN4ID09IHRoaXMuX2N1cnJlbnROb2RlLmN4IHx8IG5vZGUuY3kgPT0gdGhpcy5fY3VycmVudE5vZGUuY3kpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBsZXQgbm9kZTE6IFJvYWROb2RlID0gdGhpcy5nZXRSb2FkTm9kZSh0aGlzLl9jdXJyZW50Tm9kZS5jeCwgbm9kZS5jeSk7XHJcbiAgICAgICAgbGV0IG5vZGUyOiBSb2FkTm9kZSA9IHRoaXMuZ2V0Um9hZE5vZGUobm9kZS5jeCwgdGhpcy5fY3VycmVudE5vZGUuY3kpO1xyXG4gICAgICAgIGlmICh0aGlzLmlzUGFzc05vZGUobm9kZTEpICYmIHRoaXMuaXNQYXNzTm9kZShub2RlMikpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuICAgIFxyXG59IiwiaW1wb3J0IHsgX2RlY29yYXRvciwgQ29tcG9uZW50LCBtYXRoLCBOb2RlLCBTcHJpdGUsIFNwcml0ZUZyYW1lLCBVSVRyYW5zZm9ybSB9IGZyb20gJ2NjJztcclxuaW1wb3J0IHsgY29uZmlnIH0gZnJvbSAnLi9jb25maWcnO1xyXG5jb25zdCB7IGNjY2xhc3MsIHByb3BlcnR5IH0gPSBfZGVjb3JhdG9yO1xyXG5cclxuQGNjY2xhc3MoJ0JhY2tncm91bmQnKVxyXG5leHBvcnQgY2xhc3MgQmFja2dyb3VuZCBleHRlbmRzIENvbXBvbmVudCB7XHJcbiAgICBAcHJvcGVydHkoU3ByaXRlRnJhbWUpXHJcbiAgICBpdGVtU3ByaXRlRnJhbWU6IFNwcml0ZUZyYW1lID0gdW5kZWZpbmVkO1xyXG5cclxuICAgIGl0ZW1BcnJheTogTm9kZVtdW10gPSBbXTtcclxuICAgIHByb3RlY3RlZCBvbkxvYWQoKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5pbml0KCk7XHJcbiAgICB9XHJcblxyXG4gICAgaW5pdCgpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLml0ZW1BcnJheSA9IFtdO1xyXG4gICAgICAgIGNvbnN0IGhlaWdodDogbnVtYmVyID0gY29uZmlnLnJvdyAqIGNvbmZpZy5ibG9ja0hlaWdodDtcclxuICAgICAgICBjb25zdCB3aWR0aDogbnVtYmVyID0gY29uZmlnLmNvbCAqIGNvbmZpZy5ibG9ja1dpZHRoO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY29uZmlnLnJvdzsgaSsrKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaXRlbUFycmF5W2ldID0gW107XHJcbiAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgY29uZmlnLmNvbDsgaisrKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB4OiBudW1iZXIgPSAtIHdpZHRoIC8gMiArIGNvbmZpZy5ibG9ja1dpZHRoIC8gMiArIGogKiBjb25maWcuYmxvY2tXaWR0aDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHk6IG51bWJlciA9IGhlaWdodCAvIDIgLSBjb25maWcuYmxvY2tIZWlnaHQgLyAyIC0gaSAqIGNvbmZpZy5ibG9ja0hlaWdodDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGl0ZW06IE5vZGUgPSB0aGlzLmNyZWF0ZUl0ZW0oeCwgeSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLml0ZW1BcnJheVtpXVtqXSA9IGl0ZW07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc29sZS5sb2codGhpcy5pdGVtQXJyYXkpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgY3JlYXRlSXRlbSh4OiBudW1iZXIsIHk6IG51bWJlcik6IE5vZGUge1xyXG4gICAgICAgIGNvbnN0IGl0ZW06IE5vZGUgPSBuZXcgTm9kZSgpO1xyXG4gICAgICAgIGNvbnN0IHNwcml0ZTogU3ByaXRlID0gaXRlbS5hZGRDb21wb25lbnQoU3ByaXRlKTtcclxuICAgICAgICBzcHJpdGUuc3ByaXRlRnJhbWUgPSB0aGlzLml0ZW1TcHJpdGVGcmFtZTtcclxuICAgICAgICBzcHJpdGUuc2l6ZU1vZGUgPSBTcHJpdGUuU2l6ZU1vZGUuQ1VTVE9NO1xyXG4gICAgICAgIHRoaXMubm9kZS5hZGRDaGlsZChpdGVtKTtcclxuICAgICAgICBpdGVtLnNldFBvc2l0aW9uKHgsIHkpO1xyXG4gICAgICAgIGl0ZW0uYWRkQ29tcG9uZW50KFVJVHJhbnNmb3JtKS5jb250ZW50U2l6ZSA9IG1hdGguc2l6ZShjb25maWcuYmxvY2tXaWR0aCwgY29uZmlnLmJsb2NrSGVpZ2h0KTtcclxuICAgICAgICByZXR1cm4gaXRlbTtcclxuXHJcbiAgICAgICAgY29uc29sZS5sb2coXCLmtYvor5XmtYvor5VcIilcclxuICAgIH1cclxuXHJcbiAgICBwcm90ZWN0ZWQgb25EZXN0cm95KCk6IHZvaWQge1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5pdGVtQXJyYXkubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgY29uc3QgaXRlbXM6IE5vZGVbXSA9IHRoaXMuaXRlbUFycmF5W2ldO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGl0ZW1zLmxlbmd0aDsgaisrKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBlbGVtZW50ID0gaXRlbXNbal07XHJcbiAgICAgICAgICAgICAgICBpZiAoZWxlbWVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuZGVzdHJveSgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuaXRlbUFycmF5ID0gW107XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG4iLCJpbXBvcnQge0NvbXBvbmVudCwgRW51bSwgX2RlY29yYXRvciwgTm9kZX0gZnJvbSBcImNjXCI7XHJcbmltcG9ydCB7IFZpZXdTaG93VHlwZXMgfSBmcm9tIFwiLi4vQ29tbW9uL0VudW1cIjtcclxuaW1wb3J0IHtCZWhhdmlvdXJ9IGZyb20gXCJkYjovL2Fzc2V0cy9TY3JpcHQvbW9kdWxlcy9SUEcvQmVoYXZpb3VyXCI7XHJcbi8qKlxyXG4gKiBVSVZpZXfnlYzpnaLln7rnoYDnsbtcclxuICogXHJcbiAqIDEuIOW/q+mAn+WFs+mXreS4juWxj+iUveeCueWHu+eahOmAiemhuemFjee9rlxyXG4gKiAyLiDnlYzpnaLnvJPlrZjorr7nva7vvIjlvIDlkK/lkI7nlYzpnaLlhbPpl63kuI3kvJrooqvph4rmlL7vvIzku6Xkvr/kuIvmrKHlv6vpgJ/miZPlvIDvvIlcclxuICogMy4g55WM6Z2i5pi+56S657G75Z6L6YWN572uXHJcbiAqIFxyXG4gKiA0LiDliqDovb3otYTmupDmjqXlj6PvvIjpmo/nlYzpnaLph4rmlL7oh6rliqjph4rmlL7vvInvvIx0aGlzLmxvYWRSZXMoeHh4KVxyXG4gKiA1LiDnlLFVSU1hbmFnZXLph4rmlL5cclxuICogXHJcbiAqIDUuIOeVjOmdouWIneWni+WMluWbnuiwg++8iOWPquiwg+eUqOS4gOasoe+8iVxyXG4gKiA2LiDnlYzpnaLmiZPlvIDlm57osIPvvIjmr4/mrKHmiZPlvIDlm57osIPvvIlcclxuICogNy4g55WM6Z2i5omT5byA5Yqo55S75pKt5pS+57uT5p2f5Zue6LCD77yI5Yqo55S75pKt5pS+5a6M5Zue6LCD77yJXHJcbiAqIDguIOeVjOmdouWFs+mXreWbnuiwg1xyXG4gKiA5LiDnlYzpnaLnva7pobblm57osINcclxuICovXHJcblxyXG5cclxuZXhwb3J0IGRlZmF1bHQgYWJzdHJhY3QgY2xhc3MgQmFzZVZpZXcgZXh0ZW5kcyBCZWhhdmlvdXIge1xyXG5cclxuICAgIHB1YmxpYyBxdWlja0Nsb3NlOiBib29sZWFuID0gZmFsc2U7XHJcbiAgICAvKiog5bGP6JS954K55Ye76YCJ6aG5IOWcqFVJQ29uZuiuvue9ruWxj+iUveeCueWHuyovXHJcbiAgICAvLyBAcHJvcGVydHlcclxuICAgIC8vIHByZXZlbnRUb3VjaDogYm9vbGVhbiA9IHRydWU7XHJcbiAgICBwdWJsaWMgY2FjaGU6IGJvb2xlYW4gPSBmYWxzZTtcclxuXHJcbiAgICBwdWJsaWMgc2hvd1R5cGU6IFZpZXdTaG93VHlwZXMgPSBWaWV3U2hvd1R5cGVzLlZpZXdTaW5nbGU7XHJcblxyXG4gICAgLyoqIOeVjOmdomlkICovXHJcbiAgICBwdWJsaWMgVUlpZDogbnVtYmVyIHwgc3RyaW5nID0gMDtcclxuICAgIC8qKiAg6Z2Z5oCB5Y+Y6YeP77yM55So5LqO5Yy65YiG55u45ZCM55WM6Z2i55qE5LiN5ZCM5a6e5L6LICovXHJcbiAgICBwcml2YXRlIHN0YXRpYyB1aUluZGV4OiBudW1iZXIgPSAwO1xyXG5cclxuICAgIC8qKioqKioqKioqKioqKioqKioqKioqIFVJ55qE5Zue6LCDICoqKioqKioqKioqKioqKioqKioqKioqL1xyXG4gICAgLyoqXHJcbiAgICAgKiDlvZPnlYzpnaLooqvliJvlu7rml7blm57osIPvvIznlJ/lkb3lkajmnJ/lhoXlj6rosIPnlKhcclxuICAgICAqIEBwYXJhbSBhcmdzIOWPr+WPmOWPguaVsFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgaW5pdCguLi5hcmdzOiBhbnkpOiB2b2lkIHtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDlvZPnlYzpnaLooqvmiZPlvIDml7blm57osIPvvIzmr4/mrKHosIPnlKhPcGVu5pe25Zue6LCDXHJcbiAgICAgKiBAcGFyYW0gZnJvbVVJIOS7juWTquS4qlVJ5omT5byA55qEXHJcbiAgICAgKiBAcGFyYW0gYXJncyDlj6/lj5jlj4LmlbBcclxuICAgICAqL1xyXG4gICAgcHVibGljIG9uT3Blbihmcm9tVUk6IG51bWJlciB8IHN0cmluZywgLi4uYXJnczogYW55KTogdm9pZCB7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5q+P5qyh55WM6Z2iT3BlbuWKqOeUu+aSreaUvuWujOavleaXtuWbnuiwg1xyXG4gICAgICovXHJcbiAgICBwdWJsaWMgb25PcGVuQW5pT3ZlcigpOiB2b2lkIHtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOW9k+eVjOmdouiiq+WFs+mXreaXtuWbnuiwg++8jOavj+asoeiwg+eUqENsb3Nl5pe25Zue6LCDXHJcbiAgICAgKiDov5Tlm57lgLzkvJrkvKDpgJLnu5nkuIvkuIDkuKrnlYzpnaJcclxuICAgICAqL1xyXG4gICAgcHVibGljIG9uQ2xvc2UoKTogYW55IHtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDlvZPnlYzpnaLooqvnva7pobbml7blm57osIPvvIxPcGVu5pe25bm25LiN5Lya5Zue6LCD6K+l5Ye95pWwXHJcbiAgICAgKiBAcGFyYW0gcHJlSUQg5YmN5LiA5LiqdWlcclxuICAgICAqIEBwYXJhbSBhcmdzIOWPr+WPmOWPguaVsO+8jFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgb25Ub3AocHJlSUQ6IG51bWJlciB8IHN0cmluZywgLi4uYXJnczogYW55KTogdm9pZCB7XHJcblxyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IF9kZWNvcmF0b3IsIENvbXBvbmVudCwgTm9kZSwgSVRyaWdnZXJFdmVudCwgQ29sbGlkZXIsIFVJVHJhbnNmb3JtLCBWZWMzLCBVSU9wYWNpdHksIENDU3RyaW5nLCBDb2xsaWRlcjJELCBDb250YWN0MkRUeXBlLCBJUGh5c2ljczJEQ29udGFjdCwgSUNvbGxpc2lvbkV2ZW50IH0gZnJvbSBcImNjXCI7XHJcbmltcG9ydCB7IFRyYW5zZm9ybSB9IGZyb20gXCIuL1RyYW5zZm9ybVwiO1xyXG5pbXBvcnQgeyBHYW1lT2JqZWN0IH0gZnJvbSBcIi4vR2FtZU9iamVjdFwiO1xyXG5pbXBvcnQgeyBRdWFkVHJlZVJlY3QgfSBmcm9tIFwiLi4vLi4vQ29tbW9uL1F1YWRUcmVlXCI7XHJcblxyXG5jb25zdCB7IGNjY2xhc3MsIHByb3BlcnR5IH0gPSBfZGVjb3JhdG9yO1xyXG5cclxuLyoqXHJcbiAqIOihjOS4uue7hOS7tlxyXG4gKi9cclxuQGNjY2xhc3MoXCJCZWhhdmlvdXJcIilcclxuZXhwb3J0IGNsYXNzIEJlaGF2aW91ciBleHRlbmRzIENvbXBvbmVudCB7XHJcbiAgICBcclxuICAgIHB1YmxpYyBnZXQgcmVjdCgpOiBRdWFkVHJlZVJlY3QgeyBcclxuICAgICAgICBjb25zdCBwb3N0aW9pb24gPSB0aGlzLm5vZGUucG9zaXRpb24uY2xvbmUoKTtcclxuICAgICAgICByZXR1cm4gbmV3IFF1YWRUcmVlUmVjdChwb3N0aW9pb24ueCwgcG9zdGlvaW9uLnksIHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0KTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICog5a+56LGh5qCH6K+GXHJcbiAgICAgKi9cclxuICAgIEBwcm9wZXJ0eSh7dG9vbHRpcDpcIuWvueixoeagh+ivhlwifSlcclxuICAgIHB1YmxpYyB0YWc6c3RyaW5nID0gXCJcIjtcclxuXHJcbiAgICBwcml2YXRlIGNvbGxpZGVyc18yRDpDb2xsaWRlcjJEW10gPSBudWxsO1xyXG4gICAgcHJpdmF0ZSBjb2xsaWRlcnNfM0Q6Q29sbGlkZXJbXSA9IG51bGw7XHJcblxyXG4gICAgcHJpdmF0ZSBfdHJhbnNmb3JtOlRyYW5zZm9ybSA9IG51bGw7XHJcbiAgICBwdWJsaWMgZ2V0IHRyYW5zZm9ybSgpOlRyYW5zZm9ybVxyXG4gICAge1xyXG4gICAgICAgIGlmKCF0aGlzLl90cmFuc2Zvcm0pXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB0aGlzLl90cmFuc2Zvcm0gPSB0aGlzLm5vZGUgYXMgVHJhbnNmb3JtO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3RyYW5zZm9ybTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIF9nYW1lT2JqZWN0OiBHYW1lT2JqZWN0ID0gbnVsbDtcclxuICAgIHB1YmxpYyBnZXQgZ2FtZU9iamVjdCgpOkdhbWVPYmplY3RcclxuICAgIHtcclxuICAgICAgICBpZighdGhpcy5fZ2FtZU9iamVjdClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHRoaXMuX2dhbWVPYmplY3QgPSB0aGlzLm5vZGUgYXMgR2FtZU9iamVjdDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLl9nYW1lT2JqZWN0O1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgX3VpVHJhbnNmb3JtOlVJVHJhbnNmb3JtID0gbnVsbDtcclxuICAgIHB1YmxpYyBnZXQgdWlUcmFuc2Zvcm0oKTpVSVRyYW5zZm9ybVxyXG4gICAge1xyXG4gICAgICAgIGlmKCF0aGlzLl91aVRyYW5zZm9ybSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHRoaXMuX3VpVHJhbnNmb3JtID0gdGhpcy5ub2RlLmdldENvbXBvbmVudChVSVRyYW5zZm9ybSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy5fdWlUcmFuc2Zvcm07XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBfdWlPcGFjaXR5OiBVSU9wYWNpdHkgPSBudWxsO1xyXG4gICAgcHVibGljIGdldCB1aU9wYWNpdHkoKTogVUlPcGFjaXR5IHtcclxuXHJcbiAgICAgICAgaWYoIXRoaXMuX3VpT3BhY2l0eSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHRoaXMuX3VpT3BhY2l0eSA9IHRoaXMubm9kZS5nZXRDb21wb25lbnQoVUlPcGFjaXR5KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLl91aU9wYWNpdHk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLeiuvue9ruWuvemrmCBiZWdpbi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gICAgcHVibGljIGdldCB3aWR0aCgpOiBudW1iZXIge1xyXG5cclxuICAgICAgICBpZih0aGlzLnVpVHJhbnNmb3JtKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMudWlUcmFuc2Zvcm0ud2lkdGg7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gMDtcclxuICAgIH1cclxuICAgIHB1YmxpYyBzZXQgd2lkdGgodmFsdWU6IG51bWJlcikge1xyXG4gICAgICAgIGlmKHRoaXMudWlUcmFuc2Zvcm0pXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB0aGlzLnVpVHJhbnNmb3JtLndpZHRoID0gdmFsdWU7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXQgaGVpZ2h0KCk6IG51bWJlciB7XHJcbiAgICAgICAgaWYodGhpcy51aVRyYW5zZm9ybSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnVpVHJhbnNmb3JtLmhlaWdodDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiAwO1xyXG4gICAgfVxyXG4gICAgcHVibGljIHNldCBoZWlnaHQodmFsdWU6IG51bWJlcikge1xyXG4gICAgICAgIGlmKHRoaXMudWlUcmFuc2Zvcm0pXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB0aGlzLnVpVHJhbnNmb3JtLmhlaWdodCA9IHZhbHVlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS3orr7nva7lrr3pq5ggZW5kLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblxyXG4gICAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLeiuvue9rumAj+aYjuW6piBiZWdpbi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gICAgcHJpdmF0ZSBfYWxwaGE6IG51bWJlciA9IDE7XHJcbiAgICBwdWJsaWMgZ2V0IGFscGhhKCk6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FscGhhO1xyXG4gICAgfVxyXG4gICAgLyoqYWxwaGHlgLznmoTojIPlm7TmmK8gMC0xICovXHJcbiAgICBwdWJsaWMgc2V0IGFscGhhKHZhbHVlOiBudW1iZXIpIHtcclxuICAgICAgICB0aGlzLl9hbHBoYSA9IHZhbHVlO1xyXG5cclxuICAgICAgICBpZih0aGlzLl9hbHBoYSA8IDApXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB0aGlzLl9hbHBoYSA9IDA7XHJcbiAgICAgICAgfWVsc2UgaWYodGhpcy5fYWxwaGEgPiAxKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdGhpcy5fYWxwaGEgPSAxO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYodGhpcy51aU9wYWNpdHkgIT0gbnVsbClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHRoaXMudWlPcGFjaXR5Lm9wYWNpdHkgPSAyNTUgKiAodGhpcy5fYWxwaGEgLyAxKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBfb3BhY2l0eTogbnVtYmVyID0gMjU1O1xyXG4gICAgcHVibGljIGdldCBvcGFjaXR5KCk6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX29wYWNpdHk7XHJcbiAgICB9XHJcbiAgICAvKipvcGFjaXR55YC855qE6IyD5Zu05pivIDAtMjU1ICovXHJcbiAgICBwdWJsaWMgc2V0IG9wYWNpdHkodmFsdWU6IG51bWJlcikge1xyXG4gICAgICAgIHRoaXMuX29wYWNpdHkgPSB2YWx1ZTtcclxuICAgICAgICBcclxuICAgICAgICBpZih0aGlzLl9vcGFjaXR5IDwgMClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHRoaXMuX29wYWNpdHkgPSAwO1xyXG4gICAgICAgIH1lbHNlIGlmKHRoaXMuX29wYWNpdHkgPiAyNTUpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB0aGlzLl9vcGFjaXR5ID0gMjU1O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYodGhpcy51aU9wYWNpdHkgIT0gbnVsbClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHRoaXMudWlPcGFjaXR5Lm9wYWNpdHkgPSB0aGlzLl9vcGFjaXR5O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS3orr7nva7pgI/mmI7luqYgZW5kLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblxyXG4gICAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLeWxgOmDqOWdkOaghyBiZWdpbi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gICAgcHVibGljIGdldCB4KCk6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMudHJhbnNmb3JtLnBvc2l0aW9uLng7XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgc2V0IHgodmFsdWU6IG51bWJlcikge1xyXG4gICAgICAgIHZhciBwb3M6VmVjMyA9IHRoaXMudHJhbnNmb3JtLnBvc2l0aW9uO1xyXG4gICAgICAgIHBvcy54ID0gdmFsdWU7XHJcbiAgICAgICAgdGhpcy50cmFuc2Zvcm0ucG9zaXRpb24gPSBwb3M7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldCB5KCk6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMudHJhbnNmb3JtLnBvc2l0aW9uLnk7XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgc2V0IHkodmFsdWU6IG51bWJlcikge1xyXG4gICAgICAgIHZhciBwb3M6VmVjMyA9IHRoaXMudHJhbnNmb3JtLnBvc2l0aW9uO1xyXG4gICAgICAgIHBvcy55ID0gdmFsdWU7XHJcbiAgICAgICAgdGhpcy50cmFuc2Zvcm0ucG9zaXRpb24gPSBwb3M7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldCB6KCk6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMudHJhbnNmb3JtLnBvc2l0aW9uLno7XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgc2V0IHoodmFsdWU6IG51bWJlcikge1xyXG4gICAgICAgIHZhciBwb3M6VmVjMyA9IHRoaXMudHJhbnNmb3JtLnBvc2l0aW9uO1xyXG4gICAgICAgIHBvcy56ID0gdmFsdWU7XHJcbiAgICAgICAgdGhpcy50cmFuc2Zvcm0ucG9zaXRpb24gPSBwb3M7XHJcbiAgICB9XHJcbiAgICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLeWxgOmDqOWdkOaghyBlbmQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cclxuICAgIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS3kuJbnlYzlnZDmoIcgYmVnaW4tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAgICBwdWJsaWMgZ2V0IHd4KCk6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMudHJhbnNmb3JtLndvcmxkUG9zaXRpb24ueDtcclxuICAgIH1cclxuICAgIHB1YmxpYyBzZXQgd3godmFsdWU6IG51bWJlcikge1xyXG4gICAgICAgIHZhciBwb3M6VmVjMyA9IHRoaXMudHJhbnNmb3JtLndvcmxkUG9zaXRpb247XHJcbiAgICAgICAgcG9zLnggPSB2YWx1ZTtcclxuICAgICAgICB0aGlzLnRyYW5zZm9ybS53b3JsZFBvc2l0aW9uID0gcG9zO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXQgd3koKTogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gdGhpcy50cmFuc2Zvcm0ud29ybGRQb3NpdGlvbi55O1xyXG4gICAgfVxyXG4gICAgcHVibGljIHNldCB3eSh2YWx1ZTogbnVtYmVyKSB7XHJcbiAgICAgICAgdmFyIHBvczpWZWMzID0gdGhpcy50cmFuc2Zvcm0udHJhbnNmb3JtLndvcmxkUG9zaXRpb247XHJcbiAgICAgICAgcG9zLnkgPSB2YWx1ZTtcclxuICAgICAgICB0aGlzLnRyYW5zZm9ybS53b3JsZFBvc2l0aW9uID0gcG9zO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXQgd3ooKTogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gdGhpcy50cmFuc2Zvcm0ud29ybGRQb3NpdGlvbi56O1xyXG4gICAgfVxyXG4gICAgcHVibGljIHNldCB3eih2YWx1ZTogbnVtYmVyKSB7XHJcbiAgICAgICAgdmFyIHBvczpWZWMzID0gdGhpcy50cmFuc2Zvcm0ud29ybGRQb3NpdGlvbjtcclxuICAgICAgICBwb3MueiA9IHZhbHVlO1xyXG4gICAgICAgIHRoaXMudHJhbnNmb3JtLndvcmxkUG9zaXRpb24gPSBwb3M7XHJcbiAgICB9XHJcbiAgICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t5LiW55WM5Z2Q5qCHIGVuZC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHJcbiAgICBvbkxvYWQoKVxyXG4gICAge1xyXG4gICAgICAgIHRoaXMuYWRkQ29sbGlkZXJFdmVudExpc3RlbmVyKCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDnm5HlkKznorDmkp7kuovku7ZcclxuICAgICAqL1xyXG4gICAgcHJvdGVjdGVkIGFkZENvbGxpZGVyRXZlbnRMaXN0ZW5lcigpXHJcbiAgICB7XHJcbiAgICAgICAgdGhpcy5hZGQyRENvbGxpZGVyRXZlbnRMaXN0ZW5lcigpO1xyXG4gICAgICAgIHRoaXMuYWRkM0RDb2xsaWRlckV2ZW50TGlzdGVuZXIoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIDJEIOinpuWPkeWZqOi/m+WFpeWHveaVsFxyXG4gICAgICogQHBhcmFtIHNlbGZDb2xsaWRlciDoh6rlt7HnmoTnorDmkp7kvZNcclxuICAgICAqIEBwYXJhbSBvdGhlckNvbGxpZGVyIOWvueaWueeahOeisOaSnuS9k1xyXG4gICAgICogQHBhcmFtIGNvbnRhY3RcclxuICAgICAqIEBwcm90ZWN0ZWRcclxuICAgICAqL1xyXG4gICAgcHJvdGVjdGVkIG9uVHJpZ2dlckVudGVyMkQoc2VsZkNvbGxpZGVyOiBDb2xsaWRlcjJELCBvdGhlckNvbGxpZGVyOiBDb2xsaWRlcjJELCBjb250YWN0OiBJUGh5c2ljczJEQ29udGFjdCB8IG51bGwpOnZvaWR7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogMkQg6Kem5Y+R5Zmo57uT5p2f5Ye95pWwXHJcbiAgICAgKiBAcGFyYW0gc2VsZkNvbGxpZGVyXHJcbiAgICAgKiBAcGFyYW0gb3RoZXJDb2xsaWRlclxyXG4gICAgICogQHBhcmFtIGNvbnRhY3RcclxuICAgICAqIEBwcm90ZWN0ZWRcclxuICAgICAqL1xyXG4gICAgcHJvdGVjdGVkIG9uVHJpZ2dlckV4aXQyRChzZWxmQ29sbGlkZXI6IENvbGxpZGVyMkQsIG90aGVyQ29sbGlkZXI6IENvbGxpZGVyMkQsIGNvbnRhY3Q6IElQaHlzaWNzMkRDb250YWN0IHwgbnVsbCk6dm9pZHtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAyRCDnorDmkp7lmajov5vlhaXlh73mlbBcclxuICAgICAqIEBwYXJhbSBzZWxmQ29sbGlkZXJcclxuICAgICAqIEBwYXJhbSBvdGhlckNvbGxpZGVyXHJcbiAgICAgKiBAcGFyYW0gY29udGFjdFxyXG4gICAgICogQHByb3RlY3RlZFxyXG4gICAgICovXHJcbiAgICBwcm90ZWN0ZWQgb25Db2xsaXNpb25FbnRlcjJEKHNlbGZDb2xsaWRlcjogQ29sbGlkZXIyRCwgb3RoZXJDb2xsaWRlcjogQ29sbGlkZXIyRCwgY29udGFjdDogSVBoeXNpY3MyRENvbnRhY3QgfCBudWxsKTp2b2lke1xyXG5cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIDJEIOeisOaSnuWZqOmAgOWHuuWHveaVsFxyXG4gICAgICogQHBhcmFtIHNlbGZDb2xsaWRlclxyXG4gICAgICogQHBhcmFtIG90aGVyQ29sbGlkZXJcclxuICAgICAqIEBwYXJhbSBjb250YWN0XHJcbiAgICAgKiBAcHJvdGVjdGVkXHJcbiAgICAgKi9cclxuICAgIHByb3RlY3RlZCBvbkNvbGxpc2lvbkV4aXQyRChzZWxmQ29sbGlkZXI6IENvbGxpZGVyMkQsIG90aGVyQ29sbGlkZXI6IENvbGxpZGVyMkQsIGNvbnRhY3Q6IElQaHlzaWNzMkRDb250YWN0IHwgbnVsbCk6dm9pZHtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDnm5HlkKwyZOeisOaSnuS6i+S7tlxyXG4gICAgICovXHJcbiAgICBwcm90ZWN0ZWQgYWRkMkRDb2xsaWRlckV2ZW50TGlzdGVuZXIoKVxyXG4gICAge1xyXG4gICAgICAgIGxldCBpO1xyXG4gICAgICAgIHRoaXMuY29sbGlkZXJzXzJEID0gdGhpcy5nZXRDb21wb25lbnRzKENvbGxpZGVyMkQpO1xyXG5cclxuICAgICAgICBmb3IoaSA9IDA7IGkgPCB0aGlzLmNvbGxpZGVyc18yRC5sZW5ndGggOyBpKyspXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB0aGlzLmNvbGxpZGVyc18yRFtpXS5vbihDb250YWN0MkRUeXBlLkJFR0lOX0NPTlRBQ1QsdGhpcy5vblRyaWdnZXJFbnRlcjJELHRoaXMpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZm9yKGkgPSAwOyBpIDwgdGhpcy5jb2xsaWRlcnNfMkQubGVuZ3RoIDsgaSsrKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdGhpcy5jb2xsaWRlcnNfMkRbaV0ub24oQ29udGFjdDJEVHlwZS5FTkRfQ09OVEFDVCx0aGlzLm9uVHJpZ2dlckV4aXQyRCx0aGlzKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZvcihpID0gMDsgaSA8IHRoaXMuY29sbGlkZXJzXzJELmxlbmd0aCA7IGkrKylcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHRoaXMuY29sbGlkZXJzXzJEW2ldLm9uKENvbnRhY3QyRFR5cGUuQkVHSU5fQ09OVEFDVCx0aGlzLm9uQ29sbGlzaW9uRW50ZXIyRCx0aGlzKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZvcihpID0gMDsgaSA8IHRoaXMuY29sbGlkZXJzXzJELmxlbmd0aCA7IGkrKylcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHRoaXMuY29sbGlkZXJzXzJEW2ldLm9uKENvbnRhY3QyRFR5cGUuRU5EX0NPTlRBQ1QsdGhpcy5vbkNvbGxpc2lvbkV4aXQyRCx0aGlzKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogM0Qg6Kem5Y+R5Zmo6L+b5YWl5Ye95pWwXHJcbiAgICAgKiBAcGFyYW0gZXZlbnRcclxuICAgICAqIEBwcm90ZWN0ZWRcclxuICAgICAqL1xyXG4gICAgcHJvdGVjdGVkIG9uVHJpZ2dlckVudGVyKGV2ZW50OklUcmlnZ2VyRXZlbnQpOnZvaWR7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogM0Qg6Kem5Y+R5Zmo5oyB57ut5Ye95pWwXHJcbiAgICAgKiBAcGFyYW0gZXZlbnRcclxuICAgICAqIEBwcml2YXRlXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgb25UcmlnZ2VyU3RheShldmVudDpJVHJpZ2dlckV2ZW50KTp2b2lke1xyXG5cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIDNEIOinpuWPkeWZqOmAgOWHuuWHveaVsFxyXG4gICAgICogQHBhcmFtIGV2ZW50XHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIG9uVHJpZ2dlckV4aXQoZXZlbnQ6SVRyaWdnZXJFdmVudCk6dm9pZHtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAzRCDnorDmkp7lmajov5vlhaXlh73mlbBcclxuICAgICAqIEBwYXJhbSBldmVudFxyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBvbkNvbGxpc2lvbkVudGVyKGV2ZW50OiBJQ29sbGlzaW9uRXZlbnQpOnZvaWR7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogM0Qg56Kw5pKe5Zmo5oyB57ut5Ye95pWwXHJcbiAgICAgKiBAcGFyYW0gZXZlbnRcclxuICAgICAqIEBwcml2YXRlXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgb25Db2xsaXNpb25TdGF5KGV2ZW50OklDb2xsaXNpb25FdmVudCk6dm9pZHtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAzRCDnorDmkp7lmajpgIDlh7rlh73mlbBcclxuICAgICAqIEBwYXJhbSBldmVudFxyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBvbkNvbGxpc2lvbkV4aXQoZXZlbnQ6SUNvbGxpc2lvbkV2ZW50KTp2b2lke1xyXG5cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOebkeWQrDNk56Kw5pKe5LqL5Lu2XHJcbiAgICAgKi9cclxuICAgIHByb3RlY3RlZCBhZGQzRENvbGxpZGVyRXZlbnRMaXN0ZW5lcigpXHJcbiAgICB7XHJcbiAgICAgICAgdGhpcy5jb2xsaWRlcnNfM0QgPSB0aGlzLmdldENvbXBvbmVudHMoQ29sbGlkZXIpO1xyXG5cclxuICAgICAgICBmb3IobGV0IGkgPSAwIDsgaSA8IHRoaXMuY29sbGlkZXJzXzNELmxlbmd0aCA7IGkrKylcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHRoaXMuY29sbGlkZXJzXzNEW2ldLm9uKFwib25UcmlnZ2VyRW50ZXJcIiwgdGhpcy5vblRyaWdnZXJFbnRlcix0aGlzKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZvcihsZXQgaSA9IDAgOyBpIDwgdGhpcy5jb2xsaWRlcnNfM0QubGVuZ3RoIDsgaSsrKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdGhpcy5jb2xsaWRlcnNfM0RbaV0ub24oXCJvblRyaWdnZXJTdGF5XCIsdGhpcy5vblRyaWdnZXJTdGF5LHRoaXMpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZm9yKGxldCBpID0gMCA7IGkgPCB0aGlzLmNvbGxpZGVyc18zRC5sZW5ndGggOyBpKyspXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB0aGlzLmNvbGxpZGVyc18zRFtpXS5vbihcIm9uVHJpZ2dlckV4aXRcIix0aGlzLm9uVHJpZ2dlckV4aXQsdGhpcyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmb3IobGV0IGkgPSAwIDsgaSA8IHRoaXMuY29sbGlkZXJzXzNELmxlbmd0aCA7IGkrKylcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHRoaXMuY29sbGlkZXJzXzNEW2ldLm9uKFwib25Db2xsaXNpb25FbnRlclwiLHRoaXMub25Db2xsaXNpb25FbnRlcix0aGlzKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZvcihsZXQgaSA9IDAgOyBpIDwgdGhpcy5jb2xsaWRlcnNfM0QubGVuZ3RoIDsgaSsrKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdGhpcy5jb2xsaWRlcnNfM0RbaV0ub24oXCJvbkNvbGxpc2lvblN0YXlcIix0aGlzLm9uQ29sbGlzaW9uU3RheSx0aGlzKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZvcih2YXIgaSA9IDAgOyBpIDwgdGhpcy5jb2xsaWRlcnNfM0QubGVuZ3RoIDsgaSsrKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdGhpcy5jb2xsaWRlcnNfM0RbaV0ub24oXCJvbkNvbGxpc2lvbkV4aXRcIix0aGlzLm9uQ29sbGlzaW9uRXhpdCx0aGlzKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5rOo6ZSA5omA5pyJ56Kw5pKe5LqL5Lu2XHJcbiAgICAgKi9cclxuICAgIHByb3RlY3RlZCByZW1vdmVBbGxDb2xsaWRlckV2ZW50TGlzdGVuZXIoKVxyXG4gICAge1xyXG4gICAgICAgIGlmKHRoaXMuY29sbGlkZXJzXzJEKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgZm9yKGxldCBpID0gMCA7IGkgPCB0aGlzLmNvbGxpZGVyc18yRC5sZW5ndGggOyBpKyspXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuY29sbGlkZXJzXzJEW2ldLm9mZihDb250YWN0MkRUeXBlLkJFR0lOX0NPTlRBQ1QsdGhpcy5vblRyaWdnZXJFbnRlcjJELHRoaXMpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jb2xsaWRlcnNfMkRbaV0ub2ZmKENvbnRhY3QyRFR5cGUuRU5EX0NPTlRBQ1QsdGhpcy5vblRyaWdnZXJFeGl0MkQsdGhpcyk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbGxpZGVyc18yRFtpXS5vZmYoQ29udGFjdDJEVHlwZS5CRUdJTl9DT05UQUNULHRoaXMub25Db2xsaXNpb25FbnRlcjJELHRoaXMpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jb2xsaWRlcnNfMkRbaV0ub2ZmKENvbnRhY3QyRFR5cGUuRU5EX0NPTlRBQ1QsdGhpcy5vbkNvbGxpc2lvbkV4aXQyRCx0aGlzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYodGhpcy5jb2xsaWRlcnNfM0QpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBmb3IobGV0IGkgPSAwIDsgaSA8IHRoaXMuY29sbGlkZXJzXzNELmxlbmd0aCA7IGkrKylcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jb2xsaWRlcnNfM0RbaV0ub2ZmKFwib25UcmlnZ2VyRW50ZXJcIix0aGlzLm9uVHJpZ2dlckVudGVyLHRoaXMpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jb2xsaWRlcnNfM0RbaV0ub2ZmKFwib25UcmlnZ2VyU3RheVwiLHRoaXMub25UcmlnZ2VyU3RheSx0aGlzKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuY29sbGlkZXJzXzNEW2ldLm9mZihcIm9uVHJpZ2dlckV4aXRcIix0aGlzLm9uVHJpZ2dlckV4aXQsdGhpcyk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbGxpZGVyc18zRFtpXS5vZmYoXCJvbkNvbGxpc2lvbkVudGVyXCIsdGhpcy5vbkNvbGxpc2lvbkVudGVyLHRoaXMpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jb2xsaWRlcnNfM0RbaV0ub2ZmKFwib25Db2xsaXNpb25TdGF5XCIsdGhpcy5vbkNvbGxpc2lvblN0YXksdGhpcyk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbGxpZGVyc18zRFtpXS5vZmYoXCJvbkNvbGxpc2lvbkV4aXRcIix0aGlzLm9uQ29sbGlzaW9uRXhpdCx0aGlzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBvbkRlc3Ryb3koKVxyXG4gICAge1xyXG4gICAgICAgIHRoaXMucmVtb3ZlQWxsQ29sbGlkZXJFdmVudExpc3RlbmVyKCk7XHJcbiAgICB9XHJcbn1cclxuXHJcbi8vQmVoYXZpb3VyLnByb3RvdHlwZS5vbkxvYWQgPSBmdW5jdGlvbigpe3RoaXMub25Mb2FkKCk7IGNvbnNvbGUubG9nKFwi5omn6KGM5LqGYmVoYXZpb3Vy55qEIG9ubG9hZFwiKX07IiwiaW1wb3J0IHtfZGVjb3JhdG9yLCBDb21wb25lbnQsIG1hdGgsIE5vZGUsIFZlYzJ9IGZyb20gJ2NjJztcclxuY29uc3QgeyBjY2NsYXNzLCBwcm9wZXJ0eSB9ID0gX2RlY29yYXRvcjtcclxuXHJcbkBjY2NsYXNzKCdCZXppZXJQYXJ0JylcclxuZXhwb3J0IGNsYXNzIEJlemllclBhcnQge1xyXG4gICAgc3RhcnRQb3M6IFZlYzI7XHJcbiAgICBjUG9zMTogVmVjMjtcclxuICAgIGNQb3MyOiBWZWMyO1xyXG4gICAgZW5kUG9zOiBWZWMyO1xyXG4gICAgLyoqXHJcbiAgICAgKiDlsIbotJ3loZ7lsJTmm7Lnur/liIbmiJDlpJrkuKrngrnvvIzkuI3ljIXlkKvlvIDlp4vnq6/ngrlcclxuICAgICAqL1xyXG4gICAgcG9zQXJyYXk6IFZlYzJbXSA9IFtdO1xyXG4gICAgbGVuZ2h0OiBudW1iZXIgPSBudWxsO1xyXG4gICAgY29uc3RydWN0b3Ioc3RhcnRQOiBWZWMyLCBjUDE6IFZlYzIsIGNQMjogVmVjMiwgZW5kUDogVmVjMikge1xyXG4gICAgICAgIHRoaXMuc3RhcnRQb3MgPSBzdGFydFA7XHJcbiAgICAgICAgdGhpcy5jUG9zMSA9IGNQMTtcclxuICAgICAgICB0aGlzLmNQb3MyID0gY1AyO1xyXG4gICAgICAgIHRoaXMuZW5kUG9zID0gZW5kUDtcclxuXHJcbiAgICAgICAgdGhpcy5sZW5naHQgPSB0aGlzLmdldEJlemllckxlbigpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5q+P6ZqUbGVu5Liq5YOP57Sg55Sf5oiQ5LiA5Liq54K5LOabsue6v+W8gOWni+eahOerr+eCueS4jeeUn+aIkOeCuVxyXG4gICAgICogQHBhcmFtIGxlblxyXG4gICAgICovXHJcbiAgICBjcmVhdGVQb3NBcnJheShsZW46IG51bWJlcikge1xyXG4gICAgICAgIGxldCBmbjogbnVtYmVyID0gTWF0aC5mbG9vcih0aGlzLmxlbmdodCAvIGxlbik7XHJcbiAgICAgICAgbGV0IGk6IG51bWJlciA9IDEgLyBmbjtcclxuICAgICAgICBmb3IgKGxldCB0ID0gaTsgdCA8PSAxOyB0ICs9IGkpIHtcclxuICAgICAgICAgICAgbGV0IHg6IG51bWJlciA9IHRoaXMuYmV6aWVyKHRoaXMuc3RhcnRQb3MueCwgdGhpcy5jUG9zMS54LCB0aGlzLmNQb3MyLngsIHRoaXMuZW5kUG9zLngsIHQpO1xyXG4gICAgICAgICAgICBsZXQgeTogbnVtYmVyID0gdGhpcy5iZXppZXIodGhpcy5zdGFydFBvcy55LCB0aGlzLmNQb3MxLnksIHRoaXMuY1BvczIueSwgdGhpcy5lbmRQb3MueSwgdCk7XHJcbiAgICAgICAgICAgIHRoaXMucG9zQXJyYXkucHVzaChtYXRoLnYyKHgsIHkpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMucG9zQXJyYXkubGVuZ3RoIDwgZm4pIHsgLy/ooaXkuIrnu5PmnZ/nq6/ngrlcclxuICAgICAgICAgICAgdGhpcy5wb3NBcnJheS5wdXNoKHRoaXMuZW5kUG9zKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDojrflvpfmm7Lnur/plb/luqZcclxuICAgICAqIEBwYXJhbSBmIOWwhuS4gOauteabsue6v+WIhuS4uuWkmuWwkeS7veadpeaxgumVv+W6pizpu5jorqQyMFxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIGdldEJlemllckxlbihmOiBudW1iZXIgPSAyMCk6IG51bWJlciB7XHJcbiAgICAgICAgbGV0IHQ6IG51bWJlciA9IDEgLyAyMDtcclxuICAgICAgICBsZXQgbDogbnVtYmVyID0gMDtcclxuICAgICAgICBsZXQgaTogbnVtYmVyO1xyXG4gICAgICAgIGxldCBjUDogVmVjMjtcclxuICAgICAgICBsZXQgbGFzdFA6IFZlYzIgPSBtYXRoLnYyKDAsIDApO1xyXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPD0gMTsgaSArPSB0KSB7XHJcbiAgICAgICAgICAgIGxldCB4OiBudW1iZXIgPSB0aGlzLmJlemllcih0aGlzLnN0YXJ0UG9zLngsIHRoaXMuY1BvczEueCwgdGhpcy5jUG9zMi54LCB0aGlzLmVuZFBvcy54LCBpKTtcclxuICAgICAgICAgICAgbGV0IHk6IG51bWJlciA9IHRoaXMuYmV6aWVyKHRoaXMuc3RhcnRQb3MueSwgdGhpcy5jUG9zMS55LCB0aGlzLmNQb3MyLnksIHRoaXMuZW5kUG9zLnksIGkpO1xyXG4gICAgICAgICAgICBjUCA9IG1hdGgudjIoeCwgeSk7XHJcbiAgICAgICAgICAgIGwgKz0gKGNQLnN1YnRyYWN0KGxhc3RQKSkubGVuZ3RoKCk7XHJcbiAgICAgICAgICAgIGxhc3RQID0gY1A7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBsO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgYmV6aWVyKHYxOiBudW1iZXIsIHYyOiBudW1iZXIsIHYzOiBudW1iZXIsIHY0OiBudW1iZXIsIHQ6IG51bWJlcik6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIHYxICogTWF0aC5wb3coMSAtIHQsIDMpICsgMyAqIHYyICogdCAqIE1hdGgucG93KDEgLSB0LCAyKSArIDMgKiB2MyAqIHQgKiB0ICogKDEgLSB0KSArIHY0ICogTWF0aC5wb3codCwgMyk7XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgRXZlbnRLZXlib2FyZCwgTm9kZVBvb2wgfSBmcm9tIFwiY2NcIjtcclxuaW1wb3J0IFJvYWROb2RlIGZyb20gXCIuL1JvYWROb2RlXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBCaW5hcnlUcmVlTm9kZSB7XHJcbiAgICBwdWJsaWMgc2Vla1RhZzogbnVtYmVyID0gMDtcclxuICAgIFxyXG4gICAgcHVibGljIG9wZW5Ob2RlOiBSb2FkTm9kZSA9IG51bGwgO1xyXG5cclxuICAgIHB1YmxpYyBjb3VudDogbnVtYmVyID0gMDtcclxuXHJcbiAgICBwdWJsaWMgcmVmbGVzaFRhZygpOiB2b2lke1xyXG4gICAgICAgIHRoaXMub3Blbk5vZGUgPSBudWxsO1xyXG4gICAgICAgIHRoaXMuY291bnQgPSAwO1xyXG4gICAgICAgIHRoaXMuc2Vla1RhZysrO1xyXG4gICAgICAgIGlmICh0aGlzLnNlZWtUYWcgPiAxMDAwMDAwMDAwKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2Vla1RhZyA9IDA7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBpc1RyZWVOdWxsKCk6IGJvb2xlYW57XHJcbiAgICAgICAgcmV0dXJuIHRoaXMub3Blbk5vZGUgPT0gbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgYWRkVHJlZU5vZGUocm9hZE5vZGU6IFJvYWROb2RlLCBoZWFkOiBSb2FkTm9kZSA9IG51bGwpOiB2b2lke1xyXG4gICAgICAgIHRoaXMuY291bnQrKztcclxuICAgICAgICBpZiAoaGVhZCA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmlzVHJlZU51bGwoKSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5vcGVuTm9kZSA9IHJvYWROb2RlO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgaGVhZCA9IHRoaXMub3Blbk5vZGU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChoZWFkID09IHJvYWROb2RlKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChyb2FkTm9kZS5mID49IGhlYWQuZikge1xyXG4gICAgICAgICAgICBpZiAoaGVhZC5yaWdodCA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICBoZWFkLnJpZ2h0ID0gcm9hZE5vZGU7XHJcbiAgICAgICAgICAgICAgICByb2FkTm9kZS50cmVlUGFyZW50ID0gaGVhZDtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuYWRkVHJlZU5vZGUocm9hZE5vZGUsIGhlYWQucmlnaHQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgaWYgKGhlYWQubGVmdCA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICBoZWFkLmxlZnQgPSByb2FkTm9kZTtcclxuICAgICAgICAgICAgICAgIHJvYWROb2RlLnRyZWVQYXJlbnQgPSBoZWFkO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5hZGRUcmVlTm9kZShyb2FkTm9kZSwgaGVhZC5sZWZ0KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHJlbW92ZVRyZWVOb2RlKHJvYWROb2RlOiBSb2FkTm9kZSk6IHZvaWR7XHJcbiAgICAgICAgdGhpcy5jb3VudCsrO1xyXG4gICAgICAgIGlmIChyb2FkTm9kZS50cmVlUGFyZW50ID09IG51bGwgJiYgcm9hZE5vZGUubGVmdCA9PSBudWxsICYmIHJvYWROb2RlLnJpZ2h0ID09IG51bGwpIHtcclxuICAgICAgICAgICAgaWYgKHJvYWROb2RlID09IHRoaXMub3Blbk5vZGUpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMub3Blbk5vZGUgPSBudWxsO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChyb2FkTm9kZS50cmVlUGFyZW50ID09IG51bGwpIHtcclxuICAgICAgICAgICAgaWYgKHJvYWROb2RlLmxlZnQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMub3Blbk5vZGUgPSByb2FkTm9kZS5sZWZ0O1xyXG4gICAgICAgICAgICAgICAgcm9hZE5vZGUubGVmdC50cmVlUGFyZW50ID0gbnVsbDtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAocm9hZE5vZGUucmlnaHQpIHtcclxuICAgICAgICAgICAgICAgICAgICByb2FkTm9kZS5yaWdodC50cmVlUGFyZW50ID0gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmFkZFRyZWVOb2RlKHJvYWROb2RlLnJpZ2h0LCB0aGlzLm9wZW5Ob2RlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIGlmIChyb2FkTm9kZS5yaWdodCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5vcGVuTm9kZSA9IHJvYWROb2RlLnJpZ2h0O1xyXG4gICAgICAgICAgICAgICAgcm9hZE5vZGUucmlnaHQudHJlZVBhcmVudCA9IG51bGw7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBpZiAocm9hZE5vZGUudHJlZVBhcmVudC5sZWZ0ID09IHJvYWROb2RlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAocm9hZE5vZGUucmlnaHQpIHtcclxuICAgICAgICAgICAgICAgICAgICByb2FkTm9kZS50cmVlUGFyZW50LmxlZnQgPSByb2FkTm9kZS5yaWdodDtcclxuICAgICAgICAgICAgICAgICAgICByb2FkTm9kZS5yaWdodC50cmVlUGFyZW50ID0gcm9hZE5vZGUudHJlZVBhcmVudDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJvYWROb2RlLmxlZnQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcm9hZE5vZGUubGVmdC50cmVlUGFyZW50ID0gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hZGRUcmVlTm9kZShyb2FkTm9kZS5sZWZ0LCByb2FkTm9kZS5yaWdodCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICByb2FkTm9kZS50cmVlUGFyZW50LmxlZnQgPSByb2FkTm9kZS5sZWZ0O1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChyb2FkTm9kZS5sZWZ0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJvYWROb2RlLmxlZnQudHJlZVBhcmVudCA9IHJvYWROb2RlLnRyZWVQYXJlbnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHJvYWROb2RlLnRyZWVQYXJlbnQucmlnaHQgPT0gcm9hZE5vZGUpIHtcclxuICAgICAgICAgICAgICAgIGlmIChyb2FkTm9kZS5sZWZ0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcm9hZE5vZGUudHJlZVBhcmVudC5yaWdodCA9IHJvYWROb2RlLmxlZnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgcm9hZE5vZGUubGVmdC50cmVlUGFyZW50ID0gcm9hZE5vZGUudHJlZVBhcmVudDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJvYWROb2RlLnJpZ2h0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJvYWROb2RlLnJpZ2h0LnRyZWVQYXJlbnQgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmFkZFRyZWVOb2RlKHJvYWROb2RlLnJpZ2h0LCByb2FkTm9kZS5sZWZ0KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHJvYWROb2RlLnRyZWVQYXJlbnQucmlnaHQgPSByb2FkTm9kZS5yaWdodDtcclxuICAgICAgICAgICAgICAgICAgICBpZiAocm9hZE5vZGUucmlnaHQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcm9hZE5vZGUucmlnaHQudHJlZVBhcmVudCA9IHJvYWROb2RlLnRyZWVQYXJlbnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByb2FkTm9kZS5yZXNldFRyZWUoKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0TWluRk5vZGUoaGVhZDogUm9hZE5vZGUgPSBudWxsKTogUm9hZE5vZGV7XHJcbiAgICAgICAgdGhpcy5jb3VudCsrO1xyXG4gICAgICAgIGlmIChoZWFkID09IG51bGwpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMub3Blbk5vZGUgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBoZWFkID0gdGhpcy5vcGVuTm9kZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGhlYWQubGVmdCA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIGxldCBtaW5Ob2RlOiBSb2FkTm9kZSA9IGhlYWQ7XHJcbiAgICAgICAgICAgIGlmIChoZWFkLnRyZWVQYXJlbnQgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5vcGVuTm9kZSA9IGhlYWQucmlnaHQ7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5vcGVuTm9kZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMub3Blbk5vZGUudHJlZVBhcmVudCA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBoZWFkLnRyZWVQYXJlbnQubGVmdCA9IGhlYWQucmlnaHQ7XHJcbiAgICAgICAgICAgICAgICBpZiAoaGVhZC5yaWdodCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGhlYWQucmlnaHQudHJlZVBhcmVudCA9IGhlYWQudHJlZVBhcmVudDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gbWluTm9kZTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRNaW5GTm9kZShoZWFkLmxlZnQpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNldFJvYWROb2RlSW5PcGVuTGlzdChub2RlOiBSb2FkTm9kZSk6IHZvaWR7XHJcbiAgICAgICAgbm9kZS5vcGVuVGFnID0gdGhpcy5zZWVrVGFnO1xyXG4gICAgICAgIG5vZGUuY2xvc2VUYWcgPSAwO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzZXRSb2FkTm9kZUluQ2xvc2VMaXN0KG5vZGU6IFJvYWROb2RlKTogdm9pZHtcclxuICAgICAgICBub2RlLm9wZW5UYWcgPSAwO1xyXG4gICAgICAgIG5vZGUuY2xvc2VUYWcgPSB0aGlzLnNlZWtUYWc7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGlzSW5PcGVuTGlzdChub2RlOiBSb2FkTm9kZSk6IGJvb2xlYW57XHJcbiAgICAgICAgcmV0dXJuIG5vZGUub3BlblRhZyA9PSB0aGlzLnNlZWtUYWc7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGlzSW5DbG9zZUxpc3Qobm9kZTogUm9hZE5vZGUpOiBib29sZWFue1xyXG4gICAgICAgIHJldHVybiBub2RlLmNsb3NlVGFnID09IHRoaXMuc2Vla1RhZztcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0T3Blbkxpc3QoKTogUm9hZE5vZGVbXXtcclxuICAgICAgICBsZXQgb3Blbkxpc3Q6IFJvYWROb2RlW10gPSBbXTtcclxuICAgICAgICBcclxuICAgICAgICB0aGlzLnNlYWNoVHJlZSh0aGlzLm9wZW5Ob2RlLCBvcGVuTGlzdCk7XHJcbiAgICAgICAgcmV0dXJuIG9wZW5MaXN0O1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzZWFjaFRyZWUoaGVhZDogUm9hZE5vZGUsIG9wZW5MaXN0OiBSb2FkTm9kZVtdKTogdm9pZHtcclxuICAgICAgICBpZiAoaGVhZCA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgb3Blbkxpc3QucHVzaChoZWFkKTtcclxuXHJcbiAgICAgICAgaWYgKGhlYWQubGVmdCkge1xyXG4gICAgICAgICAgICB0aGlzLnNlYWNoVHJlZShoZWFkLmxlZnQsIG9wZW5MaXN0KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGhlYWQucmlnaHQpIHtcclxuICAgICAgICAgICAgdGhpcy5zZWFjaFRyZWUoaGVhZC5yaWdodCwgb3Blbkxpc3QpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufSIsImltcG9ydCB7IF9kZWNvcmF0b3IsIEFuaW1hdGlvbiwgQ29tcG9uZW50LCBOb2RlIH0gZnJvbSAnY2MnO1xyXG5jb25zdCB7IGNjY2xhc3MsIHByb3BlcnR5IH0gPSBfZGVjb3JhdG9yO1xyXG5cclxuQGNjY2xhc3MoJ0Jsb2NrJylcclxuZXhwb3J0IGNsYXNzIEJsb2NrIGV4dGVuZHMgQ29tcG9uZW50IHtcclxuXHJcbiAgICBwcml2YXRlIGFuaW1hdGlvbjogQW5pbWF0aW9uO1xyXG5cclxuICAgIHByb3RlY3RlZCBvbkxvYWQoKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5hbmltYXRpb24gPSB0aGlzLm5vZGUuZ2V0Q29tcG9uZW50KEFuaW1hdGlvbik7XHJcbiAgICB9XHJcblxyXG4gICAgcGxheUVmZigpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWNldCkgPT4ge1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMuYW5pbWF0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICByZWplY2V0KFwi5Yqo55S757uE5Lu25pyq5oyC6L29XCIpXHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5hbmltYXRpb24ucGxheShcImJsb2NrXCIpXHJcbiAgICAgICAgICAgIHRoaXMuYW5pbWF0aW9uLm9uKEFuaW1hdGlvbi5FdmVudFR5cGUuRklOSVNIRUQsICgpID0+IHtcclxuICAgICAgICAgICAgICAgIHJlc29sdmUodHJ1ZSk7XHJcbiAgICAgICAgICAgIH0sIHRoaXMpXHJcbiAgICAgICAgfSlcclxuXHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG4iLCJpbXBvcnQgeyBfZGVjb3JhdG9yLCBDb21wb25lbnQsIE5vZGUsIFByb2dyZXNzQmFyLCBWZWMzIH0gZnJvbSAnY2MnO1xyXG5pbXBvcnQgQ2hhcmFjdGVyIGZyb20gXCJkYjovL2Fzc2V0cy9TY3JpcHQvbW9kdWxlcy9SUEcvY2hhcmFjdGVyL0NoYXJhY3RlclwiO1xyXG5pbXBvcnQgeyBFZGl0TnBjRGF0YSB9IGZyb20gXCJkYjovL2Fzc2V0cy9TY3JpcHQvbW9kdWxlcy9SUEcvRWRpdE9iakRhdGFcIjtcclxuaW1wb3J0IHsgVG93ZXJMYXVuY2hlciB9IGZyb20gXCJkYjovL2Fzc2V0cy9TY3JpcHQvbW9kdWxlcy9Ub3dlckRlZmVuc2UvVG93ZXJMYXVuY2hlclwiO1xyXG5jb25zdCB7IGNjY2xhc3MsIHByb3BlcnR5IH0gPSBfZGVjb3JhdG9yO1xyXG5cclxuQGNjY2xhc3MoJ0Jvc3MnKVxyXG5leHBvcnQgY2xhc3MgQm9zcyBleHRlbmRzIENoYXJhY3RlciB7XHJcblxyXG4gICAgcHJpdmF0ZSBwcm9ncmVzczogUHJvZ3Jlc3NCYXI7XHJcbiAgICBwcml2YXRlIF9jdXJyZW50SHA6IG51bWJlciA9IDEwO1xyXG4gICAgcHJpdmF0ZSBfbWF4SHA6IG51bWJlciA9IDEwO1xyXG4gICAgb25Mb2FkKCkge1xyXG4gICAgICAgIHN1cGVyLm9uTG9hZCgpO1xyXG4gICAgICAgIHRoaXMucHJvZ3Jlc3MgPSB0aGlzLm5vZGUuZ2V0Q2hpbGRCeU5hbWUoXCJQcm9ncmVzc0JhclwiKS5nZXRDb21wb25lbnQoUHJvZ3Jlc3NCYXIpO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXJ0KCkge1xyXG5cclxuICAgIH1cclxuXHJcbiAgICB1cGRhdGUoZGVsdGFUaW1lOiBudW1iZXIpIHtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgaW5pdEVkaXREYXRhKGVkaXREYXRhOiBFZGl0TnBjRGF0YSkge1xyXG4gICAgICAgIHRoaXMubm9kZS5wb3NpdGlvbiA9IG5ldyBWZWMzKGVkaXREYXRhLngsIGVkaXREYXRhLnkpO1xyXG4gICAgICAgIHRoaXMudXBkYXRlSHAodGhpcy5fY3VycmVudEhwKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIHVwZGF0ZUhwKGhwOiBudW1iZXIpOiB2b2lkIHtcclxuICAgICAgICBpZiAodGhpcy5wcm9ncmVzcykge1xyXG4gICAgICAgICAgICB0aGlzLl9jdXJyZW50SHAgPSBocDtcclxuICAgICAgICAgICAgdGhpcy5wcm9ncmVzcy5wcm9ncmVzcyA9IHRoaXMuX2N1cnJlbnRIcCAvIHRoaXMuX21heEhwO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgYmxlZWRpbmcoKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5fY3VycmVudEhwIC09IDE7XHJcbiAgICAgICAgdGhpcy51cGRhdGVIcCh0aGlzLl9jdXJyZW50SHApO1xyXG4gICAgICAgIGlmICh0aGlzLl9jdXJyZW50SHAgPD0gMCkge1xyXG4gICAgICAgICAgICB0aGlzLnNjaGVkdWxlT25jZSgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm5vZGUucmVtb3ZlRnJvbVBhcmVudCgpO1xyXG4gICAgICAgICAgICB9LCAwKVxyXG4gICAgICAgICAgICAvLyB0aGlzLmRlc3Ryb3koKTtcclxuICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIuWksei0peS6hlwiKTtcclxuICAgICAgICAgICAgVG93ZXJMYXVuY2hlci5pbnN0YW5jZS5nYW1lT3ZlciA9IHRydWU7XHJcbiAgICAgICAgICAgIFRvd2VyTGF1bmNoZXIuaW5zdGFuY2UuZG9HYW1lT3ZlcigpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgaW5pdCgpOiB2b2lkIHtcclxuXHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG4iLCJpbXBvcnQge1xyXG4gICAgX2RlY29yYXRvcixcclxuICAgIEFuaW1hdGlvbixcclxuICAgIENDSW50ZWdlcixcclxuICAgIENvbGxpZGVyMkQsXHJcbiAgICBDb21wb25lbnQsXHJcbiAgICBJUGh5c2ljczJEQ29udGFjdCxcclxuICAgIG1hdGgsXHJcbiAgICBOb2RlLFxyXG4gICAgUmlnaWRCb2R5MkQsXHJcbiAgICBTaXplLFxyXG4gICAgVmVjMixcclxuICAgIFZlYzMsIHZpZXdcclxufSBmcm9tICdjYyc7XHJcbmltcG9ydCBDaGFyYWN0ZXIgZnJvbSBcImRiOi8vYXNzZXRzL1NjcmlwdC9tb2R1bGVzL1JQRy9jaGFyYWN0ZXIvQ2hhcmFjdGVyXCI7XHJcbmltcG9ydCB7IFRvd2VyQ29uc3QgfSBmcm9tIFwiZGI6Ly9hc3NldHMvU2NyaXB0L21vZHVsZXMvVG93ZXJEZWZlbnNlL1Rvd2VyQ29uc3RcIjtcclxuaW1wb3J0IHsgQnVsbGV0TWFuYWdlciB9IGZyb20gXCJkYjovL2Fzc2V0cy9TY3JpcHQvbW9kdWxlcy9Ub3dlckRlZmVuc2UvQnVsbGV0TWFuYWdlclwiO1xyXG5pbXBvcnQgeyBFbmVteSB9IGZyb20gXCJkYjovL2Fzc2V0cy9TY3JpcHQvbW9kdWxlcy9Ub3dlckRlZmVuc2UvRW5lbXlcIjtcclxuaW1wb3J0IHsgVG93ZXJDaGFyYWN0ZXIgfSBmcm9tICcuL1Rvd2VyQ2hhcmFjdGVyJztcclxuaW1wb3J0IHsgVG93ZXJMYXVuY2hlciB9IGZyb20gJy4vVG93ZXJMYXVuY2hlcic7XHJcbmNvbnN0IHsgY2NjbGFzcywgcHJvcGVydHkgfSA9IF9kZWNvcmF0b3I7XHJcblxyXG5AY2NjbGFzcygnQnVsbGV0JylcclxuZXhwb3J0IGNsYXNzIEJ1bGxldCBleHRlbmRzIENoYXJhY3RlciB7XHJcblxyXG4gICAgQHByb3BlcnR5KE5vZGUpXHJcbiAgICBwdWJsaWMgdGFyZ2V0Tm9kZTogTm9kZTtcclxuICAgIEBwcm9wZXJ0eShDQ0ludGVnZXIpXHJcbiAgICBwdWJsaWMgc3BlZWQ6IG51bWJlciA9IDA7XHJcblxyXG4gICAgcHJpdmF0ZSBkaXJlY3Rpb24yOiBWZWMzID0gVmVjMy5aRVJPO1xyXG5cclxuICAgIHByaXZhdGUgYm9keTogTm9kZTtcclxuXHJcbiAgICBwdWJsaWMgaGFybTogbnVtYmVyID0gMTA7XHJcblxyXG4gICAgcHJpdmF0ZSB0YXJnZXRQb3NpdGlvbjogVmVjMztcclxuXHJcbiAgICBwcml2YXRlIHZpZXc6IFNpemU7XHJcblxyXG4gICAgcHJpdmF0ZSB0b3dlckxldmVsOiBudW1iZXI7XHJcblxyXG4gICAgcHJpdmF0ZSB0b3dlcjogVG93ZXJDaGFyYWN0ZXIgPSBudWxsO1xyXG5cclxuICAgIHByaXZhdGUgYW5pbWF0aW9uOiBBbmltYXRpb24gPSBudWxsO1xyXG5cclxuICAgIG9uTG9hZCgpIHtcclxuICAgICAgICBzdXBlci5vbkxvYWQoKTtcclxuICAgICAgICB0aGlzLmJvZHkgPSB0aGlzLm5vZGUuZ2V0Q2hpbGRCeU5hbWUoXCJib2R5XCIpO1xyXG4gICAgICAgIHRoaXMudmlldyA9IHZpZXcuZ2V0VmlzaWJsZVNpemUoKTtcclxuICAgICAgICB0aGlzLmFuaW1hdGlvbiA9IHRoaXMubm9kZS5nZXRDb21wb25lbnQoQW5pbWF0aW9uKTtcclxuICAgICAgICAvLyBpZiAodGhpcy50YXJnZXROb2RlKSB7XHJcbiAgICAgICAgLy8gICAgIC8vIOiuoeeul+WtkOW8ueeahOenu+WKqOaWueWQkVxyXG4gICAgICAgIC8vICAgICBjb25zdCB0YXJnZXRQb3MgPSB0aGlzLnRhcmdldE5vZGUucG9zaXRpb247XHJcbiAgICAgICAgLy8gICAgIGNvbnN0IGN1cnJlbnRQb3MgPSB0aGlzLm5vZGUucG9zaXRpb247XHJcbiAgICAgICAgLy8gICAgIHRoaXMuZGlyZWN0aW9uMiA9IG1hdGgudjIodGFyZ2V0UG9zLngsdGFyZ2V0UG9zLnkpLnN1YnRyYWN0KG1hdGgudjIoY3VycmVudFBvcy54LGN1cnJlbnRQb3MueSkpLm5vcm1hbGl6ZSgpOyAvL3RhcmdldFBvcy5zdWJ0cmFjdChjdXJyZW50UG9zKS5ub3JtYWxpemUoKTsgIC8vIOiuoeeul+aWueWQkeWQkemHj1xyXG4gICAgICAgIC8vIH1cclxuICAgICAgICAvLyBjb25zdCByaWcgPSB0aGlzLm5vZGUuZ2V0Q29tcG9uZW50KFJpZ2lkQm9keTJEKTtcclxuICAgICAgICAvLyByaWcuYXBwbHlGb3JjZVRvQ2VudGVyKHRoaXMuZGlyZWN0aW9uMi5tdWx0aXBseShtYXRoLnYyKDAsdGhpcy5zcGVlZCkpLHRydWUpO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXJ0KCkge1xyXG5cclxuICAgIH1cclxuXHJcbiAgICB1cGRhdGUoZHQpIHtcclxuICAgICAgICBpZiAoVG93ZXJMYXVuY2hlci5pbnN0YW5jZSAmJiAoVG93ZXJMYXVuY2hlci5pbnN0YW5jZS5nYW1lT3ZlciB8fCBUb3dlckxhdW5jaGVyLmluc3RhbmNlLnBhdXNlKSkge1xyXG4gICAgICAgICAgICB0aGlzLm5vZGUucmVtb3ZlRnJvbVBhcmVudCgpO1xyXG4gICAgICAgICAgICBCdWxsZXRNYW5hZ2VyLmluc3RhbmNlLnJlbGVhc2UodGhpcyk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMuZGlyZWN0aW9uMikge1xyXG4gICAgICAgICAgICBjb25zdCByYWRpYW4gPSBNYXRoLmF0YW4yKHRoaXMuZGlyZWN0aW9uMi55LCB0aGlzLmRpcmVjdGlvbjIueCk7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBkaXJlY3Rpb24gPSB0aGlzLmRpcmVjdGlvbjIuY2xvbmUoKS5ub3JtYWxpemUoKTtcclxuICAgICAgICAgICAgY29uc3QgYW5nbGUgPSByYWRpYW4gLyBNYXRoLlBJICogMTgwO1xyXG4gICAgICAgICAgICB0aGlzLm5vZGUuYW5nbGUgPSBhbmdsZSAvLy0gOTBcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IGRpc3BsYWNlbWVudCA9IGRpcmVjdGlvbi5tdWx0aXBseVNjYWxhcih0aGlzLnNwZWVkICogZHQpO1xyXG4gICAgICAgICAgICB0aGlzLm5vZGUucG9zaXRpb24gPSB0aGlzLm5vZGUucG9zaXRpb24uY2xvbmUoKS5hZGQoZGlzcGxhY2VtZW50KTtcclxuICAgICAgICB9XHJcblxyXG5cclxuXHJcbiAgICAgICAgLy8g5aaC5p6c5a2Q5by56aOe5Ye65LqG5Zy65pmv77yM5Y+v5Lul6K6+572u5Zue5pS2XHJcbiAgICAgICAgaWYgKE1hdGguYWJzKHRoaXMubm9kZS5wb3NpdGlvbi54KSA+IHRoaXMudmlldy53aWR0aCB8fCBNYXRoLmFicyh0aGlzLm5vZGUucG9zaXRpb24ueSkgPiB0aGlzLnZpZXcuaGVpZ2h0IHx8IE1hdGguYWJzKHRoaXMubm9kZS5wb3NpdGlvbi54KSA8IDAgfHwgTWF0aC5hYnModGhpcy5ub2RlLnBvc2l0aW9uLnkpIDwgMCkge1xyXG4gICAgICAgICAgICB0aGlzLm5vZGUucmVtb3ZlRnJvbVBhcmVudCgpO1xyXG4gICAgICAgICAgICBCdWxsZXRNYW5hZ2VyLmluc3RhbmNlLnJlbGVhc2UodGhpcyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzaG9ydChkaXJlY3Rpb246IFZlYzMsIHRvd2VyOiBUb3dlckNoYXJhY3Rlcik6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuZGlyZWN0aW9uMiA9IGRpcmVjdGlvbjtcclxuICAgICAgICB0aGlzLnRvd2VyID0gdG93ZXI7XHJcbiAgICAgICAgaWYgKHRvd2VyKSB7XHJcbiAgICAgICAgICAgIHRoaXMudG93ZXJMZXZlbCA9IHRvd2VyLmxldmVsO1xyXG4gICAgICAgICAgICB0aGlzLnBsYXlCdWxsZXRBbmltYXRpb24oKTtcclxuICAgICAgICAgICAgdGhpcy5zcGVlZCA9IHRvd2VyLnRvd2VyRGF0YS5zcGVlZDtcclxuICAgICAgICAgICAgdGhpcy5oYXJtID0gdG93ZXIudG93ZXJEYXRhLmhhcm07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIHRoaXMuc3BlZWQgPSBzcGVlZDtcclxuXHJcblxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgcGxheUJ1bGxldEFuaW1hdGlvbigpOiBib29sZWFuIHtcclxuICAgICAgICBpZiAodGhpcy5hbmltYXRpb24pIHtcclxuICAgICAgICAgICAgY29uc3QgY2xpcHMgPSB0aGlzLmFuaW1hdGlvbi5jbGlwcztcclxuICAgICAgICAgICAgY29uc3QgbmFtZXM6IHN0cmluZ1tdID0gY2xpcHMubWFwKGNsaXAgPT4ge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGNsaXAubmFtZVxyXG4gICAgICAgICAgICB9LCB0aGlzKVxyXG4gICAgICAgICAgICB0aGlzLmFuaW1hdGlvbi5vbihBbmltYXRpb24uRXZlbnRUeXBlLkZJTklTSEVELCB0aGlzLm9uQW5pbWF0aW9uRmluaXNoZWQsIHRoaXMpXHJcbiAgICAgICAgICAgIHRoaXMuYW5pbWF0aW9uLnBsYXkobmFtZXNbTWF0aC5tYXgoMCwgdGhpcy50b3dlckxldmVsIC0gMSldKTtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIG9uQW5pbWF0aW9uRmluaXNoZWQoKTogdm9pZCB7XHJcblxyXG4gICAgfVxyXG5cclxuXHJcbn1cclxuXHJcblxyXG4iLCJpbXBvcnQgeyBfZGVjb3JhdG9yLCBpbnN0YW50aWF0ZSwgTm9kZSwgTm9kZVBvb2wsIFByZWZhYiB9IGZyb20gJ2NjJztcclxuaW1wb3J0IHsgQnVsbGV0IH0gZnJvbSBcImRiOi8vYXNzZXRzL1NjcmlwdC9tb2R1bGVzL1Rvd2VyRGVmZW5zZS9CdWxsZXRcIjtcclxuaW1wb3J0IHsgVG93ZXJMYXVuY2hlciB9IGZyb20gXCJkYjovL2Fzc2V0cy9TY3JpcHQvbW9kdWxlcy9Ub3dlckRlZmVuc2UvVG93ZXJMYXVuY2hlclwiO1xyXG5cclxuY29uc3QgeyBjY2NsYXNzLCBwcm9wZXJ0eSB9ID0gX2RlY29yYXRvcjtcclxuXHJcbkBjY2NsYXNzKCdCdWxsZXRNYW5hZ2VyJylcclxuZXhwb3J0IGNsYXNzIEJ1bGxldE1hbmFnZXIge1xyXG4gICAgcHJpdmF0ZSBzdGF0aWMgX2luc3RhbmNlOiBCdWxsZXRNYW5hZ2VyID0gbnVsbDtcclxuICAgIHB1YmxpYyBzdGF0aWMgZ2V0IGluc3RhbmNlKCk6IEJ1bGxldE1hbmFnZXIge1xyXG4gICAgICAgIGlmICghQnVsbGV0TWFuYWdlci5faW5zdGFuY2UpIHtcclxuICAgICAgICAgICAgQnVsbGV0TWFuYWdlci5faW5zdGFuY2UgPSBuZXcgQnVsbGV0TWFuYWdlcigpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gQnVsbGV0TWFuYWdlci5faW5zdGFuY2U7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBfYnVsbGV0UG9vbDogeyBba2V5OiBzdHJpbmddOiBOb2RlUG9vbCB9ID0gbnVsbDtcclxuXHJcbiAgICBwdWJsaWMgYnVsbGV0TGlzdDogQnVsbGV0W10gPSBbXTtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICB0aGlzLl9idWxsZXRQb29sID0ge307XHJcbiAgICAgICAgdGhpcy5idWxsZXRMaXN0ID0gW107XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGNyZWF0ZShwcmVmYWI6IFByZWZhYik6IEJ1bGxldCB7XHJcbiAgICAgICAgaWYgKCFwcmVmYWIpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxldCBub2RlOiBOb2RlID0gbnVsbFxyXG4gICAgICAgIGxldCBwb29sOiBOb2RlUG9vbCA9IHRoaXMuX2J1bGxldFBvb2xbcHJlZmFiLmRhdGEubmFtZV07XHJcbiAgICAgICAgaWYgKCFwb29sKSB7XHJcbiAgICAgICAgICAgIHBvb2wgPSBuZXcgTm9kZVBvb2woKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHBvb2wuc2l6ZSgpID4gMCkge1xyXG4gICAgICAgICAgICBub2RlID0gcG9vbC5nZXQoKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBub2RlID0gaW5zdGFudGlhdGUocHJlZmFiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgYnVsbGV0OiBCdWxsZXQgPSBub2RlLmdldENvbXBvbmVudChCdWxsZXQpO1xyXG4gICAgICAgIC8vIFRvd2VyTGF1bmNoZXIuaW5zdGFuY2UucXVhZFRyZWUuaW5zZXJ0KGJ1bGxldCk7XHJcbiAgICAgICAgdGhpcy5idWxsZXRMaXN0LnB1c2goYnVsbGV0KTtcclxuICAgICAgICByZXR1cm4gYnVsbGV0O1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyByZWxlYXNlKGJ1bGxldDogQnVsbGV0KTogdm9pZCB7XHJcbiAgICAgICAgaWYgKCFidWxsZXQpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBUb3dlckxhdW5jaGVyLmluc3RhbmNlLnF1YWRUcmVlLnJlbW92ZShidWxsZXQpO1xyXG4gICAgICAgIGNvbnN0IGluZGV4OiBudW1iZXIgPSB0aGlzLmJ1bGxldExpc3QuaW5kZXhPZihidWxsZXQpO1xyXG4gICAgICAgIGlmIChpbmRleCA+IC0xKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYnVsbGV0TGlzdC5zcGxpY2UoaW5kZXgsIDEpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBwb29sOiBOb2RlUG9vbCA9IHRoaXMuX2J1bGxldFBvb2xbYnVsbGV0Lm5vZGUubmFtZV07XHJcbiAgICAgICAgaWYgKHBvb2wpIHtcclxuICAgICAgICAgICAgcG9vbC5wdXQoYnVsbGV0Lm5vZGUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgcmVsZWFzZUFsbCgpOiB2b2lkIHtcclxuICAgICAgICBpZiAodGhpcy5idWxsZXRMaXN0Lmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IHRoaXMuYnVsbGV0TGlzdC5sZW5ndGg7IGluZGV4KyspIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGJ1bGxldCA9IHRoaXMuYnVsbGV0TGlzdFtpbmRleF07XHJcbiAgICAgICAgICAgICAgICBidWxsZXQubm9kZS5yZW1vdmVGcm9tUGFyZW50KCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJlbGVhc2UoYnVsbGV0KTtcclxuICAgICAgICAgICAgICAgIHRoaXMuYnVsbGV0TGlzdC5zcGxpY2UoaW5kZXgsIDEpO1xyXG4gICAgICAgICAgICAgICAgaW5kZXgtLTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICB1cGRhdGUoZGVsdGFUaW1lOiBudW1iZXIpIHtcclxuXHJcbiAgICB9XHJcbn1cclxuIiwiXHJcbmltcG9ydCB7IE5vZGUsIENvbXBvbmVudCwgX2RlY29yYXRvciwgTGFiZWwsIFZlYzMsIHNwLCBtYXRoLCB2aWV3LCBWZWMyfSBmcm9tIFwiY2NcIjtcclxuaW1wb3J0IHsgQmVoYXZpb3VyIH0gZnJvbSBcIi4uL0JlaGF2aW91clwiO1xyXG5pbXBvcnQgUm9hZE5vZGUgZnJvbSBcIi4uL21hcC9Sb2FkTm9kZVwiO1xyXG5pbXBvcnQgUGF0aEZpbmRpbmdBZ2VudCBmcm9tIFwiLi4vbWFwL1BhdGhGaW5kaW5nQWdlbnRcIjtcclxuY29uc3QgeyBjY2NsYXNzLCBwcm9wZXJ0eSB9ID0gX2RlY29yYXRvcjtcclxuXHJcbi8qKlxyXG4gKiDop5LoibLnirbmgIFcclxuICovXHJcbmV4cG9ydCBlbnVtIENoYXJhY3RlclN0YXRlXHJcbntcclxuICAgIC8qKlxyXG4gICAgICog5b6F5py6XHJcbiAgICAgKi9cclxuICAgIGlkbGUgPSAwLFxyXG5cclxuICAgIC8qKlxyXG4gICAgICog6KGM6LWwXHJcbiAgICAgKi9cclxuICAgIHdhbGsgPSAxLFxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5Z2Q5LiLXHJcbiAgICAgKi9cclxuICAgIHNpdGRvd24gPSAyLFxyXG5cclxuICAgIHNpdGRvd25fd2FsayA9IDMsXHJcbn1cclxuXHJcbi8qKlxyXG4gKiDlnLrmma/op5LoibLln7rnsbsgXHJcbiAqIEBhdXRob3IgXHJcbiAqIFxyXG4gKi9cclxuXHJcbkBjY2NsYXNzKCdDaGFyYWN0ZXInKVxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDaGFyYWN0ZXIgZXh0ZW5kcyBCZWhhdmlvdXIge1xyXG5cclxuICAgIC8qKlxyXG4gICAgICog5Y2V5L2N5ZCN5a2X5paH5pysXHJcbiAgICAgKi9cclxuICAgIEBwcm9wZXJ0eShMYWJlbClcclxuICAgIHB1YmxpYyBuYW1lVHh0OkxhYmVsID0gbnVsbDtcclxuXHJcbiAgICAvKipcclxuICAgICAqIOeUqOS6juaYvuekuuinkuiJsuWQjeWtl+eahOaOpeWPo1xyXG4gICAgICovXHJcbiAgICBwcml2YXRlIF9vYmpOYW1lOiBzdHJpbmcgPSBcIlwiO1xyXG4gICAgcHVibGljIGdldCBvYmpOYW1lKCk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX29iak5hbWU7XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgc2V0IG9iak5hbWUodmFsdWU6IHN0cmluZykge1xyXG4gICAgICAgIHRoaXMuX29iak5hbWUgPSB2YWx1ZTtcclxuXHJcbiAgICAgICAgaWYodGhpcy5uYW1lVHh0ID09IG51bGwpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB0aGlzLm5hbWVUeHQgPSB0aGlzLm5vZGUuZ2V0Q2hpbGRCeU5hbWUoXCJOYW1lVHh0XCIpPy5nZXRDb21wb25lbnQoTGFiZWwpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYodGhpcy5uYW1lVHh0KVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdGhpcy5uYW1lVHh0LnN0cmluZyA9IHRoaXMuX29iak5hbWU7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgX3NrZWxldG9uOnNwLlNrZWxldG9uID0gbnVsbDtcclxuXHJcbiAgICBwdWJsaWMgZ2V0IHNrZWxldG9uKCk6IHNwLlNrZWxldG9uXHJcbiAgICB7XHJcbiAgICAgICAgaWYgKCF0aGlzLl9za2VsZXRvbilcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHRoaXMuX3NrZWxldG9uID0gdGhpcy5ub2RlLmdldENvbXBvbmVudEluQ2hpbGRyZW4oc3AuU2tlbGV0b24pO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcy5fc2tlbGV0b247XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDorr7nva7ljZXkvY3mlrnlkJFcclxuICAgICAqIFxyXG4gICAgICog5pa55ZCR5YC86IyD5Zu05Li6IDAtN++8jOaWueWQkeWAvOiuvuWumuWmguS4i++8jDDmmK/kuIvvvIwx5piv5bem5LiL77yMMuaYr+W3pu+8jDPmmK/lt6bkuIrvvIw05piv5LiK77yMNeaYr+WPs+S4iu+8jDbmmK/lj7PvvIw35piv5Y+z5LiLXHJcbiAgICAgKiBcclxuICAgICAqICAgICAgICA0XHJcbiAgICAgKiAgICAgIDMgICA1XHJcbiAgICAgKiAgICAyICAgKiAgIDZcclxuICAgICAqICAgICAgMSAgIDdcclxuICAgICAqICAgICAgICAwXHJcbiAgICAgKiBcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBfZGlyZWN0aW9uOm51bWJlciA9IDA7XHJcbiAgICBwdWJsaWMgZ2V0IGRpcmVjdGlvbigpOm51bWJlclxyXG4gICAge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9kaXJlY3Rpb247XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNldCBkaXJlY3Rpb24odmFsdWU6bnVtYmVyKVxyXG4gICAge1xyXG4gICAgICAgIHRoaXMuX2RpcmVjdGlvbiA9IHZhbHVlO1xyXG4gICAgICAgIGlmICh2YWx1ZSA9PSAyKSB7XHJcbiAgICAgICAgICAgIGxldCBzY2FsZTogVmVjMyA9IHRoaXMuc2tlbGV0b24ubm9kZS5zY2FsZS5jbG9uZSgpO1xyXG4gICAgICAgICAgICBsZXQgc2NhbGVYOiBudW1iZXIgPSBzY2FsZS54O1xyXG4gICAgICAgICAgICBzY2FsZS54ID0gLXNjYWxlWDtcclxuICAgICAgICAgICAgdGhpcy5za2VsZXRvbi5ub2RlLnNjYWxlID0gc2NhbGU7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgbGV0IHNjYWxlID0gdGhpcy5za2VsZXRvbi5ub2RlLnNjYWxlLmNsb25lKCk7XHJcbiAgICAgICAgbGV0IHNjYWxlWDogbnVtYmVyID0gc2NhbGUueDtcclxuICAgICAgICBzY2FsZS54ID0gc2NhbGVYO1xyXG4gICAgICAgIHRoaXMuc2tlbGV0b24ubm9kZS5zY2FsZSA9IHNjYWxlO1xyXG5cclxuICAgICAgICAvLyBpZih2YWx1ZSA+IDQpXHJcbiAgICAgICAgLy8ge1xyXG4gICAgICAgIC8vICAgICAvLyB0aGlzLnNrZWxldG9uLnJvd0luZGV4ID0gNCAtIHZhbHVlICUgNDtcclxuICAgICAgICAvLyAgICAgbGV0IHNjYWxlID0gdGhpcy5za2VsZXRvbi5ub2RlLnNjYWxlLmNsb25lKCk7XHJcbiAgICAgICAgLy8gICAgIGxldCBzY2FsZVg6IG51bWJlciA9IHNjYWxlLng7XHJcbiAgICAgICAgLy8gICAgIHNjYWxlLnggPSBzY2FsZVg7XHJcbiAgICAgICAgLy8gICAgIHRoaXMuc2tlbGV0b24ubm9kZS5zY2FsZSA9IHNjYWxlO1xyXG4gICAgICAgIC8vIH1lbHNlXHJcbiAgICAgICAgLy8ge1xyXG4gICAgICAgIC8vICAgICAvLyB0aGlzLm1vdmllQ2xpcC5yb3dJbmRleCA9IHZhbHVlO1xyXG4gICAgICAgIC8vICAgICBsZXQgc2NhbGU6IFZlYzMgPSB0aGlzLnNrZWxldG9uLm5vZGUuc2NhbGUuY2xvbmUoKTtcclxuICAgICAgICAvLyAgICAgbGV0IHNjYWxlWDogbnVtYmVyID0gc2NhbGUueDtcclxuICAgICAgICAvLyAgICAgc2NhbGUueCA9IC1zY2FsZVg7XHJcbiAgICAgICAgLy8gICAgIHRoaXMuc2tlbGV0b24ubm9kZS5zY2FsZSA9IHNjYWxlO1xyXG4gICAgICAgIC8vIH1cclxuICAgIH1cclxuXHJcbiAgICBwcm90ZWN0ZWQgX3N0YXRlOkNoYXJhY3RlclN0YXRlID0gMDtcclxuXHJcbiAgICBwdWJsaWMgZ2V0IHN0YXRlKCk6Q2hhcmFjdGVyU3RhdGVcclxuICAgIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fc3RhdGU7XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgc2V0IHN0YXRlKHZhbHVlOkNoYXJhY3RlclN0YXRlKVxyXG4gICAge1xyXG4gICAgICAgIC8vIHRoaXMuX3N0YXRlID0gdmFsdWU7XHJcblxyXG4gICAgICAgIC8vIHZhciBoYWxmQ29sOm51bWJlciA9IHRoaXMubW92aWVDbGlwLmNvbCAvIDI7XHJcblxyXG4gICAgICAgIC8vIHN3aXRjaCh0aGlzLl9zdGF0ZSlcclxuICAgICAgICAvLyB7XHJcbiAgICAgICAgLy8gICAgIGNhc2UgQ2hhcmFjdGVyU3RhdGUuaWRsZTogXHJcbiAgICAgICAgLy8gICAgICAgICB0aGlzLm1vdmllQ2xpcC5iZWdpbiA9IDA7XHJcbiAgICAgICAgLy8gICAgICAgICB0aGlzLm1vdmllQ2xpcC5lbmQgPSBoYWxmQ29sO1xyXG4gICAgICAgIC8vICAgICBicmVhaztcclxuXHJcbiAgICAgICAgLy8gICAgIGNhc2UgQ2hhcmFjdGVyU3RhdGUud2FsazogXHJcbiAgICAgICAgLy8gICAgICAgICB0aGlzLm1vdmllQ2xpcC5iZWdpbiA9IGhhbGZDb2w7XHJcbiAgICAgICAgLy8gICAgICAgICB0aGlzLm1vdmllQ2xpcC5lbmQgPSB0aGlzLm1vdmllQ2xpcC5jb2w7XHJcbiAgICAgICAgLy8gICAgIGJyZWFrO1xyXG4gICAgICAgIC8vIH1cclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDljZXkvY3lvZPliY3miYDnq5nlnKjnmoTot6/ngrlcclxuICAgICAqL1xyXG4gICAgcHVibGljIGdldCByb2FkTm9kZSgpOlJvYWROb2RlXHJcbiAgICB7XHJcbiAgICAgICAgcmV0dXJuIFBhdGhGaW5kaW5nQWdlbnQuaW5zdGFuY2UuZ2V0Um9hZE5vZGVCeVBpeGVsKHRoaXMubm9kZS5wb3NpdGlvbi54LHRoaXMubm9kZS5wb3NpdGlvbi55KTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAq6KeS6Imy5pyA6L+R5LiA5qyh5omA56uZ5Zyo55qE5Zyw5Zu+6IqC54K5IFxyXG4gICAgICovXHRcdFxyXG4gICAgcHJvdGVjdGVkIF9sYXN0Um9hZE5vZGU6Um9hZE5vZGUgPSBudWxsO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICrnjqnlrrblvZPliY3miYDnq5nlnKjnmoTlnLDlm77oioLngrkgXHJcbiAgICAgKi9cdFx0XHJcbiAgICBwcml2YXRlIF9jdXJyZW50Tm9kZTpSb2FkTm9kZTtcclxuXHJcbiAgICAvL3B1YmxpYyBpc1Njcm9sbFNjZW5lOmJvb2xlYW4gPSBmYWxzZTtcclxuXHJcbiAgICBwdWJsaWMgbW92aW5nOmJvb2xlYW4gPSBmYWxzZTtcclxuXHJcbiAgICBwdWJsaWMgbW92ZVNwZWVkOm51bWJlciA9IDIwMDtcclxuXHJcbiAgICBwcml2YXRlIF9tb3ZlQW5nbGU6bnVtYmVyID0gMDtcclxuXHJcbiAgICBwcml2YXRlIF9yb2FkTm9kZUFycjogUm9hZE5vZGVbXSA9IFtdO1xyXG4gICAgcHJpdmF0ZSBfcm9hZE5vZGVWZWMyOiBWZWMyW10gPSBbXTtcclxuICAgIHByaXZhdGUgX25vZGVJbmRleDogbnVtYmVyID0gMDtcclxuXHJcbiAgICAvLyBMSUZFLUNZQ0xFIENBTExCQUNLUzpcclxuXHJcbiAgICAvLyBvbkxvYWQgKCkge31cclxuXHJcblxyXG5cclxuICAgIHNwZWVkWDogbnVtYmVyID0gMTAwOyAvLyDmsLTlubPpgJ/luqbvvIzljZXkvY3vvJrlg4/ntKAv56eSXHJcbiAgICBzcGVlZFk6IG51bWJlciA9IDEwMDsgLy8g5Z6C55u06YCf5bqm77yM5Y2V5L2N77ya5YOP57SgL+enklxyXG4gICAgcHJpdmF0ZSBkaXJlY3Rpb25YOiBudW1iZXIgPSAxOyAvLyDmsLTlubPmlrnlkJHvvIwx5Li65ZCR5Y+z77yMLTHkuLrlkJHlt6ZcclxuICAgIHByaXZhdGUgZGlyZWN0aW9uWTogbnVtYmVyID0gMTsgLy8g5Z6C55u05pa55ZCR77yMMeS4uuWQkeS4iu+8jC0x5Li65ZCR5LiLXHJcblxyXG4gICAgcHJpdmF0ZSBzY3JlZW5XaWR0aDogbnVtYmVyID0gMDsgLy8g5bGP5bmV5a695bqmXHJcbiAgICBwcml2YXRlIHNjcmVlbkhlaWdodDogbnVtYmVyID0gMDsgLy8g5bGP5bmV6auY5bqmXHJcblxyXG4gICAgb25Mb2FkKCk6IHZvaWQge1xyXG4gICAgICAgIHN1cGVyLm9uTG9hZCgpO1xyXG4gICAgICAgIGNvbnN0IHZpc2libGVTaXplID0gdmlldy5nZXRWaXNpYmxlU2l6ZSgpO1xyXG4gICAgICAgIHRoaXMuc2NyZWVuV2lkdGggPSB2aXNpYmxlU2l6ZS53aWR0aDtcclxuICAgICAgICB0aGlzLnNjcmVlbkhlaWdodCA9IHZpc2libGVTaXplLmhlaWdodDtcclxuICAgIH1cclxuXHJcbiAgICBzdGFydCAoKSB7XHJcblxyXG4gICAgICAgIHRoaXMuc3RhdGUgPSBDaGFyYWN0ZXJTdGF0ZS5pZGxlOyAvL+m7mOiupOW+heacuueKtuaAgVxyXG5cclxuICAgIH1cclxuXHJcbiAgICB1cGRhdGUgKGR0KSBcclxuICAgIHtcclxuICAgICAgICBpZih0aGlzLm1vdmluZylcclxuICAgICAgICB7XHJcblxyXG4gICAgICAgICAgICB2YXIgbmV4dFZlYzogVmVjMiA9IHRoaXMuX3JvYWROb2RlVmVjMlt0aGlzLl9ub2RlSW5kZXhdO1xyXG5cclxuICAgICAgICAgICAgbGV0IHBvcyA9IHRoaXMubm9kZS5wb3NpdGlvbjtcclxuXHJcbiAgICAgICAgICAgIGxldCBwb3NYOiBudW1iZXIgPSBwb3MueDtcclxuICAgICAgICAgICAgbGV0IHBvc1k6IG51bWJlciA9IHBvcy55O1xyXG5cclxuXHJcbiAgICAgICAgICAgIHZhciBkeDogbnVtYmVyID0gbmV4dFZlYy54IC0gcG9zWDtcclxuICAgICAgICAgICAgdmFyIGR5OiBudW1iZXIgPSBuZXh0VmVjLnkgLSBwb3NZO1xyXG5cclxuICAgICAgICAgICAgdmFyIHNwZWVkOm51bWJlciA9IHRoaXMubW92ZVNwZWVkICogZHQ7XHJcblxyXG4gICAgICAgICAgICBpZihkeCAqIGR4ICsgZHkgKiBkeSA+IHNwZWVkICogc3BlZWQpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGlmKHRoaXMuX21vdmVBbmdsZSA9PSAwKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX21vdmVBbmdsZSA9IE1hdGguYXRhbjIoZHksZHgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB2YXIgZGlyZTpudW1iZXIgPSBNYXRoLnJvdW5kKCgtdGhpcy5fbW92ZUFuZ2xlICsgTWF0aC5QSSkvKE1hdGguUEkgLyA0KSk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kaXJlY3Rpb24gPSBkaXJlID4gNSA/IGRpcmUtNiA6IGRpcmUrMjtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgeHNwZWVkOm51bWJlciA9IE1hdGguY29zKHRoaXMuX21vdmVBbmdsZSkgKiBzcGVlZDtcclxuICAgICAgICAgICAgICAgIHZhciB5c3BlZWQ6bnVtYmVyID0gTWF0aC5zaW4odGhpcy5fbW92ZUFuZ2xlKSAqIHNwZWVkO1xyXG5cclxuICAgICAgICAgICAgICAgIHBvc1ggKz0geHNwZWVkO1xyXG4gICAgICAgICAgICAgICAgcG9zWSArPSB5c3BlZWQ7XHJcblxyXG4gICAgICAgICAgICB9ZWxzZVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9tb3ZlQW5nbGUgPSAwO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmKHRoaXMuX25vZGVJbmRleCA9PSB0aGlzLl9yb2FkTm9kZUFyci5sZW5ndGggLSAxKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIHBvc1ggPSBuZXh0VmVjLng7XHJcbiAgICAgICAgICAgICAgICAgICAgcG9zWSA9IG5leHRWZWMueVxyXG5cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnN0b3AoKTtcclxuICAgICAgICAgICAgICAgIH1lbHNlXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy53YWxrKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKFwi56e75Yqo5Z2Q5qCHXCIsIHBvcy54LCBwb3MueSk7XHJcbiAgICAgICAgICAgIHRoaXMubm9kZS5zZXRQb3NpdGlvbihwb3NYLHBvc1kpO1xyXG4gICAgICAgICAgICAvLyB0aGlzLm5vZGUucG9zaXRpb24gPSBwb3M7XHJcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKFwi5b2T5YmN6IqC54K55Z2Q5qCHXCIsIHRoaXMubm9kZS5wb3NpdGlvbi54LCB0aGlzLm5vZGUucG9zaXRpb24ueSk7XHJcbiAgICAgICAgICAgIC8vIHRoaXMubm9kZS5zZXRQb3NpdGlvbihwb3MpO1xyXG4gICAgICAgICAgICAvLyB0aGlzLm5vZGUuc2V0UG9zaXRpb24ocG9zLngsIHBvcy55KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMudXBkYXRlQ2hhcmF0ZXJTdGF0ZUJ5Tm9kZSgpO1xyXG5cclxuICAgIH1cclxuXHJcbiAgICAvLyBwcm90ZWN0ZWQgbGF0ZVVwZGF0ZShkdDogbnVtYmVyKTogdm9pZCB7XHJcbiAgICAvLyAgICAgaWYgKHRoaXMubW92aW5nICYmIHRoaXMubW92ZVBvcykgeyBcclxuICAgIC8vICAgICAgICAgdGhpcy5ub2RlLnBvc2l0aW9uID0gdGhpcy5tb3ZlUG9zO1xyXG4gICAgLy8gICAgIH1cclxuICAgIC8vIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOagueaNruinkuiJsuaJgOWcqOeahOi3r+iKgueCueS/oeaBr+abtOaWsOiHqui6q+eahOS/oeaBr1xyXG4gICAgICogQHJldHVybnMgXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyB1cGRhdGVDaGFyYXRlclN0YXRlQnlOb2RlKCk6dm9pZFxyXG4gICAge1xyXG4gICAgICAgIHZhciByb2FkTm9kZTpSb2FkTm9kZSA9IHRoaXMucm9hZE5vZGU7XHJcbiAgICAgICAgXHJcbiAgICAgICAgaWYocm9hZE5vZGUgPT0gdGhpcy5fbGFzdFJvYWROb2RlKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgLy/lpoLmnpzop5LoibLmiYDnq5nnmoTot6/oioLngrnmsqHmnInlj5HnlJ/lj5jljJbvvIzkuI3lpITnkIZcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICB0aGlzLl9sYXN0Um9hZE5vZGUgPSByb2FkTm9kZVxyXG4gICAgICAgIFxyXG4gICAgICAgIGlmKHRoaXMuX2xhc3RSb2FkTm9kZSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHN3aXRjaCh0aGlzLl9sYXN0Um9hZE5vZGUudmFsdWUpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgMjovL+WmguaenOaYr+mAj+aYjuiKgueCueaXtlxyXG4gICAgICAgICAgICAgICAgICAgIGlmKHRoaXMuYWxwaGEgIT0gMC40KVxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hbHBoYSA9IDAuNDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDM6Ly/lpoLmnpzmmK/pmpDol4/oioLngrnml7ZcclxuICAgICAgICAgICAgICAgICAgICAvL3RoaXMuYWxwaGEgPCAxICYmICh0aGlzLmFscGhhID0gMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hbHBoYSA+IDAgJiYgKHRoaXMuYWxwaGEgPSAwKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hbHBoYSA8IDEgJiYgKHRoaXMuYWxwaGEgPSAxKTtcclxuICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBcclxuICAgICAgICB9XHJcblxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5qC55o2u6Lev6IqC54K56Lev5b6E6KGM6LWwXHJcbiAgICAgKiBAcGFyYW0gcm9hZE5vZGVBcnIgXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyB3YWxrQnlSb2FkKHJvYWROb2RlQXJyOlJvYWROb2RlW10pXHJcbiAgICB7XHJcbiAgICAgICAgdGhpcy5fcm9hZE5vZGVBcnIgPSByb2FkTm9kZUFycjtcclxuICAgICAgICBjb25zdCBub2RlVmVjMkFycmF5OlZlYzJbXSA9IHRoaXMuX3JvYWROb2RlQXJyLm1hcChlID0+IHsgXHJcbiAgICAgICAgICAgIHJldHVybiBtYXRoLnYyKGUucHgsIGUucHkpO1xyXG4gICAgICAgIH0sdGhpcylcclxuICAgICAgICB0aGlzLndvbGtCeVZlYzIobm9kZVZlYzJBcnJheSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHdvbGtCeVZlYzIodmVjMkFycmF5OiBWZWMyW10pOiB2b2lke1xyXG4gICAgICAgIHRoaXMuX3JvYWROb2RlVmVjMiA9IHZlYzJBcnJheTtcclxuICAgICAgICB0aGlzLl9ub2RlSW5kZXggPSAwO1xyXG4gICAgICAgIHRoaXMuX21vdmVBbmdsZSA9IDA7XHJcblxyXG4gICAgICAgIHRoaXMud2FsaygpO1xyXG4gICAgICAgIHRoaXMubW92ZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgd2FsaygpXHJcbiAgICB7XHJcbiAgICAgICAgaWYgKHRoaXMuX25vZGVJbmRleCA8IHRoaXMuX3JvYWROb2RlVmVjMi5sZW5ndGggLSAxKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdGhpcy5fbm9kZUluZGV4ICsrO1xyXG4gICAgICAgIH1lbHNlXHJcbiAgICAgICAge1xyXG5cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIG1vdmUoKVxyXG4gICAge1xyXG4gICAgICAgIHRoaXMubW92aW5nID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLnN0YXRlID0gQ2hhcmFjdGVyU3RhdGUud2FsaztcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc3RvcCgpXHJcbiAgICB7XHJcbiAgICAgICAgdGhpcy5tb3ZpbmcgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLnN0YXRlID0gQ2hhcmFjdGVyU3RhdGUuaWRsZTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOWvvOiIquinkuiJsuWIsOebruagh+eCuVxyXG4gICAgICogQHBhcmFtIHRhcmdldFggXHJcbiAgICAgKiBAcGFyYW0gdGFyZ2V0WSBcclxuICAgICAqL1xyXG4gICAgcHVibGljIG5hdlRvKHRhcmdldFg6bnVtYmVyLHRhcmdldFk6bnVtYmVyKVxyXG4gICAge1xyXG4gICAgICAgIC8vIHRoaXMubm9kZS5zZXRQb3NpdGlvbih0YXJnZXRYLCB0YXJnZXRZKTtcclxuICAgICAgICB2YXIgcm9hZE5vZGVBcnI6IFJvYWROb2RlW10gPSBQYXRoRmluZGluZ0FnZW50Lmluc3RhbmNlLnNlZWtQYXRoKG1hdGgudjIodGhpcy5ub2RlLnBvc2l0aW9uLngsIHRoaXMubm9kZS5wb3NpdGlvbi55KSwgbWF0aC52Mih0YXJnZXRYLCB0YXJnZXRZKSk7IC8v5aaC5p6c55uu5qCH54K55piv6Zqc56KN77yM5YiZ5a+76Lev5aSx6LSlICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8v5oyJ6ZyA5rGC6Ieq6YCJXHJcbiAgICAgICAvLyB2YXIgcm9hZE5vZGVBcnI6Um9hZE5vZGVbXSA9IFBhdGhGaW5kaW5nQWdlbnQuaW5zdGFuY2Uuc2Vla1BhdGgyKHRoaXMubm9kZS5wb3NpdGlvbi54LHRoaXMubm9kZS5wb3NpdGlvbi55LHRhcmdldFgsdGFyZ2V0WSk7ICAvL+WmguaenOebruagh+eCueaYr+manOeije+8jOWImeWvu+i3r+WIsOmHjOebruagh+eCueacgOi/keeahOS4gOS4qumdnumanOeijeeCuSAgICAgICAgIC8v5oyJ6ZyA5rGC6Ieq6YCJXHJcblxyXG4gICAgICAgIGlmKHJvYWROb2RlQXJyLmxlbmd0aCA+IDApXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhyb2FkTm9kZUFycik7XHJcbiAgICAgICAgICAgIHRoaXMud2Fsa0J5Um9hZChyb2FkTm9kZUFycik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IFZlYzIgfSBmcm9tIFwiY2NcIjtcclxuXHJcbi8qKiDmuLjmiI/phY3nva4gKi9cclxuZXhwb3J0IGNvbnN0IGNvbmZpZyA9IHtcclxuICAgIHNjZW5lV2lkdGg6IDc0MCxcclxuICAgIHNjZW5lSGVpZ2h0OiAxMjAwLFxyXG4gICAgLyoqIOaWueagvOWuvSAqL1xyXG4gICAgYmxvY2tXaWR0aDogOTAsXHJcbiAgICAvKiog5pa55qC86auYICovXHJcbiAgICBibG9ja0hlaWdodDogOTAsXHJcbiAgICAvKiog5bCP5Yqo54mp5a69ICovXHJcbiAgICBpdGVtV2lkdGg6IDc4LFxyXG4gICAgLyoqIOWwj+WKqOeJqemrmCAqL1xyXG4gICAgaXRlbUhlaWdodDogNjcsXHJcbiAgICAvKiog6KGM5pWwICovXHJcbiAgICByb3c6IDIwLFxyXG4gICAgLyoqIOWIl+aVsCAqL1xyXG4gICAgY29sOiAxMCxcclxuICAgIC8qKiDmr4/mrKHmlrDnlJ/miJDlvaLnirbml7bnmoTkuK3lv4PkvY3nva4gKi9cclxuICAgIHN0YXJ0UG9zOiBuZXcgVmVjMigxLCAzKSxcclxuICAgIC8vIOW9oueKtuaVsOaNrizku6XvvIgx77yMMe+8ieS4uuS4reW/g+WPguiAg1xyXG4gICAgLyoqIOmVv+adoeW9oiAqL1xyXG4gICAgc2hhcGUxOiBbXHJcbiAgICAgICAgW25ldyBWZWMyKDAsIC0xKSwgbmV3IFZlYzIoMCwgMCksIG5ldyBWZWMyKDAsIDEpLCBuZXcgVmVjMigwLCAyKV0sXHJcbiAgICAgICAgW25ldyBWZWMyKC0xLCAwKSwgbmV3IFZlYzIoMCwgMCksIG5ldyBWZWMyKDEsIDApLCBuZXcgVmVjMigyLCAwKV0sXHJcbiAgICAgICAgW25ldyBWZWMyKDAsIC0xKSwgbmV3IFZlYzIoMCwgMCksIG5ldyBWZWMyKDAsIDEpLCBuZXcgVmVjMigwLCAyKV0sXHJcbiAgICAgICAgW25ldyBWZWMyKC0xLCAwKSwgbmV3IFZlYzIoMCwgMCksIG5ldyBWZWMyKDEsIDApLCBuZXcgVmVjMigyLCAwKV1cclxuICAgIF0sXHJcbiAgICAvKiog5pa55b2iICovXHJcbiAgICBzaGFwZTI6IFtcclxuICAgICAgICBbbmV3IFZlYzIoLTEsIC0xKSwgbmV3IFZlYzIoLTEsIDApLCBuZXcgVmVjMigwLCAtMSksIG5ldyBWZWMyKDAsIDApXSxcclxuICAgICAgICBbbmV3IFZlYzIoLTEsIC0xKSwgbmV3IFZlYzIoLTEsIDApLCBuZXcgVmVjMigwLCAtMSksIG5ldyBWZWMyKDAsIDApXSxcclxuICAgICAgICBbbmV3IFZlYzIoLTEsIC0xKSwgbmV3IFZlYzIoLTEsIDApLCBuZXcgVmVjMigwLCAtMSksIG5ldyBWZWMyKDAsIDApXSxcclxuICAgICAgICBbbmV3IFZlYzIoLTEsIC0xKSwgbmV3IFZlYzIoLTEsIDApLCBuZXcgVmVjMigwLCAtMSksIG5ldyBWZWMyKDAsIDApXVxyXG4gICAgXSxcclxuICAgIC8qKiBU5b2iICovXHJcbiAgICBzaGFwZTM6IFtcclxuICAgICAgICBbbmV3IFZlYzIoMCwgLTEpLCBuZXcgVmVjMigtMSwgMCksIG5ldyBWZWMyKDAsIDApLCBuZXcgVmVjMigwLCAxKV0sXHJcbiAgICAgICAgW25ldyBWZWMyKDEsIDApLCBuZXcgVmVjMigtMSwgMCksIG5ldyBWZWMyKDAsIDApLCBuZXcgVmVjMigwLCAxKV0sXHJcbiAgICAgICAgW25ldyBWZWMyKDAsIC0xKSwgbmV3IFZlYzIoMSwgMCksIG5ldyBWZWMyKDAsIDApLCBuZXcgVmVjMigwLCAxKV0sXHJcbiAgICAgICAgW25ldyBWZWMyKDAsIC0xKSwgbmV3IFZlYzIoLTEsIDApLCBuZXcgVmVjMigwLCAwKSwgbmV3IFZlYzIoMSwgMCldXHJcbiAgICBdLFxyXG4gICAgLyoqIEzlvaIgKi9cclxuICAgIHNoYXBlNDogW1xyXG4gICAgICAgIFtuZXcgVmVjMigtMSwgMCksIG5ldyBWZWMyKDAsIDApLCBuZXcgVmVjMigxLCAwKSwgbmV3IFZlYzIoMSwgMSldLFxyXG4gICAgICAgIFtuZXcgVmVjMigxLCAtMSksIG5ldyBWZWMyKDAsIC0xKSwgbmV3IFZlYzIoMCwgMCksIG5ldyBWZWMyKDAsIDEpXSxcclxuICAgICAgICBbbmV3IFZlYzIoLTEsIC0xKSwgbmV3IFZlYzIoLTEsIDApLCBuZXcgVmVjMigwLCAwKSwgbmV3IFZlYzIoMSwgMCldLFxyXG4gICAgICAgIFtuZXcgVmVjMigtMSwgMSksIG5ldyBWZWMyKDAsIC0xKSwgbmV3IFZlYzIoMCwgMCksIG5ldyBWZWMyKDAsIDEpXVxyXG4gICAgXSxcclxuICAgIC8qKiDnv7vovaxMICovXHJcbiAgICBzaGFwZTU6IFtcclxuICAgICAgICBbbmV3IFZlYzIoLTEsIDApLCBuZXcgVmVjMigwLCAwKSwgbmV3IFZlYzIoMSwgMCksIG5ldyBWZWMyKDEsIC0xKV0sXHJcbiAgICAgICAgW25ldyBWZWMyKC0xLCAtMSksIG5ldyBWZWMyKDAsIC0xKSwgbmV3IFZlYzIoMCwgMCksIG5ldyBWZWMyKDAsIDEpXSxcclxuICAgICAgICBbbmV3IFZlYzIoLTEsIDApLCBuZXcgVmVjMigtMSwgMSksIG5ldyBWZWMyKDAsIDApLCBuZXcgVmVjMigxLCAwKV0sXHJcbiAgICAgICAgW25ldyBWZWMyKDAsIC0xKSwgbmV3IFZlYzIoMCwgMCksIG5ldyBWZWMyKDAsIDEpLCBuZXcgVmVjMigxLCAxKV1cclxuICAgIF0sXHJcbiAgICAvKiogU+W9oiAqL1xyXG4gICAgc2hhcGU2OiBbXHJcbiAgICAgICAgW25ldyBWZWMyKC0xLCAwKSwgbmV3IFZlYzIoLTEsIDEpLCBuZXcgVmVjMigwLCAtMSksIG5ldyBWZWMyKDAsIDApXSxcclxuICAgICAgICBbbmV3IFZlYzIoLTEsIC0xKSwgbmV3IFZlYzIoMCwgLTEpLCBuZXcgVmVjMigwLCAwKSwgbmV3IFZlYzIoMSwgMCldLFxyXG4gICAgICAgIFtuZXcgVmVjMigtMSwgMCksIG5ldyBWZWMyKC0xLCAxKSwgbmV3IFZlYzIoMCwgLTEpLCBuZXcgVmVjMigwLCAwKV0sXHJcbiAgICAgICAgW25ldyBWZWMyKC0xLCAtMSksIG5ldyBWZWMyKDAsIC0xKSwgbmV3IFZlYzIoMCwgMCksIG5ldyBWZWMyKDEsIDApXVxyXG4gICAgXSxcclxuICAgIC8qKiDnv7vovaxTICovXHJcbiAgICBzaGFwZTc6IFtcclxuICAgICAgICBbbmV3IFZlYzIoLTEsIC0xKSwgbmV3IFZlYzIoLTEsIDApLCBuZXcgVmVjMigwLCAwKSwgbmV3IFZlYzIoMCwgMSldLFxyXG4gICAgICAgIFtuZXcgVmVjMigxLCAtMSksIG5ldyBWZWMyKC0xLCAwKSwgbmV3IFZlYzIoMCwgMCksIG5ldyBWZWMyKDAsIC0xKV0sXHJcbiAgICAgICAgW25ldyBWZWMyKC0xLCAtMSksIG5ldyBWZWMyKC0xLCAwKSwgbmV3IFZlYzIoMCwgMCksIG5ldyBWZWMyKDAsIDEpXSxcclxuICAgICAgICBbbmV3IFZlYzIoMSwgLTEpLCBuZXcgVmVjMigtMSwgMCksIG5ldyBWZWMyKDAsIDApLCBuZXcgVmVjMigwLCAtMSldXHJcbiAgICBdXHJcbn1cclxuIiwiaW1wb3J0IHsgQ29tcG9uZW50LCBOb2RlIH0gZnJvbSBcImNjXCI7XHJcbmltcG9ydCB7IEhhc2hNYXAgfSBmcm9tIFwiLi4vLi4vQ29tbW9uL21hcHMvSGFzaE1hcFwiO1xyXG5pbXBvcnQgeyBOb2RlRmFjdG9yeSB9IGZyb20gXCIuLi8uLi9Db21tb24vTm9kZUZhY3RvcnlcIjtcclxuaW1wb3J0IHsgR2FtZU9iamVjdCB9IGZyb20gXCIuLi9SUEcvR2FtZU9iamVjdFwiO1xyXG5pbXBvcnQgeyBHYW1lQ29uc3QgfSBmcm9tIFwiLi9HYW1lQ29uc3RcIjtcclxuaW1wb3J0IEVudGl0eUxheWVyIGZyb20gXCIuLi9SUEcvbGF5ZXIvRW50aXR5TGF5ZXJcIjtcclxuXHJcbi8qKlxyXG4gKiBAZmlsZU5hbWUgQ29udGFpbmVycy50c1xyXG4gKiBAYXV0aG9yIHpoYW5ncWlvbmdcclxuICogQGRhdGUgMjAyNC8xMi8xOCAxNjoyMTo0MFwiXHJcbiAqIEBkZXNjcmlwdGlvblxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIENvbnRhaW5lcnMgZXh0ZW5kcyBHYW1lT2JqZWN0IHtcclxuICAgIHByb3RlY3RlZCBjb250YWluZXJNYXA6IEhhc2hNYXA8c3RyaW5nLCBOb2RlPjtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlcigpO1xyXG4gICAgICAgIHRoaXMuY29udGFpbmVyTWFwID0gbmV3IEhhc2hNYXA8c3RyaW5nLCBOb2RlPigpO1xyXG4gICAgfVxyXG5cclxuICAgIHByb3RlY3RlZCBvbkxvYWQoKTogdm9pZCB7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXRDaGlsZENvbnRhaW5lcihuYW1lczogc3RyaW5nKTogTm9kZSB7XHJcbiAgICAgICAgaWYgKHRoaXMuY29udGFpbmVyTWFwLmhhc0tleShuYW1lcykpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29udGFpbmVyTWFwLmdldChuYW1lcyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IGNvbnRhaW5lcjogTm9kZSA9IE5vZGVGYWN0b3J5Lmluc3RhbmNlLmNyZWF0ZU5vZGUoKTtcclxuICAgICAgICB0aGlzLmFkZENoaWxkKGNvbnRhaW5lcik7XHJcbiAgICAgICAgdGhpcy5jb250YWluZXJNYXAucHV0KG5hbWVzLCBjb250YWluZXIpO1xyXG4gICAgICAgIHJldHVybiBjb250YWluZXI7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNldENvbnRhaW5lcnMobmFtZXM6IHN0cmluZ1tdKTogdm9pZCB7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBuYW1lcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBjb25zdCBjb250YWluZXI6IE5vZGUgPSBOb2RlRmFjdG9yeS5pbnN0YW5jZS5jcmVhdGVOb2RlKCk7XHJcbiAgICAgICAgICAgIGNvbnRhaW5lci5uYW1lID0gbmFtZXNbaV07XHJcbiAgICAgICAgICAgIHRoaXMuYWRkQ2hpbGQoY29udGFpbmVyKTtcclxuICAgICAgICAgICAgaWYgKG5hbWVzW2ldID09IEdhbWVDb25zdC5ST0xFX0xBWUVSKSB7XHJcbiAgICAgICAgICAgICAgICBjb250YWluZXIuYWRkQ29tcG9uZW50KEVudGl0eUxheWVyKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLmNvbnRhaW5lck1hcC5wdXQobmFtZXNbaV0sIGNvbnRhaW5lcik7XHJcblxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgYWRkQ29udGFpbmVyKG5hbWU6IHN0cmluZywgY29udGFpbmVyOiBOb2RlID0gbnVsbCwgZGVwdGg6IG51bWJlciA9IC0xKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKHRoaXMuY29udGFpbmVyTWFwLmdldChuYW1lKSA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIGlmICghY29udGFpbmVyKSB7XHJcbiAgICAgICAgICAgICAgICBjb250YWluZXIgPSBOb2RlRmFjdG9yeS5pbnN0YW5jZS5jcmVhdGVOb2RlKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGRlcHRoID09IC0xKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmFkZENoaWxkKGNvbnRhaW5lcik7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBjb250YWluZXIuc2V0U2libGluZ0luZGV4KGRlcHRoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuYWRkQ2hpbGQoY29udGFpbmVyKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLmNvbnRhaW5lck1hcC5wdXQobmFtZSwgY29udGFpbmVyKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHJlbW92ZUNvbnRhaW5lcihuYW1lOiBzdHJpbmcpOiBOb2RlIHtcclxuICAgICAgICBsZXQgY29udGFpbmVyOiBOb2RlID0gdGhpcy5jb250YWluZXJNYXAuZ2V0KG5hbWUpO1xyXG4gICAgICAgIGlmIChjb250YWluZXIpIHtcclxuICAgICAgICAgICAgdGhpcy5jb250YWluZXJNYXAucmVtb3ZlKG5hbWUpO1xyXG4gICAgICAgICAgICB0aGlzLnJlbW92ZUNoaWxkKGNvbnRhaW5lcik7XHJcbiAgICAgICAgICAgIHJldHVybiBjb250YWluZXI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyByZW1vdmUoKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKHRoaXMucGFyZW50KVxyXG4gICAgICAgICAgICB0aGlzLnBhcmVudC5yZW1vdmVDaGlsZCh0aGlzKTtcclxuICAgIH1cclxufSIsImltcG9ydCB7IE5vZGUgfSBmcm9tIFwiY2NcIjtcclxuXHJcbi8qKlxyXG4gKiBAZmlsZU5hbWUgRGVwdGhIZWxwZXIudHNcclxuICogQGF1dGhvciB6aGFuZ3Fpb25nXHJcbiAqIEBkYXRlIDIwMjQvMTIvMjMgMTY6NDU6NTRcIlxyXG4gKiBAZGVzY3JpcHRpb25cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgSURlcHRoSGVscGVyIHtcclxuICAgIGxheWVyTmFtZTogc3RyaW5nO1xyXG4gICAgc2V0VGFyZ2V0KHRhcmdldDogTm9kZSk6IHZvaWQ7XHJcbiAgICBzdGFydChkZWxheTogbnVtYmVyKTogdm9pZDtcclxuICAgIHN0b3AoKTogdm9pZDtcclxuICAgIHVwZGF0ZSgpOiB2b2lkO1xyXG4gICAgYWRkQ2hpbGQoY2hpbGQ6IE5vZGUpOiB2b2lkO1xyXG4gICAgcmVtb3ZlQ2hpbGQoY2hpbGQ6IE5vZGUpOiB2b2lkO1xyXG4gICAgZGVzdG9yeSgpOiB2b2lkO1xyXG59IiwiLyoqXHJcbiAqIEBmaWxlTmFtZSBEZXN0cm95VXRpbHMudHNcclxuICogQGF1dGhvciB6aGFuZ3Fpb25nXHJcbiAqIEBkYXRlIDIwMjQvMTIvMjcgMjA6MTk6MTRcIlxyXG4gKiBAZGVzY3JpcHRpb25cclxuICovXHJcbmV4cG9ydCBjbGFzcyBEZXN0cm95VXRpbHMge1xyXG4gICAgc3RhdGljIGtleU5hbWVzOiBzdHJpbmdbXSA9IFtcImRlc3Ryb3lcIiwgXCJkaXNwb3NlXCJdO1xyXG4gICAgc3RhdGljIGRlc3Ryb3kob2JqOiBhbnkpOiB2b2lkIHtcclxuICAgICAgICBpZiAob2JqIGluc3RhbmNlb2YgQXJyYXkpIHtcclxuICAgICAgICAgICAgZm9yICh2YXIgaTogbnVtYmVyID0gMDsgaSA8IG9iai5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kZXN0cm95KG9ialtpXSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmb3IgKHZhciBpOiBudW1iZXIgPSAwOyBpIDwgdGhpcy5rZXlOYW1lcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBpZiAob2JqW3RoaXMua2V5TmFtZXNbaV1dKSB7XHJcbiAgICAgICAgICAgICAgICBvYmpbdGhpcy5rZXlOYW1lc1tpXV0oKTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufSIsIi8qKlxyXG4gKiDlnLDlm77nvJbovpHniankvZPlr7nosaHnmoTmlbDmja7nu5PmnoQg77yI5Z+657G777yJXHJcbiAqL1xyXG4gZXhwb3J0IGRlZmF1bHQgY2xhc3MgRWRpdE9iakRhdGEgIHtcclxuXHJcbiAgICAvKipcclxuICAgICAqIOeJqeS9k0lkXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBvYmpJZDpzdHJpbmcgPSBcIlwiO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICog54mp5L2T5ZCN56ewXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBvYmpOYW1lOnN0cmluZyA9IFwiXCI7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDniankvZPnsbvlnotcclxuICAgICAqL1xyXG4gICAgcHVibGljIG9ialR5cGU6c3RyaW5nID0gXCJcIjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIOeJqeS9k+earuiCpFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgc2tpbjpzdHJpbmcgPSBcIlwiO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogeOWdkOagh1xyXG4gICAgICovXHJcbiAgICBwdWJsaWMgeDpudW1iZXIgPSAwO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogeeWdkOagh1xyXG4gICAgICovXHJcbiAgICBwdWJsaWMgeTpudW1iZXIgPSAwO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICog5LiW55WM5Z2Q5qCHeOi9tFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgY3g6bnVtYmVyID0gMDtcclxuXHJcbiAgICAvKipcclxuICAgICAqIOS4lueVjOWdkOagh3novbRcclxuICAgICAqL1xyXG4gICAgcHVibGljIGN5Om51bWJlciA9IDA7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDoh6rlrprkuYnlj4LmlbBcclxuICAgICAqL1xyXG4gICAgcHVibGljIHBhcmFtczpzdHJpbmcgPSBcIlwiO1xyXG4gICAgXHJcbn1cclxuXHJcbi8qKlxyXG4gKiDnvJbovpFucGPnmoTmlbDmja5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBFZGl0TnBjRGF0YSBleHRlbmRzIEVkaXRPYmpEYXRhXHJcbntcclxuICAgIC8qKlxyXG4gICAgICog6KeS6Imy5pa55ZCRLOWAvOS4uiAwLTdcclxuICAgICAqL1xyXG4gICAgcHVibGljIGRpcmVjdGlvbjpudW1iZXIgPSAwO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICog5piv5ZCm5beh6YC7XHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBpc1BhdHJvbDpib29sZWFuID0gZmFsc2U7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDlr7nor51pZFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZGlhbG9ndWVJZDpudW1iZXIgPSAwO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICog5Lu75YqhaWRcclxuICAgICAqL1xyXG4gICAgcHVibGljIHRhc2tJZDpudW1iZXIgPSAwO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICog5Yqf6IO9aWRcclxuICAgICAqL1xyXG4gICAgcHVibGljIGZ1bmNJZDpudW1iZXIgPSAwO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogbnBj57G75Z6LXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBucGNUeXBlOm51bWJlciA9IDA7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiDnvJbovpHmgKrniannmoTmlbDmja5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBFZGl0TW9uc3RlckRhdGEgZXh0ZW5kcyBFZGl0T2JqRGF0YVxyXG57XHJcbiAgICAvKipcclxuICAgICAqIOinkuiJsuaWueWQkSzlgLzkuLogMC03XHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBkaXJlY3Rpb246bnVtYmVyID0gMDtcclxuXHJcbiAgICAvKipcclxuICAgICAqIOaYr+WQpuW3oemAu1xyXG4gICAgICovXHJcbiAgICBwdWJsaWMgaXNQYXRyb2w6Ym9vbGVhbiA9IGZhbHNlO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICog5a+56K+daWRcclxuICAgICAqL1xyXG4gICAgcHVibGljIGRpYWxvZ3VlSWQ6bnVtYmVyID0gMDtcclxuXHJcbiAgICAvKipcclxuICAgICAqIOaImOaWl2lkXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBmaWdodElkOm51bWJlciA9IDA7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDmgKrniannsbvlnotcclxuICAgICAqL1xyXG4gICAgcHVibGljIG1vbnN0ZXJUeXBlOm51bWJlciA9IDA7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiDnvJbovpHkvKDpgIHpl6jnmoTmlbDmja5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBFZGl0VHJhbnNmZXJEYXRhIGV4dGVuZHMgRWRpdE9iakRhdGFcclxue1xyXG4gICAgLyoqXHJcbiAgICAgKiDkvKDpgIHliLDnm67moIflnLDlm75JZFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgdGFyZ2V0TWFwSWQ6c3RyaW5nID0gXCJcIjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIOebruagh+WcsOWbvueahOWHuueUn+eCuUlkXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyB0YXJnZXRNYXBTcGF3bklkOm51bWJlciA9IDA7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDkvKDpgIHpl6jnsbvlnotcclxuICAgICAqL1xyXG4gICAgcHVibGljIHRyYW5zZmVyVHlwZTpudW1iZXIgPSAwO1xyXG59XHJcblxyXG4vKipcclxuICog57yW6L6R5Ye655Sf54K555qE5L2N572uXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgRWRpdFNwYXduUG9pbnREYXRhIGV4dGVuZHMgRWRpdE9iakRhdGFcclxue1xyXG4gICAgLyoqXHJcbiAgICAgKiDlh7rnlJ/ngrlJZFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgc3Bhd25JZDpudW1iZXIgPSAwO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICog5piv5ZCm5piv6buY6K6k5Ye655Sf54K5XHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBkZWZhdWx0U3Bhd246Ym9vbGVhbiA9IGZhbHNlO1xyXG59XHJcbiIsImltcG9ydCB7X2RlY29yYXRvciwgQ0NCb29sZWFuLCBDb21wb25lbnQsIE5vZGUsIFNwcml0ZUZyYW1lfSBmcm9tICdjYyc7XHJcbmNvbnN0IHsgY2NjbGFzcywgcHJvcGVydHkgfSA9IF9kZWNvcmF0b3I7XHJcblxyXG5AY2NjbGFzcygnRWRpdFBsb3QnKVxyXG5leHBvcnQgY2xhc3MgRWRpdFBsb3QgZXh0ZW5kcyBDb21wb25lbnQge1xyXG4gICAgQHByb3BlcnR5KENDQm9vbGVhbilcclxuICAgIHB1YmxpYyBjYW5CdWlsZDpib29sZWFuID0gdHJ1ZTtcclxuXHJcbiAgICBAcHJvcGVydHkoU3ByaXRlRnJhbWUpXHJcbiAgICBwdWJsaWMgZGVmYXVsdE9iajpTcHJpdGVGcmFtZSA9IG51bGw7XHJcbiAgICBzdGFydCgpIHtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgdXBkYXRlKGRlbHRhVGltZTogbnVtYmVyKSB7XHJcbiAgICAgICAgXHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHtBbmltYXRpb24sIEFuaW1hdGlvbkNsaXAsIE5vZGUsIE5vZGVQb29sLCBWZWMzfSBmcm9tIFwiY2NcIjtcclxuaW1wb3J0IFZpZXdDb25zdCBmcm9tIFwiZGI6Ly9hc3NldHMvU2NyaXB0L3VpL1ZpZXdDb25zdFwiO1xyXG5pbXBvcnQgQXNzZXRNZ3IgZnJvbSBcImRiOi8vYXNzZXRzL1NjcmlwdC9Db21tb24vQXNzZXRNZ3JcIjtcclxuaW1wb3J0ICogYXMgY2MgZnJvbSBcImNjXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgRWZmZWN0TWFuYWdlciAge1xyXG4gICAgcHJpdmF0ZSBzdGF0aWMgX2luc3RhbmNlOiBFZmZlY3RNYW5hZ2VyO1xyXG4gICAgcHVibGljIHN0YXRpYyBnZXQgaW5zdGFuY2UoKTogRWZmZWN0TWFuYWdlciB7XHJcbiAgICAgICAgaWYoIXRoaXMuX2luc3RhbmNlKXtcclxuICAgICAgICAgICAgdGhpcy5faW5zdGFuY2UgPSBuZXcgRWZmZWN0TWFuYWdlcigpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcy5faW5zdGFuY2U7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgdGhpcy5fbm9kZVBvb2wgPSBuZXcgTm9kZVBvb2woKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIF9ub2RlUG9vbDogTm9kZVBvb2w7XHJcbiAgICBwcml2YXRlIF9lZmZlY3RMYXllcjpOb2RlO1xyXG5cclxuICAgIHB1YmxpYyBpbml0RWZmZWN0TGF5ZXIobGF5ZXI6Tm9kZSk6dm9pZHtcclxuICAgICAgICB0aGlzLl9lZmZlY3RMYXllciA9IGxheWVyO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgYXN5bmMgZ2V0Tm9kZSgpOlByb21pc2U8Tm9kZT4ge1xyXG4gICAgICAgIGlmKHRoaXMuX25vZGVQb29sICYmIHRoaXMuX25vZGVQb29sLnNpemUoKSA+IDApe1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fbm9kZVBvb2wuZ2V0KCk7XHJcbiAgICAgICAgfWVsc2Uge1xyXG4gICAgICAgICAgICBsZXQgcHJlZmFiUGF0aCA9IFZpZXdDb25zdC5kZWZhdWx0UHJlZmFiUGF0aFByZWZpeCArIFwidG93ZXIvZWZmZWN0XCI7XHJcbiAgICAgICAgICAgIGxldCBub2RlID0gYXdhaXQgQXNzZXRNZ3IuaW5zdGFuY2UuY3JlYXRlUHJlZmFiKHByZWZhYlBhdGgpO1xyXG4gICAgICAgICAgICByZXR1cm4gbm9kZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNob3dFZmZlY3QgKG5hbWU6c3RyaW5nLHBvc2l0aW9uOlZlYzMpOlByb21pc2U8dm9pZD4ge1xyXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShhc3luYyAocmVzb2x2ZSxyZWplY3QpID0+IHtcclxuICAgICAgICAgICAgbGV0IG5vZGUgPSBhd2FpdCB0aGlzLmdldE5vZGUoKTtcclxuICAgICAgICAgICAgaWYgKCFub2RlKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGAgKioqKiogdG93ZXIvZWZmZWN0IGlzIG5vdCBleGlzdCAqKioqKiBgKTtcclxuICAgICAgICAgICAgICAgIHJlc29sdmUobnVsbCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgbm9kZS5zZXRQb3NpdGlvbihwb3NpdGlvbik7XHJcbiAgICAgICAgICAgIGlmKHRoaXMuX2VmZmVjdExheWVyKXtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2VmZmVjdExheWVyLmFkZENoaWxkKG5vZGUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IGFuaW1hdGlvbjpBbmltYXRpb24gPSBub2RlLmdldENvbXBvbmVudChBbmltYXRpb24pO1xyXG4gICAgICAgICAgICBpZighYW5pbWF0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICByZWplY3QoYCoqKioqIGFuaW1hdGlvbiBpcyBub3QgZXhpc3QgKioqKiogYCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY29uc3QgY2xpcHMgPSBhbmltYXRpb24uY2xpcHM7XHJcbiAgICAgICAgICAgIGNvbnN0IGVmZmVjdE5hbWVzOiBzdHJpbmdbXSA9IGNsaXBzLm1hcChjbGlwID0+IGNsaXAubmFtZSk7XHJcbiAgICAgICAgICAgIGlmKCFlZmZlY3ROYW1lcy5sZW5ndGggfHwgZWZmZWN0TmFtZXMuaW5kZXhPZihuYW1lKSA9PT0gLTEpIHtcclxuICAgICAgICAgICAgICAgIHJlamVjdChgKioqKiogZWZmZWN0IG5hbWUgaXMgbm90IGV4aXN0ICoqKioqIGApO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IHBsYXlDbGlwOkFuaW1hdGlvbkNsaXAgPSBjbGlwcy5maW5kKChjbGlwKSA9PiBjbGlwLm5hbWUgPT09IG5hbWUpO1xyXG4gICAgICAgICAgICBpZighcGxheUNsaXApIHtcclxuICAgICAgICAgICAgICAgIHJlamVjdChgKioqKiogcGxheUNsaXAgaXMgbm90IGV4aXN0ICoqKioqIGApO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmKHBsYXlDbGlwLndyYXBNb2RlID09MSl7XHJcbiAgICAgICAgICAgICAgICBhbmltYXRpb24ub24oQW5pbWF0aW9uLkV2ZW50VHlwZS5GSU5JU0hFRCwoKT0+e1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX25vZGVQb29sLnB1dChub2RlKTtcclxuICAgICAgICAgICAgICAgICAgICBub2RlLnJlbW92ZUZyb21QYXJlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKClcclxuICAgICAgICAgICAgICAgIH0sdGhpcylcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBhbmltYXRpb24ucGxheShuYW1lKTtcclxuICAgICAgICAgICAgaWYocGxheUNsaXAud3JhcE1vZGUgPT0gMil7XHJcbiAgICAgICAgICAgICAgICByZXNvbHZlKClcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pXHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgX2RlY29yYXRvciwgQ29sbGlkZXIyRCwgRXZlbnRUb3VjaCwgSVBoeXNpY3MyRENvbnRhY3QsIE5vZGUsIFByb2dyZXNzQmFyLCBWZWMyIH0gZnJvbSAnY2MnO1xyXG5pbXBvcnQgeyBCZWhhdmlvdXIgfSBmcm9tICcuLi9SUEcvQmVoYXZpb3VyJztcclxuaW1wb3J0IENoYXJhY3RlciBmcm9tIFwiZGI6Ly9hc3NldHMvU2NyaXB0L21vZHVsZXMvUlBHL2NoYXJhY3Rlci9DaGFyYWN0ZXJcIjtcclxuaW1wb3J0IHsgQm9zcyB9IGZyb20gXCJkYjovL2Fzc2V0cy9TY3JpcHQvbW9kdWxlcy9Ub3dlckRlZmVuc2UvQm9zc1wiO1xyXG5pbXBvcnQgeyBUb3dlckxhdW5jaGVyIH0gZnJvbSBcImRiOi8vYXNzZXRzL1NjcmlwdC9tb2R1bGVzL1Rvd2VyRGVmZW5zZS9Ub3dlckxhdW5jaGVyXCI7XHJcbmltcG9ydCB7IEVmZmVjdE1hbmFnZXIgfSBmcm9tIFwiZGI6Ly9hc3NldHMvU2NyaXB0L21vZHVsZXMvVG93ZXJEZWZlbnNlL0VmZmVjdE1hbmFnZXJcIjtcclxuaW1wb3J0IHtUb3dlclNjZW5lTWFwfSBmcm9tIFwiZGI6Ly9hc3NldHMvU2NyaXB0L21vZHVsZXMvVG93ZXJEZWZlbnNlL1Rvd2VyU2NlbmVNYXBcIjtcclxuY29uc3QgeyBjY2NsYXNzLCBwcm9wZXJ0eSB9ID0gX2RlY29yYXRvcjtcclxuXHJcbkBjY2NsYXNzKCdFbmVteScpXHJcbmV4cG9ydCBjbGFzcyBFbmVteSBleHRlbmRzIENoYXJhY3RlciB7XHJcblxyXG5cclxuXHJcbiAgICBwcml2YXRlIHByb2dyZXNzOiBQcm9ncmVzc0JhcjtcclxuICAgIHByaXZhdGUgX2N1cnJlbnRIcDogbnVtYmVyID0gMTAwO1xyXG4gICAgcHJpdmF0ZSBfbWF4SHA6IG51bWJlciA9IDEwMDtcclxuXHJcbiAgICBwdWJsaWMgcHJpY2U6IG51bWJlciA9IDUwO1xyXG5cclxuXHJcbiAgICBwdWJsaWMgZ2V0IGhwKCk6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2N1cnJlbnRIcDtcclxuICAgIH1cclxuXHJcbiAgICBzdGFydCgpIHtcclxuXHJcbiAgICB9XHJcblxyXG5cclxuXHJcbiAgICBwdWJsaWMgZGFtYWdlKHZhbHVlOiBudW1iZXIpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLl9jdXJyZW50SHAgLT0gdmFsdWU7XHJcbiAgICAgICAgdGhpcy51cGRhdGVIcCgpO1xyXG4gICAgICAgIEVmZmVjdE1hbmFnZXIuaW5zdGFuY2Uuc2hvd0VmZmVjdChcInRvd2VyMV9lZmZcIiwgdGhpcy5ub2RlLnBvc2l0aW9uLmNsb25lKCkpLnRoZW4oKHZhbHVlKSA9PiB7XHJcblxyXG4gICAgICAgIH0pLmNhdGNoKChlcnIpID0+IHtcclxuICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnIpO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgaWYgKHRoaXMuX2N1cnJlbnRIcCA8PSAwKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZGllKCk7XHJcbiAgICAgICAgICAgIFRvd2VyTGF1bmNoZXIuaW5zdGFuY2UudmFsdWUgKz0gdGhpcy5wcmljZTtcclxuICAgICAgICAgICAgVG93ZXJMYXVuY2hlci5pbnN0YW5jZS5wb3BFbmVteUNvdW50ICsrO1xyXG4gICAgICAgICAgICBFZmZlY3RNYW5hZ2VyLmluc3RhbmNlLnNob3dFZmZlY3QoXCJFbmVteURpZVwiLCB0aGlzLm5vZGUucG9zaXRpb24uY2xvbmUoKSlcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGRpZSgpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLl9jdXJyZW50SHAgPSAwO1xyXG4gICAgICAgIHRoaXMuc2NoZWR1bGVPbmNlKCgpID0+IHtcclxuICAgICAgICAgICAgVG93ZXJMYXVuY2hlci5pbnN0YW5jZS5yZW1vdmVFbmVteSh0aGlzKTtcclxuICAgICAgICAgICAgdGhpcy5ub2RlLnJlbW92ZUZyb21QYXJlbnQoKTtcclxuICAgICAgICB9LCAwKVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgdXBkYXRlSHAoKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKHRoaXMucHJvZ3Jlc3MpIHtcclxuICAgICAgICAgICAgdGhpcy5wcm9ncmVzcy5wcm9ncmVzcyA9IHRoaXMuX2N1cnJlbnRIcCAvIHRoaXMuX21heEhwO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBvbkxvYWQoKSB7XHJcbiAgICAgICAgc3VwZXIub25Mb2FkKCk7XHJcbiAgICAgICAgdGhpcy5wcm9ncmVzcyA9IHRoaXMubm9kZS5nZXRDaGlsZEJ5TmFtZShcIlByb2dyZXNzQmFyXCIpLmdldENvbXBvbmVudChQcm9ncmVzc0Jhcik7XHJcbiAgICAgICAgdGhpcy51cGRhdGVIcCgpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBuYXZpZ2F0aW9uQnlQYXRoKHBhdGhzOiBWZWMyW10pOiB2b2lkIHtcclxuICAgICAgICBpZiAocGF0aHMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICB0aGlzLndvbGtCeVZlYzIocGF0aHMpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgaW5pdCgpOiB2b2lkIHtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgcHJvdGVjdGVkIG9uVHJpZ2dlckVudGVyMkQoc2VsZkNvbGxpZGVyOiBDb2xsaWRlcjJELCBvdGhlckNvbGxpZGVyOiBDb2xsaWRlcjJELCBjb250YWN0OiBJUGh5c2ljczJEQ29udGFjdCB8IG51bGwpOiB2b2lkIHtcclxuICAgICAgICAvLyBjb25zb2xlLmxvZyhcIm9uVHJpZ2dlckVudGVyMkRcIik7XHJcbiAgICAgICAgLy8gY29uc3QgdGFyZ2V0ID0gb3RoZXJDb2xsaWRlci5ub2RlLmdldENvbXBvbmVudChCb3NzKTtcclxuICAgICAgICAvLyBpZih0YXJnZXQpe1xyXG4gICAgICAgIC8vICAgICB0YXJnZXQuYmxlZWRpbmcoKTtcclxuICAgICAgICAvLyAgICAgdGhpcy5ub2RlLnJlbW92ZUZyb21QYXJlbnQoKTtcclxuICAgICAgICAvLyB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJvdGVjdGVkIG9uVHJpZ2dlckV4aXQyRChzZWxmQ29sbGlkZXI6IENvbGxpZGVyMkQsIG90aGVyQ29sbGlkZXI6IENvbGxpZGVyMkQsIGNvbnRhY3Q6IElQaHlzaWNzMkRDb250YWN0IHwgbnVsbCk6IHZvaWQge1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKFwib25UcmlnZ2VyRXhpdDJEXCIpO1xyXG4gICAgfVxyXG5cclxuICAgIHByb3RlY3RlZCBvbkNvbGxpc2lvbkVudGVyMkQoc2VsZkNvbGxpZGVyOiBDb2xsaWRlcjJELCBvdGhlckNvbGxpZGVyOiBDb2xsaWRlcjJELCBjb250YWN0OiBJUGh5c2ljczJEQ29udGFjdCB8IG51bGwpOiB2b2lkIHtcclxuICAgICAgICAvLyBjb25zb2xlLmxvZyhcIm9uQ29sbGlzaW9uRW50ZXIyRFwiKTtcclxuICAgICAgICAvLyBjb25zdCB0YXJnZXQgPSBvdGhlckNvbGxpZGVyLm5vZGUuZ2V0Q29tcG9uZW50KEJvc3MpO1xyXG4gICAgICAgIC8vIGlmKHRhcmdldCl7XHJcbiAgICAgICAgLy8gICAgIHRhcmdldC5ibGVlZGluZygpO1xyXG4gICAgICAgIC8vICAgICB0aGlzLmRpZSgpO1xyXG4gICAgICAgIC8vIH1cclxuICAgIH1cclxuXHJcbiAgICBwcm90ZWN0ZWQgb25Db2xsaXNpb25FeGl0MkQoc2VsZkNvbGxpZGVyOiBDb2xsaWRlcjJELCBvdGhlckNvbGxpZGVyOiBDb2xsaWRlcjJELCBjb250YWN0OiBJUGh5c2ljczJEQ29udGFjdCB8IG51bGwpOiB2b2lkIHtcclxuICAgICAgICAvLyBjb25zb2xlLmxvZyhcIm9uQ29sbGlzaW9uRXhpdDJEXCIpO1xyXG4gICAgfVxyXG5cclxuXHJcblxyXG59XHJcblxyXG5cclxuIiwiaW1wb3J0IHsgc3AsIFZlYzMgfSBmcm9tIFwiY2NcIjtcclxuaW1wb3J0IHsgU2NlbmUgfSBmcm9tIFwiLi4vU2NlbmVcIjtcclxuaW1wb3J0IHsgVW5pdCB9IGZyb20gXCIuLi9Vbml0XCI7XHJcbmltcG9ydCB7IEdhbWVDb25zdCB9IGZyb20gXCIuLi9HYW1lQ29uc3RcIjtcclxuaW1wb3J0IHsgU3BpbmVTa2VsZXRvbiB9IGZyb20gXCIuLi8uLi8uLi9Db21tb24vU3BpbmVTa2VsZXRvblwiO1xyXG5pbXBvcnQgeyBGaWdodFV0aWwgfSBmcm9tIFwiLi9GaWdodFV0aWxcIjtcclxuaW1wb3J0IHsgSGFuZGxlciB9IGZyb20gXCIuLi8uLi8uLi9Db21tb24vSGFuZGxlclwiO1xyXG5pbXBvcnQgeyBBY3Rpb25JbmZvIH0gZnJvbSBcIi4uL2luZm9zL0FjdGlvbkluZm9cIjtcclxuXHJcbi8qKlxyXG4gKiBAZmlsZU5hbWUgRW50aXR5LnRzXHJcbiAqIEBhdXRob3IgemhhbmdxaW9uZ1xyXG4gKiBAZGF0ZSAyMDI0LzEyLzI0IDE1OjQ5OjI0XCJcclxuICogQGRlc2NyaXB0aW9uXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgRW50aXR5IGV4dGVuZHMgVW5pdCB7XHJcbiAgICBwdWJsaWMgbVNjZW5lOiBTY2VuZTtcclxuXHJcbiAgICBzcGVlZDogbnVtYmVyID0gMTI7XHJcblxyXG4gICAgdXJsOiBzdHJpbmc7XHJcbiAgICByb2xlOiBhbnk7IC8vIHRvZG9cclxuICAgIGRpcmVjdGlvbjogbnVtYmVyID0gMDtcclxuICAgIGFjdGlvbjogc3RyaW5nO1xyXG4gICAgZGlyTW9kZTogbnVtYmVyO1xyXG5cclxuICAgIHByaXZhdGUgcm9sZVNwaW5lOiBTcGluZVNrZWxldG9uO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHN1cGVyKCk7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBpbml0KCk6IHZvaWQge1xyXG5cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0IHgoKTogbnVtYmVyIHtcclxuICAgICAgICBsZXQgcG9zOiBWZWMzID0gdGhpcy5nZXRMb2NhdGlvbigpO1xyXG4gICAgICAgIHJldHVybiBwb3MgPyBwb3MueCA6IDA7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldCB5KCk6IG51bWJlciB7XHJcbiAgICAgICAgbGV0IHBvczogVmVjMyA9IHRoaXMuZ2V0TG9jYXRpb24oKTtcclxuICAgICAgICByZXR1cm4gcG9zID8gcG9zLnkgOiAwO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBjaGFuZ2VEaXJCeUFuZ2xlKGFuZ2xlOiBudW1iZXIpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLnNldERpcmVjdGlvbihGaWdodFV0aWwuaW5zdGFuY2UuZ2V0RGlyZWN0aW9uQnlBbmdsZShhbmdsZSkpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzZXRSb2xlKGlkOiBudW1iZXIpOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgICAgICBpZiAoIXRoaXMucm9sZVNwaW5lKSB7XHJcbiAgICAgICAgICAgIHRoaXMucm9sZVNwaW5lID0gdGhpcy5nZXRDb21wb25lbnQoU3BpbmVTa2VsZXRvbik7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5yb2xlU3BpbmUpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMucm9sZVNwaW5lID0gdGhpcy5hZGRDb21wb25lbnQoU3BpbmVTa2VsZXRvbik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucm9sZVNwaW5lLnNldFNwaW5lSWQoaWQpXHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHN0b3BBY3Rpb24oKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5zZXRBY3Rpb24oR2FtZUNvbnN0LklkbGUpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzZXRBY3Rpb24oYWN0aW9uOiBzdHJpbmcsIHRpbWVzOiBudW1iZXIgPSAtMSwgaGFuZGxlcjogSGFuZGxlciA9IG51bGwsIG9wZXI6IG51bWJlciA9IEdhbWVDb25zdC5BY3Rpb25fT3ByZV9PbmUsIGlzRm9yY2U6IGJvb2xlYW4gPSBmYWxzZSk6IFByb21pc2U8dm9pZD4ge1xyXG4gICAgICAgIGlmIChhY3Rpb24gPT0gdGhpcy5hY3Rpb24gJiYgIWlzRm9yY2UpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmFjdGlvbiA9IGFjdGlvbjtcclxuICAgICAgICB0aGlzLmFjdGlvbiA9IGFjdGlvbjtcclxuICAgICAgICBjb25zdCBpbmZvOiBBY3Rpb25JbmZvID0gbmV3IEFjdGlvbkluZm8oYWN0aW9uLCBoYW5kbGVyLCB0aW1lcyk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucm9sZVNwaW5lLnNldEFuaW1hdGlvbihpbmZvKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0Q3VycmVudEFjdGlvbigpOiBzdHJpbmcge1xyXG4gICAgICAgIGlmICh0aGlzLnJvbGVTcGluZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5yb2xlU3BpbmUuY3VycmVudEFuaW1hdGlvbjtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuYWN0aW9uO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICBwdWJsaWMgc2V0U3BpbmVLZXlGcmFtZUhhbmRsZXIoaGFuZGxlcjogSGFuZGxlcik6IHZvaWQge1xyXG4gICAgICAgIGlmICh0aGlzLnJvbGVTcGluZSkge1xyXG4gICAgICAgICAgICB0aGlzLnJvbGVTcGluZS5rZXlGcmFtZUhhbmRsZXIgPSBoYW5kbGVyO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc2V0RGlyZWN0aW9uKGRpcmVjdGlvbjogbnVtYmVyLCBpc0ZvcmNlOiBib29sZWFuID0gZmFsc2UsIHRpbWVzOiBudW1iZXIgPSAtMSk6IHZvaWQge1xyXG4gICAgICAgIGlmIChkaXJlY3Rpb24gPT0gdGhpcy5kaXJlY3Rpb24gJiYgIWlzRm9yY2UpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmRpcmVjdGlvbiA9IGRpcmVjdGlvbjtcclxuICAgICAgICBjb25zdCBzY2FsZTogVmVjMyA9IG5ldyBWZWMzKCk7XHJcbiAgICAgICAgdGhpcy5nZXRTY2FsZShzY2FsZSk7XHJcblxyXG4gICAgICAgIGxldCByZWFseXNjYWxlWDogbnVtYmVyID0gRmlnaHRVdGlsLmluc3RhbmNlLmdldFNjYWxlWEJ5RGlyZWN0aW9uKGRpcmVjdGlvbik7XHJcblxyXG4gICAgICAgIGxldCBzY2FsZVg6IG51bWJlciA9IE1hdGguYWJzKHNjYWxlLngpICogcmVhbHlzY2FsZVg7XHJcbiAgICAgICAgdGhpcy5zZXRTY2FsZShzY2FsZVgsIHNjYWxlLnkpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBjaGFuZ2VBY3Rpb25BbmREaXJlY3Rpb24oYWN0aW9uOiBzdHJpbmcsIGRpcmVjdGlvbjogbnVtYmVyID0gLTEsIHRpbWVzOiBudW1iZXIgPSAtMSwgaGFuZGxlcjogSGFuZGxlciA9IG51bGwsIGlzRm9yY2U6IGJvb2xlYW4gPSBmYWxzZSk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuc2V0RGlyZWN0aW9uKGRpcmVjdGlvbiwgaXNGb3JjZSk7XHJcbiAgICAgICAgdGhpcy5zZXRBY3Rpb24oYWN0aW9uLCB0aW1lcywgaGFuZGxlcik7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzZXRTcGVlZChzcGVlZDogbnVtYmVyKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5zcGVlZCA9IE1hdGguZmxvb3Ioc3BlZWQpO1xyXG4gICAgICAgIHRoaXMub2xkQW5nbGUgPSAtMTtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBkeDogbnVtYmVyO1xyXG4gICAgcHJpdmF0ZSBkeTogbnVtYmVyO1xyXG4gICAgcHJpdmF0ZSBkaXN0OiBudW1iZXI7XHJcbiAgICBwcm90ZWN0ZWQgbW92ZUFuZ2xlOiBudW1iZXI7XHJcbiAgICBwcm90ZWN0ZWQgb2xkQW5nbGU6IG51bWJlciA9IC0xXHJcbiAgICBwcm90ZWN0ZWQgb2xkTW92ZUFuZ2xlOiBudW1iZXIgPSAtMTtcclxuXHJcbiAgICBwcm90ZWN0ZWQgeFNwZWVkOiBudW1iZXIgPSAwO1xyXG4gICAgcHJvdGVjdGVkIHlTcGVlZDogbnVtYmVyID0gMDtcclxuXHJcbiAgICBwdWJsaWMgZ2V0U2l6ZSgpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiA1MDtcclxuICAgIH1cclxuICAgIHByb3RlY3RlZCBtb3ZlKHRhcmdldE1vdmVQb2ludDogVmVjMyk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuc2V0QWN0aW9uKEdhbWVDb25zdC5Nb3ZlKTtcclxuICAgICAgICBjb25zdCBwb3M6IFZlYzMgPSB0aGlzLmdldExvY2F0aW9uKCk7XHJcbiAgICAgICAgdGhpcy5keCA9IHRhcmdldE1vdmVQb2ludC54IC0gcG9zLng7XHJcbiAgICAgICAgdGhpcy5keSA9IHRhcmdldE1vdmVQb2ludC55IC0gcG9zLnk7XHJcbiAgICAgICAgdGhpcy5kaXN0ID0gTWF0aC5zcXJ0KHRoaXMuZHggKiB0aGlzLmR4ICsgdGhpcy5keSAqIHRoaXMuZHkpO1xyXG4gICAgICAgIGlmICh0aGlzLmRpc3QgPCB0aGlzLnNwZWVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMub25Nb3ZlRW5kKHRhcmdldE1vdmVQb2ludCk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy50b01vdmUodGhpcy5tb3ZlQW5nbGUsIC0xKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIG9uTW92ZUVuZCh0YXJnZXRNb3ZlUG9pbnQ6IFZlYzMpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLm9sZEFuZ2xlID0gLTE7XHJcbiAgICAgICAgdGhpcy5zZXRMb2NhdGlvbih0YXJnZXRNb3ZlUG9pbnQueCwgdGFyZ2V0TW92ZVBvaW50LnkpO1xyXG4gICAgICAgIHRoaXMuc2V0QWN0aW9uKEdhbWVDb25zdC5JZGxlKTtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBzZXRTcGVlZFhZKGFuZ2xlOiBudW1iZXIsIGVuZFNwZWVkOiBudW1iZXIgPSAtMSwgdGlja0luZGV4OiBudW1iZXIpOiB2b2lkIHtcclxuICAgICAgICBpZiAoZW5kU3BlZWQgPT0gLTEpIHtcclxuICAgICAgICAgICAgdGhpcy54U3BlZWQgPSB0aGlzLnNwZWVkICogTWF0aC5jb3MoYW5nbGUgKiBNYXRoLlBJIC8gMTgwKSAqIHRpY2tJbmRleDtcclxuICAgICAgICAgICAgdGhpcy55U3BlZWQgPSB0aGlzLnNwZWVkICogTWF0aC5zaW4oYW5nbGUgKiBNYXRoLlBJIC8gMTgwKSAqIHRpY2tJbmRleDtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLnhTcGVlZCA9IGVuZFNwZWVkICogTWF0aC5jb3MoYW5nbGUgKiBNYXRoLlBJIC8gMTgwKTtcclxuICAgICAgICAgICAgdGhpcy55U3BlZWQgPSBlbmRTcGVlZCAqIE1hdGguc2luKGFuZ2xlICogTWF0aC5QSSAvIDE4MCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgdG9Nb3ZlKGFuZ2xlOiBudW1iZXIsIGVuZFNwZWVkOiBudW1iZXIgPSAtMSk6IHZvaWQge1xyXG4gICAgICAgIGlmICh0aGlzLm9sZEFuZ2xlICE9IGFuZ2xlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0U3BlZWRYWShhbmdsZSwgZW5kU3BlZWQsIDEpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLm9sZEFuZ2xlID0gYW5nbGU7XHJcbiAgICAgICAgY29uc3QgcG9zOiBWZWMzID0gdGhpcy5nZXRMb2NhdGlvbigpO1xyXG4gICAgICAgIGNvbnN0IG5ld1g6IG51bWJlciA9IHBvcy54ICsgdGhpcy54U3BlZWQ7XHJcbiAgICAgICAgY29uc3QgbmV3WTogbnVtYmVyID0gcG9zLnkgKyB0aGlzLnlTcGVlZDtcclxuICAgICAgICB0aGlzLnNldExvY2F0aW9uKG5ld1gsIG5ld1kpO1xyXG4gICAgICAgIHRoaXMudXBkYXRlSGVhZFBvcygpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyB1cGRhdGVIZWFkUG9zKCk6IHZvaWQge1xyXG5cclxuICAgIH1cclxufSIsIi8qKlxyXG4gKiBAZmlsZU5hbWUgRW50aXR5SW5mby50c1xyXG4gKiBAYXV0aG9yIHpoYW5ncWlvbmdcclxuICogQGRhdGUgMjAyNC8xMi8yNiAxOTo0Mjo1MFwiXHJcbiAqIEBkZXNjcmlwdGlvblxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIEVudGl0eUluZm8ge1xyXG4gICAgcHJpdmF0ZSBfbmFtZTogc3RyaW5nO1xyXG4gICAgcHJpdmF0ZSBfZW50aXR5SWQ6IHN0cmluZztcclxuICAgIG9ubHlJZDogbnVtYmVyO1xyXG4gICAgdHlwZTogbnVtYmVyO1xyXG4gICAgaW5zSWQ6IG51bWJlcjtcclxuXHJcbiAgICBwdWJsaWMgc2V0IG5hbWUodjogc3RyaW5nKSB7XHJcbiAgICAgICAgdGhpcy5fbmFtZSA9IHY7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldCBuYW1lKCk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX25hbWU7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNldEVudGl0eUlkKGlkOiBudW1iZXIsIHR5cGU6IG51bWJlciwgLi4uYXJncyk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMudHlwZSA9IHR5cGU7XHJcbiAgICAgICAgdGhpcy5vbmx5SWQgPSBpZDtcclxuICAgICAgICB0aGlzLl9lbnRpdHlJZCA9IGBzJHtpZH1fJHthcmdzWzBdfWBcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0RW50aXR5SWQoKTogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fZW50aXR5SWQ7XHJcbiAgICB9XHJcbn0iLCJcclxuaW1wb3J0IHsgTm9kZSwgQ29tcG9uZW50LCBfZGVjb3JhdG9yIH0gZnJvbSBcImNjXCI7XHJcblxyXG5jb25zdCB7IGNjY2xhc3MsIHByb3BlcnR5IH0gPSBfZGVjb3JhdG9yO1xyXG5cclxuQGNjY2xhc3MoXCJFbnRpdHlMYXllclwiKVxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBFbnRpdHlMYXllciBleHRlbmRzIENvbXBvbmVudHtcclxuICAgIHByb3RlY3RlZCB1cGRhdGUoZHQ6IG51bWJlcik6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuc29ydFppbmRleCgpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgc29ydFppbmRleCgpIHtcclxuICAgICAgICB2YXIgYWxsRW50aXR5Tm9kZXM6IE5vZGVbXSA9IHRoaXMubm9kZS5jaGlsZHJlbi5zbGljZSgpO1xyXG5cclxuICAgICAgICBhbGxFbnRpdHlOb2Rlcy5zb3J0KChub2RlMTogTm9kZSwgbm9kZTI6IE5vZGUpOiBudW1iZXIgPT4ge1xyXG4gICAgICAgICAgICBpZiAobm9kZTEucG9zaXRpb24ueSA+IG5vZGUyLnBvc2l0aW9uLnkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAtMVxyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKG5vZGUxLnBvc2l0aW9uLnkgPCBub2RlMi5wb3NpdGlvbi55KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gMTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIDA7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHZhciBlbnRpcnlDb3VudDogbnVtYmVyID0gYWxsRW50aXR5Tm9kZXMubGVuZ3RoO1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZW50aXJ5Q291bnQ7IGkrKykge1xyXG4gICAgICAgICAgICAvL2FsbEVudGl0eU5vZGVzW2ldLnpJbmRleCA9IGk7XHJcbiAgICAgICAgICAgIGFsbEVudGl0eU5vZGVzW2ldLnNldFNpYmxpbmdJbmRleChpKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iLCIvKiog5LiN5riy5p+T5LiON+S4quminOiJsiAqL1xyXG5leHBvcnQgZW51bSBJdGVtQ29sb3Ige1xyXG4gICAgTlVMTCA9IDAsXHJcbiAgICBDb2xvcjEsXHJcbiAgICBDb2xvcjIsXHJcbiAgICBDb2xvcjMsXHJcbiAgICBDb2xvcjQsXHJcbiAgICBDb2xvcjUsXHJcbiAgICBDb2xvcjYsXHJcbiAgICBDb2xvcjcsXHJcbn1cclxuXHJcbi8qKiDop6bmkbjkuovku7Yt5LiK5LiL5bem5Y+z5ruR5YqoICovXHJcbmV4cG9ydCBlbnVtIFRvdWNoRXZlbnQge1xyXG4gICAgVVAgPSAndG91Y2gtdXAnLFxyXG4gICAgRE9XTiA9ICd0b3VjaC1kb3duJyxcclxuICAgIExFRlQgPSAndG91Y2gtbGVmdCcsXHJcbiAgICBSSUdIVCA9ICd0b3VjaC1yaWdodCdcclxufVxyXG5cclxuLyoqIOmfs+aViOS6i+S7tiAqL1xyXG5leHBvcnQgZW51bSBNdXNpY0V2ZW50IHtcclxuICAgIEJHTSA9ICdiZ20nLFxyXG4gICAgQUNUSU9OID0gJ2FjdGlvbicsXHJcbiAgICBHQU1FX09WRVIgPSAnb3ZlcicsXHJcbiAgICAvKiog5pa55Z2X5raI6ZmkICovXHJcbiAgICBFTElNSU5BVEUgPSAnZWxpbWluYXRlJ1xyXG59XHJcblxyXG4vKiog6IqC54K56Lev5b6EICovXHJcbmV4cG9ydCBlbnVtIE5vZGVVcmwge1xyXG4gICAgQ2FudmFzID0gJ0NhbnZhcycsXHJcbiAgICBNdXNpYyA9ICdNdXNpYydcclxufSIsImV4cG9ydCBlbnVtIFJQR01vZGVsQW5pbU5hbWV7XHJcbiAgICBJZGVsID0gXCJzdGVhZHlcIixcclxuICAgIEF0dGFjayA9IFwiYXR0YWNrMVwiLFxyXG4gICAgSnVtcCA9IFwianVtcFwiLFxyXG4gICAgV2FsayA9IFwid2Fsa1wiLFxyXG4gICAgV2FsazIgPSBcIndhbGsyXCJcclxufVxyXG5cclxuZXhwb3J0IGVudW0gUlBHTW9kZWxEaXJlY3Rpb24ge1xyXG4gICAgTGVmdCA9IDAsXHJcbiAgICBSaWdodCA9IDFcclxufVxyXG5cclxuZXhwb3J0IGVudW0gTWFwVHlwZXtcclxuICAgIEFuZ2xlNDUgPSAwLFxyXG4gICAgQW5nbGU5MCA9IDEsXHJcbn1cclxuXHJcbmV4cG9ydCBlbnVtIE1hcExvYWRNb2RlbHtcclxuICAgIHNpbmdsZSA9IDAsXHJcbiAgICBzcGxpdCA9IDFcclxufVxyXG5cclxuZXhwb3J0IGVudW0gUGF0aE9wdGltaXplIHtcclxuICAgIG5vbmUgPSAwLFxyXG4gICAgYmV0dGVyID0gMSxcclxuICAgIGJlc3QgPSAyXHJcbn1cclxuXHJcbmV4cG9ydCBlbnVtIFBhdGhRdWFkU2VlayB7XHJcbiAgICBwYXRoX2RpcmVfNCA9IDAsXHJcbiAgICBwYXRoX2RpcmVfOCA9IDFcclxufVxyXG5cclxuZXhwb3J0IGVudW0gTWFwSXRlbVR5cGUge1xyXG4gICAgLyoqIG5wYyAqL1xyXG4gICAgTnBjID0gXCJucGNcIixcclxuICAgIC8qKiDmgKrniakgKi9cclxuICAgIE1vbnN0ZXIgPSBcIm1vbnN0ZXJcIixcclxuICAgIC8qKiDkvKDpgIHpl6ggKi9cclxuICAgIFRyYW5zZmVyID0gXCJ0cmFuc2ZlclwiLFxyXG4gICAgLyoqIOWHuueUn+eCuSAqL1xyXG4gICAgU3Bhd25Qb2ludCA9IFwic3Bhd25Qb2ludFwiXHJcbn0iLCJleHBvcnQgZW51bSBUb3VjaEV2ZW50IHtcclxuICAgIFVQID0gXCJ0b3VjaF91cFwiLFxyXG4gICAgUklHSFQgPSBcInRvdWNoX3JpZ2h0XCIsXHJcbiAgICBET1dOID0gXCJ0b3VjaF9kb3duXCIsXHJcbiAgICBMRUZUID0gXCJ0b3VjaF9sZWZ0XCJcclxufVxyXG5cclxuLyoqIOeVjOmdouWxleekuuexu+WeiyAqL1xyXG5leHBvcnQgZW51bSBWaWV3U2hvd1R5cGVzIHtcclxuICAgIFZpZXdGdWxsU2NyZWVuLCAgICAgICAvLyDlhajlsY/mmL7npLrvvIzlhajlsY/nlYzpnaLkvb/nlKjor6XpgInpobnlj6/ojrflvpfmm7Tpq5jmgKfog71cclxuICAgIFZpZXdBZGRpdGlvbiwgICAgICAgICAvLyDlj6DliqDmmL7npLrvvIzmgKfog73ovoPlt65cclxuICAgIFZpZXdTaW5nbGUsICAgICAgICAgICAvLyDljZXnlYzpnaLmmL7npLrvvIzlj6rmmL7npLrlvZPliY3nlYzpnaLlkozog4zmma/nlYzpnaLvvIzmgKfog73ovoPlpb1cclxufTsiLCIvKipcclxuICogQGZpbGVOYW1lIEZhaXJ5QmlyZENvbnN0LnRzXHJcbiAqIEBhdXRob3IgemhhbmdxaW9uZ1xyXG4gKiBAZGF0ZSAyMDI1LzAxLzA5IDIwOjQzOjEwXCJcclxuICogQGRlc2NyaXB0aW9uXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgRmFpcnlCaXJkQ29uc3Qge1xyXG4gICAgcHVibGljIHN0YXRpYyByZWFkb25seSBUQUdfTEFORDogbnVtYmVyID0gMTA7XHJcbiAgICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IFRBR19QSVBFOiBudW1iZXIgPSAyMDtcclxuICAgIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgVEFHX0NPSU46IG51bWJlciA9IDMwO1xyXG5cclxuICAgIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgU1RBVEVfUkVBRElORzogbnVtYmVyID0gMTtcclxuICAgIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgU1RBVEVfR0FNRUlORzogbnVtYmVyID0gMjtcclxuICAgIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgU1RBVEVfR0FNRU9WRVI6IG51bWJlciA9IDM7XHJcbn0iLCJpbXBvcnQgeyBfZGVjb3JhdG9yLCBDQ0ludGVnZXIsIENvbXBvbmVudCwgTGFiZWwsIE5vZGUsIE5vZGVFdmVudFR5cGUsIFZlYzMgfSBmcm9tICdjYyc7XHJcbmltcG9ydCB7IEZhaXJ5QmlyZENvbnN0IH0gZnJvbSAnLi9GYWlyeUJpcmRDb25zdCc7XHJcbmltcG9ydCBVdGlscyBmcm9tICcuLi8uLi9Db21tb24vVXRpbHMnO1xyXG5jb25zdCB7IGNjY2xhc3MsIHByb3BlcnR5IH0gPSBfZGVjb3JhdG9yO1xyXG5cclxuLyoqXHJcbiAqIEBmaWxlTmFtZSBGYWlyeUJpcmRHYW1lTWFuZ2VyLnRzXHJcbiAqIEBhdXRob3IgemhhbmdxaW9uZ1xyXG4gKiBAZGF0ZSAyMDI1LzAxLzA5IDE1OjU5OjE5XCJcclxuICogQGRlc2NyaXB0aW9uXHJcbiAqL1xyXG5AY2NjbGFzcygnRmFpcnlCaXJkR2FtZU1hbmdlcicpXHJcbmV4cG9ydCBjbGFzcyBGYWlyeUJpcmRHYW1lTWFuZ2VyIGV4dGVuZHMgQ29tcG9uZW50IHtcclxuXHJcbiAgICBwcml2YXRlIHN0YXRpYyBfaW5zdGFuY2U6IEZhaXJ5QmlyZEdhbWVNYW5nZXIgPSBudWxsO1xyXG4gICAgcHVibGljIHN0YXRpYyBnZXQgaW5zdGFuY2UoKTogRmFpcnlCaXJkR2FtZU1hbmdlciB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2luc3RhbmNlO1xyXG4gICAgfVxyXG5cclxuICAgIEBwcm9wZXJ0eShDQ0ludGVnZXIpXHJcbiAgICBwdWJsaWMgbW92ZVNwZWVkOiBudW1iZXIgPSAyMDA7XHJcblxyXG4gICAgQHByb3BlcnR5KE5vZGUpXHJcbiAgICBwdWJsaWMgZ2FtZVJlYWR5Tm9kZTogTm9kZSA9IG51bGw7XHJcbiAgICBAcHJvcGVydHkoTm9kZSlcclxuICAgIHB1YmxpYyBnYW1lT3Zlck5vZGU6IE5vZGUgPSBudWxsO1xyXG4gICAgQHByb3BlcnR5KExhYmVsKVxyXG4gICAgcHVibGljIGdvbGRMYWJlbDogTGFiZWwgPSBudWxsO1xyXG4gICAgQHByb3BlcnR5KExhYmVsKVxyXG4gICAgcHVibGljIHNpbHZlckxhYmVsOiBMYWJlbCA9IG51bGw7XHJcbiAgICBAcHJvcGVydHkoTm9kZSlcclxuICAgIHB1YmxpYyBiaXJkOiBOb2RlID0gbnVsbDtcclxuXHJcbiAgICBwdWJsaWMgZ2FtZVN0YXRlOiBudW1iZXIgPSBGYWlyeUJpcmRDb25zdC5TVEFURV9SRUFESU5HO1xyXG5cclxuICAgIHByaXZhdGUgX3JlYWR5UG9zaXRpb246IFZlYzMgPSBudWxsO1xyXG5cclxuICAgIHByaXZhdGUgX2dvbGQ6IG51bWJlciA9IDA7XHJcbiAgICBwdWJsaWMgZ2V0IGdvbGQoKTogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fZ29sZDtcclxuICAgIH1cclxuICAgIHB1YmxpYyBzZXQgZ29sZCh2YWx1ZTogbnVtYmVyKSB7XHJcbiAgICAgICAgdGhpcy5fZ29sZCA9IHZhbHVlO1xyXG4gICAgICAgIGlmICh0aGlzLmdvbGRMYWJlbCkge1xyXG4gICAgICAgICAgICB0aGlzLmdvbGRMYWJlbC5zdHJpbmcgPSBgJHt2YWx1ZX1gO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHByaXZhdGUgX3NpbHZlcjogbnVtYmVyID0gMDtcclxuICAgIHB1YmxpYyBnZXQgc2lsdmVyKCk6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3NpbHZlcjtcclxuICAgIH1cclxuICAgIHB1YmxpYyBzZXQgc2lsdmVyKHZhbHVlOiBudW1iZXIpIHtcclxuICAgICAgICB0aGlzLl9zaWx2ZXIgPSB2YWx1ZTtcclxuICAgICAgICBpZiAodGhpcy5zaWx2ZXJMYWJlbCkge1xyXG4gICAgICAgICAgICB0aGlzLnNpbHZlckxhYmVsLnN0cmluZyA9IGAke3ZhbHVlfWA7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuXHJcbiAgICBwcm90ZWN0ZWQgb25Mb2FkKCk6IHZvaWQge1xyXG4gICAgICAgIEZhaXJ5QmlyZEdhbWVNYW5nZXIuX2luc3RhbmNlID0gdGhpcztcclxuICAgICAgICB0aGlzLl9yZWFkeVBvc2l0aW9uID0gdGhpcy5iaXJkLnBvc2l0aW9uO1xyXG4gICAgfVxyXG4gICAgc3RhcnQoKSB7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIHVwZGF0ZShkZWx0YVRpbWU6IG51bWJlcikge1xyXG5cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgdHJhbnNmb3JtR2FtZVN0YXRlKHN0YXRlOiBudW1iZXIpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLmdhbWVSZWFkeU5vZGUuYWN0aXZlID0gc3RhdGUgPT0gRmFpcnlCaXJkQ29uc3QuU1RBVEVfUkVBRElORztcclxuICAgICAgICB0aGlzLmdhbWVPdmVyTm9kZS5hY3RpdmUgPSBzdGF0ZSA9PSBGYWlyeUJpcmRDb25zdC5TVEFURV9HQU1FT1ZFUjtcclxuICAgICAgICB0aGlzLmdhbWVTdGF0ZSA9IHN0YXRlO1xyXG4gICAgICAgIGlmIChzdGF0ZSA9PSBGYWlyeUJpcmRDb25zdC5TVEFURV9SRUFESU5HKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHN0YXJ0QnRuID0gVXRpbHMuRmluZENoaWxkQnlOYW1lKHRoaXMuZ2FtZVJlYWR5Tm9kZSwgXCJzdGFydEJ0blwiKTtcclxuICAgICAgICAgICAgaWYgKHN0YXJ0QnRuKSB7XHJcbiAgICAgICAgICAgICAgICBzdGFydEJ0bi5vbihOb2RlRXZlbnRUeXBlLlRPVUNIX1NUQVJULCB0aGlzLm9uQ2xpY2tTdGFydEJ0biwgdGhpcyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5iaXJkLnNldFBvc2l0aW9uKHRoaXMuX3JlYWR5UG9zaXRpb24pO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoc3RhdGUgPT0gRmFpcnlCaXJkQ29uc3QuU1RBVEVfR0FNRU9WRVIpIHtcclxuICAgICAgICAgICAgY29uc3Qgc3RhcnRCdG4gPSBVdGlscy5GaW5kQ2hpbGRCeU5hbWUodGhpcy5nYW1lT3Zlck5vZGUsIFwic3RhcnRCdG5cIik7XHJcbiAgICAgICAgICAgIGlmIChzdGFydEJ0bikge1xyXG4gICAgICAgICAgICAgICAgc3RhcnRCdG4ub24oTm9kZUV2ZW50VHlwZS5UT1VDSF9TVEFSVCwgdGhpcy5vbkNsaWNrUmVTdGFydCwgdGhpcyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBvbkNsaWNrU3RhcnRCdG4oKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy50cmFuc2Zvcm1HYW1lU3RhdGUoRmFpcnlCaXJkQ29uc3QuU1RBVEVfR0FNRUlORyk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBvbkNsaWNrUmVTdGFydCgpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLnRyYW5zZm9ybUdhbWVTdGF0ZShGYWlyeUJpcmRDb25zdC5TVEFURV9SRUFESU5HKTtcclxuICAgIH1cclxuXHJcbn1cclxuIiwiaW1wb3J0IHsgX2RlY29yYXRvciwgQ29tcG9uZW50LCBOb2RlIH0gZnJvbSAnY2MnO1xyXG5pbXBvcnQgQmFzZVZpZXcgZnJvbSAnLi4vLi4vdWkvQmFzZVZpZXcnO1xyXG5pbXBvcnQgeyByZWdpc3RlclZpZXcgfSBmcm9tICcuLi8uLi91aS9WaWV3UmVnaXN0ZXJNZ3InO1xyXG5pbXBvcnQgeyBQYW5lbFR5cGUgfSBmcm9tICcuLi8uLi91aS9QYW5lbEVudW0nO1xyXG5pbXBvcnQgeyBMYXllclR5cGUgfSBmcm9tICcuLi8uLi91aS9MYXllck1hbmFnZXInO1xyXG5pbXBvcnQgeyBGYWlyeUJpcmRHYW1lTWFuZ2VyIH0gZnJvbSAnLi9GYWlyeUJpcmRHYW1lTWFuZ2VyJztcclxuaW1wb3J0IHsgRmFpcnlCaXJkQ29uc3QgfSBmcm9tICcuL0ZhaXJ5QmlyZENvbnN0JztcclxuY29uc3QgeyBjY2NsYXNzLCBwcm9wZXJ0eSB9ID0gX2RlY29yYXRvcjtcclxuXHJcbkBjY2NsYXNzKCdGYWlyeWJpcmRNYWluUGFuZWwnKVxyXG5leHBvcnQgY2xhc3MgRmFpcnliaXJkTWFpblBhbmVsIGV4dGVuZHMgQmFzZVZpZXcge1xyXG5cclxuICAgIHB1YmxpYyBvbk9wZW4oZnJvbVVJOiBudW1iZXIgfCBzdHJpbmcsIC4uLmFyZ3M6IGFueSk6IHZvaWQge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKFwi5oiQ5Yqf5omT5byA5LqGXCIsIGZyb21VSSwgYXJncylcclxuICAgICAgICBjb25zdCBjb3VudDogbnVtYmVyID0gMTA7XHJcbiAgICAgICAgZm9yIChsZXQgaTogbnVtYmVyID0gMDsgaSA8IGNvdW50OyBpKyspIHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coYHJhbmRvbSB2YWx1ZToke3RoaXMuc2VlZFJhbmRvbSgpfWApO1xyXG4gICAgICAgIH1cclxuICAgICAgICBGYWlyeUJpcmRHYW1lTWFuZ2VyLmluc3RhbmNlLnRyYW5zZm9ybUdhbWVTdGF0ZShGYWlyeUJpcmRDb25zdC5TVEFURV9SRUFESU5HKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIHNlZWQ6IG51bWJlciA9IDU7XHJcbiAgICBwcml2YXRlIGluaXRTZWVkOiBudW1iZXIgPSA1O1xyXG4gICAgcHJpdmF0ZSBsb2dSYW5kb21BcnJheTogbnVtYmVyW10gPSBbXTtcclxuXHJcbiAgICBwdWJsaWMgc2V0UmFuZG9tU2VlZChzZWVkOiBudW1iZXIpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLmluaXRTZWVkID0gc2VlZDtcclxuICAgICAgICBjb25zb2xlLmVycm9yKFwi5pS25Yiw6ZqP5py65pWwXCIsIHRoaXMuaW5pdFNlZWQpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzZWVkUmFuZG9tKCk6IG51bWJlciB7XHJcbiAgICAgICAgaWYgKHRoaXMubG9nUmFuZG9tQXJyYXkubGVuZ3RoIDwgMzApIHtcclxuICAgICAgICAgICAgdGhpcy5sb2dSYW5kb21BcnJheS5wdXNoKHRoaXMuc2VlZCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuc2VlZCA9ICh0aGlzLnNlZWQgKiA5MzAxICsgNDkyOTcpICUgMjMzMjgwO1xyXG4gICAgICAgIGNvbnN0IHZhbHVlOiBudW1iZXIgPSB0aGlzLnNlZWQgLyAyMzMyODAuMDtcclxuICAgICAgICByZXR1cm4gdmFsdWU7XHJcbiAgICB9XHJcblxyXG5cclxuXHJcblxyXG4gICAgcHVibGljIG9uQ2xvc2UoKSB7XHJcblxyXG4gICAgfVxyXG5cclxuXHJcblxyXG5cclxuICAgIHN0YXJ0KCkge1xyXG5cclxuICAgIH1cclxuXHJcbiAgICB1cGRhdGUoZGVsdGFUaW1lOiBudW1iZXIpIHtcclxuICAgICAgICAvLyBjb25zb2xlLmxvZyhcImxvbmcgZGVsdGF0aW1lXCIsZGVsdGFUaW1lKVxyXG4gICAgfVxyXG59XHJcbnJlZ2lzdGVyVmlldyh7IHZpZXdDbHM6IEZhaXJ5YmlyZE1haW5QYW5lbCwgaWQ6IFBhbmVsVHlwZS5GYWlyeWJpcmRNYWluUGFuZWwsIGxheWVyOiBMYXllclR5cGUudmlldyB9KVxyXG5cclxuIiwiaW1wb3J0IHsgX2RlY29yYXRvciwgQ29tcG9uZW50LCBpbnN0YW50aWF0ZSwgTm9kZSwgUHJlZmFiLCBWZWMzIH0gZnJvbSAnY2MnO1xyXG5pbXBvcnQgeyBGYWlyeUJpcmRHYW1lTWFuZ2VyIH0gZnJvbSAnLi9GYWlyeUJpcmRHYW1lTWFuZ2VyJztcclxuaW1wb3J0IHsgRmFpcnlCaXJkUGlwZU1hbmdlciB9IGZyb20gJy4vRmFpcnlCaXJkUGlwZU1hbmdlcic7XHJcbmltcG9ydCB7IEZhaXJ5QmlyZENvbnN0IH0gZnJvbSAnLi9GYWlyeUJpcmRDb25zdCc7XHJcbmNvbnN0IHsgY2NjbGFzcywgcHJvcGVydHkgfSA9IF9kZWNvcmF0b3I7XHJcblxyXG5AY2NjbGFzcygnRmFpcnlCaXJkUGlwZScpXHJcbmV4cG9ydCBjbGFzcyBGYWlyeUJpcmRQaXBlIGV4dGVuZHMgQ29tcG9uZW50IHtcclxuICAgIEBwcm9wZXJ0eShQcmVmYWIpXHJcbiAgICBwdWJsaWMgY29pbjogUHJlZmFiID0gbnVsbDtcclxuXHJcbiAgICBwcml2YXRlIGNvaW5Ob2RlOiBOb2RlID0gbnVsbDtcclxuICAgIHN0YXJ0KCkge1xyXG5cclxuICAgIH1cclxuXHJcbiAgICBpbnN0YW5jZUNvaW4oKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmNvaW5Ob2RlKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG5vZGUgPSBpbnN0YW50aWF0ZSh0aGlzLmNvaW4pO1xyXG4gICAgICAgICAgICB0aGlzLm5vZGUuYWRkQ2hpbGQobm9kZSk7XHJcbiAgICAgICAgICAgIHRoaXMuY29pbk5vZGUgPSBub2RlO1xyXG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5jb2luTm9kZSAmJiAhdGhpcy5jb2luTm9kZS5wYXJlbnQpIHtcclxuICAgICAgICAgICAgdGhpcy5ub2RlLmFkZENoaWxkKHRoaXMuY29pbk5vZGUpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICB9XHJcblxyXG4gICAgdXBkYXRlKGRlbHRhVGltZTogbnVtYmVyKSB7XHJcbiAgICAgICAgaWYgKEZhaXJ5QmlyZEdhbWVNYW5nZXIuaW5zdGFuY2UuZ2FtZVN0YXRlICE9IEZhaXJ5QmlyZENvbnN0LlNUQVRFX0dBTUVJTkcpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBwOiBWZWMzID0gdGhpcy5ub2RlLmdldFBvc2l0aW9uKCk7XHJcbiAgICAgICAgdGhpcy5ub2RlLnNldFBvc2l0aW9uKHAueCAtIEZhaXJ5QmlyZEdhbWVNYW5nZXIuaW5zdGFuY2UubW92ZVNwZWVkICogZGVsdGFUaW1lLCBwLnkpO1xyXG4gICAgICAgIGNvbnN0IHAyOiBWZWMzID0gdGhpcy5ub2RlLmdldFBvc2l0aW9uKCk7XHJcbiAgICAgICAgaWYgKHAyLnggPCAtMTQ0MCkge1xyXG4gICAgICAgICAgICB0aGlzLnNjaGVkdWxlT25jZSgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm5vZGUucmVtb3ZlRnJvbVBhcmVudCgpO1xyXG4gICAgICAgICAgICAgICAgRmFpcnlCaXJkUGlwZU1hbmdlci5pbnN0YW5jZS5yZWxhc2VQaXBlKHRoaXMubm9kZSk7XHJcbiAgICAgICAgICAgIH0sIDApXHJcblxyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuXHJcbiIsImltcG9ydCB7IF9kZWNvcmF0b3IsIENDSW50ZWdlciwgQ29tcG9uZW50LCBpbnN0YW50aWF0ZSwgbWF0aCwgTm9kZSwgTm9kZVBvb2wsIFByZWZhYiB9IGZyb20gJ2NjJztcclxuaW1wb3J0IHsgRmFpcnlCaXJkUGlwZSB9IGZyb20gJy4vRmFpcnlCaXJkUGlwZSc7XHJcbmltcG9ydCB7IEZhaXJ5QmlyZENvbnN0IH0gZnJvbSAnLi9GYWlyeUJpcmRDb25zdCc7XHJcbmltcG9ydCB7IEZhaXJ5QmlyZEdhbWVNYW5nZXIgfSBmcm9tICcuL0ZhaXJ5QmlyZEdhbWVNYW5nZXInO1xyXG5jb25zdCB7IGNjY2xhc3MsIHByb3BlcnR5IH0gPSBfZGVjb3JhdG9yO1xyXG5cclxuLyoqXHJcbiAqIEBmaWxlTmFtZSBGYWlyeUJpcmRQaXBlTWFuZ2VyLnRzXHJcbiAqIEBhdXRob3IgemhhbmdxaW9uZ1xyXG4gKiBAZGF0ZSAyMDI1LzAxLzA5IDE2OjA1OjQ2XCJcclxuICogQGRlc2NyaXB0aW9uXHJcbiAqL1xyXG5AY2NjbGFzcygnRmFpcnlCaXJkUGlwZU1hbmdlcicpXHJcbmV4cG9ydCBjbGFzcyBGYWlyeUJpcmRQaXBlTWFuZ2VyIGV4dGVuZHMgQ29tcG9uZW50IHtcclxuXHJcbiAgICBwcml2YXRlIHN0YXRpYyBfaW5zdGFuY2U6IEZhaXJ5QmlyZFBpcGVNYW5nZXIgPSBudWxsO1xyXG4gICAgcHVibGljIHN0YXRpYyBnZXQgaW5zdGFuY2UoKTogRmFpcnlCaXJkUGlwZU1hbmdlciB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2luc3RhbmNlO1xyXG4gICAgfVxyXG5cclxuICAgIEBwcm9wZXJ0eShQcmVmYWIpXHJcbiAgICBwdWJsaWMgcHJhZmFiOiBQcmVmYWI7XHJcblxyXG4gICAgQHByb3BlcnR5KENDSW50ZWdlcilcclxuICAgIHB1YmxpYyByYXRlOiBudW1iZXIgPSAxLjU7XHJcblxyXG4gICAgcHJpdmF0ZSBfdGltZXI6IG51bWJlciA9IDA7XHJcblxyXG4gICAgcHJpdmF0ZSBfbm9kZVBvb2w6IE5vZGVQb29sO1xyXG4gICAgO1xyXG5cclxuICAgIHByb3RlY3RlZCBvbkxvYWQoKTogdm9pZCB7XHJcbiAgICAgICAgRmFpcnlCaXJkUGlwZU1hbmdlci5faW5zdGFuY2UgPSB0aGlzO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXJ0KCkge1xyXG4gICAgICAgIHRoaXMuX25vZGVQb29sID0gbmV3IE5vZGVQb29sKCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBjcmF0ZVBpcGUoKTogTm9kZSB7XHJcbiAgICAgICAgY29uc3Qgbm9kZTogTm9kZSA9IGluc3RhbnRpYXRlKHRoaXMucHJhZmFiKTtcclxuICAgICAgICByZXR1cm4gbm9kZTtcclxuICAgICAgICBpZiAodGhpcy5fbm9kZVBvb2wuc2l6ZSgpID4gMCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fbm9kZVBvb2wuZ2V0KCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgY29uc3Qgbm9kZTogTm9kZSA9IGluc3RhbnRpYXRlKHRoaXMucHJhZmFiKTtcclxuICAgICAgICAgICAgcmV0dXJuIG5vZGU7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHVwZGF0ZShkZWx0YVRpbWU6IG51bWJlcikge1xyXG4gICAgICAgIGlmIChGYWlyeUJpcmRHYW1lTWFuZ2VyLmluc3RhbmNlLmdhbWVTdGF0ZSAhPSBGYWlyeUJpcmRDb25zdC5TVEFURV9HQU1FSU5HKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5fdGltZXIgKz0gZGVsdGFUaW1lO1xyXG4gICAgICAgIGlmICh0aGlzLl90aW1lciA+PSB0aGlzLnJhdGUpIHtcclxuICAgICAgICAgICAgdGhpcy5fdGltZXIgPSAwO1xyXG4gICAgICAgICAgICBjb25zdCBwaXBlOiBOb2RlID0gdGhpcy5jcmF0ZVBpcGUoKTtcclxuICAgICAgICAgICAgdGhpcy5ub2RlLmFkZENoaWxkKHBpcGUpO1xyXG4gICAgICAgICAgICBsZXQgcCA9IHRoaXMubm9kZS5nZXRXb3JsZFBvc2l0aW9uKClcclxuICAgICAgICAgICAgbGV0IHk6IG51bWJlciA9IG1hdGgucmFuZG9tUmFuZ2VJbnQoLTEwMCwgMTQwKTtcclxuICAgICAgICAgICAgcGlwZS5zZXRXb3JsZFBvc2l0aW9uKHApO1xyXG4gICAgICAgICAgICBwaXBlLmdldENvbXBvbmVudChGYWlyeUJpcmRQaXBlKS5pbnN0YW5jZUNvaW4oKTtcclxuICAgICAgICAgICAgLy8gbGV0IHAyID0gdGhpcy5ub2RlLmdldFBvc2l0aW9uKCk7XHJcbiAgICAgICAgICAgIHBpcGUuc2V0UG9zaXRpb24oMCwgeSk7XHJcblxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgcmVsYXNlUGlwZShub2RlOiBOb2RlKTogYm9vbGVhbiB7XHJcbiAgICAgICAgaWYgKHRoaXMuX25vZGVQb29sKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX25vZGVQb29sLnB1dChub2RlKTtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgeyBfZGVjb3JhdG9yLCBDb2xsaWRlcjJELCBDb21wb25lbnQsIElucHV0LCBpbnB1dCwgSVBoeXNpY3MyRENvbnRhY3QsIG1hdGgsIE5vZGUsIFJpZ2lkQm9keTJEIH0gZnJvbSAnY2MnO1xyXG5pbXBvcnQgeyBCZWhhdmlvdXIgfSBmcm9tICcuLi9SUEcvQmVoYXZpb3VyJztcclxuaW1wb3J0IHsgRmFpcnlCaXJkQ29uc3QgfSBmcm9tICcuL0ZhaXJ5QmlyZENvbnN0JztcclxuaW1wb3J0IHsgRmFpcnlCaXJkR2FtZU1hbmdlciB9IGZyb20gJy4vRmFpcnlCaXJkR2FtZU1hbmdlcic7XHJcbmltcG9ydCB7IEZDb2luIH0gZnJvbSAnLi9GQ29pbic7XHJcbmNvbnN0IHsgY2NjbGFzcywgcHJvcGVydHkgfSA9IF9kZWNvcmF0b3I7XHJcblxyXG4vKipcclxuICogQGZpbGVOYW1lIEZCaXJkLnRzXHJcbiAqIEBhdXRob3IgemhhbmdxaW9uZ1xyXG4gKiBAZGF0ZSAyMDI1LzAxLzA5IDIwOjE1OjI2XCJcclxuICogQGRlc2NyaXB0aW9uXHJcbiAqL1xyXG5AY2NjbGFzcygnRkJpcmQnKVxyXG5leHBvcnQgY2xhc3MgRkJpcmQgZXh0ZW5kcyBCZWhhdmlvdXIge1xyXG4gICAgcHJpdmF0ZSByaWcyZDogUmlnaWRCb2R5MkQ7XHJcblxyXG4gICAgcHJpdmF0ZSByb3RhdGVTcGVlZDogbnVtYmVyID0gMzA7XHJcbiAgICBvbkxvYWQoKTogdm9pZCB7XHJcbiAgICAgICAgc3VwZXIub25Mb2FkKCk7XHJcbiAgICAgICAgdGhpcy5yaWcyZCA9IHRoaXMuZ2V0Q29tcG9uZW50KFJpZ2lkQm9keTJEKTtcclxuICAgIH1cclxuICAgIHN0YXJ0KCkge1xyXG4gICAgICAgIGlucHV0Lm9uKElucHV0LkV2ZW50VHlwZS5UT1VDSF9TVEFSVCwgdGhpcy5vblRvdWNoU3RhcnQsIHRoaXMpO1xyXG4gICAgfVxyXG5cclxuICAgIG9uRGVzdHJveSgpOiB2b2lkIHtcclxuICAgICAgICBzdXBlci5vbkRlc3Ryb3koKTtcclxuICAgICAgICBpbnB1dC5vZmYoSW5wdXQuRXZlbnRUeXBlLlRPVUNIX1NUQVJULCB0aGlzLm9uVG91Y2hTdGFydCwgdGhpcyk7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIG9uVG91Y2hTdGFydCgpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLnJpZzJkLmxpbmVhclZlbG9jaXR5ID0gbWF0aC52MigwLCAxMClcclxuICAgICAgICB0aGlzLm5vZGUuYW5nbGUgPSAzMDtcclxuICAgIH1cclxuXHJcbiAgICB1cGRhdGUoZGVsdGFUaW1lOiBudW1iZXIpIHtcclxuICAgICAgICBpZiAoRmFpcnlCaXJkR2FtZU1hbmdlci5pbnN0YW5jZS5nYW1lU3RhdGUgIT0gRmFpcnlCaXJkQ29uc3QuU1RBVEVfR0FNRUlORykge1xyXG4gICAgICAgICAgICB0aGlzLnJpZzJkLmVuYWJsZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnJpZzJkLmVuYWJsZWQgPSB0cnVlO1xyXG4gICAgICAgIHRoaXMubm9kZS5hbmdsZSAtPSB0aGlzLnJvdGF0ZVNwZWVkICogZGVsdGFUaW1lO1xyXG4gICAgICAgIGlmICh0aGlzLm5vZGUuYW5nbGUgPCAtNjApIHtcclxuICAgICAgICAgICAgdGhpcy5ub2RlLmFuZ2xlID0gLTYwO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcm90ZWN0ZWQgb25Db2xsaXNpb25FbnRlcjJEKHNlbGZDb2xsaWRlcjogQ29sbGlkZXIyRCwgb3RoZXJDb2xsaWRlcjogQ29sbGlkZXIyRCwgY29udGFjdDogSVBoeXNpY3MyRENvbnRhY3QgfCBudWxsKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKG90aGVyQ29sbGlkZXIudGFnID09IEZhaXJ5QmlyZENvbnN0LlRBR19MQU5EKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwi5ri45oiP57uT5p2fXCIpO1xyXG4gICAgICAgICAgICBGYWlyeUJpcmRHYW1lTWFuZ2VyLmluc3RhbmNlLnRyYW5zZm9ybUdhbWVTdGF0ZShGYWlyeUJpcmRDb25zdC5TVEFURV9HQU1FT1ZFUik7XHJcbiAgICAgICAgfSBlbHNlIGlmIChvdGhlckNvbGxpZGVyLnRhZyA9PSBGYWlyeUJpcmRDb25zdC5UQUdfUElQRSkge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIua4uOaIj+e7k+adn1wiKTtcclxuICAgICAgICAgICAgRmFpcnlCaXJkR2FtZU1hbmdlci5pbnN0YW5jZS50cmFuc2Zvcm1HYW1lU3RhdGUoRmFpcnlCaXJkQ29uc3QuU1RBVEVfR0FNRU9WRVIpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAob3RoZXJDb2xsaWRlci50YWcgPT0gRmFpcnlCaXJkQ29uc3QuVEFHX0NPSU4pIHtcclxuICAgICAgICAgICAgY29uc3QgZmNvaW46IEZDb2luID0gb3RoZXJDb2xsaWRlci5ub2RlLmdldENvbXBvbmVudChGQ29pbik7XHJcbiAgICAgICAgICAgIGlmIChmY29pbikge1xyXG4gICAgICAgICAgICAgICAgaWYgKGZjb2luLnR5cGUgPT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwi5ZCD5Yiw6YeR5biB5LqGXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIEZhaXJ5QmlyZEdhbWVNYW5nZXIuaW5zdGFuY2UuZ29sZCArPSAxMDtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZmNvaW4udHlwZSA9PSAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCLlkIPliLDpk7bluIHkuoZcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgRmFpcnlCaXJkR2FtZU1hbmdlci5pbnN0YW5jZS5zaWx2ZXIgKz0gNTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLnNjaGVkdWxlT25jZSgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBvdGhlckNvbGxpZGVyLm5vZGUucmVtb3ZlRnJvbVBhcmVudCgpO1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCLlkIPliLDph5HluIHkuoZcIik7XHJcbiAgICAgICAgICAgIH0sIDApXHJcblxyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgeyBfZGVjb3JhdG9yLCBDQ0ludGVnZXIsIENvbXBvbmVudCwgTm9kZSwgVmVjMyB9IGZyb20gJ2NjJztcclxuaW1wb3J0IHsgRmFpcnlCaXJkR2FtZU1hbmdlciB9IGZyb20gJy4vRmFpcnlCaXJkR2FtZU1hbmdlcic7XHJcbmltcG9ydCB7IEZhaXJ5QmlyZENvbnN0IH0gZnJvbSAnLi9GYWlyeUJpcmRDb25zdCc7XHJcbmNvbnN0IHsgY2NjbGFzcywgcHJvcGVydHkgfSA9IF9kZWNvcmF0b3I7XHJcblxyXG5AY2NjbGFzcygnRkJNb3ZlQmcnKVxyXG5leHBvcnQgY2xhc3MgRkJNb3ZlQmcgZXh0ZW5kcyBDb21wb25lbnQge1xyXG4gICAgQHByb3BlcnR5KE5vZGUpXHJcbiAgICBwdWJsaWMgb2JqMTogTm9kZSA9IG51bGw7XHJcbiAgICBAcHJvcGVydHkoTm9kZSlcclxuICAgIHB1YmxpYyBvYmoyOiBOb2RlID0gbnVsbDtcclxuICAgIHByaXZhdGUgbW92ZURpc3RhbmNlOiBudW1iZXIgPSAwO1xyXG4gICAgc3RhcnQoKSB7XHJcbiAgICAgICAgdGhpcy5tb3ZlRGlzdGFuY2UgPSBGYWlyeUJpcmRHYW1lTWFuZ2VyLmluc3RhbmNlLm1vdmVTcGVlZDtcclxuICAgIH1cclxuXHJcbiAgICB1cGRhdGUoZGVsdGFUaW1lOiBudW1iZXIpIHtcclxuICAgICAgICBpZiAoRmFpcnlCaXJkR2FtZU1hbmdlci5pbnN0YW5jZS5nYW1lU3RhdGUgIT0gRmFpcnlCaXJkQ29uc3QuU1RBVEVfR0FNRUlORykge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxldCBwMTogVmVjMyA9IHRoaXMub2JqMS5nZXRQb3NpdGlvbigpO1xyXG4gICAgICAgIGxldCBwMjogVmVjMyA9IHRoaXMub2JqMi5nZXRQb3NpdGlvbigpO1xyXG5cclxuICAgICAgICB0aGlzLm9iajEuc2V0UG9zaXRpb24ocDEueCAtIHRoaXMubW92ZURpc3RhbmNlICogZGVsdGFUaW1lLCBwMS55KTtcclxuICAgICAgICB0aGlzLm9iajIuc2V0UG9zaXRpb24ocDIueCAtIHRoaXMubW92ZURpc3RhbmNlICogZGVsdGFUaW1lLCBwMi55KTtcclxuXHJcbiAgICAgICAgcDEgPSB0aGlzLm9iajEuZ2V0UG9zaXRpb24oKTtcclxuICAgICAgICBpZiAocDEueCA8IC0xMzM1KSB7XHJcbiAgICAgICAgICAgIHAyID0gdGhpcy5vYmoyLmdldFBvc2l0aW9uKCk7XHJcbiAgICAgICAgICAgIHRoaXMub2JqMS5zZXRQb3NpdGlvbihwMi54ICsgMTMzNCwgcDIueSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHAyID0gdGhpcy5vYmoyLmdldFBvc2l0aW9uKCk7XHJcbiAgICAgICAgaWYgKHAyLnggPCAtMTMzNSkge1xyXG4gICAgICAgICAgICBwMSA9IHRoaXMub2JqMS5nZXRQb3NpdGlvbigpO1xyXG4gICAgICAgICAgICB0aGlzLm9iajIuc2V0UG9zaXRpb24ocDEueCArIDEzMzQsIHAxLnkpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG4iLCJpbXBvcnQgeyBfZGVjb3JhdG9yLCBDb21wb25lbnQsIG1hdGgsIE5vZGUsIFNwcml0ZSwgU3ByaXRlRnJhbWUgfSBmcm9tICdjYyc7XHJcbmNvbnN0IHsgY2NjbGFzcywgcHJvcGVydHkgfSA9IF9kZWNvcmF0b3I7XHJcblxyXG4vKipcclxuICogQGZpbGVOYW1lIEZDb2luLnRzXHJcbiAqIEBhdXRob3IgemhhbmdxaW9uZ1xyXG4gKiBAZGF0ZSAyMDI1LzAxLzA5IDIwOjQ4OjU3XCJcclxuICogQGRlc2NyaXB0aW9uXHJcbiAqL1xyXG5AY2NjbGFzcygnRkNvaW4nKVxyXG5leHBvcnQgY2xhc3MgRkNvaW4gZXh0ZW5kcyBDb21wb25lbnQge1xyXG4gICAgQHByb3BlcnR5KFtTcHJpdGVGcmFtZV0pXHJcbiAgICBzcHJpdGVGcmFtZXM6IFNwcml0ZUZyYW1lW10gPSBbXTtcclxuXHJcbiAgICBwdWJsaWMgdHlwZTogbnVtYmVyID0gMDtcclxuICAgIHN0YXJ0KCkge1xyXG4gICAgICAgIHRoaXMudHlwZSA9IG1hdGgucmFuZG9tUmFuZ2VJbnQoMCwgMik7XHJcbiAgICAgICAgdGhpcy5ub2RlLmdldENvbXBvbmVudChTcHJpdGUpLnNwcml0ZUZyYW1lID0gdGhpcy5zcHJpdGVGcmFtZXNbdGhpcy50eXBlXTtcclxuICAgIH1cclxuXHJcbiAgICB1cGRhdGUoZGVsdGFUaW1lOiBudW1iZXIpIHtcclxuXHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgSGFzaE1hcCB9IGZyb20gXCIuLi8uLi8uLi9Db21tb24vbWFwcy9IYXNoTWFwXCI7XHJcbmltcG9ydCB7IEFGS0dhbWVDb25maWdWbyB9IGZyb20gXCIuLi92b3MvQUZLR2FtZUNvbmZpZ1ZvXCI7XHJcbmltcG9ydCB7IEhlcm9Db25maWdWbyB9IGZyb20gXCIuLi92b3MvSGVyb0NvbmZpZ1ZvXCI7XHJcbmltcG9ydCB7IFNraWxsQ29uZmlnVm8gfSBmcm9tIFwiLi4vdm9zL1NraWxsQ29uZmlnVm9cIjtcclxuXHJcbi8qKlxyXG4gKiBAZmlsZU5hbWUgRmlnaHRDb25maWcudHNcclxuICogQGF1dGhvciB6aGFuZ3Fpb25nXHJcbiAqIEBkYXRlIDIwMjQvMTIvMzEgMTk6NDE6MzRcIlxyXG4gKiBAZGVzY3JpcHRpb25cclxuICovXHJcbmV4cG9ydCBjbGFzcyBGaWdodENvbmZpZyB7XHJcbiAgICBwcml2YXRlIHN0YXRpYyBfaW5zdGFuY2U6IEZpZ2h0Q29uZmlnO1xyXG4gICAgcHVibGljIHN0YXRpYyBnZXQgaW5zdGFuY2UoKTogRmlnaHRDb25maWcge1xyXG4gICAgICAgIGlmICghdGhpcy5faW5zdGFuY2UpIHtcclxuICAgICAgICAgICAgdGhpcy5faW5zdGFuY2UgPSBuZXcgRmlnaHRDb25maWcoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2luc3RhbmNlO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgX2hlcm9NYXA6IEhhc2hNYXA8bnVtYmVyLCBIZXJvQ29uZmlnVm8+O1xyXG4gICAgcHJpdmF0ZSBfc2tpbHNNYXA6IEhhc2hNYXA8bnVtYmVyLCBTa2lsbENvbmZpZ1ZvPjtcclxuXHJcbiAgICBwcml2YXRlIF9nYW1lQ29uZmlnT2JqOiBBRktHYW1lQ29uZmlnVm87XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICB0aGlzLl9oZXJvTWFwID0gbmV3IEhhc2hNYXA8bnVtYmVyLCBIZXJvQ29uZmlnVm8+KCk7XHJcbiAgICAgICAgdGhpcy5fc2tpbHNNYXAgPSBuZXcgSGFzaE1hcDxudW1iZXIsIFNraWxsQ29uZmlnVm8+KCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGluaXQoY29uZmlnOiBBRktHYW1lQ29uZmlnVm8pOiB2b2lkIHtcclxuICAgICAgICB0aGlzLl9nYW1lQ29uZmlnT2JqID0gY29uZmlnO1xyXG4gICAgICAgIGNvbnN0IGhlcm9zID0gY29uZmlnLmhlcm9zO1xyXG4gICAgICAgIGZvciAoY29uc3Qga2V5IGluIGhlcm9zKSB7XHJcbiAgICAgICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoaGVyb3MsIGtleSkpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGVsZW1lbnQ6IEhlcm9Db25maWdWbyA9IGhlcm9zW2tleV07XHJcbiAgICAgICAgICAgICAgICBjb25zdCBoaWQ6IG51bWJlciA9IE51bWJlcihrZXkpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5faGVyb01hcC5wdXQoaGlkLCBlbGVtZW50KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3Qgc2tpbGxzID0gY29uZmlnLnNraWxscztcclxuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBza2lsbHMpIHtcclxuICAgICAgICAgICAgbGV0IHNraWxsQ29uZmlnOiBTa2lsbENvbmZpZ1ZvID0gc2tpbGxzW2tleV07XHJcbiAgICAgICAgICAgIHRoaXMuX3NraWxzTWFwLnB1dChza2lsbENvbmZpZy5za2lsbElkLCBza2lsbENvbmZpZyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXRTa2lsbENvbmZpZ3MoKTogU2tpbGxDb25maWdWb1tdIHtcclxuICAgICAgICBpZiAoIXRoaXMuX3NraWxzTWFwKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBbXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3NraWxzTWFwLnZhbHVlcygpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXRTa2lsbENvbmZpZyhza2lsbElkOiBudW1iZXIpOiBTa2lsbENvbmZpZ1ZvIHtcclxuICAgICAgICBpZiAoIXRoaXMuX3NraWxzTWFwKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcy5fc2tpbHNNYXAuZ2V0KHNraWxsSWQpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXRIZXJvQ29uZmlncygpOiBIZXJvQ29uZmlnVm9bXSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLl9oZXJvTWFwKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBbXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2hlcm9NYXAudmFsdWVzKCk7XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgZ2V0SGVyb0NvbmZpZyhoaWQ6IG51bWJlcik6IEhlcm9Db25maWdWbyB7XHJcbiAgICAgICAgaWYgKCF0aGlzLl9oZXJvTWFwKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcy5faGVyb01hcC5nZXQoaGlkKTtcclxuICAgIH1cclxufSIsImltcG9ydCB7IFNraW5JbmZvIH0gZnJvbSBcImNjXCI7XHJcbmltcG9ydCB7IEZpZ2h0Q29uZmlnIH0gZnJvbSBcIi4uL2ZpZ2h0L0ZpZ2h0Q29uZmlnXCI7XHJcbmltcG9ydCB7IEhlcm9Db25maWdWbyB9IGZyb20gXCIuLi92b3MvSGVyb0NvbmZpZ1ZvXCI7XHJcbmltcG9ydCB7IFNraWxsQ29uZmlnVm8gfSBmcm9tIFwiLi4vdm9zL1NraWxsQ29uZmlnVm9cIjtcclxuaW1wb3J0IHsgRW50aXR5SW5mbyB9IGZyb20gXCIuL0VudGl0eUluZm9cIjtcclxuaW1wb3J0IHsgRmlnaHRTa2lsbEdyb3VwSW5mbyB9IGZyb20gXCIuL0ZpZ2h0U2tpbGxHcm91cEluZm9cIjtcclxuaW1wb3J0IHsgRmlnaHRTa2lsbEluZm8gfSBmcm9tIFwiLi9GaWdodFNraWxsSW5mb1wiO1xyXG5pbXBvcnQgeyBGaWdodE1nciB9IGZyb20gXCIuLi9maWdodC9GaWdodE1nclwiO1xyXG5cclxuLyoqXHJcbiAqIEBmaWxlTmFtZSBGaWdodEhlcm9JbmZvLnRzXHJcbiAqIEBhdXRob3IgemhhbmdxaW9uZ1xyXG4gKiBAZGF0ZSAyMDI0LzEyLzI2IDE5OjQzOjEwXCJcclxuICogQGRlc2NyaXB0aW9uXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgRmlnaHRIZXJvSW5mbyBleHRlbmRzIEVudGl0eUluZm8ge1xyXG5cclxuICAgIHB1YmxpYyBwbGF5ZXJJZDogbnVtYmVyID0gMDtcclxuXHJcbiAgICBwdWJsaWMgc3BpbmVJZDogbnVtYmVyID0gMDtcclxuXHJcbiAgICBwdWJsaWMgY2FtcDogbnVtYmVyID0gMDtcclxuICAgIHB1YmxpYyBzaXRlOiBudW1iZXIgPSAwO1xyXG5cclxuICAgIHB1YmxpYyBocDogbnVtYmVyID0gMDtcclxuICAgIHB1YmxpYyBub3JtYWxNYXhIcDogbnVtYmVyID0gMDtcclxuICAgIHByaXZhdGUgX21heEhwOiBudW1iZXIgPSAwO1xyXG5cclxuICAgIG1wOiBudW1iZXIgPSAwO1xyXG4gICAgbWF4TXA6IG51bWJlciA9IDEwMDA7XHJcblxyXG5cclxuICAgIHNoaWVsZDogbnVtYmVyID0gMDtcclxuICAgIHNoaWVsZE1heDogbnVtYmVyID0gMDtcclxuXHJcbiAgICBwdWJsaWMgaGVyb0NvbmZpZzogSGVyb0NvbmZpZ1ZvO1xyXG5cclxuICAgIHB1YmxpYyBmaWdodFNraWxsczogRmlnaHRTa2lsbEdyb3VwSW5mbztcclxuXHJcbiAgICBwdWJsaWMgc2V0RGF0YShwbGF5ZXJJZDogbnVtYmVyLCBkYXRhOiBIZXJvQ29uZmlnVm8sIHR5cGU6IG51bWJlciA9IDEpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLnBsYXllcklkID0gcGxheWVySWQ7XHJcbiAgICAgICAgdGhpcy5oZXJvQ29uZmlnID0gZGF0YTtcclxuICAgICAgICB0aGlzLm5vcm1hbE1heEhwID0gZGF0YS5tYXhIcDtcclxuICAgICAgICB0aGlzLmhwID0gZGF0YS5tYXhIcDtcclxuICAgICAgICB0aGlzLm1heE1wID0gZGF0YS5tYXhNcDtcclxuICAgICAgICB0aGlzLmNhbXAgPSBkYXRhLmNvbXA7XHJcbiAgICAgICAgdGhpcy5zaXRlID0gZGF0YS5zaXRlO1xyXG4gICAgICAgIHRoaXMuc2V0RW50aXR5SWQocGxheWVySWQsIHR5cGUsIGRhdGEuc3BpbmVJZClcclxuICAgICAgICB0aGlzLnNwaW5lSWQgPSBkYXRhLnNwaW5lSWQ7XHJcbiAgICAgICAgdGhpcy5maWdodFNraWxscyA9IG5ldyBGaWdodFNraWxsR3JvdXBJbmZvKCk7XHJcbiAgICAgICAgY29uc3Qgc2tpbGxJZHM6IG51bWJlcltdID0gZGF0YS5za2lsbElkcztcclxuICAgICAgICBjb25zdCBza2lsbEluZm9zOiBGaWdodFNraWxsSW5mb1tdID0gW107XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBza2lsbElkcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBjb25zdCBpZDogbnVtYmVyID0gc2tpbGxJZHNbaV07XHJcbiAgICAgICAgICAgIGNvbnN0IHNraWxsQ29uZmlnVm86IFNraWxsQ29uZmlnVm8gPSBGaWdodENvbmZpZy5pbnN0YW5jZS5nZXRTa2lsbENvbmZpZyhpZCk7XHJcbiAgICAgICAgICAgIGNvbnN0IHNraWxsSW5mbzogRmlnaHRTa2lsbEluZm8gPSBuZXcgRmlnaHRTa2lsbEluZm8oKTtcclxuICAgICAgICAgICAgc2tpbGxJbmZvLnNldERhdGEoc2tpbGxDb25maWdWbyk7XHJcbiAgICAgICAgICAgIHNraWxsSW5mb3MucHVzaChza2lsbEluZm8pO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmZpZ2h0U2tpbGxzLmFkZChza2lsbEluZm9zKTtcclxuXHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKirkuIrpmZDnmoTooYDmnaEgKi9cclxuICAgIHB1YmxpYyBzZXQgbWF4SHAoaHA6IG51bWJlcikge1xyXG4gICAgICAgIHRoaXMuX21heEhwID0gaHA7XHJcbiAgICB9XHJcblxyXG4gICAgLyoq6I635Y+W5oC76KGA6YeP77yM5YyF5ousQlVGRueahCAqL1xyXG4gICAgcHVibGljIGdldCBtYXhIcCgpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiBNYXRoLm1heCh0aGlzLm5vcm1hbE1heEhwICsgdGhpcy5fbWF4SHAsIDEpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKirmgaLlpI1NUCAqL1xyXG4gICAgcHVibGljIGFkZE1wKG1wOiBudW1iZXIpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLm1wICs9IG1wO1xyXG4gICAgICAgIHRoaXMubXAgPSBNYXRoLm1heChNYXRoLm1pbih0aGlzLm1wLCB0aGlzLm1heE1wKSwgMCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqKuS9v+eUqE1QICovXHJcbiAgICBwdWJsaWMgdXNlTXAoKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKCFGaWdodE1nci5pbnN0YW5jZS5pc0VuZClcclxuICAgICAgICAgICAgdGhpcy5tcCA9IDA7XHJcbiAgICB9XHJcblxyXG59IiwiaW1wb3J0IHsgR2FtZSwgcmFuZG9tLCByYW5kb21SYW5nZUludCB9IGZyb20gXCJjY1wiO1xyXG5pbXBvcnQgeyBIYW5kbGVyIH0gZnJvbSBcIi4uLy4uLy4uL0NvbW1vbi9IYW5kbGVyXCI7XHJcbmltcG9ydCBNYXRoVXRpbHMgZnJvbSBcIi4uLy4uLy4uL0NvbW1vbi9NYXRoVXRpbHNcIjtcclxuaW1wb3J0IHsgRmlnaHRSb2xlRW50aXR5IH0gZnJvbSBcIi4vRmlnaHRSb2xlRW50aXR5XCI7XHJcbmltcG9ydCB7IEZpbmRUYXJnZXRJbmZvIH0gZnJvbSBcIi4uL2luZm9zL0ZpbmRUYXJnZXRJbmZvXCI7XHJcbmltcG9ydCB7IEdhbWVDb25zdCB9IGZyb20gXCIuLi9HYW1lQ29uc3RcIjtcclxuaW1wb3J0IHsgRmlnaHRVdGlsIH0gZnJvbSBcIi4vRmlnaHRVdGlsXCI7XHJcbmltcG9ydCB7IHZpZXdNYW5hZ2VyIH0gZnJvbSBcIi4uLy4uLy4uL3VpL1ZpZXdNYW5hZ2VyXCI7XHJcbmltcG9ydCB7IFBhbmVsVHlwZSB9IGZyb20gXCIuLi8uLi8uLi91aS9QYW5lbEVudW1cIjtcclxuXHJcbi8qKlxyXG4gKiBAZmlsZU5hbWUgRmlnaHRNZ3IudHNcclxuICogQGF1dGhvciB6aGFuZ3Fpb25nXHJcbiAqIEBkYXRlIDIwMjQvMTIvMjcgMTk6NTA6MzVcIlxyXG4gKiBAZGVzY3JpcHRpb25cclxuICovXHJcbmV4cG9ydCBjbGFzcyBGaWdodE1nciB7XHJcbiAgICBwcml2YXRlIHN0YXRpYyBfaW5zdGFuY2U6IEZpZ2h0TWdyID0gbnVsbDtcclxuICAgIHB1YmxpYyBzdGF0aWMgZ2V0IGluc3RhbmNlKCk6IEZpZ2h0TWdyIHtcclxuICAgICAgICBpZiAoIXRoaXMuX2luc3RhbmNlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2luc3RhbmNlID0gbmV3IEZpZ2h0TWdyKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzLl9pbnN0YW5jZTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZmlnaHRUaW1lOiBudW1iZXIgPSAwO1xyXG5cclxuICAgIHByaXZhdGUgZW50aXR5czogRmlnaHRSb2xlRW50aXR5W10gPSBbXTtcclxuXHJcbiAgICAvKioq5q275Lqh5a6e5L2T6aG65bqP6KGoICovXHJcbiAgICBwcml2YXRlIGRpZUVudGl0eXM6IEZpZ2h0Um9sZUVudGl0eVtdID0gW107XHJcblxyXG4gICAgcHJpdmF0ZSBmaWdodEVuZDogSGFuZGxlciA9IG51bGw7XHJcblxyXG4gICAgcHVibGljIHJlc2V0KCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuZGllRW50aXR5cyA9IFtdO1xyXG4gICAgICAgIHRoaXMuZW50aXR5cyA9IFtdO1xyXG4gICAgICAgIHRoaXMuZmlnaHRUaW1lID0gMDtcclxuICAgICAgICB0aGlzLmlzRW5kID0gZmFsc2U7XHJcblxyXG4gICAgfVxyXG5cclxuXHJcbiAgICBwdWJsaWMgaXNFbmQ6IGJvb2xlYW4gPSBmYWxzZTtcclxuXHJcbiAgICBwdWJsaWMgc2VlZDogbnVtYmVyID0gNTtcclxuICAgIHB1YmxpYyBpbml0U2VlZDogbnVtYmVyID0gNTtcclxuXHJcbiAgICBwdWJsaWMgaW5kZXg6IG51bWJlciA9IDA7XHJcbiAgICBwdWJsaWMgc2V0UmFuZG9tU2VlZChzZWVkOiBudW1iZXIpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLmluaXRTZWVkID0gc2VlZDtcclxuICAgIH1cclxuICAgIHB1YmxpYyByZXNSYW5kb21TZWVkKCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuc2VlZCA9IHRoaXMuaW5pdFNlZWQ7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGxvZ1JhbmRvbUFycjogbnVtYmVyW10gPSBbXTtcclxuICAgIHB1YmxpYyBzZWVkUmFuZG9tKCk6IG51bWJlciB7XHJcbiAgICAgICAgaWYgKHRoaXMubG9nUmFuZG9tQXJyLmxlbmd0aCA8IDMwKSB7XHJcbiAgICAgICAgICAgIHRoaXMubG9nUmFuZG9tQXJyLnB1c2godGhpcy5zZWVkKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5zZWVkID09ICh0aGlzLnNlZWQgKiA5MzAxICsgNDkyOTcpICUgMjMzMjgwO1xyXG4gICAgICAgIGxldCByOiBudW1iZXIgPSB0aGlzLnNlZWQgLyAyMzMzMjgwLjA7XHJcbiAgICAgICAgcmV0dXJuIHI7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHJhbmRvbUludChtaW46IG51bWJlciwgbWF4OiBudW1iZXIgPSAwLCBzdHBlTGVuOiBudW1iZXIgPSAxKTogbnVtYmVyIHtcclxuICAgICAgICBpZiAobWluID4gbWF4KSB7XHJcbiAgICAgICAgICAgIGxldCB0ZW1wOiBudW1iZXIgPSBtaW47XHJcbiAgICAgICAgICAgIG1pbiA9IG1heDtcclxuICAgICAgICAgICAgbWF4ID0gdGVtcDtcclxuICAgICAgICB9XHJcbiAgICAgICAgbGV0IGRlbHRhUmFuZ2U6IG51bWJlciA9IChtYXggLSBtaW4pICsgKDEgKiBzdHBlTGVuKTtcclxuICAgICAgICBsZXQgcmFuZG9tTnVtOiBudW1iZXIgPSB0aGlzLnNlZWRSYW5kb20oKSAqIGRlbHRhUmFuZ2U7XHJcbiAgICAgICAgcmV0dXJuIE1hdGguZmxvb3IocmFuZG9tTnVtIC8gc3RwZUxlbikgKiBzdHBlTGVuO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBpc1JhbmRUcnVlKHJhdGU6IG51bWJlcik6IGJvb2xlYW4ge1xyXG4gICAgICAgIGxldCByYW5kb206IG51bWJlciA9IHRoaXMucmFuZG9tSW50KDAsIDEwMDAwKTtcclxuICAgICAgICByZXR1cm4gcmFuZG9tIDw9IHJhdGU7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHJhbmRvbVByb2JhYmlsaXR5KGFycmF5OiBudW1iZXJbXSk6IG51bWJlciB7XHJcbiAgICAgICAgbGV0IHN1bTogbnVtYmVyID0gMDtcclxuICAgICAgICBsZXQgdGVtcDogbnVtYmVyW10gPSBbXTtcclxuICAgICAgICBmb3IgKGxldCBpOiBudW1iZXIgPSAwOyBpIDwgYXJyYXkubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgc3VtICs9IGFycmF5W2ldO1xyXG4gICAgICAgICAgICB0ZW1wLnB1c2goc3VtKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHN1bSA9PSAwKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAwO1xyXG4gICAgICAgIH1cclxuICAgICAgICBsZXQgYTogbnVtYmVyO1xyXG4gICAgICAgIGRvIHtcclxuICAgICAgICAgICAgYSA9IHRoaXMucmFuZG9tSW50KDAsIHN1bSk7XHJcbiAgICAgICAgfSB3aGlsZSAoYSA9PSAwKTtcclxuICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHRlbXAubGVuZ3RoOyBqKyspIHtcclxuICAgICAgICAgICAgaWYgKGEgPiB0ZW1wW2pdKSB7XHJcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gajtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHJhbmRvbUFycmF5PFQ+KGFycmF5OiBUW10pOiBUW10ge1xyXG4gICAgICAgIGNvbnN0IGNsb25lQXJyYXk6IFRbXSA9IGFycmF5LmNvbmNhdCgpO1xyXG4gICAgICAgIGxldCBsZW5nOiBudW1iZXIgPSBjbG9uZUFycmF5Lmxlbmd0aDtcclxuICAgICAgICBmb3IgKGxldCBpOiBudW1iZXIgPSAwOyBpIDwgbGVuZzsgaSsrKSB7XHJcbiAgICAgICAgICAgIGxldCBpbmRleDogbnVtYmVyID0gTWF0aC5mbG9vcih0aGlzLnNlZWRSYW5kb20oKSAqIGNsb25lQXJyYXkubGVuZ3RoKTtcclxuICAgICAgICAgICAgbGV0IHRlbXA6IFQgPSBjbG9uZUFycmF5W2luZGV4XTtcclxuICAgICAgICAgICAgY2xvbmVBcnJheVtpbmRleF0gPSBjbG9uZUFycmF5W2ldO1xyXG4gICAgICAgICAgICBjbG9uZUFycmF5W2ldID0gdGVtcDtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGNsb25lQXJyYXk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGFkZEVudGl0eShlbnRpdHk6IEZpZ2h0Um9sZUVudGl0eSk6IHZvaWQge1xyXG4gICAgICAgIGVudGl0eS5pc1JlbW92ZVRpbWUgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLmVudGl0eXMucHVzaChlbnRpdHkpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyByZW1vdmVFbnRpdHkoZW50aXR5OiBGaWdodFJvbGVFbnRpdHkpOiB2b2lkIHtcclxuICAgICAgICBlbnRpdHkuaXNSZW1vdmVUaW1lID0gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0RW50aXR5cygpOiBGaWdodFJvbGVFbnRpdHlbXSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZW50aXR5cztcclxuICAgIH1cclxuXHJcbiAgICAvKirlrp7kvZPmrbvkuqEgKi9cclxuICAgIHB1YmxpYyBlbnRpdHlUb0RpZShlOiBGaWdodFJvbGVFbnRpdHkpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLmFkZERpZUVudGl0eShlKTtcclxuICAgIH1cclxuXHJcbiAgICAvKioq5aKe5Yqg5q275Lqh5a6e5L2TICovXHJcbiAgICBwdWJsaWMgYWRkRGllRW50aXR5KGU6IEZpZ2h0Um9sZUVudGl0eSk6IHZvaWQge1xyXG4gICAgICAgIGUuaXNSZW1vdmVUaW1lID0gdHJ1ZTtcclxuICAgICAgICBpZiAodGhpcy5kaWVFbnRpdHlzLmluZGV4T2YoZSkgPT0gLTEpIHtcclxuICAgICAgICAgICAgdGhpcy5kaWVFbnRpdHlzLnB1c2goZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzdGFydChmaWdodEVuZDogSGFuZGxlcik6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuZmlnaHRFbmQgPSBmaWdodEVuZDtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuZW50aXR5cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBjb25zdCBlbGVtZW50ID0gdGhpcy5lbnRpdHlzW2ldO1xyXG5cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBkb0FjdGl2ZVNraWxsU3RvcEhhbmRsZXIoKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNFbmQ7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGRvRnJhbWVIYW5kbGVyKCk6IG51bWJlciB7XHJcbiAgICAgICAgbGV0IGVuZW15TnVtOiBudW1iZXIgPSAwO1xyXG4gICAgICAgIGxldCBoZXJvTnVtOiBudW1iZXIgPSAwO1xyXG4gICAgICAgIGlmICghdGhpcy5kb0FjdGl2ZVNraWxsU3RvcEhhbmRsZXIoKSkge1xyXG4gICAgICAgICAgICB0aGlzLmluZGV4Kys7XHJcblxyXG4gICAgICAgICAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgdGhpcy5lbnRpdHlzLmxlbmd0aDsgaW5kZXgrKykge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZWxlbWVudCA9IHRoaXMuZW50aXR5c1tpbmRleF07XHJcbiAgICAgICAgICAgICAgICBsZXQgaXNNdXN0QWN0aXZlU2tpbGw6IGJvb2xlYW4gPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIGlmICghZWxlbWVudC5pc1JlbW92ZVRpbWUpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZWxlbWVudC5jaGVja05leHRGcmFtZSgpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuY2hlY2soaXNNdXN0QWN0aXZlU2tpbGwpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAoZWxlbWVudC5kYXRhLmNhbXAgPT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBoZXJvTnVtKys7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZW5lbXlOdW0rKztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChlbmVteU51bSA9PSAwICYmIGhlcm9OdW0gPiAwKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaXNFbmQgPSB0cnVlO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgdGhpcy5lbnRpdHlzLmxlbmd0aDsgaW5kZXgrKykge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZWxlbWVudCA9IHRoaXMuZW50aXR5c1tpbmRleF07XHJcbiAgICAgICAgICAgICAgICBpZiAoIWVsZW1lbnQuaXNSZW1vdmVUaW1lKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5zZXRJc1dpbih0cnVlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFwi6LWi5LqGXCIpO1xyXG4gICAgICAgICAgICB2aWV3TWFuYWdlci5vcGVuKFBhbmVsVHlwZS5BRktSZXN1bHRQYW5lbCwgdHJ1ZSk7XHJcbiAgICAgICAgfSBlbHNlIGlmIChoZXJvTnVtID09IDAgJiYgZW5lbXlOdW0gPiAwKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaXNFbmQgPSB0cnVlO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgdGhpcy5lbnRpdHlzLmxlbmd0aDsgaW5kZXgrKykge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZWxlbWVudCA9IHRoaXMuZW50aXR5c1tpbmRleF07XHJcbiAgICAgICAgICAgICAgICBpZiAoIWVsZW1lbnQuaXNSZW1vdmVUaW1lKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5zZXRJc1dpbih0cnVlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFwi6L6T5LqGXCIpO1xyXG4gICAgICAgICAgICB2aWV3TWFuYWdlci5vcGVuKFBhbmVsVHlwZS5BRktSZXN1bHRQYW5lbCwgZmFsc2UpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gMDtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0Q2FuU2VsZWN0RW50aXR5cygpOiBGaWdodFJvbGVFbnRpdHlbXSB7XHJcbiAgICAgICAgbGV0IHJlc3VsdHM6IEZpZ2h0Um9sZUVudGl0eVtdID0gW107XHJcbiAgICAgICAgbGV0IGNoZWNrRW50aXR5czogRmlnaHRSb2xlRW50aXR5W10gPSB0aGlzLmVudGl0eXMuY29uY2F0KCk7XHJcbiAgICAgICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IGNoZWNrRW50aXR5cy5sZW5ndGg7IGluZGV4KyspIHtcclxuICAgICAgICAgICAgY29uc3QgZWxlbWVudCA9IGNoZWNrRW50aXR5c1tpbmRleF07XHJcbiAgICAgICAgICAgIGlmIChlbGVtZW50LmNhblNlbGVjdCgpICYmICFlbGVtZW50LmlzUmVtb3ZlVGltZSkge1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0cy5wdXNoKGVsZW1lbnQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXN1bHRzO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBmaW5kTWFpbkVudGl0eShmcm9tOiBGaWdodFJvbGVFbnRpdHksIHRhcmdldFR5cGU6IG51bWJlciwgaXNQYWljaHVOb3RTZWxlY3Q6IG51bWJlciA9IDApOiBGaWdodFJvbGVFbnRpdHlbXSB7XHJcbiAgICAgICAgbGV0IGFycjogRmlnaHRSb2xlRW50aXR5W10gPSBbXVxyXG4gICAgICAgIGxldCBlbnRpdHlzOiBGaWdodFJvbGVFbnRpdHlbXSA9IHRoaXMuZ2V0Q2FuU2VsZWN0RW50aXR5cygpO1xyXG4gICAgICAgIGxldCBmaW5kSW5mbzogRmluZFRhcmdldEluZm8gPSBuZXcgRmluZFRhcmdldEluZm8oKVxyXG4gICAgICAgIGZpbmRJbmZvLmVuZW15cyA9IGVudGl0eXNcclxuICAgICAgICBmaW5kSW5mby5mb3JtID0gZnJvbVxyXG4gICAgICAgIC8vIGZpbmRJbmZvLnN1bW1vbiA9IDFcclxuICAgICAgICBmaW5kSW5mby50eXBlID0gMVxyXG4gICAgICAgIGZpbmRJbmZvLmlzUGFpQ2h1Tm90U2VsZWN0ID0gaXNQYWljaHVOb3RTZWxlY3RcclxuXHJcbiAgICAgICAgc3dpdGNoICh0YXJnZXRUeXBlKSB7XHJcbiAgICAgICAgICAgIGNhc2UgR2FtZUNvbnN0Lk1haW5fSnVMaVp1aUppbjpcclxuICAgICAgICAgICAgICAgIGFyciA9IEZpZ2h0VXRpbC5pbnN0YW5jZS5maW5kTGF0ZWx5T3JGYXJFbnRpdHkodHJ1ZSwgZmluZEluZm8pO1xyXG4gICAgICAgICAgICAgICAgYnJlYWtcclxuICAgICAgICAgICAgY2FzZSBHYW1lQ29uc3QuTWFpbl9KdUxpWnVpWXVhbjpcclxuICAgICAgICAgICAgICAgIGFyciA9IEZpZ2h0VXRpbC5pbnN0YW5jZS5maW5kTGF0ZWx5T3JGYXJFbnRpdHkoZmFsc2UsIGZpbmRJbmZvKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrXHJcbiAgICAgICAgICAgIGNhc2UgR2FtZUNvbnN0Lk1haW5fWHVlQmFpRmVuWnVpRGk6XHJcbiAgICAgICAgICAgICAgICBhcnIgPSBGaWdodFV0aWwuaW5zdGFuY2UuZmluZExvd0hwRW50aXR5KHRydWUsIGZpbmRJbmZvKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrXHJcbiAgICAgICAgICAgIGNhc2UgR2FtZUNvbnN0Lk1haW5fWHVlQmFpRmVuWnVpR2FvOlxyXG4gICAgICAgICAgICAgICAgYXJyID0gRmlnaHRVdGlsLmluc3RhbmNlLmZpbmRMb3dIcEVudGl0eShmYWxzZSwgZmluZEluZm8pO1xyXG4gICAgICAgICAgICAgICAgYnJlYWtcclxuICAgICAgICAgICAgY2FzZSBHYW1lQ29uc3QuTWFpbl9DaHVTaGlEdWlDaGVuZ1dlaVpoaTpcclxuICAgICAgICAgICAgICAgIGFyciA9IEZpZ2h0VXRpbC5pbnN0YW5jZS5maW5kRHVpQ2hlbkVudGl0eShmaW5kSW5mbyk7XHJcbiAgICAgICAgICAgICAgICBicmVha1xyXG4gICAgICAgICAgICBjYXNlIEdhbWVDb25zdC5NYWluX0RhbmdRaWFuTXVCaWFvOlxyXG4gICAgICAgICAgICAgICAgLy/pu5jorqTpgInmnIDov5FcclxuICAgICAgICAgICAgICAgIGFyciA9IEZpZ2h0VXRpbC5pbnN0YW5jZS5maW5kTGF0ZWx5T3JGYXJFbnRpdHkodHJ1ZSwgZmluZEluZm8pO1xyXG4gICAgICAgICAgICAgICAgYnJlYWtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8v5rKh55uu5qCH5om+5pyA6L+RXHJcbiAgICAgICAgaWYgKGFyci5sZW5ndGggPT0gMClcclxuICAgICAgICAgICAgYXJyID0gRmlnaHRVdGlsLmluc3RhbmNlLmZpbmRMYXRlbHlPckZhckVudGl0eSh0cnVlLCBmaW5kSW5mbyk7XHJcblxyXG4gICAgICAgIHJldHVybiBhcnJcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZmluZEVudGl0eShmb3JtOiBGaWdodFJvbGVFbnRpdHksIHRhcmdldFR5cGVzOiBudW1iZXJbXSk6IEZpZ2h0Um9sZUVudGl0eVtdIHtcclxuICAgICAgICBsZXQgcmVzdWx0czogRmlnaHRSb2xlRW50aXR5W10gPSBbXTtcclxuICAgICAgICBsZXQgZW50aXR5czogRmlnaHRSb2xlRW50aXR5W10gPSB0aGlzLmdldENhblNlbGVjdEVudGl0eXMoKTtcclxuXHJcbiAgICAgICAgbGV0IGZpbmRJbmZvOiBGaW5kVGFyZ2V0SW5mbyA9IG5ldyBGaW5kVGFyZ2V0SW5mbygpO1xyXG4gICAgICAgIGZpbmRJbmZvLmVuZW15cyA9IGVudGl0eXM7XHJcbiAgICAgICAgZmluZEluZm8uZm9ybSA9IGZvcm07XHJcbiAgICAgICAgZmluZEluZm8udHlwZSA9IHRhcmdldFR5cGVzWzFdO1xyXG4gICAgICAgIGZpbmRJbmZvLm51bSA9IHRhcmdldFR5cGVzWzJdO1xyXG4gICAgICAgIGNvbnN0IHRhcmdldFR5cGU6IG51bWJlciA9IHRhcmdldFR5cGVzWzBdO1xyXG5cclxuICAgICAgICBzd2l0Y2ggKHRhcmdldFR5cGUpIHtcclxuICAgICAgICAgICAgY2FzZSBHYW1lQ29uc3QuSnVMaVp1aUppbjpcclxuICAgICAgICAgICAgICAgIHJlc3VsdHMgPSBGaWdodFV0aWwuaW5zdGFuY2UuZmluZExhdGVseU9yRmFyRW50aXR5KGZhbHNlLCBmaW5kSW5mbyk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBHYW1lQ29uc3QuSnVMaVp1aVl1YW46XHJcbiAgICAgICAgICAgICAgICByZXN1bHRzID0gRmlnaHRVdGlsLmluc3RhbmNlLmZpbmRMYXRlbHlPckZhckVudGl0eSh0cnVlLCBmaW5kSW5mbyk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBHYW1lQ29uc3QuU3VpSmlCdUtlQ2hvbmdGdTpcclxuICAgICAgICAgICAgICAgIHJlc3VsdHMgPSBGaWdodFV0aWwuaW5zdGFuY2UuZmluZFJhbmRvbUVudGl0eShmYWxzZSwgZmluZEluZm8pO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgR2FtZUNvbnN0LlN1aUppS2VDaG9uZ0Z1OlxyXG4gICAgICAgICAgICAgICAgcmVzdWx0cyA9IEZpZ2h0VXRpbC5pbnN0YW5jZS5maW5kUmFuZG9tRW50aXR5KHRydWUsIGZpbmRJbmZvKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIEdhbWVDb25zdC5DaHVTaGlEdWlDaGVuZ1dlaVpoaTpcclxuICAgICAgICAgICAgICAgIHJlc3VsdHMgPSBGaWdodFV0aWwuaW5zdGFuY2UuZmluZER1aUNoZW5FbnRpdHkoZmluZEluZm8pO1xyXG4gICAgICAgICAgICAgICAgYnJlYWtcclxuICAgICAgICAgICAgY2FzZSBHYW1lQ29uc3QuWHVlWnVpRGk6XHJcbiAgICAgICAgICAgICAgICByZXN1bHRzID0gRmlnaHRVdGlsLmluc3RhbmNlLmZpbmRMb3dIcEVudGl0eSh0cnVlLCBmaW5kSW5mbywgZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWtcclxuICAgICAgICAgICAgY2FzZSBHYW1lQ29uc3QuWHVlWnVpR2FvOlxyXG4gICAgICAgICAgICAgICAgcmVzdWx0cyA9IEZpZ2h0VXRpbC5pbnN0YW5jZS5maW5kTG93SHBFbnRpdHkoZmFsc2UsIGZpbmRJbmZvLCBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICBicmVha1xyXG5cclxuICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIC8vIGxldCBlbmVteXM6IEZpZ2h0Um9sZUVudGl0eVtdID0gW107XHJcbiAgICAgICAgLy8gZm9yIChsZXQgaTogbnVtYmVyID0gMDsgaSA8IGVudGl0eXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAvLyAgICAgbGV0IGVudGl0eTogRmlnaHRSb2xlRW50aXR5ID0gZW50aXR5c1tpXTtcclxuICAgICAgICAvLyAgICAgaWYgKGZvcm0uZGF0YS5jYW1wID09IDApIHtcclxuICAgICAgICAvLyAgICAgICAgIGlmIChlbnRpdHkuZGF0YS5jYW1wID09IDEpIHtcclxuICAgICAgICAvLyAgICAgICAgICAgICBlbmVteXMucHVzaChlbnRpdHkpXHJcbiAgICAgICAgLy8gICAgICAgICB9XHJcbiAgICAgICAgLy8gICAgIH0gZWxzZSBpZiAoZm9ybS5kYXRhLmNhbXAgPT0gMSkge1xyXG4gICAgICAgIC8vICAgICAgICAgaWYgKGVudGl0eS5kYXRhLmNhbXAgPT0gMCkge1xyXG4gICAgICAgIC8vICAgICAgICAgICAgIGVuZW15cy5wdXNoKGVudGl0eSk7XHJcbiAgICAgICAgLy8gICAgICAgICB9XHJcbiAgICAgICAgLy8gICAgIH1cclxuICAgICAgICAvLyB9XHJcbiAgICAgICAgLy8gbGV0IGluZGV4OiBudW1iZXIgPSByYW5kb21SYW5nZUludCgwLCBlbmVteXMubGVuZ3RoIC0gMSkgLy90aGlzLnJhbmRvbUludCgwLCBlbmVteXMubGVuZ3RoIC0gMSk7XHJcbiAgICAgICAgLy8gcmVzdWx0cyA9IFtlbmVteXNbaW5kZXhdXTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdHM7XHJcbiAgICB9XHJcblxyXG5cclxufSIsImltcG9ydCB7IGVycm9yLCBtYXRoLCBOb2RlLCByYW5kb21SYW5nZUludCwgc3AsIHN5cywgVmVjMyB9IGZyb20gXCJjY1wiO1xyXG5pbXBvcnQgeyBTcGluZVNrZWxldG9uIH0gZnJvbSBcIi4uLy4uLy4uL0NvbW1vbi9TcGluZVNrZWxldG9uXCI7XHJcbmltcG9ydCB7IEZpZ2h0SGVyb0luZm8gfSBmcm9tIFwiLi4vaW5mb3MvRmlnaHRIZXJvSW5mb1wiO1xyXG5pbXBvcnQgeyBFbnRpdHkgfSBmcm9tIFwiLi9FbnRpdHlcIjtcclxuaW1wb3J0IHsgR2FtZUVudGl0eSB9IGZyb20gXCIuL0dhbWVFbnRpdHlcIjtcclxuaW1wb3J0IHsgUm9sZUVudGl0eSB9IGZyb20gXCIuL1JvbGVFbnRpdHlcIjtcclxuaW1wb3J0IHsgRmlnaHRNZ3IgfSBmcm9tIFwiLi9GaWdodE1nclwiO1xyXG5pbXBvcnQgeyBGaWdodFV0aWwgfSBmcm9tIFwiLi9GaWdodFV0aWxcIjtcclxuaW1wb3J0IHsgR2FtZUNvbnN0IH0gZnJvbSBcIi4uL0dhbWVDb25zdFwiO1xyXG5pbXBvcnQgeyBGaWdodFNraWxsSW5mbyB9IGZyb20gXCIuLi9pbmZvcy9GaWdodFNraWxsSW5mb1wiO1xyXG5pbXBvcnQgeyBIZWFkQmFyIH0gZnJvbSBcIi4uL3VpL0hlYWRCYXJcIjtcclxuaW1wb3J0IEFzc2V0TWdyIGZyb20gXCIuLi8uLi8uLi9Db21tb24vQXNzZXRNZ3JcIjtcclxuaW1wb3J0IFZpZXdDb25zdCBmcm9tIFwiLi4vLi4vLi4vdWkvVmlld0NvbnN0XCI7XHJcbmltcG9ydCB7IEhhbmRsZXIgfSBmcm9tIFwiLi4vLi4vLi4vQ29tbW9uL0hhbmRsZXJcIjtcclxuXHJcbi8qKlxyXG4gKiBAZmlsZU5hbWUgRmlnaHRSb2xlRW50aXR5LnRzXHJcbiAqIEBhdXRob3IgemhhbmdxaW9uZ1xyXG4gKiBAZGF0ZSAyMDI0LzEyLzI2IDIwOjQwOjI5XCJcclxuICogQGRlc2NyaXB0aW9uXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgRmlnaHRSb2xlRW50aXR5IGV4dGVuZHMgUm9sZUVudGl0eSB7XHJcblxyXG4gICAgcHJvdGVjdGVkIGlzQUk6IGJvb2xlYW4gPSBmYWxzZTtcclxuICAgIHB1YmxpYyBpc0RpZTogYm9vbGVhbiA9IGZhbHNlO1xyXG5cclxuICAgIHByaXZhdGUgaXNGaWdodDogYm9vbGVhbiA9IGZhbHNlO1xyXG5cclxuICAgIHByaXZhdGUgc2VsZWN0VGFyZ2V0czogRmlnaHRSb2xlRW50aXR5W10gPSBbXTtcclxuXHJcbiAgICBwcm90ZWN0ZWQgc2VsZWN0TWFpblRhcmdldDogRmlnaHRSb2xlRW50aXR5ID0gbnVsbDtcclxuICAgIHB1YmxpYyBza2lsbEluZm86IEZpZ2h0U2tpbGxJbmZvID0gbnVsbDtcclxuXHJcbiAgICBwcm90ZWN0ZWQgaXNVc2VDdHJTa2lsbDogYm9vbGVhbiA9IGZhbHNlO1xyXG5cclxuICAgIHByaXZhdGUgaGVhZEJhcjogSGVhZEJhciA9IG51bGw7XHJcblxyXG4gICAgcHJpdmF0ZSBpc1dpbjogYm9vbGVhbiA9IGZhbHNlO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHN1cGVyKCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHVwZGF0ZUhlYWRQb3MoKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKHRoaXMuaGVhZEJhcikge1xyXG4gICAgICAgICAgICBsZXQgcG9zOiBWZWMzID0gdGhpcy5nZXRMb2NhdGlvbigpO1xyXG4gICAgICAgICAgICBsZXQgYm91bmRzOiBudW1iZXJbXSA9IHRoaXMuZ2V0Qm91bmRzKClcclxuICAgICAgICAgICAgY29uc3QgeDogbnVtYmVyID0gcG9zLng7XHJcbiAgICAgICAgICAgIGNvbnN0IHk6IG51bWJlciA9IHBvcy55O1xyXG4gICAgICAgICAgICBsZXQgaGVpZ2h0OiBudW1iZXIgPSBib3VuZHNbM107XHJcbiAgICAgICAgICAgIGxldCB5eTogbnVtYmVyID0gaGVpZ2h0ICsgeTtcclxuICAgICAgICAgICAgdGhpcy5oZWFkQmFyLm5vZGUuc2V0UG9zaXRpb24oeCwgeXkpO1xyXG4gICAgICAgICAgICAvLyB0aGlzLmhlYWQueSA9IHl5ICsgdGhpcy5yb2xlLnk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBhc3luYyBpbml0SGVhZEJhcigpOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgICAgICBjb25zdCBub2RlOiBOb2RlID0gYXdhaXQgQXNzZXRNZ3IuaW5zdGFuY2UuY3JlYXRlUHJlZmFiKFZpZXdDb25zdC5kZWZhdWx0UHJlZmFiUGF0aFByZWZpeCArIFwiYWZrL2hlYWRCYXJcIik7XHJcbiAgICAgICAgaWYgKCFub2RlKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwi5Yqg6L296aKE5Yi25L2T5aSx6LSlXCIpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuaGVhZEJhciA9IG5vZGUuZ2V0Q29tcG9uZW50KEhlYWRCYXIpO1xyXG4gICAgICAgIHZhciBjb250YWluZXI6IE5vZGUgPSB0aGlzLm1TY2VuZS5nZXRDaGlsZENvbnRhaW5lcihHYW1lQ29uc3QuUk9MRV9OQU1FX0xBWUVSKTtcclxuICAgICAgICBub2RlLnBhcmVudCA9IGNvbnRhaW5lcjtcclxuICAgICAgICB0aGlzLnVwZGF0ZUhlYWRQb3MoKTtcclxuICAgICAgICB0aGlzLnVwZGF0ZUhlYWRJbmZvKCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSB1cGRhdGVIZWFkSW5mbygpOiB2b2lkIHtcclxuICAgICAgICBpZiAodGhpcy5kYXRhICYmIHRoaXMuaGVhZEJhcikge1xyXG4gICAgICAgICAgICB0aGlzLmhlYWRCYXIuc2V0TmFtZShgJHt0aGlzLmRhdGEuc2l0ZX1fJHt0aGlzLmRhdGEuY2FtcCA9PSAwID8gXCLpmJ/lj4tcIiA6IFwi5pWM5Lq6XCJ9XyR7dGhpcy5kYXRhLmhlcm9Db25maWcuc3BpbmVJZH1gKTtcclxuICAgICAgICAgICAgdGhpcy5oZWFkQmFyLnNldERhdGEodGhpcy5kYXRhKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGFzeW5jIHNldERhdGEoaGVybzogRmlnaHRIZXJvSW5mbyk6IFByb21pc2U8dm9pZD4ge1xyXG4gICAgICAgIHN1cGVyLnNldERhdGEoaGVybyk7XHJcbiAgICAgICAgdGhpcy5pc0FJID0gdHJ1ZTtcclxuICAgICAgICAvLyBpZiAoaGVyby5jYW1wID09IDEpIHtcclxuICAgICAgICAvLyAgICAgdGhpcy5pc0FJID0gdHJ1ZTtcclxuICAgICAgICAvLyB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJvdGVjdGVkIG5leHRSb2xlRnJhbWUoKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5uZXh0UGxheWVyRnJhbWUoKTtcclxuICAgICAgICB0aGlzLm1vdmUoKTtcclxuICAgIH1cclxuXHJcbiAgICBwcm90ZWN0ZWQgbW92ZSgpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLnNldFNwZWVkKHRoaXMuZGF0YS5oZXJvQ29uZmlnLnNwZWVkKTtcclxuICAgICAgICBzdXBlci5tb3ZlKCk7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIHB1YmxpYyBjaGVjayhpc011c3RBY3RpdmVTa2lsbDogYm9vbGVhbiA9IGZhbHNlKTogdm9pZCB7XHJcblxyXG4gICAgICAgIHRoaXMubmV4dFJvbGVGcmFtZSgpO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5pc0RpZSB8fCB0aGlzLmlzV2luKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5kYXRhLmZpZ2h0U2tpbGxzLm5leHRGcmFtZSgpO1xyXG4gICAgICAgIC8v5pS75Ye75Lit6ICM5LiU5peg5oyJ5Yiw6YeK5pS+5Li75Yqo5oqA6IO955qE5qCH6K6w5bCx5LiN5omn6KGM5LiL6Z2i55qE5Yqo5L2cXHJcbiAgICAgICAgaWYgKHRoaXMuaXNGaWdodCAmJiAhdGhpcy5pc1VzZUN0clNraWxsICYmICFpc011c3RBY3RpdmVTa2lsbCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoaXNNdXN0QWN0aXZlU2tpbGwpIHtcclxuICAgICAgICAgICAgLy/lvLrliLbmiYvliqjkuLvliqjmioDnmoTor53vvIzlvLrliLborr7nva7kuIDkuItcclxuICAgICAgICAgICAgdGhpcy5pc1VzZUN0clNraWxsID0gdHJ1ZTtcclxuICAgICAgICAgICAgdGhpcy5pc0ZpZ2h0ID0gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5jaGVja1NraWxsKGlzTXVzdEFjdGl2ZVNraWxsKTtcclxuICAgICAgICB0aGlzLmNoZWNrU2VsZWN0VGFyZ2V0KCk7XHJcbiAgICAgICAgdGhpcy5hdHRhY2soKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgY2FuU2VsZWN0KCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiAhdGhpcy5pc0RpZSAmJiAhdGhpcy5pc1JlbW92ZVRpbWU7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGNhbkF0dGFjaygpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgY2hlY2tTZWxlY3RUYXJnZXQoKTogdm9pZCB7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLnNraWxsSW5mbykge1xyXG4gICAgICAgICAgICAvL+acieaKgOiDveeahOaXtuWAmeaJjeWIpOaWremAieaLqeebruagh1xyXG4gICAgICAgICAgICBpZiAodGhpcy5zZWxlY3RUYXJnZXRzLmxlbmd0aCA9PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAvL+aXoOebruagh+aXtumAieaLqeacgOi/keeahOebruagh1xyXG4gICAgICAgICAgICAgICAgdGhpcy5vbk5vdFNlbGVjdFRhcmdldCgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5vbkhhc1NlbGVjdFRhcmdldCgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgIH1cclxuXHJcbiAgICAvKioq5pyJ55uu5qCH5pe255qE6YCJ5oup5pa55byPKi9cclxuICAgIHByb3RlY3RlZCBvbkhhc1NlbGVjdFRhcmdldCgpOiB2b2lkIHtcclxuICAgIH1cclxuXHJcbiAgICAvKioq5peg55uu5qCH5pe255qE6YCJ5oup5pa55byPICovXHJcbiAgICBwcm90ZWN0ZWQgb25Ob3RTZWxlY3RUYXJnZXQoKTogdm9pZCB7XHJcbiAgICAgICAgLy/lhbbku5bnmoTor53vvIzliJnmjInnhaflvZPliY3mioDog73nibnmlYjmnaXlj5jljJbnm67moIdcXFxyXG4gICAgICAgIGxldCB0YXJnZXRzID0gdGhpcy5za2lsbEluZm8uY2ZnLnRhcmdldFR5cGVzXHJcblxyXG4gICAgICAgIC8vIGxldCBpc1NlbGVjdCA9IHRoaXMuc2tpbGxJbmZvLnNraWxsRWZmZWN0c1swXS5za2lsbEVmZkNmZy5wel9zZWxlY3RUYXJnZXQ7Ly/mmK/lkKblv73nlaXkuI3lj6/pgInkuK1cclxuICAgICAgICB0aGlzLnNlbGVjdFRhcmdldHMgPSBGaWdodE1nci5pbnN0YW5jZS5maW5kRW50aXR5KHRoaXMsIHRhcmdldHMpO1xyXG4gICAgICAgIGlmICh0aGlzLnNlbGVjdFRhcmdldHMubGVuZ3RoID09IDApIHtcclxuICAgICAgICAgICAgaWYgKHRhcmdldHNbMF0gPT0gR2FtZUNvbnN0Lk1pSmkpIHtcclxuICAgICAgICAgICAgICAgIC8v5pyA5a+G6ZuG5om+5LiN5Yiw5bCx5pmu5pS7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNraWxsSW5mbyA9IHRoaXMuZGF0YS5maWdodFNraWxscy5nZXRTa2lsbEJ5SW5kZXgoMCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAodGFyZ2V0c1swXSAhPSBHYW1lQ29uc3QuTWF4TXApIHtcclxuICAgICAgICAgICAgICAgIC8v5peg55uu5qCH55qE5pe25YCZ77yM6YCJ5pyA6L+R55qEXHJcbiAgICAgICAgICAgICAgICB2YXIgdGVtcFRhcmdldHM6IG51bWJlcltdID0gdGFyZ2V0cy5jb25jYXQoKTtcclxuICAgICAgICAgICAgICAgIHRlbXBUYXJnZXRzWzBdID0gR2FtZUNvbnN0LkRhbmdRaWFuTXVCaWFvXHJcbiAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdFRhcmdldHMgPSBGaWdodE1nci5pbnN0YW5jZS5maW5kRW50aXR5KHRoaXMsIHRlbXBUYXJnZXRzKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMuc2VsZWN0VGFyZ2V0cy5sZW5ndGggPT0gMCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5vblNlbGVjdFRhcmdldE51bGwoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICB9XHJcblxyXG4gICAgLyoqKuWcqOaKgOiDvemAieS4reWQjui/mOaYr+aJvuS4jeWIsOebruagh++8jOm7mOiupOaYr+WkhOeQhuS9v+eUqOaOiei/meS4quaKgOiDvSAqL1xyXG4gICAgcHJvdGVjdGVkIG9uU2VsZWN0VGFyZ2V0TnVsbCgpOiB2b2lkIHtcclxuICAgICAgICAvL+i/mOaYr+epuueahO+8jOmCo+WwseW9k+S9v+eUqOS6hui/meS4quaKgOiDveS6hlxyXG4gICAgICAgIHRoaXMuZGF0YS5maWdodFNraWxscy51c2VTa2lsbCh0aGlzLnNraWxsSW5mby5za2lsbElkKTtcclxuICAgICAgICB0aGlzLnNraWxsSW5mbyA9IG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgcHJvdGVjdGVkIGNoZWNrU2tpbGxNYWluVGFyZ2V0KCk6IHZvaWQge1xyXG4gICAgICAgIGlmICh0aGlzLnNlbGVjdFRhcmdldHMubGVuZ3RoID09IDApIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuc2VsZWN0TWFpblRhcmdldCkge1xyXG4gICAgICAgICAgICAgICAgLy/mnInnm67moIfmmK/opoHliKTmlq3nm67moIfmmK/lkKbkuI3lj6/pgInkuK1cclxuICAgICAgICAgICAgICAgIGlmICghdGhpcy5zZWxlY3RNYWluVGFyZ2V0LmNhblNlbGVjdCgpKVxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2xlYXJNYWluVGFyZ2V0KClcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKCF0aGlzLnNlbGVjdE1haW5UYXJnZXQgfHwgdGhpcy5za2lsbEluZm8uY2ZnLnRhcmdldCAhPSBHYW1lQ29uc3QuTWFpbl9EYW5nUWlhbk11Qmlhbykge1xyXG4gICAgICAgICAgICAgICAgLy/lvZPliY3ml6Dnm67moIfvvIzmiJbogIXmioDog73opoHmlLnlj5jkuLvnm67moIfnmoTml7blgJnmiY3kvJrliIfmjaJcclxuICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0TWFpblRhcmdldCA9IEZpZ2h0TWdyLmluc3RhbmNlLmZpbmRNYWluRW50aXR5KHRoaXMsIHRoaXMuc2tpbGxJbmZvLmNmZy50YXJnZXQpWzBdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBjbGVhck1haW5UYXJnZXQoKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5zZWxlY3RNYWluVGFyZ2V0ID0gbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICAvKioq5piv5ZCm6IO95qOA5rWL5Li75Yqo5oqA6IO955qE6YeK5pS+5p2h5Lu2ICovXHJcbiAgICBwcm90ZWN0ZWQgY2FuQ2hlY2tBbmdlclNraWxsKCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIGlmICh0aGlzLmlzVXNlQ3RyU2tpbGwgfHwgdGhpcy5pc0FJKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlXHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBmYWxzZVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBjYW5Vc2VBbmdlclNraWxsKCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIGlmICghdGhpcy5jYW5Nb3ZlKCkpXHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZGF0YS5tcCA+PSB0aGlzLmRhdGEubWF4TXA7XHJcbiAgICB9XHJcblxyXG4gICAgcHJvdGVjdGVkIHNlbGVjdEFuZ2VyU2tpbGwoKTogRmlnaHRTa2lsbEluZm8ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmRhdGEuZmlnaHRTa2lsbHMuY2hlY2tBaVRvQ3RyQW5nZXJTa2lsbCh0aGlzKTtcclxuICAgIH1cclxuXHJcbiAgICBwcm90ZWN0ZWQgc2VsZWN0QW5nZXJDaGVja1NlbGVjdFRhcmdldCgpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLnNlbGVjdFRhcmdldHMubGVuZ3RoID0gMDtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgY2hlY2tQYXNzU2tpbGxCeVNraWxsQ2hlY2soZnJvbTogRmlnaHRSb2xlRW50aXR5KTogdm9pZCB7XHJcbiAgICAgICAgLy8gRmlnaHRGb3JtdWxhX1NITV8wNTkzLmNoZWNrUGFzc1NraWxsQ29uKFBhc3Npdml0eVNraWxsVHlwZV9TSE1fODg3OS5Db25UeXBlXzMxLCB0aGlzLCBmcm9tX1NITV81NTM3KVxyXG4gICAgfVxyXG5cclxuICAgIHByb3RlY3RlZCBzZWxlY3RTa2lsbCgpOiBGaWdodFNraWxsSW5mbyB7XHJcbiAgICAgICAgLy8gcmV0dXJuIG51bGw7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZGF0YS5maWdodFNraWxscy5zZWxlY3RTa2lsbCh0aGlzKTtcclxuICAgIH1cclxuXHJcbiAgICAvKioq5qOA5rWL6YCJ5Lit55qE5oqA6IO9ICovXHJcbiAgICBwcm90ZWN0ZWQgY2hlY2tTa2lsbChpc011c3RBY3RpdmVTa2lsbDogYm9vbGVhbiA9IGZhbHNlKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKHRoaXMuc2tpbGxJbmZvICYmICF0aGlzLmlzVXNlQ3RyU2tpbGwgJiYgIWlzTXVzdEFjdGl2ZVNraWxsKSB7XHJcbiAgICAgICAgICAgIC8v5bey57uP6YCJ5oup5LqG5oqA6IO95bCx6L+b6KGM56e75Yqo5pa55byP6YeK5pS+5oqA6IO9XHJcbiAgICAgICAgICAgIHRoaXMuY2hlY2tTa2lsbE1haW5UYXJnZXQoKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuY2FuQ2hlY2tBbmdlclNraWxsKCkgfHwgaXNNdXN0QWN0aXZlU2tpbGwpIHtcclxuICAgICAgICAgICAgLy9haeaOp+WItuS4u+WKqOaKgOiDvVxyXG4gICAgICAgICAgICBpZiAodGhpcy5jYW5Vc2VBbmdlclNraWxsKCkgfHwgaXNNdXN0QWN0aXZlU2tpbGwpIHtcclxuICAgICAgICAgICAgICAgIC8vbXDotrPlpJ9cclxuICAgICAgICAgICAgICAgIHRoaXMuc2tpbGxJbmZvID0gdGhpcy5zZWxlY3RBbmdlclNraWxsKCk7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5za2lsbEluZm8pIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdEFuZ2VyQ2hlY2tTZWxlY3RUYXJnZXQoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKCF0aGlzLnNraWxsSW5mbykge1xyXG4gICAgICAgICAgICAvL+S8mOWFiOWIpOaWreS4u+WKqOaKgOiDveWtmOWcqOWwsei3s+i/h+i/meS4quiiq+WKqOeahOajgOa1i+S6hlxyXG4gICAgICAgICAgICB0aGlzLmNoZWNrUGFzc1NraWxsQnlTa2lsbENoZWNrKHRoaXMpO1xyXG5cclxuICAgICAgICAgICAgLy/kuLvliqjmioDog73ml6DpgInmi6nmiY3pgInmi6nkuIDkuKroh6rliqjmioDog73ph4rmlL5cclxuICAgICAgICAgICAgdGhpcy5za2lsbEluZm8gPSB0aGlzLnNlbGVjdFNraWxsKCk7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5za2lsbEluZm8pXHJcbiAgICAgICAgICAgICAgICByZXR1cm5cclxuICAgICAgICB9XHJcbiAgICAgICAgLy/pgInmi6nmioDog73lkI7nnIvmg4XlhrXph43mlrDplIHlrprkuLvopoHnm67moIdcclxuICAgICAgICB0aGlzLmNoZWNrU2tpbGxNYWluVGFyZ2V0KCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJvdGVjdGVkIGNoZWNrQXR0YWNrKGlzSWdub3JlRGlzOiBib29sZWFuID0gZmFsc2UpOiBib29sZWFuIHtcclxuICAgICAgICBpZiAoIXRoaXMuY2FuTW92ZSgpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCF0aGlzLmNhbkF0dGFjaygpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCFpc0lnbm9yZURpcykge1xyXG4gICAgICAgICAgICBjb25zdCB0YXJnZXRQb3M6IFZlYzMgPSB0aGlzLnNlbGVjdFRhcmdldHNbMF0gPyB0aGlzLnNlbGVjdFRhcmdldHNbMF0uZ2V0TG9jYXRpb24oKSA6IG1hdGgudjMoMCwgMCk7XHJcbiAgICAgICAgICAgIC8vIGNvbnN0IHRhcmdldFBvczogVmVjMyA9IEZpZ2h0VXRpbC5pbnN0YW5jZS5nZXRTY2VuY2VSYW5kb21Qb3NpdGlvbigpO1xyXG4gICAgICAgICAgICBsZXQgZm9ybVBvczogVmVjMyA9IHRoaXMuZ2V0TG9jYXRpb24oKTtcclxuICAgICAgICAgICAgdGhpcy50YXJnZXRNb3ZlUG9pbnQgPSBGaWdodFV0aWwuaW5zdGFuY2UuZ2V0VGFyZ2V0UG9pbnRCeURpcyh0YXJnZXRQb3MsIGZvcm1Qb3MsIHRoaXMuc2tpbGxJbmZvLmNmZy5kaXN0YW5jZSk7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnRhcmdldE1vdmVQb2ludCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5tb3ZlQW5nbGUgPSBGaWdodFV0aWwuaW5zdGFuY2UuZ2V0QW5nbGVCeVZlYyh0aGlzLngsIHRoaXMueSwgdGhpcy50YXJnZXRNb3ZlUG9pbnQueCwgdGhpcy50YXJnZXRNb3ZlUG9pbnQueSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNoYW5nZURpckJ5QW5nbGUodGhpcy5tb3ZlQW5nbGUpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIHByb3RlY3RlZCBhdHRhY2soKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKHRoaXMuc2VsZWN0VGFyZ2V0cy5sZW5ndGggPT0gMCkge1xyXG4gICAgICAgICAgICAvLyBjb25zb2xlLmVycm9yKGAke3RoaXMuZGF0YS5oZXJvQ29uZmlnLnNwaW5lSWR95rKh5pyJ5om+5Yiw5pS75Ye75a+56LGhYCk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy/msqHmnInmioDog71cclxuICAgICAgICBpZiAoIXRoaXMuc2tpbGxJbmZvKSB7XHJcbiAgICAgICAgICAgIC8vIGNvbnNvbGUuZXJyb3IoYCR7dGhpcy5kYXRhLmhlcm9Db25maWcuc3BpbmVJZH3msqHmnInmib7liLDmlLvlh7vlr7nosaFgKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIGlmICh0aGlzLmlzRmlnaHQgJiYgdGhpcy5za2lsbEluZm8uY2ZnLnR5cGUgIT0gR2FtZUNvbnN0LlNraWxsX0FjdGl2ZSkvL+aUu+WHu+S4reWwseS4jeaJp+ihjOS4i+mdoueahOWKqOS9nO+8jOS4u+WKqOaKgOaYr+WPr+S7peaJk+aWreeahFxyXG4gICAgICAgICAgICByZXR1cm47XHJcblxyXG4gICAgICAgIGlmICghdGhpcy5jaGVja0F0dGFjaygpKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuZGF0YS5maWdodFNraWxscy51c2VTa2lsbCh0aGlzLnNraWxsSW5mby5za2lsbElkKTtcclxuICAgICAgICBpZiAodGhpcy5za2lsbEluZm8uY2ZnLnR5cGUgPT0gR2FtZUNvbnN0LlNraWxsX0FjdGl2ZSkge1xyXG4gICAgICAgICAgICAvL0FJ5o6n5Yi255qE5Li75Yqo5oqA6IO95raI6ICXTVBcclxuICAgICAgICAgICAgdGhpcy5kYXRhLnVzZU1wKCk7XHJcbiAgICAgICAgICAgIHRoaXMuaGVhZEJhci51cGRhdGVNcCh0aGlzLmRhdGEubXAgLyB0aGlzLmRhdGEubWF4TXApO1xyXG4gICAgICAgICAgICB0aGlzLmlzVXNlQ3RyU2tpbGwgPSBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5zdG9wQWN0aW9uKCk7XHJcbiAgICAgICAgdGhpcy5zdGFydEF0dGFja0FjdGlvbih0aGlzLnNraWxsSW5mbywgdGhpcy5zZWxlY3RUYXJnZXRzKVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgZ2V0VGVuVGhvdXNhbmRQbGFjZVZhbHVlKG51bTogbnVtYmVyKSB7XHJcbiAgICAgICAgLy8g56Gu5L+d6L6T5YWl5piv5pWw5a2XXHJcbiAgICAgICAgaWYgKHR5cGVvZiBudW0gIT09ICdudW1iZXInIHx8ICFOdW1iZXIuaXNGaW5pdGUobnVtKSkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ+ivt+i+k+WFpeS4gOS4quacieaViOeahOaVsOWtlycpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8g6L2s5Li65pW05pWw5bm25Y+W5LiH5L2N5YC8XHJcbiAgICAgICAgY29uc3QgdGVuVGhvdXNhbmRQbGFjZVZhbHVlID0gTWF0aC5mbG9vcihNYXRoLmFicyhudW0pIC8gMTAwMDApICUgMTA7XHJcblxyXG4gICAgICAgIHJldHVybiB0ZW5UaG91c2FuZFBsYWNlVmFsdWU7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGFzeW5jIHN0YXJ0QXR0YWNrQWN0aW9uKHNraWxsSW5mbzogRmlnaHRTa2lsbEluZm8sIHRhcmdldDogRmlnaHRSb2xlRW50aXR5W10pIHtcclxuICAgICAgICBjb25zb2xlLmxvZyhg56ysJHtGaWdodE1nci5pbnN0YW5jZS5pbmRleH3luKcs5pS75Ye76ICF77yaJHt0aGlzLmRhdGEuc3BpbmVJZH3lj5HotbfmioDog70ke3NraWxsSW5mby5za2lsbElkfeaUu+WHu+S6hmApXHJcbiAgICAgICAgdGhpcy5maWdodFN0YXJ0KCk7XHJcbiAgICAgICAgdGhpcy5zZXRTcGluZUtleUZyYW1lSGFuZGxlcihIYW5kbGVyLmNyZWF0ZSh0aGlzLm9uU3BpbmVLZXlGcmFtZSwgdGhpcykpXHJcbiAgICAgICAgbGV0IHR5cGU6IG51bWJlciA9IHRoaXMuZ2V0VGVuVGhvdXNhbmRQbGFjZVZhbHVlKHNraWxsSW5mby5za2lsbElkKTtcclxuICAgICAgICBsZXQgYWN0aW9uOiBzdHJpbmcgPSB0eXBlID09IDEgPyBHYW1lQ29uc3QuQXR0YWNrIDogR2FtZUNvbnN0LlVsdGltYXRlc2tpbGw7XHJcbiAgICAgICAgYXdhaXQgdGhpcy5zZXRBY3Rpb24oYWN0aW9uLCAxKTtcclxuXHJcbiAgICAgICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IHRhcmdldC5sZW5ndGg7IGluZGV4KyspIHtcclxuICAgICAgICAgICAgY29uc3QgZTogRmlnaHRSb2xlRW50aXR5ID0gdGFyZ2V0W2luZGV4XTtcclxuICAgICAgICAgICAgLy8gYXdhaXQgZS5zZXRBY3Rpb24oR2FtZUNvbnN0LkJlSGl0LCAxLCBudWxsKVxyXG4gICAgICAgICAgICAvLyBlLmZpZ2h0RW5kKCk7XHJcbiAgICAgICAgICAgIGUuaHVydChza2lsbEluZm8uY2ZnLmh1cnQsIHRoaXMpO1xyXG4gICAgICAgICAgICBlLnJlY292ZXJ5KHNraWxsSW5mby5jZmcucmVjb3ZleUFuZ2VyLCB0aGlzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5maWdodEVuZCgpO1xyXG5cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIG9uU3BpbmVLZXlGcmFtZShlbnRyeTogc3Auc3BpbmUuVHJhY2tFbnRyeSwgZXZlbnQ6IHNwLnNwaW5lLkV2ZW50KTogdm9pZCB7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coXCLop6blj5Hkuovku7ZcIiwgZXZlbnQuZGF0YS5uYW1lLCBldmVudC5pbnRWYWx1ZSwgZXZlbnQuZmxvYXRWYWx1ZSwgZXZlbnQuc3RyaW5nVmFsdWUpXHJcblxyXG4gICAgfVxyXG5cclxuICAgIHByb3RlY3RlZCBmaWdodFN0YXJ0KCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuaXNGaWdodCA9IHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgcHJvdGVjdGVkIGZpZ2h0RW5kKCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuaXNGaWdodCA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuc2tpbGxJbmZvID0gbnVsbDtcclxuICAgICAgICB0aGlzLnNlbGVjdFRhcmdldHMubGVuZ3RoID0gMDtcclxuICAgIH1cclxuXHJcblxyXG4gICAgcHVibGljIGh1cnQoaHVydFZhbHVlOiBudW1iZXIsIGZvcm06IEZpZ2h0Um9sZUVudGl0eSk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuZGF0YS5ocCA9IHRoaXMuZGF0YS5ocCAtIGh1cnRWYWx1ZTtcclxuICAgICAgICB0aGlzLmhlYWRCYXIudXBkYXRlSHAodGhpcy5kYXRhLmhwIC8gdGhpcy5kYXRhLm1heEhwKTtcclxuICAgICAgICBpZiAodGhpcy5kYXRhLmhwIDw9IDApIHtcclxuICAgICAgICAgICAgdGhpcy5kaWUoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHJlY292ZXJ5KHZhbHVlOiBudW1iZXIsIGZvcm06IEZpZ2h0Um9sZUVudGl0eSk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuZGF0YS5tcCArPSB2YWx1ZTtcclxuICAgICAgICB0aGlzLmhlYWRCYXIudXBkYXRlTXAodGhpcy5kYXRhLm1wIC8gdGhpcy5kYXRhLm1heE1wKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc2V0SXNXaW4od2luOiBib29sZWFuKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5pc1dpbiA9IHdpbjtcclxuICAgICAgICBpZiAod2luKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0QWN0aW9uKEdhbWVDb25zdC5XaW4pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcblxyXG4gICAgcHVibGljIGFzeW5jIGRpZSgpOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgICAgICB0aGlzLnN0b3BBY3Rpb24oKTtcclxuICAgICAgICBGaWdodE1nci5pbnN0YW5jZS5lbnRpdHlUb0RpZSh0aGlzKTtcclxuICAgICAgICBhd2FpdCB0aGlzLnNldEFjdGlvbihHYW1lQ29uc3QuRGVhdGgpXHJcbiAgICAgICAgdGhpcy5hY3RpdmUgPSBmYWxzZTtcclxuICAgICAgICBpZiAodGhpcy5oZWFkQmFyKVxyXG4gICAgICAgICAgICB0aGlzLmhlYWRCYXIubm9kZS5hY3RpdmUgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLmlzRGllID0gdHJ1ZTtcclxuICAgIH1cclxufSIsImltcG9ydCBBcnJheVV0aWxzIGZyb20gXCIuLi8uLi8uLi9Db21tb24vQXJyYXlVdGlsc1wiO1xyXG5pbXBvcnQgeyBIYW5kbGVyIH0gZnJvbSBcIi4uLy4uLy4uL0NvbW1vbi9IYW5kbGVyXCI7XHJcbmltcG9ydCB7IEhhc2hNYXAgfSBmcm9tIFwiLi4vLi4vLi4vQ29tbW9uL21hcHMvSGFzaE1hcFwiO1xyXG5pbXBvcnQgeyBGaWdodFJvbGVFbnRpdHkgfSBmcm9tIFwiLi4vZmlnaHQvRmlnaHRSb2xlRW50aXR5XCI7XHJcbmltcG9ydCB7IEdhbWVDb25zdCB9IGZyb20gXCIuLi9HYW1lQ29uc3RcIjtcclxuaW1wb3J0IHsgRmlnaHRTa2lsbEluZm8gfSBmcm9tIFwiLi9GaWdodFNraWxsSW5mb1wiO1xyXG5cclxuLyoqXHJcbiAqIEBmaWxlTmFtZSBGaWdodFNraWxsR3JvdXBJbmZvLnRzXHJcbiAqIEBhdXRob3IgemhhbmdxaW9uZ1xyXG4gKiBAZGF0ZSAyMDI0LzEyLzMxIDE5OjI5OjA2XCJcclxuICogQGRlc2NyaXB0aW9uXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgRmlnaHRTa2lsbEdyb3VwSW5mbyB7XHJcbiAgICBwcml2YXRlIGFjdGl2ZVNraWxsSW5kZXg6IG51bWJlciA9IC0xO1xyXG4gICAgcHVibGljIHNraWxsTWFwOiBIYXNoTWFwPG51bWJlciwgRmlnaHRTa2lsbEluZm8+O1xyXG4gICAgcHVibGljIGNkQXJyYXk6IG51bWJlcltdID0gW107XHJcbiAgICBwdWJsaWMgY2RNYXhBcnJheTogbnVtYmVyW10gPSBbXTtcclxuICAgIHB1YmxpYyBjZEluaXRNYXhBcnJheTogbnVtYmVyW10gPSBbXTtcclxuICAgIHB1YmxpYyBza2lsbElkczogbnVtYmVyW10gPSBbXTtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICB0aGlzLnNraWxsTWFwID0gbmV3IEhhc2hNYXA8bnVtYmVyLCBGaWdodFNraWxsSW5mbz4oKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgYWRkKHNraWxsczogRmlnaHRTa2lsbEluZm9bXSk6IHZvaWQge1xyXG4gICAgICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCBza2lsbHMubGVuZ3RoOyBpbmRleCsrKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHNraWxsOiBGaWdodFNraWxsSW5mbyA9IHNraWxsc1tpbmRleF07XHJcbiAgICAgICAgICAgIHRoaXMuc2tpbGxNYXAucHV0KHNraWxsLnNraWxsSWQsIHNraWxsKTtcclxuICAgICAgICAgICAgdGhpcy5za2lsbElkcy5wdXNoKHNraWxsLnNraWxsSWQpO1xyXG4gICAgICAgICAgICB0aGlzLmNkQXJyYXkucHVzaChza2lsbC5jZmcuZmlyc3RDZCk7XHJcbiAgICAgICAgICAgIHRoaXMuY2RNYXhBcnJheS5wdXNoKHNraWxsLmNmZy5jZCk7XHJcbiAgICAgICAgICAgIGlmIChza2lsbC5jZmcudHlwZSA9PSBHYW1lQ29uc3QuU2tpbGxfQWN0aXZlKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmFjdGl2ZVNraWxsSW5kZXggPSBpbmRleDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0U2tpbGxCeVNraWxsSWQoc2tpbGxJZDogbnVtYmVyKTogRmlnaHRTa2lsbEluZm8ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnNraWxsTWFwLmdldChza2lsbElkKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0U2tpbGxCeUluZGV4KGluZGV4OiBudW1iZXIpOiBGaWdodFNraWxsSW5mbyB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc2tpbGxNYXAuZ2V0KHRoaXMuc2tpbGxJZHNbaW5kZXhdKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgbmV4dEZyYW1lKCk6IHZvaWQge1xyXG4gICAgICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCB0aGlzLmNkQXJyYXkubGVuZ3RoOyBpbmRleCsrKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY2RBcnJheVtpbmRleF0tLTtcclxuICAgICAgICAgICAgaWYgKHRoaXMuY2RBcnJheVtpbmRleF0gPD0gMCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jZEFycmF5W2luZGV4XSA9IDA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqKlxyXG4gICAgICAgICAqIOmAieaLqeaKgOiDvVxyXG4gICAgICAgICAqIOmHiuaUvuS8mOWFiOe6p++8muWPquWkhOeQhuiHquWKqOaKgOiDve+8jOagueaNruanveS9jemhuuW6j1xyXG4gICAgICAgICAqIHNraWxsU29ydCDkvJjlhYjpgInmi6nnmoTmioDog73kvY3nva4tMeaYr+S4jeaMh1xyXG4gICAgICAgICAqIGNoZWNrRnVuIOmineWklueahOajgOa1i+aWueazlVxyXG4gICAgICAgICAqICAqL1xyXG4gICAgcHVibGljIHNlbGVjdFNraWxsKGVudGl0eTogRmlnaHRSb2xlRW50aXR5LCBza2lsbFNvcnQ6IG51bWJlciA9IC0xLCBjaGVja0Z1bj86IEhhbmRsZXIpOiBGaWdodFNraWxsSW5mbyB7XHJcbiAgICAgICAgbGV0IHNrOiBGaWdodFNraWxsSW5mb1tdID0gW11cclxuICAgICAgICBmb3IgKHZhciBpOiBudW1iZXIgPSAwOyBpIDwgdGhpcy5jZEFycmF5Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmNkQXJyYXlbaV0gPT0gMCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHNrSW5mbzogRmlnaHRTa2lsbEluZm8gPSB0aGlzLnNraWxsTWFwLmdldCh0aGlzLnNraWxsSWRzW2ldKVxyXG4gICAgICAgICAgICAgICAgaWYgKCFjaGVja0Z1biB8fCBjaGVja0Z1bi5leGVjdXRlKHNrSW5mbykpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoc2tJbmZvLmNmZy50eXBlID09IEdhbWVDb25zdC5Ta2lsbF9BdXRvKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChza0luZm8uY2ZnLnNraWxsVHlwZSA9PSAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzay5wdXNoKHNrSW5mbyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChzay5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIC8v5LyY5YWI5L2N572u5pyA5ZCO55qEXHJcbiAgICAgICAgICAgIEFycmF5VXRpbHMuc29ydEJ5MihzaywgXCJza2lsbFNvcnRcIiwgZmFsc2UsIGZhbHNlKTtcclxuICAgICAgICAgICAgbGV0IGNob3NlU2tpbGw6IEZpZ2h0U2tpbGxJbmZvID0gc2tbMF1cclxuICAgICAgICAgICAgaWYgKHNraWxsU29ydCAhPSAtMSkge1xyXG4gICAgICAgICAgICAgICAgLy/kvJjlhYjpgInmi6lcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIGk6IG51bWJlciA9IDA7IGkgPCBzay5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChza1tpXS5za2lsbFNvcnQgPT0gc2tpbGxTb3J0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNob3NlU2tpbGwgPSBza1tpXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGNob3NlU2tpbGw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBjaGVja0FpVG9DdHJBbmdlclNraWxsKGVudGl0eTogRmlnaHRSb2xlRW50aXR5LCBza2lsbFNvcnQ6IG51bWJlciA9IC0xKTogRmlnaHRTa2lsbEluZm8ge1xyXG4gICAgICAgIHZhciBpc0ZpcnN0OiBib29sZWFuID0gZmFsc2U7XHJcbiAgICAgICAgdmFyIHNrSW5mbzogRmlnaHRTa2lsbEluZm8gPSB0aGlzLnNraWxsTWFwLmdldCh0aGlzLnNraWxsSWRzW3RoaXMuYWN0aXZlU2tpbGxJbmRleF0pXHJcbiAgICAgICAgaWYgKHNraWxsU29ydCAhPSAtMSkge1xyXG4gICAgICAgICAgICB2YXIgdGVtcFNraWxsSW5mbzogRmlnaHRTa2lsbEluZm8gPSB0aGlzLnNraWxsTWFwLmdldCh0aGlzLnNraWxsSWRzW3NraWxsU29ydF0pXHJcbiAgICAgICAgICAgIGlmICh0ZW1wU2tpbGxJbmZvICYmICF0aGlzLmlzU2tpbGxDRCh0ZW1wU2tpbGxJbmZvLnNraWxsSWQpKSB7XHJcbiAgICAgICAgICAgICAgICBza0luZm8gPSB0ZW1wU2tpbGxJbmZvO1xyXG4gICAgICAgICAgICAgICAgaXNGaXJzdCA9IHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIHNrSW5mbyA9IHRoaXMuY2hlY2tDaGFuZ2VTa2lsbChza0luZm8sIGVudGl0eSk7Ly/mo4Dmn6XmmK/lkKbmnInovazmjaJcclxuICAgICAgICAvLyBza0luZm8gPSB0aGlzLmNoZWNrQ2hhbmdlU2tpbGxSYW5kb20oc2tJbmZvLCBlbnRpdHkpOy8v5qOA5p+l5piv5ZCm5pyJ6L2s5o2iXHJcblxyXG4gICAgICAgIGlmIChpc0ZpcnN0IHx8IChza0luZm8gJiYgc2tJbmZvLmNoZWNrQWlUb0N0ckFuZ2VyU2tpbGwoKSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHNrSW5mbztcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGlzU2tpbGxDRChza2lsbElkOiBudW1iZXIpOiBib29sZWFuIHtcclxuICAgICAgICB2YXIgaW5kZXg6IG51bWJlciA9IHRoaXMuc2tpbGxJZHMuaW5kZXhPZihza2lsbElkKTtcclxuICAgICAgICByZXR1cm4gdGhpcy5jZEFycmF5W2luZGV4XSA+IDBcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgdXNlU2tpbGwoc2tpbGxJZDogbnVtYmVyKTogdm9pZCB7XHJcbiAgICAgICAgbGV0IGluZGV4OiBudW1iZXIgPSB0aGlzLnNraWxsSWRzLmluZGV4T2Yoc2tpbGxJZCk7XHJcbiAgICAgICAgdGhpcy5jZEFycmF5W2luZGV4XSA9IHRoaXMuY2RNYXhBcnJheVtpbmRleF07XHJcblxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyB1c2VBbmdlclNraWxsKCk6IEZpZ2h0U2tpbGxJbmZvIHtcclxuICAgICAgICBsZXQgc2tJbmZvOiBGaWdodFNraWxsSW5mbyA9IHRoaXMuc2tpbGxNYXAuZ2V0KHRoaXMuc2tpbGxJZHNbdGhpcy5hY3RpdmVTa2lsbEluZGV4XSlcclxuICAgICAgICByZXR1cm4gc2tJbmZvO1xyXG4gICAgfVxyXG5cclxufSIsImltcG9ydCB7IFNraWxsQ29uZmlnVm8gfSBmcm9tIFwiLi4vdm9zL1NraWxsQ29uZmlnVm9cIjtcclxuXHJcbi8qKlxyXG4gKiBAZmlsZU5hbWUgRmlnaHRTa2lsbEluZm8udHNcclxuICogQGF1dGhvciB6aGFuZ3Fpb25nXHJcbiAqIEBkYXRlIDIwMjQvMTIvMzEgMTU6MzY6NDdcIlxyXG4gKiBAZGVzY3JpcHRpb25cclxuICovXHJcbmV4cG9ydCBjbGFzcyBGaWdodFNraWxsSW5mbyB7XHJcbiAgICBwdWJsaWMgc2tpbGxJZDogbnVtYmVyO1xyXG4gICAgcHVibGljIGNmZzogU2tpbGxDb25maWdWbztcclxuICAgIC8qKuS9jee9rjDmma7mlLvvvIwx5Li75Yqo77yMMiwzLDTlhbbku5bmp73kvY0gKi9cclxuICAgIHNraWxsU29ydDogbnVtYmVyO1xyXG5cclxuICAgIHB1YmxpYyBzZXREYXRhKGNvbmZpZzogU2tpbGxDb25maWdWbyk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuY2ZnID0gY29uZmlnO1xyXG4gICAgICAgIHRoaXMuc2tpbGxJZCA9IGNvbmZpZy5za2lsbElkO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBjaGVja0FpVG9DdHJBbmdlclNraWxsKCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG59IiwiaW1wb3J0IHsgR2FtZSwgbWF0aCwgcmFuZG9tLCByYW5kb21SYW5nZUludCwgU2l6ZSwgVmVjMywgdmlldyB9IGZyb20gXCJjY1wiO1xyXG5pbXBvcnQgeyBHYW1lRW50aXR5IH0gZnJvbSBcIi4vR2FtZUVudGl0eVwiO1xyXG5pbXBvcnQgeyBHYW1lQ29uc3QgfSBmcm9tIFwiLi4vR2FtZUNvbnN0XCI7XHJcbmltcG9ydCB7IEZpbmRUYXJnZXRJbmZvIH0gZnJvbSBcIi4uL2luZm9zL0ZpbmRUYXJnZXRJbmZvXCI7XHJcbmltcG9ydCB7IEZpZ2h0Um9sZUVudGl0eSB9IGZyb20gXCIuL0ZpZ2h0Um9sZUVudGl0eVwiO1xyXG5pbXBvcnQgQXJyYXlVdGlscyBmcm9tIFwiLi4vLi4vLi4vQ29tbW9uL0FycmF5VXRpbHNcIjtcclxuaW1wb3J0IHsgRmlnaHRNZ3IgfSBmcm9tIFwiLi9GaWdodE1nclwiO1xyXG5cclxuLyoqXHJcbiAqIEBmaWxlTmFtZSBGaWdodFV0aWwudHNcclxuICogQGF1dGhvciB6aGFuZ3Fpb25nXHJcbiAqIEBkYXRlIDIwMjQvMTIvMjggMTc6MDg6MjZcIlxyXG4gKiBAZGVzY3JpcHRpb25cclxuICovXHJcbmV4cG9ydCBjbGFzcyBGaWdodFV0aWwge1xyXG5cclxuICAgIHByaXZhdGUgc3RhdGljIF9pbnN0YW5jZTogRmlnaHRVdGlsO1xyXG4gICAgcHVibGljIHN0YXRpYyBnZXQgaW5zdGFuY2UoKTogRmlnaHRVdGlsIHtcclxuICAgICAgICBpZiAoIXRoaXMuX2luc3RhbmNlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2luc3RhbmNlID0gbmV3IEZpZ2h0VXRpbCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcy5faW5zdGFuY2U7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldFRhcmdldFBvaW50QnlEaXModGFyZ2V0OiBWZWMzLCBmb3JtOiBWZWMzLCBkaXM6IG51bWJlcik6IFZlYzMge1xyXG4gICAgICAgIGNvbnN0IGRpc3RhbmNlOiBudW1iZXIgPSB0aGlzLmRpc3RhbmNlKHRhcmdldCwgZm9ybSk7XHJcblxyXG4gICAgICAgIGxldCB0cnVlRGlzOiBudW1iZXIgPSBNYXRoLmZsb29yKGRpc3RhbmNlIC0gZGlzKTtcclxuXHJcbiAgICAgICAgaWYgKHRydWVEaXMgPCAxMDApIHtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgcmFkaWFuOiBudW1iZXIgPSB0aGlzLnJhZGlhbih0YXJnZXQsIGZvcm0pO1xyXG4gICAgICAgIGxldCB5OiBudW1iZXIgPSBNYXRoLnNpbihyYWRpYW4pICogdHJ1ZURpcztcclxuICAgICAgICBsZXQgeDogbnVtYmVyID0gTWF0aC5jb3MocmFkaWFuKSAqIHRydWVEaXM7XHJcbiAgICAgICAgcmV0dXJuIG1hdGgudjMoeCwgeSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGRpc3RhbmNlKHAxOiBWZWMzLCBwMjogVmVjMyk6IG51bWJlciB7XHJcbiAgICAgICAgbGV0IGRpc3RhbmNlOiBudW1iZXIgPSBWZWMzLmRpc3RhbmNlKHAxLCBwMik7XHJcbiAgICAgICAgcmV0dXJuIGRpc3RhbmNlO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyByYWRpYW4oZTE6IFZlYzMsIGUyOiBWZWMzKTogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gTWF0aC5hdGFuMihlMS55IC0gZTIueSwgZTEueCAtIGUyLngpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXRBbmdsZUJ5VmVjKHg6IG51bWJlciwgeTogbnVtYmVyLCB0eDogbnVtYmVyLCB0eTogbnVtYmVyKTogbnVtYmVyIHtcclxuICAgICAgICBsZXQgYW5nbGU6IG51bWJlciA9IE1hdGguYXRhbjIodHkgLSB5LCB0eCAtIHgpICogMTgwIC8gTWF0aC5QSTtcclxuICAgICAgICBpZiAoYW5nbGUgPCAwKSB7XHJcbiAgICAgICAgICAgIGFuZ2xlICs9IDM2MDtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGFuZ2xlO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXRTY2VuY2VSYW5kb21Qb3NpdGlvbigpOiBWZWMzIHtcclxuICAgICAgICBsZXQgc2l6ZTogU2l6ZSA9IHZpZXcuZ2V0VmlzaWJsZVNpemUoKTtcclxuICAgICAgICBsZXQgd2lkdGg6IG51bWJlciA9IHNpemUud2lkdGg7XHJcbiAgICAgICAgbGV0IGhlaWdodDogbnVtYmVyID0gc2l6ZS5oZWlnaHQ7XHJcbiAgICAgICAgbGV0IGhhbGZXaWR0aDogbnVtYmVyID0gd2lkdGggLyAyO1xyXG4gICAgICAgIGxldCBoYWxmSGVpZ2h0OiBudW1iZXIgPSBoZWlnaHQgLyAyO1xyXG4gICAgICAgIGxldCB4OiBudW1iZXIgPSByYW5kb21SYW5nZUludCgtaGFsZldpZHRoLCBoYWxmV2lkdGgpO1xyXG4gICAgICAgIGxldCB5OiBudW1iZXIgPSByYW5kb21SYW5nZUludCgtaGFsZkhlaWdodCwgaGFsZkhlaWdodCk7XHJcbiAgICAgICAgcmV0dXJuIG1hdGgudjMoeCwgeSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldERpcmVjdGlvbkJ5QW5nbGUoYW5nbGU6IG51bWJlcik6IG51bWJlciB7XHJcbiAgICAgICAgbGV0IF9kaXI6IG51bWJlciA9IDA7XHJcbiAgICAgICAgaWYgKGFuZ2xlID4gNjcuNSAmJiBhbmdsZSA8IDExMi41KSB7XHJcbiAgICAgICAgICAgIF9kaXIgPSBHYW1lQ29uc3QuUztcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoYW5nbGUgPiAyMi41ICYmIGFuZ2xlIDw9IDY3LjUpIHtcclxuICAgICAgICAgICAgX2RpciA9IEdhbWVDb25zdC5FUztcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoYW5nbGUgPCAyMi41IHx8IGFuZ2xlID4gKDM2MCAtIDIyLjUpKSB7XHJcbiAgICAgICAgICAgIF9kaXIgPSBHYW1lQ29uc3QuRTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoYW5nbGUgPiAoMzYwIC0gNjcuNSkgJiYgYW5nbGUgPD0gKDM2MCAtIDIyLjUpKSB7XHJcbiAgICAgICAgICAgIF9kaXIgPSBHYW1lQ29uc3QuTkU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGFuZ2xlID4gKDI3MCAtIDIyLjUpICYmIGFuZ2xlIDw9ICgzNjAgLSA2Ny41KSkge1xyXG4gICAgICAgICAgICBfZGlyID0gR2FtZUNvbnN0Lk47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGFuZ2xlID4gKDI3MCAtIDY3LjUpICYmIGFuZ2xlIDw9ICgyNzAgLSAyMi41KSkge1xyXG4gICAgICAgICAgICBfZGlyID0gR2FtZUNvbnN0LldOO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChhbmdsZSA+ICgxODAgLSAyMi41KSAmJiBhbmdsZSA8PSAoMjcwIC0gNjcuNSkpIHtcclxuICAgICAgICAgICAgX2RpciA9IEdhbWVDb25zdC5XO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChhbmdsZSA+ICgxODAgLSA2Ny41KSAmJiBhbmdsZSA8PSAoMTgwIC0gMjIuNSkpIHtcclxuICAgICAgICAgICAgX2RpciA9IEdhbWVDb25zdC5TVztcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIF9kaXI7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldFNjYWxlWEJ5RGlyZWN0aW9uKGRpcmVjdGlvbjogbnVtYmVyKTogbnVtYmVyIHtcclxuICAgICAgICBsZXQgc2NhbGVYOiBudW1iZXIgPSAtMTtcclxuICAgICAgICBzd2l0Y2ggKGRpcmVjdGlvbikge1xyXG4gICAgICAgICAgICBjYXNlIEdhbWVDb25zdC5SSUdIVF9VUDpcclxuICAgICAgICAgICAgY2FzZSBHYW1lQ29uc3QuUklHSFQ6XHJcbiAgICAgICAgICAgIGNhc2UgR2FtZUNvbnN0LlJJR0hUX0RPV046XHJcbiAgICAgICAgICAgICAgICBzY2FsZVggPSAxO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBzY2FsZVg7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBjaGVja1NlZHVjZShlbjogRmlnaHRSb2xlRW50aXR5LCB0eXBlOiBudW1iZXIpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiB0eXBlO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBmaW5kTGF0ZWx5T3JGYXJFbnRpdHkoaXNMYXRlbHk6IGJvb2xlYW4sIGZpbmREYXRhOiBGaW5kVGFyZ2V0SW5mbyk6IEZpZ2h0Um9sZUVudGl0eVtdIHtcclxuICAgICAgICBsZXQgZW46IEZpZ2h0Um9sZUVudGl0eSA9IGZpbmREYXRhLmZvcm1cclxuICAgICAgICBsZXQgZW5zOiBGaWdodFJvbGVFbnRpdHlbXSA9IGZpbmREYXRhLmVuZW15c1xyXG4gICAgICAgIGxldCB0eXBlOiBudW1iZXIgPSBmaW5kRGF0YS50eXBlIHx8IDE7XHJcbiAgICAgICAgbGV0IG51bTogbnVtYmVyID0gZmluZERhdGEubnVtID09IHVuZGVmaW5lZCA/IDEgOiBmaW5kRGF0YS5udW07XHJcbiAgICAgICAgbGV0IGlzUGFpQ2h1OiBib29sZWFuID0gZmluZERhdGEuaXNQYWlDaHVcclxuICAgICAgICAvLyBsZXQgc3VtbW9uOiBudW1iZXIgPSBmaW5kRGF0YS5zdW1tb25cclxuXHJcbiAgICAgICAgbGV0IG9sZFR5cGU6IG51bWJlciA9IHR5cGU7XHJcbiAgICAgICAgdHlwZSA9IHRoaXMuY2hlY2tTZWR1Y2UoZW4sIHR5cGUpXHJcbiAgICAgICAgbGV0IHJyOiBGaWdodFJvbGVFbnRpdHlbXSA9IFtdO1xyXG4gICAgICAgIGZvciAobGV0IGk6IG51bWJlciA9IDA7IGkgPCBlbnMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKGZpbmREYXRhLmlzUGFpQ2h1Tm90U2VsZWN0ID09IDEgfHwgZW5zW2ldLmNhblNlbGVjdCgpKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIWlzUGFpQ2h1IHx8IChlbnNbaV0gIT0gZW4pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGUgPT0gMyB8fCAodHlwZSA9PSAyICYmIGVuc1tpXS5kYXRhLmNhbXAgPT0gZW4uZGF0YS5jYW1wKSB8fCAodHlwZSA9PSAxICYmIGVuc1tpXS5kYXRhLmNhbXAgIT0gZW4uZGF0YS5jYW1wKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0YXJQb3M6IFZlYzMgPSBlbnNbaV0uZ2V0TG9jYXRpb24oKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGVuUG9zOiBWZWMzID0gZW4uZ2V0TG9jYXRpb24oKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGRpczogbnVtYmVyID0gdGhpcy5kaXN0YW5jZSh0YXJQb3MsIGVuUG9zKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZW5zW2ldW1wiZmluZExhdGVseUVudGl0eV9kaXNcIl0gPSBkaXM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJyLnB1c2goZW5zW2ldKVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKG9sZFR5cGUgIT0gdHlwZSkge1xyXG4gICAgICAgICAgICAvL+aJk+aVjOaWueWPmOaIkOaJk+iHquW3seWPi+eahOaDheWGte+8jOWwseimgeaOkumZpOiHquW3sVxyXG4gICAgICAgICAgICBBcnJheVV0aWxzLnJlbW92ZUl0ZW0ocnIsIGVuKVxyXG4gICAgICAgIH1cclxuICAgICAgICBBcnJheVV0aWxzLnNvcnRCeTIocnIsIFwiZmluZExhdGVseUVudGl0eV9kaXNcIiwgaXNMYXRlbHksIGZhbHNlKVxyXG4gICAgICAgIHJldHVybiByci5zbGljZSgwLCBudW0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog6YCJ5oup6ZqP5py655uu5qCHXHJcbiAgICAgKiBAcGFyYW0gaXNSZXBlYXQg5piv5ZCm5Y+v5Lul6YeN5aSNXHJcbiAgICAgKiBAcGFyYW0gZmluZERhdGEgXHJcbiAgICAgKiBAcmV0dXJucyBcclxuICAgICAqL1xyXG4gICAgcHVibGljIGZpbmRSYW5kb21FbnRpdHkoaXNSZXBlYXQ6IGJvb2xlYW4sIGZpbmREYXRhOiBGaW5kVGFyZ2V0SW5mbyk6IEZpZ2h0Um9sZUVudGl0eVtdIHtcclxuICAgICAgICBsZXQgZW46IEZpZ2h0Um9sZUVudGl0eSA9IGZpbmREYXRhLmZvcm1cclxuICAgICAgICBsZXQgZW5zOiBGaWdodFJvbGVFbnRpdHlbXSA9IGZpbmREYXRhLmVuZW15c1xyXG4gICAgICAgIGxldCB0eXBlOiBudW1iZXIgPSBmaW5kRGF0YS50eXBlIHx8IDFcclxuICAgICAgICBsZXQgbnVtOiBudW1iZXIgPSBmaW5kRGF0YS5udW0gPT0gdW5kZWZpbmVkID8gMSA6IGZpbmREYXRhLm51bTtcclxuICAgICAgICBsZXQgaXNQYWlDaHU6IGJvb2xlYW4gPSBmaW5kRGF0YS5pc1BhaUNodTtcclxuXHJcbiAgICAgICAgdmFyIG9sZFR5cGU6IG51bWJlciA9IHR5cGU7XHJcbiAgICAgICAgdHlwZSA9IHRoaXMuY2hlY2tTZWR1Y2UoZW4sIHR5cGUpXHJcbiAgICAgICAgdmFyIHJyOiBGaWdodFJvbGVFbnRpdHlbXSA9IFtdO1xyXG5cclxuXHJcbiAgICAgICAgZm9yICh2YXIgaTogbnVtYmVyID0gMDsgaSA8IGVucy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBpZiAoZmluZERhdGEuaXNQYWlDaHVOb3RTZWxlY3QgPT0gMSB8fCBlbnNbaV0uY2FuU2VsZWN0KCkpIHtcclxuICAgICAgICAgICAgICAgIGlmICghaXNQYWlDaHUgfHwgKGVuc1tpXSAhPSBlbikpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZSA9PSAzIHx8ICh0eXBlID09IDIgJiYgZW5zW2ldLmRhdGEuY2FtcCA9PSBlbi5kYXRhLmNhbXApIHx8ICh0eXBlID09IDEgJiYgZW5zW2ldLmRhdGEuY2FtcCAhPSBlbi5kYXRhLmNhbXApKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJyLnB1c2goZW5zW2ldKVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgZGQ6IEZpZ2h0Um9sZUVudGl0eVtdID0gW107XHJcbiAgICAgICAgaWYgKHJyLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgaWYgKCFpc1JlcGVhdCkge1xyXG4gICAgICAgICAgICAgICAgcnIgPSBGaWdodE1nci5pbnN0YW5jZS5yYW5kb21BcnJheShycik7XHJcbiAgICAgICAgICAgICAgICBkZCA9IHJyLnNsaWNlKDAsIG51bSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB3aGlsZSAobnVtID4gZGQubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGluZGV4OiBudW1iZXIgPSBGaWdodE1nci5pbnN0YW5jZS5yYW5kb21JbnQoMCwgcnIubGVuZ3RoIC0gMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgZGQucHVzaChycltpbmRleF0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAob2xkVHlwZSAhPSB0eXBlKSB7XHJcbiAgICAgICAgICAgIC8v5omT5pWM5pa55Y+Y5oiQ5omT6Ieq5bex5Y+L55qE5oOF5Ya177yM5bCx6KaB5o6S6Zmk6Ieq5bexXHJcbiAgICAgICAgICAgIEFycmF5VXRpbHMucmVtb3ZlSXRlbShkZCwgZW4pXHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBkZDtcclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDpgInmi6nnlJ/lkb3kvY7miJbpq5hcclxuICAgICAqIEBwYXJhbSBpc0xvdyDmmK/lkKbkvY5cclxuICAgICAqIEBwYXJhbSBmaW5kRGF0YSBcclxuICAgICAqIEBwYXJhbSBpc1BlcmNlbnQg5piv5ZCm55m+5YiG5q+UXHJcbiAgICAgKiBAcmV0dXJucyBcclxuICAgICAqL1xyXG4gICAgcHVibGljIGZpbmRMb3dIcEVudGl0eShpc0xvdzogYm9vbGVhbiwgZmluZERhdGE6IEZpbmRUYXJnZXRJbmZvLCBpc1BlcmNlbnQ6IGJvb2xlYW4gPSB0cnVlKTogRmlnaHRSb2xlRW50aXR5W10ge1xyXG4gICAgICAgIGxldCBlbjogRmlnaHRSb2xlRW50aXR5ID0gZmluZERhdGEuZm9ybVxyXG4gICAgICAgIGxldCBlbnM6IEZpZ2h0Um9sZUVudGl0eVtdID0gZmluZERhdGEuZW5lbXlzO1xyXG4gICAgICAgIGxldCB0eXBlOiBudW1iZXIgPSBmaW5kRGF0YS50eXBlIHx8IDFcclxuICAgICAgICBsZXQgbnVtOiBudW1iZXIgPSBmaW5kRGF0YS5udW0gPT0gdW5kZWZpbmVkID8gMSA6IGZpbmREYXRhLm51bTtcclxuICAgICAgICBsZXQgaXNQYWlDaHU6IGJvb2xlYW4gPSBmaW5kRGF0YS5pc1BhaUNodVxyXG4gICAgICAgIC8vIGxldCBzdW1tb246IG51bWJlciA9IGZpbmREYXRhLnN1bW1vblxyXG5cclxuICAgICAgICB2YXIgb2xkVHlwZTogbnVtYmVyID0gdHlwZTtcclxuICAgICAgICB0eXBlID0gdGhpcy5jaGVja1NlZHVjZShlbiwgdHlwZSlcclxuICAgICAgICB2YXIgcnI6IEZpZ2h0Um9sZUVudGl0eVtdID0gW107XHJcbiAgICAgICAgZm9yICh2YXIgaTogbnVtYmVyID0gMDsgaSA8IGVucy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBpZiAoZmluZERhdGEuaXNQYWlDaHVOb3RTZWxlY3QgPT0gMSB8fCBlbnNbaV0uY2FuU2VsZWN0KCkpIHtcclxuICAgICAgICAgICAgICAgIGlmICghaXNQYWlDaHUgfHwgKGVuc1tpXSAhPSBlbikpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZSA9PSAzIHx8ICh0eXBlID09IDIgJiYgZW5zW2ldLmRhdGEuY2FtcCA9PSBlbi5kYXRhLmNhbXApIHx8ICh0eXBlID09IDEgJiYgZW5zW2ldLmRhdGEuY2FtcCAhPSBlbi5kYXRhLmNhbXApKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB2YWx1ZSA9IGlzUGVyY2VudCA/IChlbnNbaV0uZGF0YS5ocCAvIGVuc1tpXS5kYXRhLm1heEhwICogMTAwMDApIDogZW5zW2ldLmRhdGEuaHBcclxuICAgICAgICAgICAgICAgICAgICAgICAgZW5zW2ldW1wiZmluZExhdGVseUVudGl0eV9ocFwiXSA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByci5wdXNoKGVuc1tpXSlcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChvbGRUeXBlICE9IHR5cGUpIHtcclxuICAgICAgICAgICAgLy/miZPmlYzmlrnlj5jmiJDmiZPoh6rlt7Hlj4vnmoTmg4XlhrXvvIzlsLHopoHmjpLpmaToh6rlt7FcclxuICAgICAgICAgICAgQXJyYXlVdGlscy5yZW1vdmVJdGVtKHJyLCBlbilcclxuICAgICAgICB9XHJcbiAgICAgICAgQXJyYXlVdGlscy5zb3J0QnkyKHJyLCBcImZpbmRMYXRlbHlFbnRpdHlfaHBcIiwgaXNMb3csIGZhbHNlKVxyXG4gICAgICAgIHJldHVybiByci5zbGljZSgwLCBudW0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5a+556ew5L2NXHJcbiAgICAgKiBAcGFyYW0gZmluZERhdGEgXHJcbiAgICAgKiBAcmV0dXJucyBcclxuICAgICAqL1xyXG4gICAgcHVibGljIGZpbmREdWlDaGVuRW50aXR5KGZpbmREYXRhOiBGaW5kVGFyZ2V0SW5mbyk6IEZpZ2h0Um9sZUVudGl0eVtdIHtcclxuICAgICAgICBsZXQgZW46IEZpZ2h0Um9sZUVudGl0eSA9IGZpbmREYXRhLmZvcm1cclxuICAgICAgICBsZXQgZW5zOiBGaWdodFJvbGVFbnRpdHlbXSA9IGZpbmREYXRhLmVuZW15c1xyXG4gICAgICAgIGxldCB0eXBlOiBudW1iZXIgPSBmaW5kRGF0YS50eXBlIHx8IDFcclxuICAgICAgICBsZXQgbnVtOiBudW1iZXIgPSBmaW5kRGF0YS5udW0gPT0gdW5kZWZpbmVkID8gMSA6IGZpbmREYXRhLm51bTtcclxuICAgICAgICBsZXQgaXNQYWlDaHU6IGJvb2xlYW4gPSBmaW5kRGF0YS5pc1BhaUNodVxyXG4gICAgICAgIC8vIGxldCBzdW1tb246IG51bWJlciA9IGZpbmREYXRhLnN1bW1vblxyXG5cclxuICAgICAgICB0eXBlID0gdGhpcy5jaGVja1NlZHVjZShlbiwgdHlwZSlcclxuICAgICAgICB2YXIgcnI6IEZpZ2h0Um9sZUVudGl0eVtdID0gW107XHJcbiAgICAgICAgZm9yICh2YXIgaTogbnVtYmVyID0gMDsgaSA8IGVucy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBpZiAoZmluZERhdGEuaXNQYWlDaHVOb3RTZWxlY3QgPT0gMSB8fCBlbnNbaV0uY2FuU2VsZWN0KCkpIHtcclxuICAgICAgICAgICAgICAgIGlmICghaXNQYWlDaHUgfHwgZW5zW2ldICE9IGVuKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGUgPT0gMyB8fCAodHlwZSA9PSAyICYmIGVuc1tpXS5kYXRhLmNhbXAgPT0gZW4uZGF0YS5jYW1wKSB8fCAodHlwZSA9PSAxICYmIGVuc1tpXS5kYXRhLmNhbXAgIT0gZW4uZGF0YS5jYW1wKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZW5zW2ldLmRhdGEuc2l0ZSA9PSBlbi5kYXRhLnNpdGUpLy/lkIzkuIDkvY3nva5cclxuICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcnIucHVzaChlbnNbaV0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVha1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvL+WvueensOS9jee9ruaXoOiuuuWmguS7u+S9lemDveimgeaOkumZpOiHquW3se+8iOiiq+mtheaDkeaXoOWPr+iDveaUu+WHu+iHquW3se+8jOayoeiiq+mtheaDkeS4gOWumuaUu+WHu+WvueaWue+8iVxyXG4gICAgICAgIGlmIChyci5sZW5ndGggPiAwKVxyXG4gICAgICAgICAgICBBcnJheVV0aWxzLnJlbW92ZUl0ZW0ocnIsIGVuKVxyXG4gICAgICAgIHJldHVybiBycjtcclxuICAgIH1cclxufSIsImltcG9ydCB7IEZpZ2h0Um9sZUVudGl0eSB9IGZyb20gXCIuLi9maWdodC9GaWdodFJvbGVFbnRpdHlcIjtcclxuXHJcbi8qKlxyXG4gKiBAZmlsZU5hbWUgRmluZFRhcmdldEluZm8udHNcclxuICogQGF1dGhvciB6aGFuZ3Fpb25nXHJcbiAqIEBkYXRlIDIwMjQvMTIvMzAgMTk6MTk6MjJcIlxyXG4gKiBAZGVzY3JpcHRpb25cclxuICovXHJcbmV4cG9ydCBjbGFzcyBGaW5kVGFyZ2V0SW5mbyB7XHJcbiAgICBlbmVteXM6IEZpZ2h0Um9sZUVudGl0eVtdID0gW107XHJcbiAgICBmb3JtOiBGaWdodFJvbGVFbnRpdHkgPSBudWxsO1xyXG4gICAgaXNQYWlDaHU6IGJvb2xlYW4gPSBmYWxzZTtcclxuICAgIGlzUGFpQ2h1Tm90U2VsZWN0OiBudW1iZXIgPSAwO1xyXG4gICAgdHlwZTogbnVtYmVyO1xyXG4gICAgbnVtOiBudW1iZXIgPSAxO1xyXG4gICAgc2tpbGxUeXBlOiBudW1iZXIgPSAwO1xyXG4gICAgam9iOiBudW1iZXIgPSAwO1xyXG4gICAgbWF4TXA6IG51bWJlciA9IDA7XHJcbiAgICBndWlsZDogbnVtYmVyID0gMDtcclxufSIsImltcG9ydCB7IF9kZWNvcmF0b3IsIENvbXBvbmVudCwgbWF0aCwgTm9kZSwgVmVjMiwgVmVydGV4IH0gZnJvbSAnY2MnO1xyXG5pbXBvcnQgeyBHcmlkIH0gZnJvbSAnLi9HcmlkJztcclxuaW1wb3J0IHsgY29uZmlnMjA0OCwgRGlyZWN0aW9uVHlwZSB9IGZyb20gJy4vR2FtZTIwNDhFbnVtJztcclxuaW1wb3J0IHsgVGlsZSB9IGZyb20gJy4vVGlsZSc7XHJcbmltcG9ydCB7IFRvdWNoRXZlbnQgfSBmcm9tICcuLi9Db21tb24vRW51bSc7XHJcbmNvbnN0IHsgY2NjbGFzcywgcHJvcGVydHkgfSA9IF9kZWNvcmF0b3I7XHJcblxyXG5AY2NjbGFzcygnR2FtZScpXHJcbmV4cG9ydCBjbGFzcyBHYW1lMjA0OCBleHRlbmRzIENvbXBvbmVudCB7XHJcblxyXG4gICAgcHVibGljIHN0YXRpYyBfaW5zOiBHYW1lMjA0ODtcclxuXHJcbiAgICBwcm90ZWN0ZWQgb25Mb2FkKCk6IHZvaWQge1xyXG4gICAgICAgIEdhbWUyMDQ4Ll9pbnMgPSB0aGlzO1xyXG5cclxuICAgICAgICB0aGlzLm5vZGUub24oVG91Y2hFdmVudC5VUCwgKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLm1vdmUoRGlyZWN0aW9uVHlwZS5VUClcclxuICAgICAgICB9LCB0aGlzKTtcclxuXHJcbiAgICAgICAgdGhpcy5ub2RlLm9uKFRvdWNoRXZlbnQuUklHSFQsICgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5tb3ZlKERpcmVjdGlvblR5cGUuUklHSFQpXHJcbiAgICAgICAgfSwgdGhpcyk7XHJcblxyXG4gICAgICAgIHRoaXMubm9kZS5vbihUb3VjaEV2ZW50LkRPV04sICgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5tb3ZlKERpcmVjdGlvblR5cGUuRE9XTik7XHJcbiAgICAgICAgfSwgdGhpcyk7XHJcbiAgICAgICAgdGhpcy5ub2RlLm9uKFRvdWNoRXZlbnQuTEVGVCwgKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLm1vdmUoRGlyZWN0aW9uVHlwZS5MRUZUKTtcclxuICAgICAgICB9LCB0aGlzKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGdyaWQ6IEdyaWQ7XHJcblxyXG4gICAgcHJpdmF0ZSBzdGFydFRpbGVzOiBudW1iZXI7XHJcblxyXG4gICAgcHJpdmF0ZSBzaXplOiBudW1iZXI7XHJcbiAgICBzdGFydCgpIHtcclxuICAgICAgICB0aGlzLnNpemUgPSBjb25maWcyMDQ4LnNpemU7XHJcbiAgICAgICAgdGhpcy5zdGFydFRpbGVzID0gY29uZmlnMjA0OC5zdGFydFRpbGVzO1xyXG5cclxuICAgICAgICB0aGlzLmdyaWQgPSB0aGlzLm5vZGUuYWRkQ29tcG9uZW50KEdyaWQpO1xyXG4gICAgICAgIHRoaXMuZ3JpZC5zZXR1cCh0aGlzLnNpemUpO1xyXG5cclxuICAgICAgICB0aGlzLmFkZFN0YXJ0VGlsZXMoKTtcclxuICAgICAgICB0aGlzLmdyaWQuaW5pdE5vZGUoKS50aGVuKCgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5ncmlkLnJlbmRlcigpO1xyXG4gICAgICAgICAgICB0aGlzLmdyaWQucHJpbnRHcmlkKCk7XHJcbiAgICAgICAgfSlcclxuICAgICAgICAvLyBjb25zb2xlLmxvZyh0aGlzLnNlcmlhbGl6ZSgpKTtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgdXBkYXRlKGRlbHRhVGltZTogbnVtYmVyKSB7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgZ2V0VmVjdG9yKGRpcmVjdGlvbjogRGlyZWN0aW9uVHlwZSk6IFZlYzIge1xyXG4gICAgICAgIGNvbnN0IG1hcCA9IHtcclxuICAgICAgICAgICAgW0RpcmVjdGlvblR5cGUuVVBdOiBtYXRoLnYyKDAsIC0xKSxcclxuICAgICAgICAgICAgW0RpcmVjdGlvblR5cGUuRE9XTl06IG1hdGgudjIoMCwgMSksXHJcbiAgICAgICAgICAgIFtEaXJlY3Rpb25UeXBlLlJJR0hUXTogbWF0aC52MigxLCAwKSxcclxuICAgICAgICAgICAgW0RpcmVjdGlvblR5cGUuTEVGVF06IG1hdGgudjIoLTEsIDApXHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBtYXBbZGlyZWN0aW9uXVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgYnVpbGRUcmF2ZXJzYWxzKHZlY3RvcjogVmVjMik6IHsgeDogbnVtYmVyW10sIHk6IG51bWJlcltdIH0ge1xyXG4gICAgICAgIGNvbnN0IHRyYXZlcnNhbHM6IHsgeDogbnVtYmVyW10sIHk6IG51bWJlcltdIH0gPSB7IHg6IFtdLCB5OiBbXSB9O1xyXG4gICAgICAgIGZvciAobGV0IHBvcyA9IDA7IHBvcyA8IHRoaXMuc2l6ZTsgcG9zKyspIHtcclxuICAgICAgICAgICAgdHJhdmVyc2Fscy54LnB1c2gocG9zKTtcclxuICAgICAgICAgICAgdHJhdmVyc2Fscy55LnB1c2gocG9zKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHZlY3Rvci54ID09IDEpIHtcclxuICAgICAgICAgICAgdHJhdmVyc2Fscy54ID0gdHJhdmVyc2Fscy54LnJldmVyc2UoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHZlY3Rvci55ID09IDEpIHtcclxuICAgICAgICAgICAgdHJhdmVyc2Fscy55ID0gdHJhdmVyc2Fscy55LnJldmVyc2UoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRyYXZlcnNhbHM7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBmaW5kRmFydGhlc3RQb2ludChjZWxsOiBWZWMyLCB2ZWN0b3I6IFZlYzIpOiB7IGZhcnRoZXN0OiBWZWMyLCBuZXh0OiBWZWMyIH0ge1xyXG4gICAgICAgIGxldCBwcmV2aW91czogVmVjMjtcclxuXHJcbiAgICAgICAgZG8ge1xyXG4gICAgICAgICAgICBwcmV2aW91cyA9IGNlbGw7XHJcbiAgICAgICAgICAgIGNlbGwuc2V0KHByZXZpb3VzLnggKyB2ZWN0b3IueCwgcHJldmlvdXMueSArIHZlY3Rvci55KTtcclxuICAgICAgICB9IHdoaWxlICh0aGlzLmdyaWQud2l0aGluQm91bmRzKGNlbGwpICYmIHRoaXMuZ3JpZC5jaGVja0NlbGxBdmFpbGFibGUoY2VsbCkpO1xyXG5cclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBmYXJ0aGVzdDogcHJldmlvdXMsXHJcbiAgICAgICAgICAgIG5leHQ6IGNlbGxcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBwcmVwYXJlVGlsZXMoKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5ncmlkLmZvcmVhY2hDZWxsKCh4OiBudW1iZXIsIHk6IG51bWJlciwgdGlsZTogVGlsZSkgPT4ge1xyXG4gICAgICAgICAgICBpZiAodGlsZSkge1xyXG4gICAgICAgICAgICAgICAgdGlsZS5tZWdyZUZyb20gPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgdGlsZS5zYXZlUG9zaXRpb24oKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pXHJcbiAgICB9XHJcblxyXG4gICAgLy8gcHJpdmF0ZSBtb3ZlVGlsZSh0aWxlOiBOb2RlLCBjZWxsOiBWZWMyKTogdm9pZCB7XHJcbiAgICAvLyAgICAgdGhpcy5ncmlkLnJlbW92ZVRpbGUodGlsZSk7XHJcbiAgICAvLyAgICAgdGhpcy5ncmlkLmluc2VydFRpbGUodGlsZSwgY2VsbCk7XHJcbiAgICAvLyB9XHJcblxyXG4gICAgcHJpdmF0ZSBhZGRTdGFydFRpbGVzKCk6IHZvaWQge1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5zdGFydFRpbGVzOyBpKyspIHtcclxuICAgICAgICAgICAgdGhpcy5hZGRSYW5kb21UaWxlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgYWRkUmFuZG9tVGlsZSgpOiB2b2lkIHtcclxuICAgICAgICBpZiAodGhpcy5ncmlkLmNoZWNrQ2VsbHNBdmFpbGFibGUoKSkge1xyXG4gICAgICAgICAgICBjb25zdCB2YWx1ZTogbnVtYmVyID0gTWF0aC5yYW5kb20oKSA8IDAuOSA/IDIgOiA0O1xyXG4gICAgICAgICAgICBjb25zdCB0aWxlID0gdGhpcy5jcmVhdGVUaWxlKHRoaXMuZ3JpZC5yYW5kb21BdmFpbGFibGVDZWxsKCksIHZhbHVlKTtcclxuICAgICAgICAgICAgdGhpcy5ncmlkLmluc2VydFRpbGUodGlsZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgbmV4dFBvcyh2ZWN0b3I6IFZlYzIsIGRpcmVjdGlvbjogRGlyZWN0aW9uVHlwZSk6IHsgcG9zOiBWZWMyLCB2YWx1ZTogbnVtYmVyIH0ge1xyXG4gICAgICAgIGNvbnN0IG1hcCA9IHtcclxuICAgICAgICAgICAgW0RpcmVjdGlvblR5cGUuVVBdOiAodjogVmVjMikgPT4geyByZXR1cm4gbWF0aC52Mih2LnggKyAxLCB2LnkpIH0sXHJcbiAgICAgICAgICAgIFtEaXJlY3Rpb25UeXBlLkRPV05dOiAodjogVmVjMikgPT4geyByZXR1cm4gbWF0aC52Mih2LnggLSAxLCB2LnkpIH0sXHJcbiAgICAgICAgICAgIFtEaXJlY3Rpb25UeXBlLkxFRlRdOiAodjogVmVjMikgPT4geyByZXR1cm4gbWF0aC52Mih2LngsIHYueSArIDEpIH0sXHJcbiAgICAgICAgICAgIFtEaXJlY3Rpb25UeXBlLlJJR0hUXTogKHY6IFZlYzIpID0+IHsgcmV0dXJuIG1hdGgudjIodi54LCB2LnkgLSAxKSB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IHBvczogVmVjMiA9IG1hcFtkaXJlY3Rpb25dKHZlY3Rvcik7XHJcbiAgICAgICAgaWYgKHRoaXMuZ3JpZC53aXRoaW5Cb3VuZHMocG9zKSkge1xyXG4gICAgICAgICAgICBjb25zdCB2YWx1ZTogbnVtYmVyID0gdGhpcy5ncmlkLmdldENlbGxWYWx1ZShwb3MpO1xyXG4gICAgICAgICAgICByZXR1cm4geyBwb3M6IHBvcywgdmFsdWU6IHZhbHVlIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBuZXh0Tm9uWm9yZShjZWxsUG9zOiBWZWMyLCBkaXJlY3Rpb246IERpcmVjdGlvblR5cGUpOiB7IHBvczogVmVjMiwgdmFsdWU6IG51bWJlciB9IHtcclxuICAgICAgICBjb25zdCBuZXh0UG9zID0gdGhpcy5uZXh0UG9zKGNlbGxQb3MsIGRpcmVjdGlvbik7XHJcbiAgICAgICAgaWYgKCFuZXh0UG9zKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCB7IHBvcywgdmFsdWUgfSA9IG5leHRQb3M7XHJcbiAgICAgICAgaWYgKCF0aGlzLmdyaWQud2l0aGluQm91bmRzKHBvcykpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh2YWx1ZSA9PSAwKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm5leHROb25ab3JlKHBvcywgZGlyZWN0aW9uKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG5leHRQb3M7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBjYWxlKGNlbGxQb3M6IFZlYzIsIGRpcmVjdGlvbjogRGlyZWN0aW9uVHlwZSk6IHZvaWQge1xyXG4gICAgICAgIGNvbnN0IGNlbGxWYWx1ZTogbnVtYmVyID0gdGhpcy5ncmlkLmdldENlbGxWYWx1ZShjZWxsUG9zKTtcclxuICAgICAgICBjb25zdCBuZXh0ID0gdGhpcy5uZXh0Tm9uWm9yZShjZWxsUG9zLCBkaXJlY3Rpb24pO1xyXG4gICAgICAgIGlmICghbmV4dCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IGNlbGxUaWxlOiBUaWxlID0gdGhpcy5ncmlkLmdldENlbGxDb250ZW50KGNlbGxQb3MpO1xyXG4gICAgICAgIGNvbnN0IHsgcG9zLCB2YWx1ZSB9ID0gbmV4dDtcclxuICAgICAgICBsZXQgbmV4dFRpbGU6IFRpbGUgPSB0aGlzLmdyaWQuZ2V0Q2VsbENvbnRlbnQocG9zKTtcclxuICAgICAgICBpZiAoY2VsbFZhbHVlID09IDApIHtcclxuICAgICAgICAgICAgLy8gdGhpcy5ncmlkLmNlbGxzW3Bvcy54XVtwb3MueV0gPSBjZWxsTm9kZTtcclxuICAgICAgICAgICAgLy8gdGhpcy5ncmlkLmNlbGxzW2NlbGxQb3MueF1bY2VsbFBvcy55XSA9IG5leHROb2RlO1xyXG4gICAgICAgICAgICB0aGlzLmdyaWQuaW5zZXJ0VGlsZShjZWxsVGlsZSwgcG9zKTtcclxuICAgICAgICAgICAgdGhpcy5ncmlkLmluc2VydFRpbGUobmV4dFRpbGUsIG1hdGgudjIoY2VsbFBvcy54LCBjZWxsUG9zLnkpKTtcclxuXHJcblxyXG4gICAgICAgICAgICB0aGlzLmNhbGUoY2VsbFBvcywgZGlyZWN0aW9uKTtcclxuICAgICAgICB9IGVsc2UgaWYgKGNlbGxWYWx1ZSA9PT0gdmFsdWUpIHtcclxuICAgICAgICAgICAgY29uc3QgbWVyZ2VkVGlsZTogVGlsZSA9IHRoaXMuY3JlYXRlVGlsZShwb3MsIHZhbHVlICogMik7XHJcbiAgICAgICAgICAgIC8vIGxldCBtZXJnZWRUaWxlOiBUaWxlID0gbWVyZ2VkTm9kZS5nZXRDb21wb25lbnQoVGlsZSk7XHJcbiAgICAgICAgICAgIG1lcmdlZFRpbGUubWVncmVGcm9tID0gW2NlbGxUaWxlLCBuZXh0VGlsZV07XHJcbiAgICAgICAgICAgIC8vIHRoaXMuZ3JpZC5jZWxsc1twb3MueF1bcG9zLnldID0gbnVsbDtcclxuICAgICAgICAgICAgLy8gdGhpcy5ncmlkLmNlbGxzW2NlbGxQb3MueF1bY2VsbFBvcy55XSA9IG1lcmdlZE5vZGU7XHJcbiAgICAgICAgICAgIHRoaXMuZ3JpZC5yZW1vdmVUaWxlKG51bGwsIHBvcyk7XHJcbiAgICAgICAgICAgIHRoaXMuZ3JpZC5pbnNlcnRUaWxlKG1lcmdlZFRpbGUsIG1hdGgudjIoY2VsbFBvcy54LCBjZWxsUG9zLnkpKTtcclxuICAgICAgICAgICAgLy8gdGhpcy5ncmlkLnJlbW92ZVRpbGUoKVxyXG5cclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgbmV4dFBvcyA9IHRoaXMubmV4dFBvcyhjZWxsUG9zLCBkaXJlY3Rpb24pO1xyXG4gICAgICAgIHRoaXMuY2FsZShuZXh0UG9zLnBvcywgZGlyZWN0aW9uKVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBtb3ZlKGRpcmVjdGlvbjogRGlyZWN0aW9uVHlwZSk6IHZvaWQge1xyXG5cclxuICAgICAgICB0aGlzLnByZXBhcmVUaWxlcygpO1xyXG5cclxuICAgICAgICBpZiAoZGlyZWN0aW9uID09IERpcmVjdGlvblR5cGUuVVApIHtcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnNpemU7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jYWxlKG1hdGgudjIoMCwgaSksIGRpcmVjdGlvbik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2UgaWYgKGRpcmVjdGlvbiA9PSBEaXJlY3Rpb25UeXBlLkRPV04pIHtcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnNpemU7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jYWxlKG1hdGgudjIodGhpcy5zaXplIC0gMSwgaSksIGRpcmVjdGlvbik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2UgaWYgKGRpcmVjdGlvbiA9PSBEaXJlY3Rpb25UeXBlLkxFRlQpIHtcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnNpemU7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jYWxlKG1hdGgudjIoaSwgMCksIGRpcmVjdGlvbik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2UgaWYgKGRpcmVjdGlvbiA9PSBEaXJlY3Rpb25UeXBlLlJJR0hUKSB7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5zaXplOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuY2FsZShtYXRoLnYyKGksIHRoaXMuc2l6ZSAtIDEpLCBkaXJlY3Rpb24pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmFkZFJhbmRvbVRpbGUoKTtcclxuICAgICAgICB0aGlzLmdyaWQucmVuZGVyKCk7XHJcbiAgICAgICAgdGhpcy5ncmlkLnByaW50R3JpZCgpO1xyXG4gICAgfVxyXG5cclxuXHJcblxyXG4gICAgcHJpdmF0ZSBwb3NpdGlvbnNFcXVhbChmaXJzdDogVmVjMiwgc2Vjb25kOiBWZWMyKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIGZpcnN0LnggPT09IHNlY29uZC54ICYmIGZpcnN0LnkgPT09IHNlY29uZC55O1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgY3JlYXRlVGlsZShwb3M6IFZlYzIsIHZhbHVlOiBudW1iZXIpOiBUaWxlIHtcclxuICAgICAgICBjb25zdCB0aWxlOiBUaWxlID0gbmV3IFRpbGUoKTtcclxuICAgICAgICB0aWxlLnNldHVwKHBvcywgdmFsdWUpO1xyXG4gICAgICAgIHJldHVybiB0aWxlO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzZXJpYWxpemUoKTogYW55IHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBncmlkOiB0aGlzLmdyaWQuc2VyaWFsaXplKClcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxud2luZG93W1wiR2FtZTIwNDhcIl0gPSBHYW1lMjA0OFxyXG5cclxuXHJcbiIsImV4cG9ydCBlbnVtIERpcmVjdGlvblR5cGUge1xyXG4gICAgVVAgPSAwLFxyXG4gICAgUklHSFQsXHJcbiAgICBET1dOLFxyXG4gICAgTEVGVFxyXG59XHJcblxyXG5leHBvcnQgY29uc3QgY29uZmlnMjA0OCA9IHtcclxuICAgIHRpbGVXaWR0aDogMTAwLFxyXG4gICAgdGlsZUhpZ2h0OiAxMDAsXHJcblxyXG4gICAgc2l6ZTogNCxcclxuICAgIHN0YXJ0VGlsZXM6IDIsXHJcbn0iLCJpbXBvcnQgeyBOb2RlLCBVSVRyYW5zZm9ybSwgdmlldyB9IGZyb20gXCJjY1wiO1xyXG5cclxuZXhwb3J0IGNsYXNzIEdhbWVDYW1lcmEge1xyXG4gICAgcHJpdmF0ZSB2aWV3UG9ydE5vZGU6IE5vZGU7XHJcbiAgICBwcml2YXRlIG1hcE5vZGU6IE5vZGU7XHJcbiAgICBwcml2YXRlIHJvbGVOb2RlOiBOb2RlO1xyXG5cclxuXHJcbiAgICBwcml2YXRlIHhSYW5nZTogbnVtYmVyO1xyXG4gICAgcHJpdmF0ZSB5UmFuZ2U6IG51bWJlcjtcclxuICAgIHByaXZhdGUgbGFzdFg6IG51bWJlcjtcclxuICAgIHByaXZhdGUgbGFzdFk6IG51bWJlcjtcclxuICAgIHB1YmxpYyBjb25zdHJ1Y3Rvcih2aWV3UG9ydE5vZGU6IE5vZGUsIG1hcE5vZGU6IE5vZGUsIHJvbGVOb2RlOiBOb2RlKSB7XHJcbiAgICAgICAgdGhpcy52aWV3UG9ydE5vZGUgPSB2aWV3UG9ydE5vZGU7XHJcbiAgICAgICAgdGhpcy5tYXBOb2RlID0gbWFwTm9kZTtcclxuICAgICAgICB0aGlzLnJvbGVOb2RlID0gcm9sZU5vZGU7XHJcblxyXG4gICAgICAgIGNvbnN0IHZpZXdQb3J0VUlUcnM6IFVJVHJhbnNmb3JtID0gdGhpcy52aWV3UG9ydE5vZGUuZ2V0Q29tcG9uZW50KFVJVHJhbnNmb3JtKTtcclxuICAgICAgICBjb25zdCBtYXBVSVRyczogVUlUcmFuc2Zvcm0gPSB0aGlzLm1hcE5vZGUuZ2V0Q29tcG9uZW50KFVJVHJhbnNmb3JtKTtcclxuICAgICAgICBpZiAobWFwVUlUcnMud2lkdGggPiB2aWV3UG9ydFVJVHJzLndpZHRoKSB7XHJcbiAgICAgICAgICAgIHRoaXMueFJhbmdlID0gKG1hcFVJVHJzLndpZHRoIC0gdmlld1BvcnRVSVRycy53aWR0aCkgLyAyO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMueFJhbmdlID0gMDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKG1hcFVJVHJzLmhlaWdodCA+IHZpZXdQb3J0VUlUcnMuaGVpZ2h0KSB7XHJcbiAgICAgICAgICAgIHRoaXMueVJhbmdlID0gKG1hcFVJVHJzLmhlaWdodCAtIHZpZXdQb3J0VUlUcnMuaGVpZ2h0KSAvIDI7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy55UmFuZ2UgPSAwO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmxhc3RYID0gcm9sZU5vZGUucG9zaXRpb24ueDtcclxuICAgICAgICB0aGlzLmxhc3RZID0gcm9sZU5vZGUucG9zaXRpb24ueTtcclxuXHJcbiAgICB9XHJcblxyXG5cclxuICAgIHB1YmxpYyB1cGRhdGVQb3NpdGlvbigpOiB2b2lke1xyXG4gICAgICAgIGlmICh0aGlzLmxhc3RYID09PSB0aGlzLnJvbGVOb2RlLnBvc2l0aW9uLnggJiYgdGhpcy5sYXN0WSA9PT0gdGhpcy5yb2xlTm9kZS5wb3NpdGlvbi55KSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMubGFzdFggPSB0aGlzLnJvbGVOb2RlLnBvc2l0aW9uLng7XHJcbiAgICAgICAgdGhpcy5sYXN0WCA9IHRoaXMucm9sZU5vZGUucG9zaXRpb24ueVxyXG4gICAgICAgIC8v5Lq654mp5ZKM5Zyw5Zu+5Lit54K56Led56a7XHJcbiAgICAgICAgbGV0IGRpc3RYID0gdGhpcy5yb2xlTm9kZS5wb3NpdGlvbi54O1xyXG4gICAgICAgIGxldCBkaXN0WSA9IHRoaXMucm9sZU5vZGUucG9zaXRpb24ueTtcclxuICAgICAgICAvL+WcsOWbvuagueaNrui3neemu+WPjeWQkeenu+WKqO+8jOi/meagt+S6uueJqeWwseiDveS4gOebtOWkhOS6juinhuWPo+S4remXtFxyXG5cclxuICAgICAgICB0aGlzLm1hcE5vZGUuc2V0UG9zaXRpb24oLWRpc3RYLCAtZGlzdFkpO1xyXG4gICAgICAgIC8v5Zyw5Zu+6L6557yY5qOA5rWLXHJcbiAgICAgICAgaWYgKHRoaXMubWFwTm9kZS5wb3NpdGlvbi54ID4gdGhpcy54UmFuZ2UpIHtcclxuICAgICAgICAgICAgdGhpcy5tYXBOb2RlLnNldFBvc2l0aW9uKHRoaXMueFJhbmdlLCB0aGlzLm1hcE5vZGUucG9zaXRpb24ueSk7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwi5pGE5YOP5aS06LaF6L+H5Y+z6L6555WMXCIpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5tYXBOb2RlLnBvc2l0aW9uLnggPCAtdGhpcy54UmFuZ2UpIHtcclxuICAgICAgICAgICAgdGhpcy5tYXBOb2RlLnNldFBvc2l0aW9uKC10aGlzLnhSYW5nZSwgdGhpcy5tYXBOb2RlLnBvc2l0aW9uLnkpO1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIuaRhOWDj+WktOi2hei/h+W3pui+ueeVjFwiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMubWFwTm9kZS5wb3NpdGlvbi55ID4gdGhpcy55UmFuZ2UpIHtcclxuICAgICAgICAgICAgdGhpcy5tYXBOb2RlLnNldFBvc2l0aW9uKHRoaXMubWFwTm9kZS5wb3NpdGlvbi54LCB0aGlzLnlSYW5nZSk7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwi5pGE5YOP5aS06LaF6L+H5LiK6L6555WMXCIpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5tYXBOb2RlLnBvc2l0aW9uLnkgPCAtdGhpcy55UmFuZ2UpIHtcclxuICAgICAgICAgICAgdGhpcy5tYXBOb2RlLnNldFBvc2l0aW9uKHRoaXMubWFwTm9kZS5wb3NpdGlvbi54LCAtdGhpcy55UmFuZ2UpO1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIuaRhOWDj+WktOi2hei/h+S4i+i+ueeVjFwiKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG59IiwiLyoqXHJcbiAqIEBmaWxlTmFtZSBHYW1lQ29uc3QudHNcclxuICogQGF1dGhvciB6aGFuZ3Fpb25nXHJcbiAqIEBkYXRlIDIwMjQvMTIvMjYgMTU6MTk6MjVcIlxyXG4gKiBAZGVzY3JpcHRpb25cclxuICovXHJcbmV4cG9ydCBjbGFzcyBHYW1lQ29uc3Qge1xyXG4gICAgcHVibGljIHN0YXRpYyBBdHRhY2s6IHN0cmluZyA9IFwiYXR0XCI7XHJcbiAgICBwdWJsaWMgc3RhdGljIElkbGU6IHN0cmluZyA9IFwiaG9sZG9uXCI7XHJcbiAgICBwdWJsaWMgc3RhdGljIE1vdmU6IHN0cmluZyA9IFwibW92ZVwiO1xyXG4gICAgcHVibGljIHN0YXRpYyBTa2lsbDogc3RyaW5nID0gXCJza2lsbFwiO1xyXG4gICAgcHVibGljIHN0YXRpYyBVbHRpbWF0ZXNraWxsOiBzdHJpbmcgPSBcInVsdGltYXRlc2tpbGxcIlxyXG4gICAgcHVibGljIHN0YXRpYyBCZUhpdDogc3RyaW5nID0gXCJiZWhpdFwiO1xyXG4gICAgcHVibGljIHN0YXRpYyBEZWF0aDogc3RyaW5nID0gXCJkZWF0aFwiO1xyXG4gICAgcHVibGljIHN0YXRpYyBXaW46IHN0cmluZyA9IFwid2luXCI7XHJcblxyXG5cclxuICAgIHN0YXRpYyBVUDogbnVtYmVyID0gMDtcclxuICAgIHN0YXRpYyBSSUdIVF9VUDogbnVtYmVyID0gMTtcclxuICAgIHN0YXRpYyBSSUdIVDogbnVtYmVyID0gMjtcclxuICAgIHN0YXRpYyBSSUdIVF9ET1dOOiBudW1iZXIgPSAzO1xyXG4gICAgc3RhdGljIERPV046IG51bWJlciA9IDQ7XHJcbiAgICBzdGF0aWMgTEVGVF9ET1dOOiBudW1iZXIgPSA1O1xyXG4gICAgc3RhdGljIExFRlQ6IG51bWJlciA9IDY7XHJcbiAgICBzdGF0aWMgTEVGVF9VUDogbnVtYmVyID0gNztcclxuXHJcblxyXG4gICAgLyoqIOWMlyDkuIogKiovXHJcbiAgICBzdGF0aWMgTjogbnVtYmVyID0gMDtcclxuICAgIC8qKiDlj7PkuIoqKi9cclxuICAgIHN0YXRpYyBORTogbnVtYmVyID0gMTtcclxuICAgIC8qKiDkuJwg5Y+zICoqL1xyXG4gICAgc3RhdGljIEU6IG51bWJlciA9IDI7XHJcbiAgICAvKiog5Y+z5LiLKiovXHJcbiAgICBzdGF0aWMgRVM6IG51bWJlciA9IDM7XHJcbiAgICAvKiog5Y2XICDkuIsqKi9cclxuICAgIHN0YXRpYyBTOiBudW1iZXIgPSA0O1xyXG4gICAgLyoq5bem5LiLKiovXHJcbiAgICBzdGF0aWMgU1c6IG51bWJlciA9IDU7XHJcbiAgICAvKiog6KW/IOW3piAqKi9cclxuICAgIHN0YXRpYyBXOiBudW1iZXIgPSA2O1xyXG4gICAgLyoqIOW3puS4iioqL1xyXG4gICAgc3RhdGljIFdOOiBudW1iZXIgPSA3O1xyXG5cclxuXHJcbiAgICAvKiog6IOM5pmv5bGCICoqL1xyXG4gICAgc3RhdGljIEJHX0xBWUVSOiBzdHJpbmcgPSBcImJnQ29udGFpbmVyXCI7XHJcbiAgICAvKiog5Zyw5Zu+5bGCICoqL1xyXG4gICAgc3RhdGljIE1BUF9Cb3R0b21fUm9sZV9MQVlFUjogc3RyaW5nID0gXCJib3R0b21Sb2xlQ29udGFpbmVyXCI7XHJcbiAgICAvKiog5Zyw5Zu+5bGCICoqL1xyXG4gICAgc3RhdGljIE1BUF9MQVlFUjogc3RyaW5nID0gXCJtYXBDb250YWluZXJcIjtcclxuICAgIC8qKiDlnLDlm77oo4XppbDlsYIgKiovXHJcbiAgICBzdGF0aWMgREVDT1JBVEVfTEFZRVI6IHN0cmluZyA9IFwiZGVjb3JhdGVDb250YWluZXJcIjtcclxuICAgIC8qKiDlvbHlrZDlsYIgKiovXHJcbiAgICBzdGF0aWMgTUFQX1NIQURPV19MQVlFUjogc3RyaW5nID0gXCJzaGFkb3dDb250YWluZXJcIjtcclxuICAgIC8qKiDohJrlupXnibnmlYjlsYIgKiovXHJcbiAgICBzdGF0aWMgTUFQX01BR0lDX0xBWUVSOiBzdHJpbmcgPSBcIm1hZ2ljQ29udGFpbmVyXCI7XHJcbiAgICAvKiog5Zyw5Zu+54m55pWI5bGCICoqL1xyXG4gICAgc3RhdGljIE1BUF9FRkZFQ1RfTEFZRVI6IHN0cmluZyA9IFwibWFwRWZmZWN0Q29udGFpbmVyXCI7XHJcbiAgICAvKiog5o6J6JC95bGCICoqL1xyXG4gICAgc3RhdGljIE1BUF9EUk9QX0xBWUVSOiBzdHJpbmcgPSBcImRyb3BDb250YWluZXJcIjtcclxuICAgIC8qKiDnibnmlYjlsYIgKiovXHJcbiAgICBzdGF0aWMgRUZGRUNUX0JvdHRvbV9MQVlFUjogc3RyaW5nID0gXCJlZmZlY3RCb3R0b21Db250YWluZXJcIjtcclxuICAgIC8qKiDnuqLnmb3nibnmlYjlsYIgKiovXHJcbiAgICBzdGF0aWMgRUZGRUNUX1RPUF9MQVlFUjogc3RyaW5nID0gXCJlZmZlY3RUb3BDb250YWluZXJcIjtcclxuICAgIC8qKiDop5LoibLlsYIgKiovXHJcbiAgICBzdGF0aWMgUk9MRV9MQVlFUjogc3RyaW5nID0gXCJyb2xlQ29udGFpbmVyXCI7XHJcbiAgICAvKiog6KeS6Imy6YGu572p5bGCICoqL1xyXG4gICAgc3RhdGljIFJPTEVfTkFNRV9MQVlFUjogc3RyaW5nID0gXCJyb2xlTmFtZUNvbnRhaW5lclwiO1xyXG4gICAgLyoqIOeJueaViOWxgiAqKi9cclxuICAgIHN0YXRpYyBFRkZFQ1RfTEFZRVI6IHN0cmluZyA9IFwiZWZmZWN0Q29udGFpbmVyXCI7XHJcbiAgICAvKiog5Y+X5Ye754m55pWI5bGCICoqL1xyXG4gICAgc3RhdGljIEhJVF9FRkZFQ1RfTEFZRVI6IHN0cmluZyA9IFwiaGl0RWZmZWN0TGF5ZXJcIjtcclxuICAgIC8qKiDpo5jooYDlsYLlsYIgKiovXHJcbiAgICBzdGF0aWMgSFVSVF9FRkZFQ1RfTEFZRVI6IHN0cmluZyA9IFwiaHVydENvbnRhaW5lclwiO1xyXG4gICAgLyoqIOS4remXtOWxgiAqKi9cclxuICAgIHN0YXRpYyBDRU5URVJfTEFZRVI6IHN0cmluZyA9IFwiY2VudGVyQ29udGFpbmVyXCI7XHJcbiAgICAvKiog5YmN5pmv5bGCICoqL1xyXG4gICAgc3RhdGljIFRPUF9MQVlFUjogc3RyaW5nID0gXCJ0b3BDb250YWluZXJcIjtcclxuXHJcbiAgICAvLyDkuLvnm67moIdcclxuICAgIC8qKuW9k+WJjeS4u+ebruaghyAqL1xyXG4gICAgcHVibGljIHN0YXRpYyBNYWluX0RhbmdRaWFuTXVCaWFvOiBudW1iZXIgPSAxO1xyXG4gICAgLyoq6KGA55m+5YiG5q+U5pyA5L2O5Li755uu5qCHICovXHJcbiAgICBwdWJsaWMgc3RhdGljIE1haW5fWHVlQmFpRmVuWnVpRGk6IG51bWJlciA9IDI7XHJcbiAgICAvKirooYDnmb7liIbmr5TmnIDpq5jkuLvnm67moIcgKi9cclxuICAgIHB1YmxpYyBzdGF0aWMgTWFpbl9YdWVCYWlGZW5adWlHYW86IG51bWJlciA9IDM7XHJcbiAgICAvKirot53nprvmnIDov5zkuLvnm67moIcgKi9cclxuICAgIHB1YmxpYyBzdGF0aWMgTWFpbl9KdUxpWnVpWXVhbjogbnVtYmVyID0gNDtcclxuICAgIC8qKui3neemu+acgOi/keS4u+ebruaghyAqL1xyXG4gICAgcHVibGljIHN0YXRpYyBNYWluX0p1TGladWlKaW46IG51bWJlciA9IDU7XHJcbiAgICAvKirliJ3lp4vlr7nnp7DkvY3nva7kuLvnm67moIcgKi9cclxuICAgIHB1YmxpYyBzdGF0aWMgTWFpbl9DaHVTaGlEdWlDaGVuZ1dlaVpoaTogbnVtYmVyID0gNjtcclxuXHJcbiAgICAvL+S4tOaXtuebruaghyAg5LiA6Iis6YWN572u5Zyo5oqA6IO96KGo5LitXHJcbiAgICAvKirlvZPliY3nm67moIcgKi9cclxuICAgIHB1YmxpYyBzdGF0aWMgRGFuZ1FpYW5NdUJpYW86IG51bWJlciA9IDE7XHJcbiAgICAvKirlhajkvZMgKi9cclxuICAgIHB1YmxpYyBzdGF0aWMgUXVhblRpOiBudW1iZXIgPSAyO1xyXG4gICAgLyoq5oiY5Yqb5pyA6auYICovXHJcbiAgICBwdWJsaWMgc3RhdGljIFpoYW5MaVp1aUdhbzogbnVtYmVyID0gMztcclxuICAgIC8qKuaUu+WHu+acgOmrmCAqL1xyXG4gICAgcHVibGljIHN0YXRpYyBHb25nSmladWlHYW86IG51bWJlciA9IDQ7XHJcbiAgICAvKirooYDnmb7liIbmr5TmnIDkvY4gKi9cclxuICAgIHB1YmxpYyBzdGF0aWMgWHVlQmFpRmVuWnVpRGk6IG51bWJlciA9IDU7XHJcbiAgICAvKirooYDnmb7liIbmr5TmnIDpq5ggKi9cclxuICAgIHB1YmxpYyBzdGF0aWMgWHVlQmFpRmVuWnVpR2FvOiBudW1iZXIgPSA2O1xyXG4gICAgLyoq6Led56a75pyA6L+cICovXHJcbiAgICBwdWJsaWMgc3RhdGljIEp1TGladWlZdWFuOiBudW1iZXIgPSA3O1xyXG4gICAgLyoq6Led56a75pyA6L+RICovXHJcbiAgICBwdWJsaWMgc3RhdGljIEp1TGladWlKaW46IG51bWJlciA9IDg7XHJcbiAgICAvKirliJ3lp4vlr7nnp7DkvY3nva4gKi9cclxuICAgIHB1YmxpYyBzdGF0aWMgQ2h1U2hpRHVpQ2hlbmdXZWlaaGk6IG51bWJlciA9IDk7XHJcbiAgICAvKirmnIDpnaDliY0gKi9cclxuICAgIHB1YmxpYyBzdGF0aWMgWnVpS2FvUWlhbjogbnVtYmVyID0gMTA7XHJcbiAgICAvKirmnIDpnaDlkI4gKi9cclxuICAgIHB1YmxpYyBzdGF0aWMgWnVpS2FvSG91OiBudW1iZXIgPSAxMTtcclxuICAgIC8qKuWJjeaOkiAqL1xyXG4gICAgcHVibGljIHN0YXRpYyBRaWFuUGFpOiBudW1iZXIgPSAxMjtcclxuICAgIC8qKuWQjuaOkiAqL1xyXG4gICAgcHVibGljIHN0YXRpYyBIb3VQYWk6IG51bWJlciA9IDEzO1xyXG4gICAgLyoq6ZqP5py65LiN5Y+v6YeN5aSNICovXHJcbiAgICBwdWJsaWMgc3RhdGljIFN1aUppQnVLZUNob25nRnU6IG51bWJlciA9IDE0O1xyXG4gICAgLyoq6ZqP5py65Y+v6YeN5aSNICovXHJcbiAgICBwdWJsaWMgc3RhdGljIFN1aUppS2VDaG9uZ0Z1OiBudW1iZXIgPSAxNTtcclxuICAgIC8qKuacgOWvhumbhueahOWcsOaWuSAqL1xyXG4gICAgcHVibGljIHN0YXRpYyBNaUppOiBudW1iZXIgPSAxNjtcclxuICAgIC8qKuacgOS9jumYsiAqL1xyXG4gICAgcHVibGljIHN0YXRpYyBGYW5nWXVEaTogbnVtYmVyID0gMTc7XHJcbiAgICAvKirmjIflrproi7Hpm4TvvIjlhYnnjq/vvIkgKi9cclxuICAgIHB1YmxpYyBzdGF0aWMgWmhpRGluZ1lpbmdYaW9uZzogbnVtYmVyID0gMTg7XHJcbiAgICAvKirmnIDliY3msqHmnInnm74gKi9cclxuICAgIHB1YmxpYyBzdGF0aWMgRm9udE5vdER1bjogbnVtYmVyID0gMTk7XHJcbiAgICAvKirmi6XmnInmn5DkuKpCVUZGICovXHJcbiAgICBwdWJsaWMgc3RhdGljIEJ1ZmY6IG51bWJlciA9IDIwO1xyXG4gICAgLyoq6KGA6YeP5pyA5L2OICovXHJcbiAgICBwdWJsaWMgc3RhdGljIFh1ZVp1aURpOiBudW1iZXIgPSAyMTtcclxuICAgIC8qKuihgOmHj+acgOmrmCAqL1xyXG4gICAgcHVibGljIHN0YXRpYyBYdWVadWlHYW86IG51bWJlciA9IDIyO1xyXG4gICAgLyoq5oyJ5pS75Ye757G75Z6L6YCJ5Y+W77yIMeeJqeeQhu+8jDLms5XmnK/vvIkgKi9cclxuICAgIHB1YmxpYyBzdGF0aWMgR29uZ0ppTGVpWGluZzogbnVtYmVyID0gMjM7XHJcbiAgICAvKirop5LluqbmnIDlsI8s5Y+W55qE57q15Z2Q5qCH55u45beu5pyA5bCP55qE57ud5a+55YC8ICovXHJcbiAgICBwdWJsaWMgc3RhdGljIEppYW9EdVp1aVhpYW86IG51bWJlciA9IDI0O1xyXG4gICAgLyoq6KeS5bqm5pyA5bCPLOaMh+WumuiBjOS4miAqL1xyXG4gICAgcHVibGljIHN0YXRpYyBKb2I6IG51bWJlciA9IDI1O1xyXG4gICAgLyoq6IO96YeP5pyA6auY5o6S6Zmk5bey5ruhICovXHJcbiAgICBwdWJsaWMgc3RhdGljIE1heE1wOiBudW1iZXIgPSAyNjtcclxuICAgIC8qKuaMh+WumumYteiQpSAqL1xyXG4gICAgcHVibGljIHN0YXRpYyBaaGlEaW5nWmhlbllpbmc6IG51bWJlciA9IDI3O1xyXG4gICAgLyoq6Ieq5bexICovXHJcbiAgICBwdWJsaWMgc3RhdGljIFppamk6IG51bWJlciA9IDI4O1xyXG4gICAgLyoq5aiB6IOB5pyA5aSnICovXHJcbiAgICBwdWJsaWMgc3RhdGljIFdlaVhpZVp1aURhOiBudW1iZXIgPSAyOTtcclxuICAgIC8qKuacgOmdoOi/keaIkeaWueWNiuWcuueahOaoquWdkOagh+acgOWwj+eahOebruaghyAqL1xyXG4gICAgcHVibGljIHN0YXRpYyBadWlLYW9KaW5Xb0ZhbmdIb3VQYWk6IG51bWJlciA9IDMwO1xyXG4gICAgLyoq5LyY5YWI6YCJ5oup5Zy65LiK5pC65bimYnVmZueahOebruagh++8jOiLpeayoeacieaQuuW4pmJ1ZmbnmoTnm67moIfliJnpgInmi6npmLLlvqHmnIDkvY7nmoQgKi9cclxuICAgIHB1YmxpYyBzdGF0aWMgQnVmZk9yRmFuZ1l1RGk6IG51bWJlciA9IDMxO1xyXG4gICAgLyoq5oyH5a6a5Y2K5Zy6IDHmlYzmlrkgMuaIkeaWuSAqL1xyXG4gICAgcHVibGljIHN0YXRpYyBaaGlEaW5nUXVZdTogbnVtYmVyID0gMzI7XHJcbiAgICAvKirmjIflrprpmLXokKXmlLvlh7vlipvmnIDpq5jvvIznrKw05Liq5YC85aGr6Zi16JClaWQgKi9cclxuICAgIHB1YmxpYyBzdGF0aWMgWmhlbllpbmdHb25nSmlMaVp1aUdhbzogbnVtYmVyID0gMzQ7XHJcbiAgICAvKirmmrTlh7vnjofmnIDpq5ggKi9cclxuICAgIHB1YmxpYyBzdGF0aWMgQmFvSmlMdlp1aUdhbzogbnVtYmVyID0gMzU7XHJcblxyXG5cclxuXHJcbiAgICAvKirkuLvliqjmioDog70gKi9cclxuICAgIHB1YmxpYyBzdGF0aWMgU2tpbGxfQWN0aXZlOiBudW1iZXIgPSAxO1xyXG4gICAgLyoq6Ieq5Yqo5oqA6IO9ICovXHJcbiAgICBwdWJsaWMgc3RhdGljIFNraWxsX0F1dG86IG51bWJlciA9IDI7XHJcbiAgICAvKirooqvliqjmioDog70gKi9cclxuICAgIHB1YmxpYyBzdGF0aWMgU2tpbGxfUGFzc2l2ZTogbnVtYmVyID0gMztcclxuICAgIC8qKuiiq+WKqOinpuWPkeS4u+WKqOaKgOiDvSAqL1xyXG4gICAgcHVibGljIHN0YXRpYyBTa2lsbF9QYXNzaXZlVG9BY3RpdmU6IG51bWJlciA9IDQ7XHJcbiAgICAvKirnpZ7lmajmioDog70gKi9cclxuICAgIHB1YmxpYyBzdGF0aWMgU2tpbGxfR29kV2VhcG9uOiBudW1iZXIgPSA1O1xyXG4gICAgLyoq5Zyj6b6Z5oqA6IO9ICovXHJcbiAgICBwdWJsaWMgc3RhdGljIFNraWxsX1NoZW5nTG9uZzogbnVtYmVyID0gNjtcclxuXHJcblxyXG4gICAgcHVibGljIHN0YXRpYyBBY3Rpb25fT3ByZV9PbmU6IG51bWJlciA9IDE7XHJcbiAgICBwdWJsaWMgc3RhdGljIEFjdGlvbl9PcHJlX1F1YXVlOiBudW1iZXIgPSAyO1xyXG5cclxufSIsImltcG9ydCB7IF9kZWNvcmF0b3IsIENvbG9yLCBDb21wb25lbnQsIExhYmVsLCBtYXRoLCBOb2RlLCByYW5kb20sIHJhbmRvbVJhbmdlLCBTaXplLCBTcHJpdGUsIFVJVHJhbnNmb3JtLCBWZWMzIH0gZnJvbSAnY2MnO1xyXG5pbXBvcnQgVXRpbHMgZnJvbSAnLi4vQ29tbW9uL1V0aWxzJztcclxuaW1wb3J0IHsgUXVhZFRyZWVSZWN0IH0gZnJvbSAnLi4vQ29tbW9uL1F1YWRUcmVlJztcclxuY29uc3QgeyBjY2NsYXNzLCBwcm9wZXJ0eSB9ID0gX2RlY29yYXRvcjtcclxuXHJcbkBjY2NsYXNzKCdHYW1lRWxlbWVudCcpXHJcbmV4cG9ydCBjbGFzcyBHYW1lRWxlbWVudCBleHRlbmRzIENvbXBvbmVudCB7XHJcbiAgICBwdWJsaWMgZ2V0IHJlY3QoKTogUXVhZFRyZWVSZWN0e1xyXG4gICAgICAgIHJldHVybiBuZXcgUXVhZFRyZWVSZWN0KHRoaXMueCwgdGhpcy55LCB0aGlzLndpZHRoLCB0aGlzLmhlaWdodCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBfeDogbnVtYmVyO1xyXG4gICAgcHVibGljIGdldCB4KCk6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3g7XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgc2V0IHgodmFsdWU6IG51bWJlcikge1xyXG4gICAgICAgIHRoaXMuX3ggPSB2YWx1ZTtcclxuICAgIH1cclxuICAgIHByaXZhdGUgX3k6IG51bWJlcjtcclxuICAgIHB1YmxpYyBnZXQgeSgpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl95O1xyXG4gICAgfVxyXG4gICAgcHVibGljIHNldCB5KHZhbHVlOiBudW1iZXIpIHtcclxuICAgICAgICB0aGlzLl95ID0gdmFsdWU7XHJcbiAgICB9XHJcbiAgICBwcml2YXRlIF93aWR0aDogbnVtYmVyO1xyXG4gICAgcHVibGljIGdldCB3aWR0aCgpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl93aWR0aDtcclxuICAgIH1cclxuICAgIHB1YmxpYyBzZXQgd2lkdGgodmFsdWU6IG51bWJlcikge1xyXG4gICAgICAgIHRoaXMuX3dpZHRoID0gdmFsdWU7XHJcbiAgICB9XHJcbiAgICBwcml2YXRlIF9oZWlnaHQ6IG51bWJlcjtcclxuICAgIHB1YmxpYyBnZXQgaGVpZ2h0KCk6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2hlaWdodDtcclxuICAgIH1cclxuICAgIHB1YmxpYyBzZXQgaGVpZ2h0KHZhbHVlOiBudW1iZXIpIHtcclxuICAgICAgICB0aGlzLl9oZWlnaHQgPSB2YWx1ZTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc2l6ZTogU2l6ZTtcclxuICAgIHByb3RlY3RlZCBkaXI6IFZlYzM7XHJcbiAgICBcclxuICAgIHB1YmxpYyBzcGVlZDogbnVtYmVyID0gMjUwO1xyXG4gICAgXHJcbiAgICBwcm90ZWN0ZWQgbmFtZUxhYmVsOiBMYWJlbDtcclxuXHJcbiAgICBwcml2YXRlIG15c2VsZjogYm9vbGVhbiA9IGZhbHNlO1xyXG5cclxuICAgIHByb3RlY3RlZCBvbkxvYWQoKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5uYW1lTGFiZWwgPSB0aGlzLm5vZGUuZ2V0Q2hpbGRCeU5hbWUoXCJuYW1lTGFibGVcIikuZ2V0Q29tcG9uZW50KExhYmVsKTtcclxuICAgICAgICBpZiAodGhpcy5uYW1lTGFiZWwpIHtcclxuICAgICAgICAgICAgdGhpcy5uYW1lTGFiZWwuc3RyaW5nID0gdGhpcy5ub2RlLm5hbWU7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHN0YXJ0KCkge1xyXG4gICAgICAgIGNvbnN0IHVpVHJhbnNmb3JtOiBVSVRyYW5zZm9ybSA9IHRoaXMuZ2V0Q29tcG9uZW50KFVJVHJhbnNmb3JtKTtcclxuICAgICAgICB0aGlzLndpZHRoID0gdWlUcmFuc2Zvcm0ud2lkdGg7XHJcbiAgICAgICAgdGhpcy5oZWlnaHQgPSB1aVRyYW5zZm9ybS5oZWlnaHQ7XHJcbiAgICAgICAgLy8gdGhpcy5zaXplID0gbWF0aC5zaXplKHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0KTtcclxuICAgIH1cclxuXHJcbiAgICB1cGRhdGUoZGVsdGFUaW1lOiBudW1iZXIpIHtcclxuICAgICAgICB0aGlzLlVwZGF0ZVBvaW50KCk7XHJcbiAgICAgICAgLy8gcmV0dXJuXHJcbiAgICAgICAgaWYgKHRoaXMubXlzZWxmKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgdjogVmVjMyA9IHRoaXMuZGlyLmNsb25lKCkubXVsdGlwbHlTY2FsYXIodGhpcy5zcGVlZCAqIGRlbHRhVGltZSk7XHJcbiAgICAgICAgY29uc3QgZmluYWw6IFZlYzMgPSB0aGlzLm5vZGUucG9zaXRpb24uY2xvbmUoKS5hZGQodik7XHJcbiAgICAgICAgaWYgKGZpbmFsLnggLSB0aGlzLndpZHRoIC8gMiA8IC10aGlzLnNpemUud2lkdGggLyAyKSB7ICAvLyAtIHRoaXMud2lkdGggLyAyXHJcbiAgICAgICAgICAgIHRoaXMuZGlyLnggPSAtdGhpcy5kaXIueDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGZpbmFsLnggKyB0aGlzLndpZHRoIC8gMiA+IHRoaXMuc2l6ZS53aWR0aCAvIDIpIHsgIC8vKyB0aGlzLndpZHRoIC8gMlxyXG4gICAgICAgICAgICB0aGlzLmRpci54ID0gLXRoaXMuZGlyLng7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChmaW5hbC55IC0gdGhpcy5oZWlnaHQgLyAyIDwgLXRoaXMuc2l6ZS5oZWlnaHQgLyAyKSB7IC8vIC0gdGhpcy5oZWlnaHQgLyAyXHJcbiAgICAgICAgICAgIHRoaXMuZGlyLnkgPSAtdGhpcy5kaXIueTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGZpbmFsLnkgKyB0aGlzLmhlaWdodCAvIDIgPiB0aGlzLnNpemUuaGVpZ2h0IC8gMikgeyAvLyArIHRoaXMuaGVpZ2h0IC8gMlxyXG4gICAgICAgICAgICB0aGlzLmRpci55ID0gLXRoaXMuZGlyLnk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIGNvbnN0IHBvczogVmVjMyA9IHRoaXMubm9kZS5wb3NpdGlvbi5jbG9uZSgpO1xyXG4gICAgICAgIC8vIHRoaXMubm9kZS5wb3NpdGlvbiA9IHRoaXMubm9kZS5wb3NpdGlvbi5jbG9uZSgpLmFkZChkaXNwbGFjZW1lbnQpO1xyXG4gICAgICAgIGNvbnN0IG5ld1BzID0gdGhpcy5ub2RlLnBvc2l0aW9uLmNsb25lKCkuYWRkKHRoaXMuZGlyLmNsb25lKCkubXVsdGlwbHlTY2FsYXIodGhpcy5zcGVlZCAqIGRlbHRhVGltZSkpXHJcbiAgICAgICAgdGhpcy5ub2RlLnNldFBvc2l0aW9uKG5ld1BzKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIFVwZGF0ZVBvaW50KCk6dm9pZCB7XHJcbiAgICAgICAgdGhpcy54ID0gdGhpcy5ub2RlLnBvc2l0aW9uLng7XHJcbiAgICAgICAgdGhpcy55ID0gdGhpcy5ub2RlLnBvc2l0aW9uLnk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIEluaXREaXIoKTp2b2lkIHtcclxuICAgICAgICB0aGlzLmRpciA9IHRoaXMucmFuZG9tSW5zaWRlVW5pdENpcmNsZSgpOyAvL1JhbmRvbS5pbnNpZGVVbml0Q2lyY2xlLm5vcm1hbGl6ZWQ7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIEluaXQoc2l6ZTogU2l6ZSxpc015c2VsZjpib29sZWFuID0gZmFsc2UpOiB2b2lke1xyXG4gICAgICAgIFxyXG4gICAgICAgIHRoaXMuVXBkYXRlUG9pbnQoKTtcclxuICAgICAgICB0aGlzLkluaXREaXIoKTtcclxuICAgICAgICB0aGlzLm15c2VsZiA9IGlzTXlzZWxmO1xyXG4gICAgICAgIGlmICh0aGlzLm15c2VsZikge1xyXG4gICAgICAgICAgICB0aGlzLm5vZGUuZ2V0Q29tcG9uZW50KFNwcml0ZSkuY29sb3IgPSBDb2xvci5CTEFDSztcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gV2lkdGggPSBIZWlnaHQgPSB0cmFuc2Zvcm0ubG9jYWxTY2FsZS54O1xyXG4gICAgICAgIHRoaXMud2lkdGggPSB0aGlzLm5vZGUuZ2V0Q29tcG9uZW50KFVJVHJhbnNmb3JtKS53aWR0aDtcclxuICAgICAgICB0aGlzLmhlaWdodCA9IHRoaXMubm9kZS5nZXRDb21wb25lbnQoVUlUcmFuc2Zvcm0pLmhlaWdodDtcclxuICAgICAgICB0aGlzLnNpemUgPSBzaXplO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyByYW5kb21JbnNpZGVVbml0Q2lyY2xlKCk6IFZlYzMge1xyXG4gICAgICAgIGNvbnN0IGFuZ2xlID0gcmFuZG9tUmFuZ2UoMSwzNjApICogMiAqIE1hdGguUEk7IC8vIOmaj+acuuinkuW6plxyXG4gICAgICAgIGNvbnN0IHJhZGl1cyA9IE1hdGguc3FydChNYXRoLnJhbmRvbSgpKTsgIC8vIOmaj+acuuWNiuW+hO+8jOW5s+aWueagueS/neivgeWdh+WMgOWIhuW4g1xyXG4gICAgICAgIGxldCB4OiBudW1iZXIgPSBNYXRoLmNvcyhhbmdsZSkgKiByYWRpdXM7XHJcbiAgICAgICAgbGV0IHk6IG51bWJlciA9IE1hdGguc2luKGFuZ2xlKSAqIHJhZGl1czsgXHJcbiAgICAgICAgcmV0dXJuIG1hdGgudjMoeCwgeSwgMCkubm9ybWFsaXplKCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIENsaWNrKG9mZjogYm9vbGVhbikge1xyXG4gICAgICAgIGNvbnN0IHNwcml0ZTogU3ByaXRlID0gdGhpcy5ub2RlLmdldENvbXBvbmVudChTcHJpdGUpO1xyXG4gICAgICAgIHNwcml0ZS5jb2xvciA9IG9mZiA/IENvbG9yLlJFRCA6IENvbG9yLldISVRFO1xyXG4gICAgfVxyXG59XHJcblxyXG5cclxuIiwiaW1wb3J0IHsgVmVjMyB9IGZyb20gXCJjY1wiO1xyXG5pbXBvcnQgeyBFbnRpdHlJbmZvIH0gZnJvbSBcIi4uL2luZm9zL0VudGl0eUluZm9cIjtcclxuaW1wb3J0IHsgRW50aXR5IH0gZnJvbSBcIi4vRW50aXR5XCI7XHJcblxyXG4vKipcclxuICogQGZpbGVOYW1lIEdhbWVFbnRpdHkudHNcclxuICogQGF1dGhvciB6aGFuZ3Fpb25nXHJcbiAqIEBkYXRlIDIwMjQvMTIvMjcgMTc6MDY6NDFcIlxyXG4gKiBAZGVzY3JpcHRpb25cclxuICovXHJcbmV4cG9ydCBjbGFzcyBHYW1lRW50aXR5IGV4dGVuZHMgRW50aXR5IHtcclxuICAgIHByb3RlY3RlZCBtYXhJbmRleDogbnVtYmVyID0gMTtcclxuICAgIHByb3RlY3RlZCBpbmRleDogbnVtYmVyID0gMDtcclxuXHJcbiAgICBwdWJsaWMgaXNSZW1vdmVUaW1lOiBib29sZWFuID0gZmFsc2U7XHJcblxyXG4gICAgcHVibGljIGVudGl0eUluZm86IEVudGl0eUluZm87XHJcblxyXG4gICAgcHJvdGVjdGVkIHRhcmdldE1vdmVQb2ludDogVmVjMztcclxuXHJcbiAgICBwdWJsaWMgZm9ybTogR2FtZUVudGl0eTtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlcigpO1xyXG5cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgbmV4dFBsYXllckZyYW1lKCk6IHZvaWQge1xyXG5cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgY2hlY2tOZXh0RnJhbWUoKTogYm9vbGVhbiB7XHJcbiAgICAgICAgdGhpcy5pbmRleCsrO1xyXG4gICAgICAgIGlmICh0aGlzLmluZGV4ID49IHRoaXMubWF4SW5kZXgpIHtcclxuICAgICAgICAgICAgdGhpcy5pbmRleCA9IDA7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGNhbk1vdmUoKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgcHJvdGVjdGVkIG9sZE1vdmVYOiBudW1iZXI7XHJcbiAgICBwcm90ZWN0ZWQgb2xkTW92ZVk6IG51bWJlcjtcclxuICAgIHByb3RlY3RlZCBtb3ZlKCk6IHZvaWQge1xyXG4gICAgICAgIGlmICh0aGlzLmNhbk1vdmUoKSAmJiB0aGlzLnRhcmdldE1vdmVQb2ludCkge1xyXG4gICAgICAgICAgICB0aGlzLm9sZE1vdmVYID0gdGhpcy50YXJnZXRNb3ZlUG9pbnQueDtcclxuICAgICAgICAgICAgdGhpcy5vbGRNb3ZlWSA9IHRoaXMudGFyZ2V0TW92ZVBvaW50Lnk7XHJcbiAgICAgICAgICAgIHN1cGVyLm1vdmUodGhpcy50YXJnZXRNb3ZlUG9pbnQpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgY2hlY2soKTogdm9pZCB7XHJcblxyXG4gICAgfVxyXG59IiwiaW1wb3J0IHsgX2RlY29yYXRvciwgQ29tcG9uZW50LCBkaXJlY3RvciwgZ2FtZSwgaW5zdGFudGlhdGUsIE5vZGUsIFByZWZhYiwgVmVjMyB9IGZyb20gJ2NjJztcclxuaW1wb3J0IFBsYXllciBmcm9tICcuL2NoYXJhY3Rlci9QbGF5ZXInO1xyXG5pbXBvcnQgU3Bhd25Qb2ludCBmcm9tICcuL3RyYW5zZmVyL1NwYXduUG9pbnQnO1xyXG5pbXBvcnQgVHJhbnNmZXJEb29yIGZyb20gJy4vdHJhbnNmZXIvVHJhbnNmZXJEb29yJztcclxuaW1wb3J0IHsgTnBjIH0gZnJvbSAnLi9jaGFyYWN0ZXIvTnBjJztcclxuaW1wb3J0IHsgTW9uc3RlciB9IGZyb20gJy4vY2hhcmFjdGVyL01vbnN0ZXInO1xyXG5jb25zdCB7IGNjY2xhc3MsIHByb3BlcnR5IH0gPSBfZGVjb3JhdG9yO1xyXG5cclxuQGNjY2xhc3MoJ0dhbWVNYW5hZ2VyJylcclxuZXhwb3J0IGNsYXNzIEdhbWVNYW5hZ2VyIGV4dGVuZHMgQ29tcG9uZW50IHtcclxuICAgIFxyXG4gICAgcHJpdmF0ZSBzdGF0aWMgX2luc3RhbmNlOiBHYW1lTWFuYWdlcjtcclxuICAgIHB1YmxpYyBzdGF0aWMgZ2V0IGluc3RhbmNlKCk6IEdhbWVNYW5hZ2VyIHtcclxuXHJcbiAgICAgICAgcmV0dXJuIEdhbWVNYW5hZ2VyLl9pbnN0YW5jZTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOeOqeWutumihOWItuS9k1xyXG4gICAgICovXHJcbiAgICBAcHJvcGVydHkoUHJlZmFiKVxyXG4gICAgcHVibGljIHBsYXllclByZWZhYjogUHJlZmFiID0gbnVsbDtcclxuXHJcbiAgICAvKipcclxuICAgICAqIOaAqueJqemihOWItuS9k1xyXG4gICAgICovXHJcbiAgICBAcHJvcGVydHkoUHJlZmFiKVxyXG4gICAgcHVibGljIG1vbnN0ZXJQcmVmYWI6IFByZWZhYiA9IG51bGw7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBucGPpooTliLbkvZNcclxuICAgICAqL1xyXG4gICAgQHByb3BlcnR5KFByZWZhYilcclxuICAgIHB1YmxpYyBucGNQcmVmYWI6IFByZWZhYiA9IG51bGw7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDlh7rnlJ/ngrnpooTliLbkvZNcclxuICAgICAqL1xyXG4gICAgQHByb3BlcnR5KFByZWZhYilcclxuICAgIHB1YmxpYyBzcGF3blBvaW50UHJlZmFiOiBQcmVmYWIgPSBudWxsO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICog5Lyg6YCB54K56aKE5Yi25L2TXHJcbiAgICAgKi9cclxuICAgIEBwcm9wZXJ0eShQcmVmYWIpXHJcbiAgICBwdWJsaWMgdHJhbnNmZXJEb29yUHJlZmFiczogUHJlZmFiW10gPSBbXTtcclxuXHJcbiAgICBwcm90ZWN0ZWQgb25Mb2FkKCk6IHZvaWQge1xyXG4gICAgICAgIGlmICghR2FtZU1hbmFnZXIuX2luc3RhbmNlKSB7XHJcbiAgICAgICAgICAgIEdhbWVNYW5hZ2VyLl9pbnN0YW5jZSA9IHRoaXM7XHJcbiAgICAgICAgICAgIGRpcmVjdG9yLmFkZFBlcnNpc3RSb290Tm9kZSh0aGlzLm5vZGUpO1xyXG4gICAgICAgICAgICB0aGlzLmluaXQoKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLm5vZGUuZGVzdHJveSgpOyAvL+WcuuaZr+mHjOWPquiDveacieS4gOS4qkdhbWVNYW5hZ2VyLOacieWkmuS9meeahOW/hemhu+mUgOavgVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0UGxheWVyKCk6IFBsYXllciB7XHJcbiAgICAgICAgdmFyIG5vZGU6IE5vZGUgPSBpbnN0YW50aWF0ZSh0aGlzLnBsYXllclByZWZhYik7XHJcbiAgICAgICAgdmFyIHBsYXllciA9IG5vZGUuZ2V0Q29tcG9uZW50KFBsYXllcik7XHJcbiAgICAgICAgcGxheWVyLm5vZGUucG9zaXRpb24gPSBuZXcgVmVjMygwLCAwLCAwKTtcclxuICAgICAgICBwbGF5ZXIubm9kZS5hY3RpdmUgPSB0cnVlO1xyXG4gICAgICAgIHJldHVybiBwbGF5ZXI7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDojrflvpducGNcclxuICAgICAqIEBwYXJhbSBucGNJZCBcclxuICAgICAqIEByZXR1cm5zIFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZ2V0TlBDKCk6IE5wYyB7XHJcbiAgICAgICAgdmFyIG5wYzogTnBjID0gaW5zdGFudGlhdGUodGhpcy5ucGNQcmVmYWIpLmdldENvbXBvbmVudChOcGMpO1xyXG4gICAgICAgIG5wYy5ub2RlLmFjdGl2ZSA9IHRydWU7XHJcbiAgICAgICAgbnBjLm5vZGUucG9zaXRpb24gPSBuZXcgVmVjMygwLCAwLCAwKTtcclxuICAgICAgICByZXR1cm4gbnBjO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgKiDojrflvpfmgKrnialcclxuICAgICogQHBhcmFtIG1vbnN0ZXJJZCBcclxuICAgICogQHJldHVybnMgXHJcbiAgICAqL1xyXG4gICAgcHVibGljIGdldE1vbnN0ZXIoKTogTW9uc3RlciB7XHJcbiAgICAgICAgdmFyIG1vbnN0ZXI6IE1vbnN0ZXIgPSBpbnN0YW50aWF0ZSh0aGlzLm1vbnN0ZXJQcmVmYWIpLmdldENvbXBvbmVudChNb25zdGVyKTtcclxuICAgICAgICBtb25zdGVyLm5vZGUuYWN0aXZlID0gdHJ1ZTtcclxuICAgICAgICBtb25zdGVyLm5vZGUucG9zaXRpb24gPSBuZXcgVmVjMygwLCAwLCAwKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIG1vbnN0ZXI7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAqIOiOt+W+l+WHuueUn+eCuei1hOa6kFxyXG4gICAgKiBAcmV0dXJucyBcclxuICAgICovXHJcbiAgICBwdWJsaWMgZ2V0U3Bhd25Qb2ludCgpOiBTcGF3blBvaW50IHtcclxuICAgICAgICB2YXIgc3Bhd25Qb2ludDogU3Bhd25Qb2ludCA9IGluc3RhbnRpYXRlKHRoaXMuc3Bhd25Qb2ludFByZWZhYikuZ2V0Q29tcG9uZW50KFNwYXduUG9pbnQpO1xyXG4gICAgICAgIHNwYXduUG9pbnQubm9kZS5hY3RpdmUgPSB0cnVlO1xyXG4gICAgICAgIHNwYXduUG9pbnQubm9kZS5wb3NpdGlvbiA9IG5ldyBWZWMzKDAsIDAsIDApO1xyXG5cclxuICAgICAgICByZXR1cm4gc3Bhd25Qb2ludDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOiOt+W+l+S8oOmAgeeCuei1hOa6kFxyXG4gICAgICogQHJldHVybnMgXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBnZXRUcmFuc2ZlckRvb3IodHlwZTogbnVtYmVyKTogVHJhbnNmZXJEb29yIHtcclxuICAgICAgICB2YXIgaW5kZXg6IG51bWJlciA9IDA7XHJcblxyXG4gICAgICAgIGlmICh0eXBlIDwgdGhpcy50cmFuc2ZlckRvb3JQcmVmYWJzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICBpbmRleCA9IHR5cGU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgdHJhbnNmZXJEb29yOiBUcmFuc2ZlckRvb3IgPSBpbnN0YW50aWF0ZSh0aGlzLnRyYW5zZmVyRG9vclByZWZhYnNbaW5kZXhdKS5nZXRDb21wb25lbnQoVHJhbnNmZXJEb29yKTtcclxuICAgICAgICB0cmFuc2ZlckRvb3Iubm9kZS5hY3RpdmUgPSB0cnVlO1xyXG4gICAgICAgIHRyYW5zZmVyRG9vci5ub2RlLnBvc2l0aW9uID0gbmV3IFZlYzMoMCwgMCwgMCk7XHJcblxyXG4gICAgICAgIHJldHVybiB0cmFuc2ZlckRvb3I7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGluaXQoKTogdm9pZHtcclxuICAgICAgICBcclxuICAgIH1cclxuICAgIFxyXG4gICAgc3RhcnQoKSB7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIHVwZGF0ZShkZWx0YVRpbWU6IG51bWJlcikge1xyXG4gICAgICAgIFxyXG4gICAgfVxyXG59XHJcblxyXG5cclxuIiwiLy8gTGVhcm4gVHlwZVNjcmlwdDpcclxuLy8gIC0gaHR0cHM6Ly9kb2NzLmNvY29zLmNvbS9jcmVhdG9yL21hbnVhbC9lbi9zY3JpcHRpbmcvdHlwZXNjcmlwdC5odG1sXHJcbi8vIExlYXJuIEF0dHJpYnV0ZTpcclxuLy8gIC0gaHR0cHM6Ly9kb2NzLmNvY29zLmNvbS9jcmVhdG9yL21hbnVhbC9lbi9zY3JpcHRpbmcvcmVmZXJlbmNlL2F0dHJpYnV0ZXMuaHRtbFxyXG4vLyBMZWFybiBsaWZlLWN5Y2xlIGNhbGxiYWNrczpcclxuLy8gIC0gaHR0cHM6Ly9kb2NzLmNvY29zLmNvbS9jcmVhdG9yL21hbnVhbC9lbi9zY3JpcHRpbmcvbGlmZS1jeWNsZS1jYWxsYmFja3MuaHRtbFxyXG5cclxuaW1wb3J0IHsgX2RlY29yYXRvciwgQ29tcG9uZW50LCBOb2RlLCBkaXJlY3RvciwgU2NlbmUgfSBmcm9tICdjYyc7XHJcbmltcG9ydCB7IFRyYW5zZm9ybSB9IGZyb20gJy4vVHJhbnNmb3JtJztcclxuY29uc3QgeyBjY2NsYXNzLCBwcm9wZXJ0eSB9ID0gX2RlY29yYXRvcjtcclxuXHJcbkBjY2NsYXNzKCdHYW1lT2JqZWN0JylcclxuZXhwb3J0IGNsYXNzIEdhbWVPYmplY3QgZXh0ZW5kcyBOb2RlIHtcclxuICAgIFxyXG4gICAgcHVibGljIGdldCB0cmFuc2Zvcm0oKTpUcmFuc2Zvcm1cclxuICAgIHtcclxuICAgICAgICB2YXIgbm9kZTpOb2RlID0gdGhpcztcclxuICAgICAgICByZXR1cm4gbm9kZSBhcyBUcmFuc2Zvcm07XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldCBnYW1lT2JqZWN0KCk6R2FtZU9iamVjdFxyXG4gICAge1xyXG4gICAgICAgIHZhciBub2RlOk5vZGUgPSB0aGlzO1xyXG4gICAgICAgIHJldHVybiBub2RlIGFzIEdhbWVPYmplY3Q7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNldEFjdGl2ZSh2YWx1ZTpib29sZWFuKSAvL+eUqOi/meS4quiuvue9rueJqeS9k+eahOaYvuekuuS4jumakOiXj+S8muWuieWFqOeCuVxyXG4gICAge1xyXG4gICAgICAgIGlmKHRoaXMuYWN0aXZlID09IHZhbHVlKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5hY3RpdmUgPSB2YWx1ZTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc3RhdGljIEZpbmQobmFtZTpzdHJpbmcpXHJcbiAgICB7XHJcbiAgICAgICAgdmFyIGN1cnJlbnRTY2VuZTphbnkgPSBkaXJlY3Rvci5nZXRTY2VuZSgpO1xyXG4gICAgICAgIHJldHVybiB0aGlzLnNlYXJjaENoaWxkQnlOYW1lKGN1cnJlbnRTY2VuZSxuYW1lKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIHN0YXRpYyBzZWFyY2hDaGlsZEJ5TmFtZShub2RlOk5vZGUsbmFtZTpzdHJpbmcpOk5vZGUgfCBudWxsXHJcbiAgICB7XHJcbiAgICAgICAgdmFyIHRhcmdldE5vZGU6Tm9kZSA9IG5vZGUuZ2V0Q2hpbGRCeU5hbWUobmFtZSlcclxuXHJcbiAgICAgICAgaWYodGFyZ2V0Tm9kZSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJldHVybiB0YXJnZXROb2RlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIGxlbjpudW1iZXIgPSBub2RlLmNoaWxkcmVuLmxlbmd0aDtcclxuICAgICAgICB2YXIgc2VhcmNoTm9kZTpOb2RlIHwgbnVsbCA9IG51bGw7XHJcblxyXG4gICAgICAgIGZvcih2YXIgaSA9IDAgOyBpIDwgbGVuIDsgaSsrKVxyXG4gICAgICAgIHtcclxuXHJcbiAgICAgICAgICAgIHNlYXJjaE5vZGUgPSBub2RlLmNoaWxkcmVuW2ldO1xyXG5cclxuICAgICAgICAgICAgaWYoc2VhcmNoTm9kZS5uYW1lID09IG5hbWUpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHRhcmdldE5vZGUgPSBzZWFyY2hOb2RlO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRhcmdldE5vZGU7XHJcbiAgICAgICAgICAgIH1lbHNlXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHRhcmdldE5vZGUgPSB0aGlzLnNlYXJjaENoaWxkQnlOYW1lKHNlYXJjaE5vZGUsbmFtZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYodGFyZ2V0Tm9kZSlcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGFyZ2V0Tm9kZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHRhcmdldE5vZGU7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHN0YXRpYyBGaW5kT2JqZWN0T2ZUeXBlPFQgZXh0ZW5kcyBDb21wb25lbnQ+KHR5cGU6IHtwcm90b3R5cGU6IFR9KTpUIHwgbnVsbFxyXG4gICAge1xyXG4gICAgICAgIHZhciB0OmFueSA9IHR5cGU7XHJcbiAgICAgICAgdmFyIGN1cnJlbnRTY2VuZTpTY2VuZSAgPSBkaXJlY3Rvci5nZXRTY2VuZSgpO1xyXG5cclxuICAgICAgICByZXR1cm4gY3VycmVudFNjZW5lLmdldENvbXBvbmVudEluQ2hpbGRyZW4odCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHN0YXRpYyBGaW5kT2JqZWN0c09mVHlwZTxUIGV4dGVuZHMgQ29tcG9uZW50Pih0eXBlOiB7cHJvdG90eXBlOiBUfSk6VFtdIHwgbnVsbFxyXG4gICAge1xyXG4gICAgICAgIHZhciB0OmFueSA9IHR5cGU7XHJcbiAgICAgICAgdmFyIGN1cnJlbnRTY2VuZTpTY2VuZSAgPSBkaXJlY3Rvci5nZXRTY2VuZSgpO1xyXG5cclxuICAgICAgICByZXR1cm4gY3VycmVudFNjZW5lLmdldENvbXBvbmVudHNJbkNoaWxkcmVuKHQpO1xyXG4gICAgfVxyXG5cclxufVxyXG5cclxuTm9kZS5wcm90b3R5cGVbXCJzZXRBY3RpdmVcIl0gPSBHYW1lT2JqZWN0LnByb3RvdHlwZS5zZXRBY3RpdmU7XHJcbk5vZGUucHJvdG90eXBlW1wiZ2FtZU9iamVjdFwiXSA9IEdhbWVPYmplY3QucHJvdG90eXBlLmdhbWVPYmplY3Q7XHJcbk5vZGUucHJvdG90eXBlW1widHJhbnNmb3JtXCJdID0gR2FtZU9iamVjdC5wcm90b3R5cGUudHJhbnNmb3JtO1xyXG4iLCJpbXBvcnQgeyBfZGVjb3JhdG9yLCBCdXR0b24sIENvbXBvbmVudCwgTm9kZSwgU3ByaXRlLCBTcHJpdGVGcmFtZSwgVGV4dHVyZTJEIH0gZnJvbSAnY2MnO1xyXG5pbXBvcnQgQmFzZVZpZXcgZnJvbSAnLi4vLi4vdWkvQmFzZVZpZXcnO1xyXG5pbXBvcnQgeyByZWdpc3RlclZpZXcgfSBmcm9tICcuLi8uLi91aS9WaWV3UmVnaXN0ZXJNZ3InO1xyXG5pbXBvcnQgeyBQYW5lbFR5cGUgfSBmcm9tICcuLi8uLi91aS9QYW5lbEVudW0nO1xyXG5pbXBvcnQgeyBMYXllclR5cGUgfSBmcm9tICcuLi8uLi91aS9MYXllck1hbmFnZXInO1xyXG5pbXBvcnQgVmlld0NvbnN0IGZyb20gJy4uLy4uL3VpL1ZpZXdDb25zdCc7XHJcbmltcG9ydCBVdGlscyBmcm9tICcuLi8uLi9Db21tb24vVXRpbHMnO1xyXG5pbXBvcnQgeyB2aWV3TWFuYWdlciB9IGZyb20gJy4uLy4uL3VpL1ZpZXdNYW5hZ2VyJztcclxuaW1wb3J0IEFzc2V0TWdyIGZyb20gJy4uLy4uL0NvbW1vbi9Bc3NldE1ncic7XHJcbmltcG9ydCB7IFZpZXdTaG93VHlwZXMgfSBmcm9tICcuLi8uLi9Db21tb24vRW51bSc7XHJcbmltcG9ydCB7VG93ZXJMYXVuY2hlcn0gZnJvbSBcImRiOi8vYXNzZXRzL1NjcmlwdC9tb2R1bGVzL1Rvd2VyRGVmZW5zZS9Ub3dlckxhdW5jaGVyXCI7XHJcbmltcG9ydCB7VG93ZXJTY2VuZU1hcH0gZnJvbSBcImRiOi8vYXNzZXRzL1NjcmlwdC9tb2R1bGVzL1Rvd2VyRGVmZW5zZS9Ub3dlclNjZW5lTWFwXCI7XHJcbmltcG9ydCB7VG93ZXJNYXBMYXllcn0gZnJvbSBcImRiOi8vYXNzZXRzL1NjcmlwdC9tb2R1bGVzL1Rvd2VyRGVmZW5zZS9Ub3dlck1hcExheWVyXCI7XHJcbmNvbnN0IHsgY2NjbGFzcywgcHJvcGVydHkgfSA9IF9kZWNvcmF0b3I7XHJcblxyXG5AY2NjbGFzcygnR2FtZU92ZXJPcldpbicpXHJcbmV4cG9ydCBjbGFzcyBHYW1lT3Zlck9yV2luIGV4dGVuZHMgQmFzZVZpZXcge1xyXG4gICAgcHJpdmF0ZSBiZzogU3ByaXRlO1xyXG4gICAgcHJpdmF0ZSB0cnlCdG46IEJ1dHRvbjtcclxuICAgIHByaXZhdGUgbmV4dEJ0bjogQnV0dG9uO1xyXG5cclxuICAgIEBwcm9wZXJ0eShTcHJpdGVGcmFtZSlcclxuICAgIHdpblNwcml0ZUZyYW1lOiBTcHJpdGVGcmFtZSA9IG51bGw7XHJcbiAgICBAcHJvcGVydHkoU3ByaXRlRnJhbWUpXHJcbiAgICBsb3NlU3ByaXRlRnJhbWU6IFNwcml0ZUZyYW1lID0gbnVsbDtcclxuXHJcbiAgICBwdWJsaWMgc2hvd1R5cGU6IFZpZXdTaG93VHlwZXMgPSBWaWV3U2hvd1R5cGVzLlZpZXdBZGRpdGlvbjtcclxuXHJcbiAgICBwdWJsaWMgYXN5bmMgb25PcGVuKGZyb21VSTogbnVtYmVyIHwgc3RyaW5nLCAuLi5hcmdzOiBhbnkpIHtcclxuICAgICAgICBjb25zdCBpc1dpbjogYm9vbGVhbiA9IGFyZ3NbMF1cclxuICAgICAgICBjb25zdCBsb3NlID0gYXdhaXQgQXNzZXRNZ3IuaW5zdGFuY2UubG9hZDxUZXh0dXJlMkQ+KFwicmVzb3VyY2VzOi8vdG93ZXIvcmVzL05vcm1hbE1vcmRlbC9HYW1lT3ZlckFuZFdpbi9nYW1lb3ZlcjAtaGRfMS90ZXh0dXJlXCIpXHJcbiAgICAgICAgY29uc3Qgd2luID0gYXdhaXQgQXNzZXRNZ3IuaW5zdGFuY2UubG9hZDxUZXh0dXJlMkQ+KFwicmVzb3VyY2VzOi8vdG93ZXIvcmVzL05vcm1hbE1vcmRlbC9HYW1lT3ZlckFuZFdpbi9nYW1lb3ZlcjAtaGRfOC90ZXh0dXJlXCIpXHJcbiAgICAgICAgaWYgKHRoaXMuYmcpIHtcclxuICAgICAgICAgICAgY29uc3Qgc3ByaXRlZnJhbWU6IFNwcml0ZUZyYW1lID0gbmV3IFNwcml0ZUZyYW1lKCk7XHJcbiAgICAgICAgICAgIHNwcml0ZWZyYW1lLnRleHR1cmUgPSBpc1dpbiA/IHdpbiA6IGxvc2U7XHJcbiAgICAgICAgICAgIHRoaXMuYmcuc3ByaXRlRnJhbWUgPSBzcHJpdGVmcmFtZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGluaXQoLi4uYXJnczogYW55KTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5iZyA9IFV0aWxzLkZpbmRDaGlsZEJ5TmFtZSh0aGlzLm5vZGUsIFwiYmdcIikuZ2V0Q29tcG9uZW50KFNwcml0ZSk7XHJcbiAgICAgICAgdGhpcy50cnlCdG4gPSBVdGlscy5GaW5kQ2hpbGRCeU5hbWUodGhpcy5ub2RlLCBcIkJ0blRyeVwiKS5nZXRDb21wb25lbnQoQnV0dG9uKTtcclxuICAgICAgICB0aGlzLm5leHRCdG4gPSBVdGlscy5GaW5kQ2hpbGRCeU5hbWUodGhpcy5ub2RlLCBcIkJ0bkNvbnRpbnVlXCIpLmdldENvbXBvbmVudChCdXR0b24pO1xyXG4gICAgICAgIGlmICh0aGlzLnRyeUJ0bikge1xyXG4gICAgICAgICAgICB0aGlzLnRyeUJ0bi5ub2RlLm9uKEJ1dHRvbi5FdmVudFR5cGUuQ0xJQ0ssIHRoaXMub25DbGlja1RyeUFnYWluLCB0aGlzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMubmV4dEJ0bikge1xyXG4gICAgICAgICAgICB0aGlzLm5leHRCdG4ubm9kZS5vbihCdXR0b24uRXZlbnRUeXBlLkNMSUNLLCB0aGlzLm9uQ2xpY2tOZXh0LCB0aGlzKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBvbkNsaWNrVHJ5QWdhaW4oKTogdm9pZCB7XHJcbiAgICAgICAgLy8gVG93ZXJMYXVuY2hlci5pbnN0YW5jZS5vbkdhbWVTdGFyKFRvd2VyTGF1bmNoZXIuaW5zdGFuY2UubWFwSWQpO1xyXG4gICAgICAgIFRvd2VyTGF1bmNoZXIuaW5zdGFuY2UucmVzdGFydCgpO1xyXG4gICAgICAgIFRvd2VyU2NlbmVNYXAuaW5zdGFuY2Uuc2V0TWFwSWQoVG93ZXJMYXVuY2hlci5pbnN0YW5jZS5tYXBJZClcclxuICAgICAgICB2aWV3TWFuYWdlci5jbG9zZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgb25DbGlja05leHQoKTogdm9pZCB7XHJcbiAgICAgICAgVG93ZXJMYXVuY2hlci5pbnN0YW5jZS5yZXN0YXJ0KCk7XHJcbiAgICAgICAgVG93ZXJTY2VuZU1hcC5pbnN0YW5jZS5zZXRNYXBJZChUb3dlckxhdW5jaGVyLmluc3RhbmNlLm1hcElkICsxKTtcclxuICAgICAgICB2aWV3TWFuYWdlci5jbG9zZSgpO1xyXG4gICAgfVxyXG4gICAgc3RhcnQoKSB7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIHVwZGF0ZShkZWx0YVRpbWU6IG51bWJlcikge1xyXG5cclxuICAgIH1cclxufVxyXG5yZWdpc3RlclZpZXcoe1xyXG4gICAgdmlld0NsczogR2FtZU92ZXJPcldpbixcclxuICAgIGlkOiBQYW5lbFR5cGUuR2FtZU92ZXJPcldpbixcclxuICAgIGxheWVyOiBMYXllclR5cGUud2luZG93LFxyXG4gICAgcHJlZmFiUGF0aFByZWZpeDogVmlld0NvbnN0LmRlZmF1bHRQcmVmYWJQYXRoUHJlZml4ICsgXCJ0b3dlci9cIlxyXG59KVxyXG5cclxuIiwiaW1wb3J0IHsgU2NlbmUgfSBmcm9tIFwiLi9TY2VuZVwiO1xyXG5cclxuLyoqXHJcbiAqIEBmaWxlTmFtZSBHYW1lU2NlbmUudHNcclxuICogQGF1dGhvciB6aGFuZ3Fpb25nXHJcbiAqIEBkYXRlIDIwMjQvMTIvMjYgMTY6MDc6NTdcIlxyXG4gKiBAZGVzY3JpcHRpb25cclxuICovXHJcbmV4cG9ydCBjbGFzcyBHYW1lU2NlbmUgZXh0ZW5kcyBTY2VuZSB7XHJcblxyXG59IiwiaW1wb3J0IHsgX2RlY29yYXRvciwgQXNzZXQsIGFzc2V0TWFuYWdlciwgQXNzZXRNYW5hZ2VyLCBDb21wb25lbnQsIGVycm9yLCBpbnN0YW50aWF0ZSwgTGFiZWwsIG1hdGgsIE5vZGUsIFByZWZhYiwgcmVzb3VyY2VzLCBTcHJpdGUsIFNwcml0ZUF0bGFzLCBTcHJpdGVGcmFtZSwgVUlUcmFuc2Zvcm0sIHV0aWxzLCBWZWMyIH0gZnJvbSAnY2MnO1xyXG5pbXBvcnQgeyBUaWxlIH0gZnJvbSAnLi9UaWxlJztcclxuaW1wb3J0IHsgY29uZmlnMjA0OCB9IGZyb20gJy4vR2FtZTIwNDhFbnVtJztcclxuaW1wb3J0IEFzc2V0TWdyIGZyb20gJy4uL0NvbW1vbi9Bc3NldE1ncic7XHJcbmNvbnN0IHsgY2NjbGFzcywgcHJvcGVydHkgfSA9IF9kZWNvcmF0b3I7XHJcblxyXG5AY2NjbGFzcygnR3JpZCcpXHJcbmV4cG9ydCBjbGFzcyBHcmlkIGV4dGVuZHMgQ29tcG9uZW50IHtcclxuICAgIHByaXZhdGUgY2VsbHM6IFRpbGVbXVtdO1xyXG5cclxuICAgIHByaXZhdGUgY2VsbE5vZGVBcnJheTogTm9kZVtdW107XHJcblxyXG4gICAgcHJpdmF0ZSBzaXplOiBudW1iZXI7XHJcblxyXG5cclxuICAgIHB1YmxpYyBzZXR1cChzaXplOiBudW1iZXIpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLnNpemUgPSBzaXplO1xyXG4gICAgICAgIHRoaXMuY2VsbHMgPSB0aGlzLmVtcHR5KCk7XHJcbiAgICAgICAgLy8gdGhpcy5pbml0Tm9kZSgpXHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGFzeW5jIGluaXROb2RlKCkge1xyXG4gICAgICAgIHRoaXMuY2VsbE5vZGVBcnJheSA9IFtdO1xyXG4gICAgICAgIGlmICghdGhpcy5jZWxscyB8fCAhdGhpcy5jZWxscy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBoZWlnaHQ6IG51bWJlciA9IGNvbmZpZzIwNDguc2l6ZSAqIGNvbmZpZzIwNDgudGlsZUhpZ2h0O1xyXG4gICAgICAgIGNvbnN0IHdpZHRoOiBudW1iZXIgPSBjb25maWcyMDQ4LnNpemUgKiBjb25maWcyMDQ4LnRpbGVXaWR0aDtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuY2VsbHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgY29uc3Qgcm93OiBUaWxlW10gPSB0aGlzLmNlbGxzW2ldO1xyXG4gICAgICAgICAgICB0aGlzLmNlbGxOb2RlQXJyYXlbaV0gPSBbXTtcclxuICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCByb3cubGVuZ3RoOyBqKyspIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG5vZGU6IE5vZGUgPSBhd2FpdCB0aGlzLmNyZWF0ZU5vZGUoMCk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB4OiBudW1iZXIgPSAtIHdpZHRoIC8gMiArIGNvbmZpZzIwNDgudGlsZVdpZHRoIC8gMiArIGogKiBjb25maWcyMDQ4LnRpbGVXaWR0aDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHk6IG51bWJlciA9IGhlaWdodCAvIDIgLSBjb25maWcyMDQ4LnRpbGVIaWdodCAvIDIgLSBpICogY29uZmlnMjA0OC50aWxlSGlnaHQ7XHJcbiAgICAgICAgICAgICAgICBub2RlLnNldFBvc2l0aW9uKHgsIHkpO1xyXG4gICAgICAgICAgICAgICAgbm9kZS5wYXJlbnQgPSB0aGlzLm5vZGU7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNlbGxOb2RlQXJyYXlbaV1bal0gPSBub2RlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqIOiOt+WPluS4gOS4quepuueahOaji+ebmFxyXG4gICAgICogQHJldHVybnMgXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBlbXB0eSgpOiBUaWxlW11bXSB7XHJcblxyXG4gICAgICAgIGxldCBjZWxscyA9IFtdO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5zaXplOyBpKyspIHtcclxuICAgICAgICAgICAgY29uc3Qgcm93ID0gY2VsbHNbaV0gPSBbXTtcclxuICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCB0aGlzLnNpemU7IGorKykge1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIHRpbGUucGFyZW50ID0gdGhpcy5ub2RlO1xyXG4gICAgICAgICAgICAgICAgcm93LnB1c2gobnVsbCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGNlbGxzO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyByYW5kb21BdmFpbGFibGVDZWxsKCk6IFZlYzIge1xyXG4gICAgICAgIGNvbnN0IGF2YWlsYWJsZUNlbGxzOiBWZWMyW10gPSB0aGlzLmF2YWlsYWJsZUNlbGxzKCk7XHJcbiAgICAgICAgaWYgKGF2YWlsYWJsZUNlbGxzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICByZXR1cm4gYXZhaWxhYmxlQ2VsbHNbTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogYXZhaWxhYmxlQ2VsbHMubGVuZ3RoKV1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDojrflj5blj6/nlKjnmoTmoLzlrZDlnZDmoIfliJfooahcclxuICAgICAqIEByZXR1cm5zIFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgYXZhaWxhYmxlQ2VsbHMoKTogVmVjMltdIHtcclxuICAgICAgICBjb25zdCBjZWxsczogVmVjMltdID0gW107XHJcbiAgICAgICAgdGhpcy5mb3JlYWNoQ2VsbCgoeDogbnVtYmVyLCB5OiBudW1iZXIsIHRpbGU6IE5vZGUpID0+IHtcclxuICAgICAgICAgICAgaWYgKCF0aWxlKSB7XHJcbiAgICAgICAgICAgICAgICBjZWxscy5wdXNoKG1hdGgudjIoeCwgeSkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSlcclxuICAgICAgICByZXR1cm4gY2VsbHM7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDpgY3ljobmlbTkuKrmo4vnm5hcclxuICAgICAqIEBwYXJhbSBjYWxsQmFjayBcclxuICAgICAqL1xyXG4gICAgcHVibGljIGZvcmVhY2hDZWxsKGNhbGxCYWNrOiBGdW5jdGlvbik6IHZvaWQge1xyXG4gICAgICAgIGZvciAobGV0IHggPSAwOyB4IDwgdGhpcy5zaXplOyB4KyspIHtcclxuICAgICAgICAgICAgZm9yIChsZXQgeSA9IDA7IHkgPCB0aGlzLnNpemU7IHkrKykge1xyXG4gICAgICAgICAgICAgICAgaWYgKGNhbGxCYWNrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FsbEJhY2soeCwgeSwgdGhpcy5jZWxsc1t4XVt5XSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5qOA5rWL5qC85a2Q5piv5ZCm5piv5Y+v55So54q25oCBXHJcbiAgICAgKiBAcGFyYW0gdmVjdG9yIFxyXG4gICAgICogQHJldHVybnMgXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBjaGVja0NlbGxBdmFpbGFibGUodmVjdG9yOiBWZWMyKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuICF0aGlzLmdldENlbGxDb250ZW50KHZlY3Rvcik7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDmo4DmtYvmoLzlrZDmmK/lkKblt7Lnu4/ooqvljaDpooZcclxuICAgICAqIEBwYXJhbSB2ZWN0b3IgXHJcbiAgICAgKiBAcmV0dXJucyBcclxuICAgICAqL1xyXG4gICAgcHVibGljIGNoZWNrQ2VsbE9jY3VwaWVkKHZlY3RvcjogVmVjMik6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiAhIXRoaXMuZ2V0Q2VsbENvbnRlbnQodmVjdG9yKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOajgOa1i+aji+ebmOaYr+WQpuacieWPr+eUqOagvOWtkFxyXG4gICAgICogQHJldHVybnMgXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBjaGVja0NlbGxzQXZhaWxhYmxlKCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiAhIXRoaXMuYXZhaWxhYmxlQ2VsbHMoKS5sZW5ndGg7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGluc2VydFRpbGUodGlsZTogVGlsZSwgcG9zPzogVmVjMik6IHZvaWQ7XHJcbiAgICAvKipcclxuICAgICAqIOaPkuWFpeS4gOS4quagvOWtkOWdl1xyXG4gICAgICogQHBhcmFtIHRpbGUgXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBpbnNlcnRUaWxlKHRpbGU6IFRpbGUsIHBvcz86IFZlYzIpOiB2b2lkIHtcclxuICAgICAgICAvLyBjb25zdCB0cDogVGlsZSA9IHRpbGUuZ2V0Q29tcG9uZW50KFRpbGUpO1xyXG4gICAgICAgIGNvbnN0IHg6IG51bWJlciA9IHBvcyA/IHBvcy54IDogdGlsZS5wb3NpdGlvblg7XHJcbiAgICAgICAgY29uc3QgeTogbnVtYmVyID0gcG9zID8gcG9zLnkgOiB0aWxlLnBvc2l0aW9uWTtcclxuICAgICAgICB0aGlzLmNlbGxzW3hdW3ldID0gdGlsZTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgcmVtb3ZlVGlsZSh0aWxlOiBUaWxlLCBwb3M/OiBWZWMyKTogdm9pZDtcclxuICAgIC8qKlxyXG4gICAgICog56e76Zmk5LiA5Liq5qC85a2Q5Z2XXHJcbiAgICAgKiBAcGFyYW0gdGlsZSBcclxuICAgICAqL1xyXG4gICAgcHVibGljIHJlbW92ZVRpbGUodGlsZTogVGlsZSwgcG9zPzogVmVjMik6IHZvaWQge1xyXG4gICAgICAgIGlmICghdGlsZSAmJiAhcG9zKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihcIuenu+mZpOagvOWtkOaXtuWNs+ayoeacieS8oOWFpeagvOWtkOWvueixoeS5n+ayoeacieS8oOS9jee9ruOAguS4pOS4quWPguaVsOiHs+WwkeS8oOS4gOS4qlwiKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCB4OiBudW1iZXIgPSBwb3MgPyBwb3MueCA6IHRpbGUucG9zaXRpb25YO1xyXG4gICAgICAgIGNvbnN0IHk6IG51bWJlciA9IHBvcyA/IHBvcy55IDogdGlsZS5wb3NpdGlvblk7XHJcbiAgICAgICAgdGhpcy5jZWxsc1t4XVt5XSA9IG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDmoLnmja7lnZDmoIfojrflj5bmoLzlrZDlhoXlrrlcclxuICAgICAqIEBwYXJhbSB2ZWN0b3IgXHJcbiAgICAgKiBAcmV0dXJucyBcclxuICAgICAqL1xyXG4gICAgcHVibGljIGdldENlbGxDb250ZW50KHZlY3RvcjogVmVjMik6IFRpbGUge1xyXG4gICAgICAgIGlmICh0aGlzLndpdGhpbkJvdW5kcyh2ZWN0b3IpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNlbGxzW3ZlY3Rvci54XVt2ZWN0b3IueV07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIHB1YmxpYyBnZXRDZWxsVGlsZSh2ZWN0b3I6IFZlYzIpOiBUaWxlIHtcclxuICAgIC8vICAgICBjb25zdCBub2RlOiBOb2RlID0gdGhpcy5nZXRDZWxsQ29udGVudCh2ZWN0b3IpO1xyXG4gICAgLy8gICAgIGlmICghbm9kZSkge1xyXG4gICAgLy8gICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIC8vICAgICB9XHJcbiAgICAvLyAgICAgcmV0dXJuIG5vZGUuZ2V0Q29tcG9uZW50KFRpbGUpO1xyXG4gICAgLy8gfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog6I635Y+W5qC85a2Q5YC8XHJcbiAgICAgKiBAcGFyYW0gdmVjdG9yIFxyXG4gICAgICogQHJldHVybnMgXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBnZXRDZWxsVmFsdWUodmVjdG9yOiBWZWMyKTogbnVtYmVyIHtcclxuICAgICAgICBjb25zdCBub2RlOiBUaWxlID0gdGhpcy5nZXRDZWxsQ29udGVudCh2ZWN0b3IpO1xyXG4gICAgICAgIGlmICghbm9kZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gMDtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG5vZGUudmFsdWU7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDmo4Dmn6XlnZDmoIfmmK/lkKblnKjljLrpl7TojIPlm7TlhoVcclxuICAgICAqIEBwYXJhbSB2ZWN0b3IgXHJcbiAgICAgKiBAcmV0dXJucyBcclxuICAgICAqL1xyXG4gICAgcHVibGljIHdpdGhpbkJvdW5kcyh2ZWN0b3I6IFZlYzIpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gdmVjdG9yLnggPj0gMCAmJiB2ZWN0b3IueCA8IHRoaXMuc2l6ZSAmJiB2ZWN0b3IueSA+PSAwICYmIHZlY3Rvci55IDwgdGhpcy5zaXplO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzZXJpYWxpemUoKTogYW55IHtcclxuICAgICAgICBsZXQgY2VsbFN0YXRlID0gW107XHJcbiAgICAgICAgZm9yICh2YXIgeCA9IDA7IHggPCB0aGlzLnNpemU7IHgrKykge1xyXG4gICAgICAgICAgICB2YXIgcm93ID0gY2VsbFN0YXRlW3hdID0gW107XHJcbiAgICAgICAgICAgIGZvciAodmFyIHkgPSAwOyB5IDwgdGhpcy5zaXplOyB5KyspIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHRpbGU6IFRpbGUgPSB0aGlzLmNlbGxzW3hdW3ldO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRpbGUpIHtcclxuICAgICAgICAgICAgICAgICAgICByb3cucHVzaCh0aWxlLnNlcmlhbGl6ZSgpKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHJvdy5wdXNoKG51bGwpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHNpemU6IHRoaXMuc2l6ZSxcclxuICAgICAgICAgICAgY2VsbHM6IGNlbGxTdGF0ZVxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHByaW50R3JpZCgpOiB2b2lkIHtcclxuICAgICAgICBsZXQgc3RyOiBzdHJpbmcgPSBcIlwiO1xyXG4gICAgICAgIGZvciAodmFyIHggPSAwOyB4IDwgdGhpcy5zaXplOyB4KyspIHtcclxuICAgICAgICAgICAgY29uc3QgbGluZVZhbHVlczogbnVtYmVyW10gPSBbXTtcclxuICAgICAgICAgICAgZm9yICh2YXIgeSA9IDA7IHkgPCB0aGlzLnNpemU7IHkrKykge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdmFsdWU6IG51bWJlciA9IHRoaXMuZ2V0Q2VsbFZhbHVlKG1hdGgudjIoeCwgeSkpO1xyXG4gICAgICAgICAgICAgICAgbGluZVZhbHVlcy5wdXNoKHZhbHVlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBzdHIgKz0gbGluZVZhbHVlcy5qb2luKFwiLFwiKSArIFwiXFxuXCI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnNvbGUubG9nKHN0cik7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHJlbmRlcigpOiB2b2lkIHtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuY2VsbHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgY29uc3QgY2VsbHM6IFRpbGVbXSA9IHRoaXMuY2VsbHNbaV07XHJcbiAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgY2VsbHMubGVuZ3RoOyBqKyspIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG5vZGU6IE5vZGUgPSB0aGlzLmNlbGxOb2RlQXJyYXlbaV1bal07XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNldE5vZGVWYWx1ZShub2RlLCB0aGlzLmdldENlbGxWYWx1ZShtYXRoLnYyKGksIGopKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBhc3luYyBjcmVhdGVOb2RlKHZhbHVlOiBudW1iZXIpOiBQcm9taXNlPE5vZGU+IHtcclxuXHJcbiAgICAgICAgbGV0IHBhdGg6IHN0cmluZyA9IFwicmVzb3VyY2VzOi8vcHJlZmFicy9UaXRsZVwiXHJcbiAgICAgICAgY29uc3Qgbm9kZTogTm9kZSA9IGF3YWl0IEFzc2V0TWdyLmluc3RhbmNlLmNyZWF0ZVByZWZhYihwYXRoKVxyXG5cclxuICAgICAgICBpZiAoIW5vZGUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IGxhYmxlTm9kZSA9IG5vZGUuZ2V0Q2hpbGRCeU5hbWUoXCJMYWJlbFwiKTtcclxuICAgICAgICBpZiAobGFibGVOb2RlKSB7XHJcbiAgICAgICAgICAgIGxhYmxlTm9kZS5nZXRDb21wb25lbnQoTGFiZWwpLnN0cmluZyA9IGAke3ZhbHVlfWA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IHNwTm9kZSA9IG5vZGUuZ2V0Q2hpbGRCeU5hbWUoXCJHaG9zdFwiKTtcclxuICAgICAgICBpZiAoc3BOb2RlKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHNwID0gc3BOb2RlLmdldENvbXBvbmVudChTcHJpdGUpO1xyXG4gICAgICAgICAgICBzcC5zaXplTW9kZSA9IFNwcml0ZS5TaXplTW9kZS5DVVNUT007XHJcbiAgICAgICAgICAgIHNwLmdldENvbXBvbmVudChVSVRyYW5zZm9ybSkuc2V0Q29udGVudFNpemUoY29uZmlnMjA0OC50aWxlV2lkdGgsIGNvbmZpZzIwNDgudGlsZUhpZ2h0KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG5vZGU7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNldE5vZGVWYWx1ZShub2RlOiBOb2RlLCB2YWx1ZTogbnVtYmVyKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKCFub2RlKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgbGFibGVOb2RlID0gbm9kZS5nZXRDaGlsZEJ5TmFtZShcIkxhYmVsXCIpO1xyXG4gICAgICAgIGlmIChsYWJsZU5vZGUpIHtcclxuICAgICAgICAgICAgbGFibGVOb2RlLmdldENvbXBvbmVudChMYWJlbCkuc3RyaW5nID0gdmFsdWUgPiAwID8gYCR7dmFsdWV9YCA6IFwiXCI7XHJcbiAgICAgICAgfVxyXG5cclxuICAgIH1cclxuXHJcbiAgICBvbkxvYWQoKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5jZWxscyA9IFtdO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXJ0KCkge1xyXG5cclxuICAgIH1cclxuXHJcbiAgICB1cGRhdGUoZGVsdGFUaW1lOiBudW1iZXIpIHtcclxuXHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG4iLCJcclxuaW1wb3J0IHsgSGFzaE1hcCB9IGZyb20gXCIuL21hcHMvSGFzaE1hcFwiO1xyXG5pbXBvcnQgeyBQb29sIH0gZnJvbSBcIi4vUG9vbFwiO1xyXG4vLyBpbXBvcnQgeyBQb29sIH0gZnJvbSBcIi4vUG9vbFwiO1xyXG5cclxuLyoqXHJcbiAqIEBmaWxlTmFtZSBIYW5kbGVyLnRzXHJcbiAqIEBhdXRob3IgemhhbmdxaW9uZ1xyXG4gKiBAZGF0ZSAyMDI0LzEyLzI1IDIwOjQxOjU4XCJcclxuICogQGRlc2NyaXB0aW9uXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgSGFuZGxlciB7XHJcbiAgICBwYXJhbTogYW55O1xyXG4gICAgcGFyYW1MaXN0OiBhbnlbXTtcclxuXHJcbiAgICBmdW46IEZ1bmN0aW9uO1xyXG4gICAgdGhpc09iajogT2JqZWN0O1xyXG5cclxuICAgIGluUG9vbDogYm9vbGVhbjtcclxuICAgIGF1dG9SZWxlYXNlOiBib29sZWFuO1xyXG5cclxuICAgIHN0YXRpYyBwb29sOiBQb29sPEhhbmRsZXI+O1xyXG5cclxuICAgIHB1YmxpYyBjb25zdHJ1Y3RvcihmdW46IEZ1bmN0aW9uID0gbnVsbCwgdGhpc09iajogT2JqZWN0ID0gbnVsbCwgcGFyYW0/OiBhbnkpIHtcclxuICAgICAgICBpZiAoZnVuICE9IG51bGwpIHtcclxuICAgICAgICAgICAgdGhpcy5pbml0KGZ1biwgdGhpc09iaiwgcGFyYW0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBpbml0KGZ1bjogRnVuY3Rpb24sIHRoaXNPYmo6IE9iamVjdCwgcGFyYW0/OiBhbnkpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLmZ1biA9IGZ1bjtcclxuICAgICAgICB0aGlzLnBhcmFtID0gcGFyYW07XHJcbiAgICAgICAgdGhpcy50aGlzT2JqID0gdGhpc09iajtcclxuICAgIH1cclxuXHJcbiAgICBkZXN0cm95KCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuYXV0b1JlbGVhc2UgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLnBhcmFtID0gbnVsbDtcclxuICAgICAgICB0aGlzLnBhcmFtTGlzdCA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5mdW4gPSBudWxsO1xyXG4gICAgICAgIHRoaXMudGhpc09iaiA9IG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIGNyZWF0ZShmdW46IEZ1bmN0aW9uLCB0aGlzT2JqOiBPYmplY3QsIHBhcmFtPzogYW55LCBhdXRvUmVsZXNlYTogYm9vbGVhbiA9IGZhbHNlKTogSGFuZGxlciB7XHJcbiAgICAgICAgaWYgKHRoaXMucG9vbCA9PSBudWxsKVxyXG4gICAgICAgICAgICB0aGlzLnBvb2wgPSBuZXcgUG9vbChIYW5kbGVyLCAxMDAwKTtcclxuXHJcbiAgICAgICAgLy/mt7vliqDlnoPlnL7ku6PnoIFcclxuXHJcbiAgICAgICAgdmFyIGNhbGxCYWNrOiBIYW5kbGVyID0gdGhpcy5wb29sLmNyZWF0ZSgpO1xyXG4gICAgICAgIGNhbGxCYWNrLmF1dG9SZWxlYXNlID0gYXV0b1JlbGVzZWE7XHJcbiAgICAgICAgY2FsbEJhY2suaW5Qb29sID0gZmFsc2U7XHJcbiAgICAgICAgY2FsbEJhY2suaW5pdChmdW4sIHRoaXNPYmosIHBhcmFtKTtcclxuICAgICAgICByZXR1cm4gY2FsbEJhY2s7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIHJlbGVzZWEoY2FsbEJhY2s6IEhhbmRsZXIpOiB2b2lkIHtcclxuICAgICAgICAvL3JldHVybjtcclxuICAgICAgICBjYWxsQmFjay5kZXN0cm95KCk7XHJcbiAgICAgICAgY2FsbEJhY2suaW5Qb29sID0gdHJ1ZTtcclxuICAgICAgICBjYWxsQmFjay5hdXRvUmVsZWFzZSA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMucG9vbC5yZWxlYXNlKGNhbGxCYWNrKTtcclxuICAgIH1cclxuXHJcbiAgICBleGVjdXRlKC4uLmFyZ3MpOiBhbnkge1xyXG4gICAgICAgIGlmICghdGhpcy5mdW4pIHJldHVyblxyXG4gICAgICAgIC8vIHZhciBhOiBhbnlbXSA9IFtdO1xyXG4gICAgICAgIGlmICh0aGlzLnBhcmFtICE9IG51bGwpIHtcclxuICAgICAgICAgICAgLy/pmYTluKbnmoTlj4LmlbDliqDlnKjmnIDliY3pnaJcclxuICAgICAgICAgICAgYXJncy51bnNoaWZ0KHRoaXMucGFyYW0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy/mt7vliqDlnoPlnL7ku6PnoIFcclxuXHJcbiAgICAgICAgdmFyIHZhbHVlOiBhbnkgPSB0aGlzLmZ1bi5hcHBseSh0aGlzLnRoaXNPYmosIGFyZ3MpO1xyXG4gICAgICAgIC8v6L+b6KGM5Zue6LCDXHJcbiAgICAgICAgaWYgKHRoaXMuYXV0b1JlbGVhc2UpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuaW5Qb29sKVxyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwi6ZyA6KaB5aSa5qyh6LCD55SoQ2FsbEJhY2vnmoRleGVjdXRl5pa55rOV55qE77yM5LiN6IO96K6+572u5Li66Ieq5Yqo6YeK5pS+YXV0b1JlbGVzZVwiKTtcclxuICAgICAgICAgICAgdGhpcy5kZXN0cm95KCk7XHJcbiAgICAgICAgICAgIEhhbmRsZXIucmVsZXNlYSh0aGlzKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB2YWx1ZTtcclxuICAgIH1cclxufSIsImV4cG9ydCBjbGFzcyBIYXNoTWFwPEssIFY+IHtcclxuICAgIGlzRGVzdHJveTogYm9vbGVhbiA9IGZhbHNlXHJcbiAgICAvKiog6ZW/5bqmICoqL1xyXG4gICAgcHJpdmF0ZSBfbGVuZ3RoOiBudW1iZXI7XHJcbiAgICBwcml2YXRlIG9iajogT2JqZWN0O1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHRoaXMuY2xlYXIoKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgY2xlYXIoKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5vYmogPSB7fTtcclxuICAgICAgICB0aGlzLl9sZW5ndGggPSAwO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzaXplKCk6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2xlbmd0aDtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0Q29udGFpbmVyKCk6IE9iamVjdCB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMub2JqO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgb25EZXN0cm95KG9iajogYW55KTogdm9pZCB7XHJcbiAgICAgICAgY29uc3Qga2V5TmFtZXM6IHN0cmluZ1tdID0gW1wiZGVzdHJveVwiLCBcImRpc3Bvc2VcIl07XHJcbiAgICAgICAgaWYgKG9iaiBpbnN0YW5jZW9mIEFycmF5KSB7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGk6IG51bWJlciA9IDA7IGkgPCBvYmoubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZGVzdHJveShvYmpbaV0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgZm9yIChsZXQgaTogbnVtYmVyID0gMDsgaSA8IGtleU5hbWVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmIChvYmpba2V5TmFtZXNbaV1dKSB7XHJcbiAgICAgICAgICAgICAgICBvYmpba2V5TmFtZXNbaV1dKCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGRlc3Ryb3kobz86IGFueSk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuaXNEZXN0cm95ID0gdHJ1ZTtcclxuICAgICAgICBmb3IgKGxldCBrZXkgaW4gdGhpcy5vYmopIHtcclxuICAgICAgICAgICAgdGhpcy5vbkRlc3Ryb3kodGhpcy5vYmpba2V5XSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMub2JqID0gbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgaXNFbXB0eSgpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fbGVuZ3RoID09IDA7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldChrZXk6IEspOiBWIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5vYmpba2V5IGFzIGFueV07XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHB1dChrZXk6IEssIHZhbHVlOiBWKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKHRoaXMub2JqW2tleSBhcyBhbnldID09IG51bGwpIHtcclxuICAgICAgICAgICAgdGhpcy5fbGVuZ3RoKys7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMub2JqW2tleSBhcyBhbnldID0gdmFsdWU7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHJlbW92ZShrZXk6IEspOiBWIHtcclxuICAgICAgICBsZXQgdGVtcDogViA9IHRoaXMub2JqW2tleSBhcyBhbnldO1xyXG4gICAgICAgIGlmICh0ZW1wICE9IG51bGwpIHtcclxuICAgICAgICAgICAgZGVsZXRlIHRoaXMub2JqW2tleSBhcyBhbnldO1xyXG4gICAgICAgICAgICB0aGlzLl9sZW5ndGgtLTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRlbXA7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGhhc0tleShrZXk6IEspOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5vYmpba2V5IGFzIGFueV0gIT0gbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgaGFzVmFsdWUodmFsdWU6IFYpOiBib29sZWFuIHtcclxuICAgICAgICBmb3IgKGxldCBrZXkgaW4gdGhpcy5vYmopIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMub2JqW2tleV0gPT0gdmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMga2V5cygpOiBBcnJheTxLPiB7XHJcbiAgICAgICAgbGV0IGFyeTogQXJyYXk8Sz4gPSBbXTtcclxuICAgICAgICBpZiAodGhpcy5fbGVuZ3RoICE9IDApIHtcclxuICAgICAgICAgICAgZm9yIChsZXQga2V5IGluIHRoaXMub2JqKSB7XHJcbiAgICAgICAgICAgICAgICBhcnkucHVzaChrZXkgYXMgYW55KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gYXJ5O1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gYXJ5O1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyB2YWx1ZXMoKTogQXJyYXk8Vj4ge1xyXG4gICAgICAgIGxldCBhcnk6IEFycmF5PFY+ID0gW107XHJcbiAgICAgICAgaWYgKHRoaXMuX2xlbmd0aCAhPSAwKSB7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGtleSBpbiB0aGlzLm9iaikge1xyXG4gICAgICAgICAgICAgICAgYXJ5LnB1c2godGhpcy5vYmpba2V5XSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGFyeTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGFyeTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgbnVtS2V5cygpOiBudW1iZXJbXSB7XHJcbiAgICAgICAgbGV0IGFyeTogbnVtYmVyW10gPSBbXTtcclxuICAgICAgICBpZiAodGhpcy5fbGVuZ3RoICE9IDApIHtcclxuICAgICAgICAgICAgZm9yIChsZXQga2V5IGluIHRoaXMub2JqKSB7XHJcbiAgICAgICAgICAgICAgICBhcnkucHVzaChOdW1iZXIoa2V5KSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGFyeTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGFyeTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZm9yRWFjaChmdW46IChrZXk6IEssIHZhbHVlOiBLKSA9PiB2b2lkLCB0aGlzT2JqOiBPYmplY3QpOiB2b2lkIHtcclxuICAgICAgICBmb3IgKGxldCBrZXkgaW4gdGhpcy5vYmopIHtcclxuICAgICAgICAgICAgZnVuLmNhbGwodGhpc09iaiwga2V5LCB0aGlzLm9ialtrZXldKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgX2RlY29yYXRvciwgQ29tcG9uZW50LCBMYWJlbCwgTm9kZSwgUHJvZ3Jlc3NCYXIgfSBmcm9tICdjYyc7XHJcbmltcG9ydCBVdGlscyBmcm9tICcuLi8uLi8uLi9Db21tb24vVXRpbHMnO1xyXG5pbXBvcnQgeyBGaWdodEhlcm9JbmZvIH0gZnJvbSAnLi4vaW5mb3MvRmlnaHRIZXJvSW5mbyc7XHJcbmNvbnN0IHsgY2NjbGFzcywgcHJvcGVydHkgfSA9IF9kZWNvcmF0b3I7XHJcblxyXG5AY2NjbGFzcygnSGVhZEJhcicpXHJcbmV4cG9ydCBjbGFzcyBIZWFkQmFyIGV4dGVuZHMgQ29tcG9uZW50IHtcclxuXHJcbiAgICBwcml2YXRlIGhwUHJvOiBQcm9ncmVzc0JhcjtcclxuICAgIHByaXZhdGUgbXBQcm86IFByb2dyZXNzQmFyO1xyXG4gICAgcHJpdmF0ZSBuYW1lTGFiZWw6IExhYmVsO1xyXG4gICAgcHJvdGVjdGVkIG9uTG9hZCgpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLmhwUHJvID0gVXRpbHMuRmluZENoaWxkQnlOYW1lKHRoaXMubm9kZSwgXCJocFwiKS5nZXRDb21wb25lbnQoUHJvZ3Jlc3NCYXIpO1xyXG4gICAgICAgIHRoaXMubXBQcm8gPSBVdGlscy5GaW5kQ2hpbGRCeU5hbWUodGhpcy5ub2RlLCBcIm1wXCIpLmdldENvbXBvbmVudChQcm9ncmVzc0Jhcik7XHJcbiAgICAgICAgdGhpcy5uYW1lTGFiZWwgPSBVdGlscy5GaW5kQ2hpbGRCeU5hbWUodGhpcy5ub2RlLCBcIm5hbWVcIikuZ2V0Q29tcG9uZW50KExhYmVsKTtcclxuICAgIH1cclxuICAgIHN0YXJ0KCkge1xyXG5cclxuICAgIH1cclxuXHJcblxyXG4gICAgcHVibGljIHNldE5hbWUobmFtZTogc3RyaW5nKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5uYW1lTGFiZWwuc3RyaW5nID0gbmFtZTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc2V0RGF0YShoZXJvOiBGaWdodEhlcm9JbmZvKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy51cGRhdGVIcChoZXJvLmhwIC8gaGVyby5tYXhIcCk7XHJcbiAgICAgICAgdGhpcy51cGRhdGVNcChoZXJvLm1wIC8gaGVyby5tYXhNcCk7XHJcbiAgICB9XHJcblxyXG4gICAgdXBkYXRlSHAocHJvZ3Jlc3M6IG51bWJlcik6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuaHBQcm8ucHJvZ3Jlc3MgPSBwcm9ncmVzcztcclxuICAgIH1cclxuXHJcbiAgICB1cGRhdGVNcChwcm9ncmVzczogbnVtYmVyKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5tcFByby5wcm9ncmVzcyA9IHByb2dyZXNzO1xyXG4gICAgfVxyXG5cclxuICAgIHVwZGF0ZShkZWx0YVRpbWU6IG51bWJlcikge1xyXG5cclxuICAgIH1cclxufVxyXG5cclxuXHJcbiIsIi8qKlxyXG4gKiBAZmlsZU5hbWUgSGVyb0NvbmZpZ1ZvLnRzXHJcbiAqIEBhdXRob3IgemhhbmdxaW9uZ1xyXG4gKiBAZGF0ZSAyMDI0LzEyLzI2IDIwOjA1OjIzXCJcclxuICogQGRlc2NyaXB0aW9uXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgSGVyb0NvbmZpZ1ZvIHtcclxuICAgIHB1YmxpYyBzcGluZUlkOiBudW1iZXI7XHJcbiAgICBwdWJsaWMgbWF4SHA6IG51bWJlcjtcclxuICAgIHB1YmxpYyBtYXhNcDogbnVtYmVyO1xyXG4gICAgcHVibGljIGNvbXA6IG51bWJlcjtcclxuICAgIHB1YmxpYyBsYXllcjogc3RyaW5nO1xyXG4gICAgcHVibGljIHNpdGU6IG51bWJlcjtcclxuICAgIHB1YmxpYyBzcGVlZDogbnVtYmVyO1xyXG4gICAgcHVibGljIHNraWxsSWRzOiBudW1iZXJbXTtcclxufSIsImltcG9ydCB7IFBhdGhPcHRpbWl6ZSwgUGF0aFF1YWRTZWVrIH0gZnJvbSBcIi4vRW51bVwiO1xyXG5pbXBvcnQgUm9hZE5vZGUgZnJvbSBcIi4vbWFwL1JvYWROb2RlXCI7XHJcblxyXG4vKipcclxuICog5a+76Lev5o6l5Y+jXHJcbiAqIEBhdXRob3Ig6JC95pel5pWF5Lq6IFFRIDU4MzA1MTg0MlxyXG4gKiBcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGludGVyZmFjZSBJUm9hZFNlZWtlciB7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKuWvu+i3r+WFpeWPo+aWueazlSBcclxuICAgICAqIEBwYXJhbSBzdGFydE5vZGVcclxuICAgICAqIEBwYXJhbSB0YXJnZXROb2RlXHJcbiAgICAgKiBAcmV0dXJucyBcclxuICAgICAqL1x0XHJcbiAgICBzZWVrUGF0aChzdGFydE5vZGU6Um9hZE5vZGUsdGFyZ2V0Tm9kZTpSb2FkTm9kZSk6QXJyYXk8Um9hZE5vZGU+O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICrlr7vot6/lhaXlj6Pmlrnms5Ug5aaC5p6c5rKh5pyJ5a+75Yiw55uu5qCH77yM5YiZ6L+U5Zue56a755uu5qCH5pyA6L+R55qE6Lev5b6EXHJcbiAgICAgKiBAcGFyYW0gc3RhcnROb2RlXHJcbiAgICAgKiBAcGFyYW0gdGFyZ2V0Tm9kZVxyXG4gICAgICogQHJldHVybnMgXHJcbiAgICAgKi9cclxuICAgIHNlZWtQYXRoMihzdGFydE5vZGU6Um9hZE5vZGUsdGFyZ2V0Tm9kZTpSb2FkTm9kZSk6QXJyYXk8Um9hZE5vZGU+O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICrmtYvor5Xlr7vot6/mraXpqqQgXHJcbiAgICAgKiBAcGFyYW0gc3RhcnROb2RlXHJcbiAgICAgKiBAcGFyYW0gdGFyZ2V0Tm9kZVxyXG4gICAgICogQHJldHVybnNcclxuICAgICAqL1xyXG4gICAgdGVzdFNlZWtQYXRoU3RlcChzdGFydE5vZGU6Um9hZE5vZGUsdGFyZ2V0Tm9kZTpSb2FkTm9kZSxjYWxsYmFjazpGdW5jdGlvbix0YXJnZXQ6YW55LHRpbWU6bnVtYmVyKTp2b2lkO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICog5Lik5Liq6Lev54K55LmL6Ze05piv5ZCm5Y+v55u06L6+77yI5Y2z5piv5ZCm5Y+v5Lul5Lik54K55LiA57q/5Yiw6L6+77yJXHJcbiAgICAgKiBAcGFyYW0gc3RhcnROb2RlIFxyXG4gICAgICogQHBhcmFtIHRhcmdldE5vZGUgXHJcbiAgICAgKi9cclxuICAgIGlzQXJyaXZlQmV0d2VlblR3b05vZGVzKHN0YXJ0Tm9kZTpSb2FkTm9kZSx0YXJnZXROb2RlOlJvYWROb2RlKTpib29sZWFuO1xyXG5cclxuICAgIC8qKlxyXG5cdCAqIOaYr+WQpuaYr+WPr+mAmui/h+eahOeCuSBcclxuXHQgKiBAcGFyYW0gbm9kZSBcclxuXHQgKi9cclxuXHRpc1Bhc3NOb2RlKG5vZGU6Um9hZE5vZGUpOmJvb2xlYW5cclxuXHRcclxuXHQvKipcclxuXHQgKiDmoLnmja7kuJbnlYzlnZDmoIfojrflvpfot6/oioLngrlcclxuXHQgKiBAcGFyYW0gY3ggXHJcblx0ICogQHBhcmFtIGN5IFxyXG5cdCAqIEByZXR1cm5zIFxyXG5cdCAqL1xyXG5cdGdldFJvYWROb2RlKGN4Om51bWJlciwgY3k6bnVtYmVyKTpSb2FkTm9kZVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog6K6+572u5pyA5aSn5a+76Lev5q2l6aqk77yM5a+76Lev5pe26LaF6L+H6L+Z5Liq5a+76Lev5q2l6aqk6L+Y5rKh5a+75Yiw57uI54K577yM5YiZ6KeG5Li65peg5rOV6L6+5Yiw55uu5qCH77yM5a+76Lev57uT5p2f44CCXHJcbiAgICAgKiBcclxuICAgICAqIOm7mOiupOWAvOS4ujEwMDDvvIzlgLzotorlpKfvvIzlkI7pnaLlr7vot6/nmoTov5DnrpfmtojogJfotorlpKfvvIzmiYDku6Xorr7nva7ov5nkuKrlgLzopoHph4/lipvogIzooYzjgIJcclxuICAgICAqIEBwYXJhbSBtYXhTdGVwIOacgOWkp+Wvu+i3r+atpemqpFxyXG4gICAgICovXHJcbiAgICBzZXRNYXhTZWVrU3RlcChtYXhTdGVwOm51bWJlcik7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDlr7vot6/nmoTot6/lvoTnmoTkvJjljJbnrYnnuqfjgIJcclxuICAgICAqIFxyXG4gICAgICog5pyJbm9uZSjkuI3kvJjljJYpLGJldHRlcu+8iOi+g+WlveeahOS8mOWMlu+8iSxiZXN077yI5pyA5aW955qE5LyY5YyW77yJ77yM5q+P56eN5LyY5YyW6YO95pyJ54m55a6a5pa56Z2i55qE55So6YCU44CC6buY6K6k5YC85Li6YmVzdFxyXG4gICAgICogXHJcbiAgICAgKiDmr4/np43kvJjljJbnmoTljp/nkIblkoznlKjpgJTlj6/mn6XnnIvmnprkuL5QYXRoT3B0aW1pemXnmoTohJrmnKzvvIzph4zpnaLmnInor6bnu4bop6Pph4rjgIJcclxuICAgICAqIEBwYXJhbSBvcHRpbWl6ZSDot6/lvoTkvJjljJbnrYnnuqdcclxuICAgICAqL1xyXG4gICAgc2V0UGF0aE9wdGltaXplKG9wdGltaXplOlBhdGhPcHRpbWl6ZSk7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDorr7nva405pa55ZCR6Lev54K55Zyw5Zu+55qE5a+76Lev57G75Z6L77yM5Y+q6ZKI5a+5NDXluqblkow5MOW6puWcsOWbvu+8jOS4jeWMheaLrOWFrei+ueW9ouWcsOWbvu+8iOWFrei+ueW9ouWcsOWbvuiuvue9rui/meS4quWAvOaXoOS7u+S9leWPjeW6lO+8iVxyXG4gICAgICogQHBhcmFtIHBhdGhRdWFkU2VlayAgNOaWueWQkei3r+eCueWcsOWbvueahOWvu+i3r+exu+Wei1xyXG4gICAgICovXHJcbiAgICBzZXRQYXRoUXVhZFNlZWsocGF0aFF1YWRTZWVrOlBhdGhRdWFkU2Vlayk7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDoh6rlrprkuYnot6/ngrnmmK/lkKbog73pgJrov4fnmoTmnaHku7bvvIxcclxuICAgICAqIEBwYXJhbSBjYWxsYmFjayDlm57osIPmlrnms5XnlKjkuo7oh6rlrprkuYnot6/ngrnmmK/lkKblj6/pgJrov4fnmoTmnaHku7bvvIzlpoLmnpzlj4LmlbDmmK9udWxs77yM5YiZ55So6buY6K6k5Yik5pat5p2h5Lu277yM5LiN5pivbnVsbO+8jOWImeWPluS7o+m7mOiupOWIpOaWreadoeS7tlxyXG4gICAgICovXHJcbiAgICBzZXRSb2FkTm9kZVBhc3NDb25kaXRpb24oY2FsbGJhY2s6RnVuY3Rpb24pO1xyXG4gICAgXHJcbn1cclxuIiwiaW1wb3J0IHsgX2RlY29yYXRvciwgQ29sb3IsIENvbXBvbmVudCwgRXZlbnRUb3VjaCwgR3JhcGhpY3MsIG1hdGgsIE5vZGUsIE5vZGVFdmVudFR5cGUsIHJhbmRvbSwgVUlUcmFuc2Zvcm0sIFZlYzIsIFZlYzMgfSBmcm9tICdjYyc7XHJcbmNvbnN0IHsgY2NjbGFzcywgcHJvcGVydHkgfSA9IF9kZWNvcmF0b3I7XHJcblxyXG5AY2NjbGFzcygnSm95c3RpY2snKVxyXG5leHBvcnQgY2xhc3MgSm95c3RpY2sgZXh0ZW5kcyBDb21wb25lbnQge1xyXG4gICAgQHByb3BlcnR5KE5vZGUpXHJcbiAgICBwdWJsaWMgYmc6IE5vZGUgPSBudWxsO1xyXG4gICAgQHByb3BlcnR5KE5vZGUpXHJcbiAgICBwdWJsaWMgYmFyOiBOb2RlID0gbnVsbDtcclxuXHJcbiAgICBAcHJvcGVydHkoTm9kZSlcclxuICAgIHB1YmxpYyB0YXJnZXQ6IE5vZGUgPSBudWxsO1xyXG5cclxuXHJcbiAgICBwcml2YXRlIGlzRHJhZ2dpbmc6IGJvb2xlYW4gPSBmYWxzZTtcclxuICAgIHByaXZhdGUgZHJhZ09mZnNldDogVmVjMiA9IG5ldyBWZWMyKCk7XHJcbiAgICBwcml2YXRlIHN0YXJ0VG91Y2hQb3M6IFZlYzMgPSBuZXcgVmVjMygpO1xyXG5cclxuICAgIHByaXZhdGUgY2VudGVyUG9zaXRpb246IFZlYzMgPSBtYXRoLnYzKDAsIDApO1xyXG4gICAgcHJpdmF0ZSBqb3lzdGlja1JhZGl1czogbnVtYmVyO1xyXG5cclxuICAgIHB1YmxpYyBjdXJyZW50RGlyZWN0aW9uOiBWZWMzID0gbmV3IFZlYzMoKTtcclxuICAgIHN0YXJ0KCkge1xyXG4gICAgICAgIHRoaXMuam95c3RpY2tSYWRpdXMgPSAxMDAgLy90aGlzLmJnLmdldENvbXBvbmVudChVSVRyYW5zZm9ybSkud2lkdGggLyAyO1xyXG4gICAgICAgIHRoaXMuZHJhd0JnKCk7XHJcbiAgICAgICAgdGhpcy5kcmF3QmFyKCk7XHJcbiAgICAgICAgdGhpcy5iYXIub24oTm9kZUV2ZW50VHlwZS5UT1VDSF9TVEFSVCwgdGhpcy5vbk1vdXNlRG93biwgdGhpcyk7XHJcbiAgICAgICAgdGhpcy5iYXIub24oTm9kZUV2ZW50VHlwZS5UT1VDSF9NT1ZFLCB0aGlzLm9uTW91c2VNb3ZlLCB0aGlzKTtcclxuICAgICAgICB0aGlzLmJhci5vbihOb2RlRXZlbnRUeXBlLlRPVUNIX0VORCwgdGhpcy5vbk1vdXNlVXAsIHRoaXMpO1xyXG4gICAgICAgIHRoaXMuYmFyLm9uKE5vZGVFdmVudFR5cGUuVE9VQ0hfQ0FOQ0VMLCB0aGlzLm9uTW91c2VVcCwgdGhpcyk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBkcmF3QmcoKTogdm9pZCB7XHJcbiAgICAgICAgY29uc3QgZ3JhcGhpY3M6IEdyYXBoaWNzID0gdGhpcy5iZy5nZXRDb21wb25lbnQoR3JhcGhpY3MpO1xyXG4gICAgICAgIGdyYXBoaWNzLmNsZWFyKCk7XHJcbiAgICAgICAgZ3JhcGhpY3MuZmlsbENvbG9yID0gQ29sb3IuV0hJVEU7XHJcbiAgICAgICAgZ3JhcGhpY3MuY2lyY2xlKDAsIDAsIHRoaXMuam95c3RpY2tSYWRpdXMpO1xyXG4gICAgICAgIGdyYXBoaWNzLmZpbGwoKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGRyYXdCYXIoKTogdm9pZCB7XHJcbiAgICAgICAgY29uc3QgZ3JhcGhpY3M6IEdyYXBoaWNzID0gdGhpcy5iYXIuZ2V0Q29tcG9uZW50KEdyYXBoaWNzKTtcclxuICAgICAgICBncmFwaGljcy5jbGVhcigpO1xyXG4gICAgICAgIGdyYXBoaWNzLmZpbGxDb2xvciA9IENvbG9yLlJFRDtcclxuICAgICAgICBncmFwaGljcy5jaXJjbGUoMCwgMCwgMzApO1xyXG4gICAgICAgIGdyYXBoaWNzLmZpbGwoKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIG9uTW91c2VEb3duKGV2ZW50OiBFdmVudFRvdWNoKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5pc0RyYWdnaW5nID0gdHJ1ZTtcclxuICAgICAgICBjb25zdCBsb2NhdGlvbkluTm9kZSA9IGV2ZW50LmdldExvY2F0aW9uKCk7XHJcbiAgICAgICAgdGhpcy5zdGFydFRvdWNoUG9zLnNldChsb2NhdGlvbkluTm9kZS54LCBsb2NhdGlvbkluTm9kZS55LCAwKTtcclxuICAgICAgICB0aGlzLnVwZGF0ZUpveXN0aWNrUG9zaXRpb24obG9jYXRpb25Jbk5vZGUpO1xyXG4gICAgICAgIC8vIHRoaXMuZHJhZ09mZnNldC5zZXQobG9jYXRpb25Jbk5vZGUueCAtIHRoaXMubm9kZS5wb3NpdGlvbi54LCBsb2NhdGlvbkluTm9kZS55IC0gdGhpcy5ub2RlLnBvc2l0aW9uLnkpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgb25Nb3VzZU1vdmUoZXZlbnQ6IEV2ZW50VG91Y2gpOiB2b2lkIHtcclxuICAgICAgICBjb25zdCB0b3VjaFBvcyA9IGV2ZW50LmdldExvY2F0aW9uKCk7XHJcbiAgICAgICAgdGhpcy51cGRhdGVKb3lzdGlja1Bvc2l0aW9uKHRvdWNoUG9zKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIHVwZGF0ZUpveXN0aWNrUG9zaXRpb24odG91Y2hQb3M6IFZlYzIpOiB2b2lkIHtcclxuICAgICAgICBjb25zdCBkZWx0YVggPSB0b3VjaFBvcy54IC0gdGhpcy5zdGFydFRvdWNoUG9zLng7XHJcbiAgICAgICAgY29uc3QgZGVsdGFZID0gdG91Y2hQb3MueSAtIHRoaXMuc3RhcnRUb3VjaFBvcy55O1xyXG4gICAgICAgIGNvbnN0IGRpc3RhbmNlID0gTWF0aC5zcXJ0KGRlbHRhWCAqIGRlbHRhWCArIGRlbHRhWSAqIGRlbHRhWSk7XHJcblxyXG4gICAgICAgIC8vIOWmguaenOi3neemu+i2hei/h+S6huaRh+adhueahOWNiuW+hO+8jOmZkOWItuWcqOi+ueeVjOWGhVxyXG4gICAgICAgIGlmIChkaXN0YW5jZSA+IHRoaXMuam95c3RpY2tSYWRpdXMpIHtcclxuICAgICAgICAgICAgY29uc3QgYW5nbGUgPSBNYXRoLmF0YW4yKGRlbHRhWSwgZGVsdGFYKTtcclxuICAgICAgICAgICAgY29uc3QgbmV3WCA9IHRoaXMuam95c3RpY2tSYWRpdXMgKiBNYXRoLmNvcyhhbmdsZSk7XHJcbiAgICAgICAgICAgIGNvbnN0IG5ld1kgPSB0aGlzLmpveXN0aWNrUmFkaXVzICogTWF0aC5zaW4oYW5nbGUpO1xyXG4gICAgICAgICAgICB0aGlzLmJhci5zZXRQb3NpdGlvbihuZXdYLCBuZXdZLCAwKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLmJhci5zZXRQb3NpdGlvbihkZWx0YVgsIGRlbHRhWSwgMCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyDorqHnrpfmkYfmnYbovpPlhaXnmoTmlrnlkJFcclxuICAgICAgICB0aGlzLmN1cnJlbnREaXJlY3Rpb24uc2V0KGRlbHRhWCAvIHRoaXMuam95c3RpY2tSYWRpdXMsIGRlbHRhWSAvIHRoaXMuam95c3RpY2tSYWRpdXMsIDApO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXQgZGlyZWN0aW9uKCk6IFZlYzMge1xyXG4gICAgICAgIGNvbnN0IGNlbnRlclBvc2l0aW9uOiBWZWMzID0gdGhpcy5jZW50ZXJQb3NpdGlvbi5jbG9uZSgpO1xyXG4gICAgICAgIGNvbnN0IGJhclBvc2l0aW9uOiBWZWMzID0gdGhpcy5iYXIucG9zaXRpb24uY2xvbmUoKTtcclxuICAgICAgICBjb25zdCBkaXJlY3Rpb246IFZlYzMgPSBiYXJQb3NpdGlvbi5zdWJ0cmFjdChjZW50ZXJQb3NpdGlvbik7XHJcbiAgICAgICAgcmV0dXJuIGRpcmVjdGlvbjtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIG9uTW91c2VVcChldmVudDogRXZlbnRUb3VjaCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuaXNEcmFnZ2luZyA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuYmFyLnNldFBvc2l0aW9uKDAsIDAsIDApO1xyXG4gICAgICAgIHRoaXMuY3VycmVudERpcmVjdGlvbi5zZXQoMCwgMCwgMCk7XHJcbiAgICB9XHJcblxyXG4gICAgdXBkYXRlKGRlbHRhVGltZTogbnVtYmVyKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuY3VycmVudERpcmVjdGlvbi5sZW5ndGgoKSAhPSAwICYmIHRoaXMudGFyZ2V0KSB7XHJcbiAgICAgICAgICAgIHRoaXMudGFyZ2V0LnNldFBvc2l0aW9uKHRoaXMudGFyZ2V0LnBvc2l0aW9uLmNsb25lKCkuYWRkKHRoaXMuY3VycmVudERpcmVjdGlvbi5jbG9uZSgpLm11bHRpcGx5U2NhbGFyKDIwMCAqIGRlbHRhVGltZSkpKVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuXHJcbiIsImltcG9ydCB7IE5vZGUsIFVJVHJhbnNmb3JtLCBXaWRnZXQgfSBmcm9tIFwiY2NcIjtcclxuXHJcbmV4cG9ydCBlbnVtIExheWVyVHlwZSB7XHJcbiAgICBub25lLFxyXG4gICAgdmlldyxcclxuICAgIHdpbmRvdyxcclxuXHJcbiAgICBlbmQsXHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIExheWVyTWFuYWdlciB7XHJcbiAgICBwcml2YXRlIHN0YXRpYyBpbml0ZWQ6IGJvb2xlYW4gPSBmYWxzZTtcclxuICAgIHByaXZhdGUgc3RhdGljIGxheWVyczogeyBba2V5OiBudW1iZXJdOiBOb2RlIH07XHJcblxyXG4gICAgcHVibGljIHN0YXRpYyB3aWR0aDogbnVtYmVyO1xyXG4gICAgcHVibGljIHN0YXRpYyBoZWlnaHQ6IG51bWJlcjtcclxuICAgIHB1YmxpYyBzdGF0aWMgcm9vdDogTm9kZTtcclxuXHJcbiAgICBwdWJsaWMgc3RhdGljIGluaXQocm9vdDogTm9kZSk6IHZvaWQge1xyXG4gICAgICAgIGlmICh0aGlzLmluaXRlZCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMubGF5ZXJzID0ge307XHJcbiAgICAgICAgdGhpcy5pbml0ZWQgPSB0cnVlO1xyXG4gICAgICAgIHRoaXMucm9vdCA9IHJvb3Q7XHJcbiAgICAgICAgbGV0IHJvb3RUcjogVUlUcmFuc2Zvcm0gPSB0aGlzLnJvb3QuZ2V0Q29tcG9uZW50KFVJVHJhbnNmb3JtKTtcclxuICAgICAgICBpZiAoIXJvb3RUcikge1xyXG4gICAgICAgICAgICByb290VHIgPSB0aGlzLnJvb3QuYWRkQ29tcG9uZW50KFVJVHJhbnNmb3JtKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy53aWR0aCA9IHJvb3RUci53aWR0aCB8fCA3NTA7XHJcbiAgICAgICAgdGhpcy5oZWlnaHQgPSByb290VHIuaGVpZ2h0IHx8IDEzMzQ7XHJcblxyXG4gICAgICAgIGZvciAobGV0IHR5cGUgPSAwOyB0eXBlIDwgTGF5ZXJUeXBlLmVuZDsgdHlwZSsrKSB7XHJcbiAgICAgICAgICAgIGlmICh0eXBlICE9IExheWVyVHlwZS5ub25lKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNyZWF0ZUxheWVyKHR5cGUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgc3RhdGljIGNyZWF0ZUxheWVyKGxheWVyOiBMYXllclR5cGUsIHBhcmVudD86IE5vZGUpIHtcclxuICAgICAgICBjb25zdCBub2RlOiBOb2RlID0gbmV3IE5vZGUoKTtcclxuICAgICAgICBub2RlLm5hbWUgPSBgbGF5ZXJfJHtsYXllcn1gO1xyXG4gICAgICAgIGlmICghcGFyZW50KSBwYXJlbnQgPSB0aGlzLnJvb3Q7XHJcbiAgICAgICAgbGV0IHVpVHI6IFVJVHJhbnNmb3JtID0gbm9kZS5nZXRDb21wb25lbnQoVUlUcmFuc2Zvcm0pO1xyXG4gICAgICAgIGlmICghdWlUcikge1xyXG4gICAgICAgICAgICB1aVRyID0gbm9kZS5hZGRDb21wb25lbnQoVUlUcmFuc2Zvcm0pXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB1aVRyLnNldENvbnRlbnRTaXplKHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0KTtcclxuICAgICAgICBsZXQgd2lkZ2V0ID0gbm9kZS5hZGRDb21wb25lbnQoV2lkZ2V0KTtcclxuICAgICAgICB3aWRnZXQubGVmdCA9IHdpZGdldC5yaWdodCA9IHdpZGdldC50b3AgPSB3aWRnZXQuYm90dG9tID0gMDtcclxuICAgICAgICB3aWRnZXQudGFyZ2V0ID0gcGFyZW50O1xyXG4gICAgICAgIG5vZGUucGFyZW50ID0gcGFyZW50O1xyXG4gICAgICAgIHdpZGdldC51cGRhdGVBbGlnbm1lbnQoKTtcclxuICAgICAgICB0aGlzLmxheWVyc1tsYXllcl0gPSBub2RlO1xyXG4gICAgICAgIHJldHVybiBub2RlO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzdGF0aWMgZ2V0TGF5ZXIobGF5ZXI6IExheWVyVHlwZSk6IE5vZGUge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmxheWVyc1tsYXllcl07XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgeyBfZGVjb3JhdG9yLCBCdXR0b24sIENvbXBvbmVudCwgRXZlbnRLZXlib2FyZCwgaW5wdXQsIElucHV0LCBLZXlDb2RlLCBMYWJlbCwgbWF0aCwgTm9kZSwgVmVjMiB9IGZyb20gJ2NjJztcclxuaW1wb3J0IHsgSXRlbUNvbG9yIH0gZnJvbSAnLi9lbnVtJztcclxuaW1wb3J0IHsgY29uZmlnIH0gZnJvbSAnLi9jb25maWcnO1xyXG5pbXBvcnQgeyBSZW5kZXIgfSBmcm9tICcuL1JlbmRlcic7XHJcbmNvbnN0IHsgY2NjbGFzcywgcHJvcGVydHkgfSA9IF9kZWNvcmF0b3I7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIEN1cnJlbnRTaGFwZURhdGEge1xyXG4gICAgLyoqIOaMh+WQkeW9k+WJjeW9oueKtuS4reW/gyAqL1xyXG4gICAgY2VudGVyOiBWZWMyLFxyXG4gICAgLyoqIOW9k+WJjeW9oueKtue/u+i9rOS4i+agh++8jDAtM++8jOWPr+S7pee/u+i9rCA0IOenjeW9ouaAgSAqL1xyXG4gICAgaW5kZXg6IG51bWJlcixcclxuICAgIC8qKiDku4DkuYjpopzoibLnmoTmlrnlnZcgKi9cclxuICAgIGNvbG9yOiBJdGVtQ29sb3JcclxufVxyXG5cclxuQGNjY2xhc3MoJ01haW4nKVxyXG5leHBvcnQgY2xhc3MgTWFpbiBleHRlbmRzIENvbXBvbmVudCB7XHJcblxyXG4gICAgQHByb3BlcnR5KE5vZGUpXHJcbiAgICBzdGFydFBhbmVsOiBOb2RlID0gdW5kZWZpbmVkO1xyXG5cclxuICAgIEBwcm9wZXJ0eShOb2RlKVxyXG4gICAgZW5kUGFuZWw6IE5vZGUgPSB1bmRlZmluZWQ7XHJcblxyXG4gICAgLyoqIOS6jOe7tOaVsOe7hCAqL1xyXG4gICAgZGF0YUFycmF5OiBJdGVtQ29sb3JbXVtdID0gW11cclxuXHJcbiAgICBlbGltaW5hdGVWZWMyczogVmVjMltdID0gW107XHJcblxyXG4gICAgLyoqIOW9k+WJjeW9oueKtiAqL1xyXG4gICAgY3VycmVudFNoYXBlOiBDdXJyZW50U2hhcGVEYXRhID0ge1xyXG4gICAgICAgIGNlbnRlcjogbWF0aC52MigwLCAwKSxcclxuICAgICAgICBpbmRleDogMCxcclxuICAgICAgICBjb2xvcjogSXRlbUNvbG9yLk5VTExcclxuICAgIH1cclxuXHJcbiAgICAvKiog6K6h5pe25Y+Y6YePICovXHJcbiAgICB0aW1lOiBudW1iZXIgPSAwXHJcblxyXG4gICAgLyoqIOa4uOaIj+i/m+ihjOW8gOWFsyAqL1xyXG4gICAgaXNPcGVuOiBib29sZWFuID0gZmFsc2VcclxuXHJcbiAgICBzY29yZTogbnVtYmVyID0gMDtcclxuXHJcbiAgICBzY29yZUxhYmVsOiBMYWJlbDtcclxuXHJcblxyXG5cclxuICAgIHByaXZhdGUgc3RhcnRCdG46IE5vZGU7XHJcbiAgICBwcml2YXRlIHBhdXNlQnRuOiBOb2RlO1xyXG4gICAgcHJpdmF0ZSByZXN0YXJ0QnRuOiBOb2RlO1xyXG5cclxuICAgIHByaXZhdGUgX2lzUGF1c2U6IGJvb2xlYW4gPSBmYWxzZTtcclxuXHJcbiAgICBwcml2YXRlIGZpbmRDaGlsZChuYW1lOiBzdHJpbmcsIHN0YXJ0Tm9kZT86IE5vZGUpOiBOb2RlIHtcclxuICAgICAgICBzdGFydE5vZGUgPSBzdGFydE5vZGUgPyBzdGFydE5vZGUgOiB0aGlzLm5vZGU7XHJcbiAgICAgICAgbGV0IGNoaWxkczogTm9kZVtdID0gc3RhcnROb2RlLmNoaWxkcmVuO1xyXG4gICAgICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCBjaGlsZHMubGVuZ3RoOyBpbmRleCsrKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGVsZW1lbnQ6IE5vZGUgPSBjaGlsZHNbaW5kZXhdO1xyXG4gICAgICAgICAgICBpZiAoZWxlbWVudC5uYW1lID09IG5hbWUpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBlbGVtZW50O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGxldCByZXN1bHQ6IE5vZGUgPSB0aGlzLmZpbmRDaGlsZChuYW1lLCBlbGVtZW50KTtcclxuICAgICAgICAgICAgaWYgKHJlc3VsdCAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIHByb3RlY3RlZCBvbkxvYWQoKTogdm9pZCB7XHJcblxyXG4gICAgICAgIGNvbnN0IGNCbG9ja1dpZHRoOiBudW1iZXIgPSBNYXRoLmZsb29yKGNvbmZpZy5zY2VuZVdpZHRoIC8gY29uZmlnLmNvbCk7XHJcbiAgICAgICAgY29uc3QgY0Jsb2NrSGlnaHQ6IG51bWJlciA9IE1hdGguZmxvb3IoY29uZmlnLnNjZW5lSGVpZ2h0IC8gY29uZmlnLnJvdyk7XHJcbiAgICAgICAgY29uZmlnLmJsb2NrV2lkdGggPSBjb25maWcuYmxvY2tIZWlnaHQgPSBNYXRoLm1pbihjQmxvY2tIaWdodCwgY0Jsb2NrV2lkdGgpO1xyXG5cclxuICAgICAgICB0aGlzLnBhdXNlQnRuID0gdGhpcy5maW5kQ2hpbGQoXCJwYXVzZVwiKTtcclxuICAgICAgICB0aGlzLnJlc3RhcnRCdG4gPSB0aGlzLmZpbmRDaGlsZChcInJlc3RhcnRCdG5cIik7XHJcbiAgICAgICAgdGhpcy5zdGFydEJ0biA9IHRoaXMuZmluZENoaWxkKFwic3RhcnRCdG5cIik7XHJcblxyXG4gICAgICAgIGNvbnN0IGxhYmVsTm9kZSA9IHRoaXMuZmluZENoaWxkKFwic2NvcmVcIik7XHJcbiAgICAgICAgaWYgKGxhYmVsTm9kZSkge1xyXG4gICAgICAgICAgICB0aGlzLnNjb3JlTGFiZWwgPSBsYWJlbE5vZGUuZ2V0Q29tcG9uZW50KExhYmVsKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5lbGltaW5hdGVWZWMycyA9IFtdO1xyXG5cclxuICAgICAgICB0aGlzLnNob3dFbmRQYW5lbChmYWxzZSk7XHJcbiAgICAgICAgdGhpcy51cGRhdGVTY29yZSgpO1xyXG4gICAgICAgIHRoaXMucGF1c2VCdG4ub24oQnV0dG9uLkV2ZW50VHlwZS5DTElDSywgdGhpcy5vbkNsaWNrUGF1c2UsIHRoaXMpO1xyXG4gICAgICAgIHRoaXMucmVzdGFydEJ0bi5vbihCdXR0b24uRXZlbnRUeXBlLkNMSUNLLCB0aGlzLm9uQ2xpY2tSZXN0YXJ0LCB0aGlzKTtcclxuXHJcbiAgICAgICAgLy8gdGhpcy5ub2RlLm9uKElucHV0LkV2ZW50VHlwZS5LRVlfRE9XTiwgdGhpcy5vbktleURvd24sIHRoaXMpO1xyXG4gICAgICAgIGlucHV0Lm9uKElucHV0LkV2ZW50VHlwZS5LRVlfRE9XTiwgdGhpcy5vbktleURvd24sIHRoaXMpXHJcblxyXG4gICAgICAgIHRoaXMuc3RhcnRCdG4ub24oQnV0dG9uLkV2ZW50VHlwZS5DTElDSywgdGhpcy5nYW1lU3RhcnQsIHRoaXMpO1xyXG5cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIHNob3dFbmRQYW5lbCh2OiBib29sZWFuLCBpc1BhdXNlPzogYm9vbGVhbik6IHZvaWQge1xyXG4gICAgICAgIGlmICh0aGlzLmVuZFBhbmVsKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZW5kUGFuZWwuYWN0aXZlID0gdjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5faXNQYXVzZSA9ICEhaXNQYXVzZTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIHVwZGF0ZVNjb3JlKCk6IHZvaWQge1xyXG4gICAgICAgIGlmICh0aGlzLnNjb3JlTGFiZWwpIHtcclxuICAgICAgICAgICAgdGhpcy5zY29yZUxhYmVsLnN0cmluZyA9IGAke3RoaXMuc2NvcmV9YDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBvbktleURvd24oZXZlbnQ6IEV2ZW50S2V5Ym9hcmQpOiB2b2lkIHtcclxuICAgICAgICBpZiAoIXRoaXMuaXNPcGVuKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihcIua4uOaIj+acquW8gOWni1wiKVxyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHN3aXRjaCAoZXZlbnQua2V5Q29kZSkge1xyXG4gICAgICAgICAgICBjYXNlIEtleUNvZGUuQVJST1dfTEVGVDpcclxuICAgICAgICAgICAgICAgIHRoaXMuY2hhbmdlQ3VycmVudFNoYXBlUG9zKG1hdGgudjIoMCwgLTEpKVxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgS2V5Q29kZS5BUlJPV19SSUdIVDpcclxuICAgICAgICAgICAgICAgIHRoaXMuY2hhbmdlQ3VycmVudFNoYXBlUG9zKG1hdGgudjIoMCwgMSkpXHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBLZXlDb2RlLkFSUk9XX0RPV046XHJcbiAgICAgICAgICAgICAgICAvLyDmt7vliqDlv6vpgJ/kuIvokL1cclxuICAgICAgICAgICAgICAgIC8vIHRoaXMuY2hhbmdlQ3VycmVudFNoYXBlUG9zKG1hdGgudjIoMSwgMCkpXHJcbiAgICAgICAgICAgICAgICB0aGlzLmZhc3REb3duKCk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBLZXlDb2RlLkFSUk9XX1VQOlxyXG4gICAgICAgICAgICAgICAgdGhpcy5jaGFuZ2VDdXJyZW50U2hhcGVJbmRleCgpXHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBvbkNsaWNrUGF1c2UoKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5pc09wZW4gPSBmYWxzZTtcclxuICAgICAgICB0aGlzLnNob3dFbmRQYW5lbCh0cnVlLCB0cnVlKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIG9uQ2xpY2tSZXN0YXJ0KCk6IHZvaWQge1xyXG4gICAgICAgIGlmICh0aGlzLl9pc1BhdXNlKSB7XHJcblxyXG4gICAgICAgICAgICB0aGlzLmlzT3BlbiA9IHRydWU7XHJcbiAgICAgICAgICAgIHRoaXMuc2hvd0VuZFBhbmVsKGZhbHNlLCBmYWxzZSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5nYW1lU3RhcnQoKTtcclxuICAgICAgICAgICAgdGhpcy5zaG93RW5kUGFuZWwoZmFsc2UsIGZhbHNlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG5cclxuICAgIHN0YXJ0KCkge1xyXG4gICAgICAgIC8vIHRoaXMuZ2FtZVN0YXJ0KCk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2FtZVN0YXJ0KCk6IHZvaWQge1xyXG4gICAgICAgIGlmICh0aGlzLmlzT3Blbikge1xyXG4gICAgICAgICAgICBjb25zb2xlLndhcm4oXCLmuLjmiI/mraPlnKjov5DooYzkuK3vvIHvvIHvvIFcIik7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMuc3RhcnRQYW5lbCkge1xyXG4gICAgICAgICAgICB0aGlzLnN0YXJ0UGFuZWwuYWN0aXZlID0gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuZ2V0Q29tcG9uZW50KFJlbmRlcikuaW5pdCgpO1xyXG4gICAgICAgIHRoaXMuaW5pdERhdGEoKTtcclxuICAgICAgICB0aGlzLnJlbmRlcigpO1xyXG4gICAgICAgIHRoaXMucmFuZG9tT25lU2hhcGUoKTtcclxuICAgICAgICB0aGlzLmlzT3BlbiA9IHRydWVcclxuICAgIH1cclxuXHJcbiAgICBpbml0RGF0YSgpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLmRhdGFBcnJheSA9IFtdO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY29uZmlnLnJvdzsgaSsrKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZGF0YUFycmF5W2ldID0gW107XHJcbiAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgY29uZmlnLmNvbDsgaisrKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRhdGFBcnJheVtpXVtqXSA9IEl0ZW1Db2xvci5OVUxMO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0UmFuZG9tKG1pbjogbnVtYmVyLCBtYXg6IG51bWJlcik6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIE1hdGguZmxvb3IobWluICsgbWF4ICogTWF0aC5yYW5kb20oKSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIOaTjeS9nOWPmOW9oumAu+i+kSAqL1xyXG4gICAgY2hhbmdlQ3VycmVudFNoYXBlSW5kZXgoKSB7XHJcbiAgICAgICAgdGhpcy5jbGVhckN1cnJlbnREYXRhKHRoaXMuY3VycmVudFNoYXBlKVxyXG4gICAgICAgIHRoaXMuY3VycmVudFNoYXBlLmluZGV4ICs9IHRoaXMuY3VycmVudFNoYXBlLmluZGV4ID09PSAzID8gLTMgOiAxXHJcbiAgICAgICAgaWYgKHRoaXMuY2hlY2tDdXJyZW50U2hhcGVEYXRhKHRoaXMuY3VycmVudFNoYXBlKSkge1xyXG4gICAgICAgICAgICB0aGlzLnNldEN1cnJlbnREYXRhKHRoaXMuY3VycmVudFNoYXBlKVxyXG4gICAgICAgICAgICAvLyBjYy5maW5kKE5vZGVVcmwuTXVzaWMpLmVtaXQoTXVzaWNFdmVudC5BQ1RJT04pXHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgY29uc29sZS53YXJuKCfmk43kvZzkuI3lkIjnkIYnKVxyXG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRTaGFwZS5pbmRleCArPSB0aGlzLmN1cnJlbnRTaGFwZS5pbmRleCA9PT0gMCA/IDMgOiAtMVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKiog5pON5L2c6YC76L6RICovXHJcbiAgICBjaGFuZ2VDdXJyZW50U2hhcGVQb3ModjogVmVjMikge1xyXG4gICAgICAgIHRoaXMuY2xlYXJDdXJyZW50RGF0YSh0aGlzLmN1cnJlbnRTaGFwZSlcclxuICAgICAgICB0aGlzLmN1cnJlbnRTaGFwZS5jZW50ZXIueCArPSB2LnhcclxuICAgICAgICB0aGlzLmN1cnJlbnRTaGFwZS5jZW50ZXIueSArPSB2LnlcclxuICAgICAgICBpZiAodGhpcy5jaGVja0N1cnJlbnRTaGFwZURhdGEodGhpcy5jdXJyZW50U2hhcGUpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0Q3VycmVudERhdGEodGhpcy5jdXJyZW50U2hhcGUpXHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgY29uc29sZS53YXJuKCfmk43kvZzkuI3lkIjnkIYnKVxyXG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRTaGFwZS5jZW50ZXIueCAtPSB2LnhcclxuICAgICAgICAgICAgdGhpcy5jdXJyZW50U2hhcGUuY2VudGVyLnkgLT0gdi55XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIGZhc3REb3duKCkge1xyXG4gICAgICAgIHRoaXMuY2xlYXJDdXJyZW50RGF0YSh0aGlzLmN1cnJlbnRTaGFwZSk7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IHRoaXMuY3VycmVudFNoYXBlLmNlbnRlci54OyBpIDwgY29uZmlnLnJvdzsgaSsrKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY3VycmVudFNoYXBlLmNlbnRlci54ID0gaTtcclxuICAgICAgICAgICAgaWYgKHRoaXMuY2hlY2tDdXJyZW50U2hhcGVEYXRhKHRoaXMuY3VycmVudFNoYXBlKSkge1xyXG4gICAgICAgICAgICAgICAgLy8gdGhpcy5zZXRDdXJyZW50RGF0YSh0aGlzLmN1cnJlbnRTaGFwZSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oXCLml6Dms5Xnp7vliqjjgILkuIvkuIDkuKpcIik7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnRTaGFwZS5jZW50ZXIueCA9IGkgLSAxO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXRDdXJyZW50RGF0YSh0aGlzLmN1cnJlbnRTaGFwZSk7XHJcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLmNoZWNrTGluZXMoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMucmFuZG9tT25lU2hhcGUoKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIHRoaXMucHJpbnREYXRhQXJyYXkoKTtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBnZXRDdXJyZW50U2hhcGVJbmRleERhdGEoY3VycmVudFNoYXBlOiBDdXJyZW50U2hhcGVEYXRhKTogVmVjMltdIHtcclxuICAgICAgICBjb25zdCB7IGNvbG9yLCBpbmRleCB9ID0gY3VycmVudFNoYXBlO1xyXG4gICAgICAgIGNvbnN0IHNoYXBlID0gYHNoYXBlJHtjb2xvcn1gO1xyXG4gICAgICAgIGNvbnN0IHNoYXBlRGF0YTogVmVjMltdW10gPSBjb25maWdbc2hhcGVdO1xyXG4gICAgICAgIGlmICghc2hhcGVEYXRhKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBbXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3Qgc2hhcGVEYXRhczogVmVjMltdID0gc2hhcGVEYXRhW2luZGV4XTtcclxuICAgICAgICByZXR1cm4gc2hhcGVEYXRhcyB8fCBbXTtcclxuICAgIH1cclxuXHJcbiAgICByYW5kb21PbmVTaGFwZSgpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLmN1cnJlbnRTaGFwZS5jZW50ZXIuc2V0KGNvbmZpZy5zdGFydFBvcyk7XHJcbiAgICAgICAgdGhpcy5jdXJyZW50U2hhcGUuY29sb3IgPSB0aGlzLmdldFJhbmRvbSgxLCA3KTtcclxuICAgICAgICB0aGlzLmN1cnJlbnRTaGFwZS5pbmRleCA9IE1hdGguZmxvb3IoNCAqIE1hdGgucmFuZG9tKCkpO1xyXG4gICAgICAgIGlmICh0aGlzLmNoZWNrQ3VycmVudFNoYXBlRGF0YSh0aGlzLmN1cnJlbnRTaGFwZSkpIHtcclxuICAgICAgICAgICAgdGhpcy5zZXRDdXJyZW50RGF0YSh0aGlzLmN1cnJlbnRTaGFwZSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5pc09wZW4gPSBmYWxzZTtcclxuICAgICAgICAgICAgdGhpcy5zZXRDdXJyZW50RGF0YSh0aGlzLmN1cnJlbnRTaGFwZSlcclxuICAgICAgICAgICAgLy8gY2MuZmluZChOb2RlVXJsLk11c2ljKS5lbWl0KE11c2ljRXZlbnQuR0FNRV9PVkVSKVxyXG4gICAgICAgICAgICB0aGlzLnNjaGVkdWxlT25jZSgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAvLyDmmL7npLrmuLjmiI/lvIDlp4voj5zljZVcclxuICAgICAgICAgICAgICAgIHRoaXMuc2hvd0VuZFBhbmVsKHRydWUsIGZhbHNlKTtcclxuICAgICAgICAgICAgfSwgMilcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgc2V0Q3VycmVudERhdGEoY3VycmVudFNoYXBlOiBDdXJyZW50U2hhcGVEYXRhKTogdm9pZCB7XHJcbiAgICAgICAgY29uc3QgeyBjZW50ZXIsIGNvbG9yIH0gPSBjdXJyZW50U2hhcGU7XHJcbiAgICAgICAgY29uc3Qgc2hhcGVEYXRhczogVmVjMltdID0gdGhpcy5nZXRDdXJyZW50U2hhcGVJbmRleERhdGEoY3VycmVudFNoYXBlKTtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNoYXBlRGF0YXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgY29uc3QgZWxlID0gc2hhcGVEYXRhc1tpXTtcclxuICAgICAgICAgICAgY29uc3Qgcm93OiBudW1iZXIgPSBjZW50ZXIueCArIGVsZS54O1xyXG4gICAgICAgICAgICBjb25zdCBjb2w6IG51bWJlciA9IGNlbnRlci55ICsgZWxlLnk7XHJcbiAgICAgICAgICAgIHRoaXMuZGF0YUFycmF5W3Jvd11bY29sXSA9IGNvbG9yO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnJlbmRlcigpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiDmoLnmja7lvZPliY3kuK3lv4PngrnlkozlvaLnirbnsbvlnovmuIXpmaTmlbDmja4gKi9cclxuICAgIGNsZWFyQ3VycmVudERhdGEoY3VycmVudFNoYXBlOiBDdXJyZW50U2hhcGVEYXRhKSB7XHJcbiAgICAgICAgY29uc3QgeyBjZW50ZXIsIGNvbG9yLCBpbmRleCB9ID0gY3VycmVudFNoYXBlXHJcbiAgICAgICAgY29uc3Qgc2hhcGUgPSBgc2hhcGUke2NvbG9yfWBcclxuICAgICAgICBjb25zdCBzaGFwZURhdGE6IFZlYzJbXVtdID0gY29uZmlnW3NoYXBlXTtcclxuICAgICAgICBjb25zdCBkYXRhczogVmVjMltdID0gc2hhcGVEYXRhW2luZGV4XTtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRhdGFzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGVsZSA9IGRhdGFzW2ldO1xyXG4gICAgICAgICAgICBjb25zdCByb3cgPSBjZW50ZXIueCArIGVsZS54XHJcbiAgICAgICAgICAgIGNvbnN0IGNvbCA9IGNlbnRlci55ICsgZWxlLnlcclxuICAgICAgICAgICAgdGhpcy5kYXRhQXJyYXlbcm93XVtjb2xdID0gSXRlbUNvbG9yLk5VTExcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyKCk6IHZvaWQge1xyXG4gICAgICAgIGNvbnN0IHJlbmRlcjogUmVuZGVyID0gdGhpcy5nZXRDb21wb25lbnQoUmVuZGVyKTtcclxuICAgICAgICBpZiAocmVuZGVyKSB7XHJcbiAgICAgICAgICAgIHJlbmRlci5yZW5kZXIodGhpcy5kYXRhQXJyYXkpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBjaGVja0N1cnJlbnRTaGFwZURhdGEoY3VycmVudFNoYXBlOiBDdXJyZW50U2hhcGVEYXRhKTogYm9vbGVhbiB7XHJcbiAgICAgICAgY29uc3QgeyBjZW50ZXIgfSA9IGN1cnJlbnRTaGFwZTtcclxuICAgICAgICBjb25zdCBzaGFwZUluZGV4RGF0YXM6IFZlYzJbXSA9IHRoaXMuZ2V0Q3VycmVudFNoYXBlSW5kZXhEYXRhKGN1cnJlbnRTaGFwZSk7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzaGFwZUluZGV4RGF0YXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgY29uc3QgdjI6IFZlYzIgPSBzaGFwZUluZGV4RGF0YXNbaV07XHJcbiAgICAgICAgICAgIGNvbnN0IHJvdzogbnVtYmVyID0gY2VudGVyLnggKyB2Mi54O1xyXG4gICAgICAgICAgICBpZiAocm93IDwgMCB8fCByb3cgPj0gY29uZmlnLnJvdykge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IGNvbCA9IGNlbnRlci55ICsgdjIueTtcclxuICAgICAgICAgICAgaWYgKGNvbCA8IDAgfHwgY29sID49IGNvbmZpZy5jb2wpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodGhpcy5kYXRhQXJyYXlbcm93XVtjb2xdICE9PSBJdGVtQ29sb3IuTlVMTCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIGF1dG9Eb3duKCkge1xyXG4gICAgICAgIHRoaXMuY2xlYXJDdXJyZW50RGF0YSh0aGlzLmN1cnJlbnRTaGFwZSk7XHJcbiAgICAgICAgdGhpcy5jdXJyZW50U2hhcGUuY2VudGVyLnggKz0gMTtcclxuICAgICAgICBpZiAodGhpcy5jaGVja0N1cnJlbnRTaGFwZURhdGEodGhpcy5jdXJyZW50U2hhcGUpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0Q3VycmVudERhdGEodGhpcy5jdXJyZW50U2hhcGUpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihcIuaXoOazleenu+WKqOOAguS4i+S4gOS4qlwiKTtcclxuICAgICAgICAgICAgdGhpcy5jdXJyZW50U2hhcGUuY2VudGVyLnggLT0gMTtcclxuICAgICAgICAgICAgdGhpcy5zZXRDdXJyZW50RGF0YSh0aGlzLmN1cnJlbnRTaGFwZSk7XHJcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuY2hlY2tMaW5lcygpO1xyXG4gICAgICAgICAgICB0aGlzLnJhbmRvbU9uZVNoYXBlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIGNoZWNrTGluZXMoKSB7XHJcbiAgICAgICAgbGV0IHJvdzogbnVtYmVyID0gY29uZmlnLnJvdyAtIDE7XHJcbiAgICAgICAgbGV0IGlzRWxpbWluYXRlZDogYm9vbGVhbiA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuZWxpbWluYXRlVmVjMnMgPSBbXTtcclxuICAgICAgICB3aGlsZSAocm93ICE9PSAwKSB7XHJcbiAgICAgICAgICAgIGxldCBpc0Z1bGw6IGJvb2xlYW4gPSB0cnVlO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvbmZpZy5jb2w7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuZGF0YUFycmF5W3Jvd11baV0gPT09IEl0ZW1Db2xvci5OVUxMKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaXNGdWxsID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGlzRnVsbCkge1xyXG5cclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY29uZmlnLmNvbDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lbGltaW5hdGVWZWMycy5wdXNoKG1hdGgudjIocm93LCBpKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaXNFbGltaW5hdGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IHAgPSByb3c7IHAgPiAwOyBwLS0pIHtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGNvbmZpZy5jb2w7IGorKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRhdGFBcnJheVtwXVtqXSA9IHRoaXMuZGF0YUFycmF5W3AgLSAxXVtqXTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNjb3JlICs9IDE7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByb3ctLTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgcmVuZGVyOiBSZW5kZXIgPSB0aGlzLmdldENvbXBvbmVudChSZW5kZXIpO1xyXG4gICAgICAgIGlmIChyZW5kZXIgJiYgdGhpcy5lbGltaW5hdGVWZWMycy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIHJlbmRlci5wbGF5RWxpbWluYXRlRWZmKHRoaXMuZWxpbWluYXRlVmVjMnMpLnRoZW4oKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy51cGRhdGVTY29yZSgpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLnVwZGF0ZVNjb3JlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuXHJcbiAgICB1cGRhdGUoZGVsdGFUaW1lOiBudW1iZXIpIHtcclxuICAgICAgICBpZiAoIXRoaXMuaXNPcGVuKSB7XHJcbiAgICAgICAgICAgIHJldHVyblxyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnRpbWUgKz0gZGVsdGFUaW1lXHJcbiAgICAgICAgaWYgKHRoaXMudGltZSA+IDEpIHtcclxuICAgICAgICAgICAgdGhpcy50aW1lID0gMFxyXG4gICAgICAgICAgICAvLyDkuIvokL3pgLvovpFcclxuICAgICAgICAgICAgdGhpcy5hdXRvRG93bigpXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgcHJpbnREYXRhQXJyYXkoKTogdm9pZCB7XHJcbiAgICAgICAgbGV0IHN0cjogc3RyaW5nID0gXCJcIjtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuZGF0YUFycmF5Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGNvbHM6IG51bWJlcltdID0gdGhpcy5kYXRhQXJyYXlbaV07XHJcbiAgICAgICAgICAgIHN0ciArPSBjb2xzLmpvaW4oXCIsXCIpICsgXCJcXG5cIjtcclxuICAgICAgICAgICAgLy8gZm9yIChsZXQgaiA9IDA7IGogPCBjb2xzLmxlbmd0aDsgaisrKSB7XHJcbiAgICAgICAgICAgIC8vICAgICBjb25zdCB2ID0gY29sc1tqXTtcclxuXHJcbiAgICAgICAgICAgIC8vIH1cclxuXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnNvbGUubG9nKHN0cik7XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG4iLCJpbXBvcnQgeyBfZGVjb3JhdG9yLCBCdXR0b24sIEV2ZW50VG91Y2gsIE5vZGUsIE5vZGVFdmVudFR5cGUgfSBmcm9tICdjYyc7XHJcbmltcG9ydCBCYXNlVmlldyBmcm9tIFwiZGI6Ly9hc3NldHMvU2NyaXB0L3VpL0Jhc2VWaWV3XCI7XHJcbmltcG9ydCB7IHJlZ2lzdGVyVmlldyB9IGZyb20gXCJkYjovL2Fzc2V0cy9TY3JpcHQvdWkvVmlld1JlZ2lzdGVyTWdyXCI7XHJcbmltcG9ydCB7IFBhbmVsVHlwZSB9IGZyb20gXCJkYjovL2Fzc2V0cy9TY3JpcHQvdWkvUGFuZWxFbnVtXCI7XHJcbmltcG9ydCB7IExheWVyVHlwZSB9IGZyb20gXCJkYjovL2Fzc2V0cy9TY3JpcHQvdWkvTGF5ZXJNYW5hZ2VyXCI7XHJcbmltcG9ydCBVdGlscyBmcm9tIFwiZGI6Ly9hc3NldHMvU2NyaXB0L0NvbW1vbi9VdGlsc1wiO1xyXG5pbXBvcnQgVmlld0NvbnN0IGZyb20gXCJkYjovL2Fzc2V0cy9TY3JpcHQvdWkvVmlld0NvbnN0XCI7XHJcbmltcG9ydCB7IHZpZXdNYW5hZ2VyLCBWaWV3TWFuYWdlciB9IGZyb20gXCJkYjovL2Fzc2V0cy9TY3JpcHQvdWkvVmlld01hbmFnZXJcIjtcclxuaW1wb3J0IHsgVG93ZXJHYW1lU2NlbmUgfSBmcm9tIFwiZGI6Ly9hc3NldHMvU2NyaXB0L21vZHVsZXMvVG93ZXJEZWZlbnNlL1Rvd2VyR2FtZVNjZW5lXCI7XHJcbmltcG9ydCB7IEZhaXJ5YmlyZE1haW5QYW5lbCB9IGZyb20gJy4uL2ZhaXJ5YmlyZC9GYWlyeWJpcmRNYWluUGFuZWwnO1xyXG5pbXBvcnQgeyBBRktHYW1lIH0gZnJvbSAnLi4vQUZLL0FGS0dhbWUnO1xyXG5cclxuY29uc3QgeyBjY2NsYXNzLCBwcm9wZXJ0eSB9ID0gX2RlY29yYXRvcjtcclxuXHJcbkBjY2NsYXNzKCdNYWluUGFuZWwnKVxyXG5leHBvcnQgY2xhc3MgTWFpblBhbmVsIGV4dGVuZHMgQmFzZVZpZXcge1xyXG4gICAgb25PcGVuKGZyb21VSTogbnVtYmVyIHwgc3RyaW5nLCAuLi5hcmdzKSB7XHJcbiAgICAgICAgc3VwZXIub25PcGVuKGZyb21VSSwgLi4uYXJncyk7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcihhcmdzKTtcclxuICAgIH1cclxuXHJcbiAgICBpbml0KC4uLmFyZ3MpIHtcclxuICAgICAgICBzdXBlci5pbml0KC4uLmFyZ3MpO1xyXG4gICAgICAgIGNvbnN0IG5vZGU6IE5vZGUgPSBVdGlscy5GaW5kQ2hpbGRCeU5hbWUodGhpcy5ub2RlLCBcImJ0bnNcIilcclxuICAgICAgICBsZXQgY2hpbGRzOiBOb2RlW10gPSBub2RlLmNoaWxkcmVuO1xyXG4gICAgICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCBjaGlsZHMubGVuZ3RoOyBpbmRleCsrKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGVsZW1lbnQgPSBjaGlsZHNbaW5kZXhdO1xyXG4gICAgICAgICAgICBpZiAoZWxlbWVudC5uYW1lLmluZGV4T2YoJ2J0bl8nKSAhPSAtMSkge1xyXG4gICAgICAgICAgICAgICAgZWxlbWVudC5vbihOb2RlRXZlbnRUeXBlLlRPVUNIX1NUQVJULCB0aGlzLm9uQ2xpY2tOb2RlLCB0aGlzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIG9uQ2xpY2tOb2RlKGV2ZW50OiBFdmVudFRvdWNoKTogdm9pZCB7XHJcbiAgICAgICAgY29uc3QgdGFyZ2V0OiBOb2RlID0gZXZlbnQudGFyZ2V0O1xyXG4gICAgICAgIGlmICh0YXJnZXQubmFtZS5pbmRleE9mKFwiYnRuX1wiKSAhPSAtMSkge1xyXG4gICAgICAgICAgICBsZXQgc3BzOiBzdHJpbmdbXSA9IHRhcmdldC5uYW1lLnNwbGl0KFwiX1wiKTtcclxuICAgICAgICAgICAgaWYgKHNwc1sxXSkge1xyXG4gICAgICAgICAgICAgICAgc3dpdGNoIChzcHNbMV0pIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwidG93ZXJcIjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmlld01hbmFnZXIub3BlbihUb3dlckdhbWVTY2VuZSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcInJwZ1wiOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIueCueWHu3JwZ1wiKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwiZmJcIjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmlld01hbmFnZXIub3BlbihGYWlyeWJpcmRNYWluUGFuZWwpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJhZmtcIjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmlld01hbmFnZXIub3BlbihBRktHYW1lKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgc3RhcnQoKSB7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIHVwZGF0ZShkZWx0YVRpbWU6IG51bWJlcikge1xyXG5cclxuICAgIH1cclxufVxyXG5cclxucmVnaXN0ZXJWaWV3KHtcclxuICAgIHZpZXdDbHM6IE1haW5QYW5lbCxcclxuICAgIGlkOiBQYW5lbFR5cGUuTWFpblBhbmVsLFxyXG4gICAgbGF5ZXI6IExheWVyVHlwZS52aWV3LFxyXG4gICAgcHJlZmFiUGF0aFByZWZpeDogVmlld0NvbnN0LmRlZmF1bHRQcmVmYWJQYXRoUHJlZml4ICsgXCJtYWluL1wiXHJcbn0pXHJcblxyXG5cclxuIiwiaW1wb3J0IHsgX2RlY29yYXRvciwgQ29tcG9uZW50LCBFdmVudEtleWJvYXJkLCBJbnB1dCwgaW5wdXQsIEtleUNvZGUsIE5vZGUsIFVJVHJhbnNmb3JtIH0gZnJvbSAnY2MnO1xyXG5pbXBvcnQgeyBHYW1lQ2FtZXJhIH0gZnJvbSAnLi9HYW1lQ2FtZXJhJztcclxuaW1wb3J0IHsgU2NlbmNlTWFwIH0gZnJvbSAnLi9TY2VuY2VNYXAnO1xyXG5jb25zdCB7IGNjY2xhc3MsIHByb3BlcnR5IH0gPSBfZGVjb3JhdG9yO1xyXG5cclxuQGNjY2xhc3MoJ01haW5UZXN0JylcclxuZXhwb3J0IGNsYXNzIE1haW5UZXN0IGV4dGVuZHMgQ29tcG9uZW50IHtcclxuICAgIEBwcm9wZXJ0eShOb2RlKVxyXG4gICAgdmlld1BvcnROb2RlOiBOb2RlID0gbnVsbDtcclxuICAgIEBwcm9wZXJ0eShOb2RlKVxyXG4gICAgbWFwTm9kZTogTm9kZSA9IG51bGw7XHJcbiAgICBAcHJvcGVydHkoTm9kZSlcclxuICAgIHJvbGVOb2RlOiBOb2RlID0gbnVsbDtcclxuXHJcbiAgICBwcml2YXRlIGdhbWVDYW1lcmE6IEdhbWVDYW1lcmE7XHJcblxyXG4gICAgcHJpdmF0ZSByb2xlU3BlZWQ6IG51bWJlciA9IDEwO1xyXG5cclxuICAgIHByaXZhdGUga2V5Q2FjaGUgPSB7fTtcclxuXHJcbiAgICBwcml2YXRlIHNjZW5jZU1hcDogU2NlbmNlTWFwO1xyXG5cclxuICAgIHByb3RlY3RlZCBvbkxvYWQoKTogdm9pZCB7XHJcbiAgICAgICAgLy8gdGhpcy5nYW1lQ2FtZXJhID0gbmV3IEdhbWVDYW1lcmEodGhpcy52aWV3UG9ydE5vZGUsIHRoaXMubWFwTm9kZSwgdGhpcy5yb2xlTm9kZSk7XHJcblxyXG4gICAgICAgIC8vIGlucHV0Lm9uKElucHV0LkV2ZW50VHlwZS5LRVlfRE9XTiwgdGhpcy5vbktleURvd24sIHRoaXMpO1xyXG4gICAgICAgIC8vIGlucHV0Lm9uKElucHV0LkV2ZW50VHlwZS5LRVlfVVAsIHRoaXMub25LZXlVcCwgdGhpcyk7XHJcbiAgICAgICAgdGhpcy5zY2VuY2VNYXAgPSB0aGlzLmFkZENvbXBvbmVudChTY2VuY2VNYXApO1xyXG4gICAgICAgIHRoaXMuc2NlbmNlTWFwLm1hcElkID0gMTtcclxuICAgIH1cclxuXHJcbiAgICBzdGFydCgpIHtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBvbktleURvd24oZXZlbnQ6IEV2ZW50S2V5Ym9hcmQpOiB2b2lke1xyXG4gICAgICAgIHRoaXMuc2V0S2V5Q29kZUNhY2hlKGV2ZW50LmtleUNvZGUsIHRydWUpO1xyXG4gICAgICAgIC8vIHN3aXRjaCAoZXZlbnQua2V5Q29kZSkge1xyXG4gICAgICAgIC8vICAgICBjYXNlIEtleUNvZGUuQVJST1dfVVA6XHJcbiAgICAgICAgLy8gICAgICAgICB0aGlzLmtleUNhY2hlW0tleUNvZGUuQVJST1dfVVBdID0gdHJ1ZTtcclxuICAgICAgICAvLyAgICAgICAgIGNvbnNvbGUubG9nKFwi5oyJ5LiLVXBcIik7XHJcbiAgICAgICAgLy8gICAgICAgICBicmVhaztcclxuICAgICAgICAvLyAgICAgY2FzZSBLZXlDb2RlLkFSUk9XX0RPV046XHJcbiAgICAgICAgLy8gICAgICAgICB0aGlzLmtleUNhY2hlW0tleUNvZGUuQVJST1dfRE9XTl0gPSB0cnVlO1xyXG4gICAgICAgIC8vICAgICAgICAgY29uc29sZS5sb2coXCLmjInkuItEb3duXCIpO1xyXG4gICAgICAgIC8vICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgLy8gICAgIGNhc2UgS2V5Q29kZS5BUlJPV19MRUZUOlxyXG4gICAgICAgIC8vICAgICAgICAgdGhpcy5rZXlDYWNoZVtLZXlDb2RlLkFSUk9XX0xFRlRdID0gdHJ1ZTtcclxuICAgICAgICAvLyAgICAgICAgIGNvbnNvbGUubG9nKFwi5oyJ5LiLTGVmdFwiKTtcclxuICAgICAgICAvLyAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIC8vICAgICBjYXNlIEtleUNvZGUuQVJST1dfUklHSFQ6XHJcbiAgICAgICAgLy8gICAgICAgICB0aGlzLmtleUNhY2hlW0tleUNvZGUuQVJST1dfUklHSFRdID0gdHJ1ZTtcclxuICAgICAgICAvLyAgICAgICAgIGNvbnNvbGUubG9nKFwi5oyJ5LiLUmlnaHRcIik7XHJcbiAgICAgICAgLy8gICAgICAgICBicmVhaztcclxuICAgICAgICAvLyB9XHJcbiAgICB9XHJcblxyXG5cclxuICAgIHByaXZhdGUgb25LZXlVcChldmVudDogRXZlbnRLZXlib2FyZCk6IHZvaWQgeyBcclxuICAgICAgICB0aGlzLnNldEtleUNvZGVDYWNoZShldmVudC5rZXlDb2RlLCBmYWxzZSk7XHJcbiAgICAgICAgLy8gc3dpdGNoIChldmVudC5rZXlDb2RlKSB7XHJcbiAgICAgICAgLy8gICAgIGNhc2UgS2V5Q29kZS5BUlJPV19VUDpcclxuICAgICAgICAvLyAgICAgICAgIHRoaXMua2V5Q2FjaGVbS2V5Q29kZS5BUlJPV19VUF0gPSB0cnVlO1xyXG4gICAgICAgIC8vICAgICAgICAgY29uc29sZS5sb2coXCLmjInkuItVcFwiKTtcclxuICAgICAgICAvLyAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIC8vICAgICBjYXNlIEtleUNvZGUuQVJST1dfRE9XTjpcclxuICAgICAgICAvLyAgICAgICAgIHRoaXMua2V5Q2FjaGVbS2V5Q29kZS5BUlJPV19ET1dOXSA9IHRydWU7XHJcbiAgICAgICAgLy8gICAgICAgICBjb25zb2xlLmxvZyhcIuaMieS4i0Rvd25cIik7XHJcbiAgICAgICAgLy8gICAgICAgICBicmVhaztcclxuICAgICAgICAvLyAgICAgY2FzZSBLZXlDb2RlLkFSUk9XX0xFRlQ6XHJcbiAgICAgICAgLy8gICAgICAgICB0aGlzLmtleUNhY2hlW0tleUNvZGUuQVJST1dfTEVGVF0gPSB0cnVlO1xyXG4gICAgICAgIC8vICAgICAgICAgY29uc29sZS5sb2coXCLmjInkuItMZWZ0XCIpO1xyXG4gICAgICAgIC8vICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgLy8gICAgIGNhc2UgS2V5Q29kZS5BUlJPV19SSUdIVDpcclxuICAgICAgICAvLyAgICAgICAgIHRoaXMua2V5Q2FjaGVbS2V5Q29kZS5BUlJPV19SSUdIVF0gPSB0cnVlO1xyXG4gICAgICAgIC8vICAgICAgICAgY29uc29sZS5sb2coXCLmjInkuItSaWdodFwiKTtcclxuICAgICAgICAvLyAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIC8vIH1cclxuICAgIH1cclxuXHJcblxyXG4gICAgcHJpdmF0ZSBzZXRLZXlDb2RlQ2FjaGUoa2V5Q29kZTogS2V5Q29kZSwgaXNLZWVwRG93bjogYm9vbGVhbiA9IGZhbHNlKTogdm9pZHtcclxuICAgICAgICB0aGlzLmtleUNhY2hlW2tleUNvZGVdID0gaXNLZWVwRG93bjtcclxuICAgIH1cclxuXHJcbiAgICAvKirliLfmlrDkurrniannp7vliqggKi9cclxuICAgIHByaXZhdGUgdXBkYXRlUm9sZU1vdmUoKSB7XHJcbiAgICAgICAgbGV0IHg6IG51bWJlciA9IHRoaXMucm9sZU5vZGUucG9zaXRpb24ueDtcclxuICAgICAgICBsZXQgeTogbnVtYmVyID0gdGhpcy5yb2xlTm9kZS5wb3NpdGlvbi55O1xyXG4gICAgICAgIC8v5qC55o2u5oyJ6ZSu56e75YqoXHJcbiAgICAgICAgaWYgKHRoaXMua2V5Q2FjaGVbS2V5Q29kZS5BUlJPV19VUF0pIHtcclxuICAgICAgICAgICAgdGhpcy5yb2xlTm9kZS5zZXRQb3NpdGlvbih4LHkgKz0gdGhpcy5yb2xlU3BlZWQpXHJcbiAgICAgICAgICAgIC8vIHRoaXMucm9sZU5vZGUueSArPSB0aGlzLnJvbGVTcGVlZDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMua2V5Q2FjaGVbS2V5Q29kZS5BUlJPV19ET1dOXSkge1xyXG4gICAgICAgICAgICB0aGlzLnJvbGVOb2RlLnNldFBvc2l0aW9uKHgsIHkgLT0gdGhpcy5yb2xlU3BlZWQpXHJcbiAgICAgICAgICAgIC8vIHRoaXMucm9sZU5vZGUueSAtPSB0aGlzLnJvbGVTcGVlZDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMua2V5Q2FjaGVbS2V5Q29kZS5BUlJPV19MRUZUXSkge1xyXG4gICAgICAgICAgICB0aGlzLnJvbGVOb2RlLnNldFBvc2l0aW9uKHgtPXRoaXMucm9sZVNwZWVkLCB5KVxyXG4gICAgICAgICAgICAvLyB0aGlzLnJvbGVOb2RlLnggLT0gdGhpcy5yb2xlU3BlZWQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLmtleUNhY2hlW0tleUNvZGUuQVJST1dfUklHSFRdKSB7XHJcbiAgICAgICAgICAgIHRoaXMucm9sZU5vZGUuc2V0UG9zaXRpb24oeCArPSB0aGlzLnJvbGVTcGVlZCwgeSlcclxuICAgICAgICAgICAgLy8gdGhpcy5yb2xlTm9kZS54ICs9IHRoaXMucm9sZVNwZWVkO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCByb2xlVUlUcmFuc2Zvcm06IFVJVHJhbnNmb3JtID0gdGhpcy5yb2xlTm9kZS5nZXRDb21wb25lbnQoVUlUcmFuc2Zvcm0pO1xyXG4gICAgICAgIGNvbnN0IHJvbGVTY2FsZSA9IHRoaXMucm9sZU5vZGUuc2NhbGVcclxuICAgICAgICBjb25zdCBtYXBVSVRyYW5zZm9ybTogVUlUcmFuc2Zvcm0gPSB0aGlzLm1hcE5vZGUuZ2V0Q29tcG9uZW50KFVJVHJhbnNmb3JtKTtcclxuICAgICAgICBsZXQgYng6IG51bWJlciA9IHRoaXMucm9sZU5vZGUucG9zaXRpb24ueDtcclxuICAgICAgICBsZXQgYnk6IG51bWJlciA9IHRoaXMucm9sZU5vZGUucG9zaXRpb24ueTtcclxuICAgICAgICAvL+i+uee8mOajgOa1i1xyXG4gICAgICAgIGlmICh0aGlzLnJvbGVOb2RlLnBvc2l0aW9uLnggKyAocm9sZVVJVHJhbnNmb3JtLndpZHRoICogdGhpcy5yb2xlTm9kZS5zY2FsZS54KSAvIDIgPiBtYXBVSVRyYW5zZm9ybS53aWR0aCAvIDIpIHtcclxuICAgICAgICAgICAgYnggPSBtYXBVSVRyYW5zZm9ybS53aWR0aCAvIDIgLSAocm9sZVVJVHJhbnNmb3JtLndpZHRoICogdGhpcy5yb2xlTm9kZS5zY2FsZS54KSAvIDI7XHJcbiAgICAgICAgICAgIHRoaXMucm9sZU5vZGUuc2V0UG9zaXRpb24oYngsIGJ5KTtcclxuICAgICAgICAgICAgLy8gdGhpcy5yb2xlTm9kZS5wb3NpdGlvbi54ID0gdGhpcy5tYXBOb2RlLndpZHRoIC8gMiAtIHRoaXMucm9sZU5vZGUud2lkdGggLyAyO1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIuS6uueJqei2hei/h+WcsOWbvuWPs+i+uee8mFwiKTtcclxuICAgICAgICB9IGVsc2UgaWYgKHRoaXMucm9sZU5vZGUucG9zaXRpb24ueCAtIChyb2xlVUlUcmFuc2Zvcm0ud2lkdGggKiB0aGlzLnJvbGVOb2RlLnNjYWxlLngpIC8gMiA8IC1tYXBVSVRyYW5zZm9ybS53aWR0aCAvIDIpIHtcclxuICAgICAgICAgICAgYnggPSAtbWFwVUlUcmFuc2Zvcm0ud2lkdGggLyAyICsgKHJvbGVVSVRyYW5zZm9ybS53aWR0aCAqIHRoaXMucm9sZU5vZGUuc2NhbGUueCkgLyAyO1xyXG4gICAgICAgICAgICB0aGlzLnJvbGVOb2RlLnNldFBvc2l0aW9uKGJ4LCBieSk7XHJcbiAgICAgICAgICAgIC8vIHRoaXMucm9sZU5vZGUueCA9IFxyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIuS6uueJqei2hei/h+WcsOWbvuW3pui+uee8mFwiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMucm9sZU5vZGUucG9zaXRpb24ueSArIChyb2xlVUlUcmFuc2Zvcm0uaGVpZ2h0ICogdGhpcy5yb2xlTm9kZS5zY2FsZS55KSAvIDIgPiBtYXBVSVRyYW5zZm9ybS5oZWlnaHQgLyAyKSB7XHJcbiAgICAgICAgICAgIGJ5ID0gbWFwVUlUcmFuc2Zvcm0uaGVpZ2h0IC8gMiAtIChyb2xlVUlUcmFuc2Zvcm0uaGVpZ2h0ICogdGhpcy5yb2xlTm9kZS5zY2FsZS55KSAvIDI7XHJcbiAgICAgICAgICAgIHRoaXMucm9sZU5vZGUuc2V0UG9zaXRpb24oYngsIGJ5KTtcclxuICAgICAgICAgICAgLy8gdGhpcy5yb2xlTm9kZS55ID0gdGhpcy5tYXBOb2RlLmhlaWdodCAvIDIgLSB0aGlzLnJvbGVOb2RlLmhlaWdodCAvIDI7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwi5Lq654mp6LaF6L+H5Zyw5Zu+5LiK6L6557yYXCIpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5yb2xlTm9kZS5wb3NpdGlvbi55IC0gKHJvbGVVSVRyYW5zZm9ybS5oZWlnaHQgKiB0aGlzLnJvbGVOb2RlLnNjYWxlLnkpIC8gMiA8IC1tYXBVSVRyYW5zZm9ybS5oZWlnaHQgLyAyKSB7XHJcbiAgICAgICAgICAgIGJ5ID0gLW1hcFVJVHJhbnNmb3JtLmhlaWdodCAvIDIgKyAocm9sZVVJVHJhbnNmb3JtLmhlaWdodCAqIHRoaXMucm9sZU5vZGUuc2NhbGUueSkgLyAyO1xyXG4gICAgICAgICAgICB0aGlzLnJvbGVOb2RlLnNldFBvc2l0aW9uKGJ4LCBieSk7XHJcbiAgICAgICAgICAgIC8vIHRoaXMucm9sZU5vZGUueSA9IFxyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIuS6uueJqei2hei/h+WcsOWbvuS4i+i+uee8mFwiKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICB1cGRhdGUoZGVsdGFUaW1lOiBudW1iZXIpIHtcclxuICAgICAgICAvLyB0aGlzLnVwZGF0ZVJvbGVNb3ZlKCk7XHJcbiAgICAgICAgLy8gdGhpcy5nYW1lQ2FtZXJhLnVwZGF0ZVBvc2l0aW9uKCk7XHJcbiAgICB9XHJcblxyXG5cclxufVxyXG5cclxuXHJcbiIsImltcG9ydCB7IE1hcFR5cGUgfSBmcm9tIFwiLi4vRW51bVwiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTWFwRGF0YSB7XHJcbiAgICBwdWJsaWMgbmFtZTogc3RyaW5nO1xyXG4gICAgcHVibGljIGJnTmFtZTogc3RyaW5nO1xyXG4gICAgcHVibGljIHR5cGU6IE1hcFR5cGU7XHJcbiAgICBwdWJsaWMgbWFwV2lkdGg6IG51bWJlcjtcclxuICAgIHB1YmxpYyBtYXBIZWlnaHQ6IG51bWJlcjtcclxuXHJcbiAgICBwdWJsaWMgbm9kZVdpZHRoOiBudW1iZXI7XHJcbiAgICBwdWJsaWMgbm9kZUhlaWdodDogbnVtYmVyO1xyXG4gICAgcHVibGljIGFsaWdubWVudDogbnVtYmVyO1xyXG4gICAgcHVibGljIG9mZnNldFg6IG51bWJlcjtcclxuICAgIHB1YmxpYyBvZmZzZXRZOiBudW1iZXI7XHJcblxyXG4gICAgcHVibGljIHJvYWREYXRhQXJyOiBudW1iZXJbXVtdO1xyXG5cclxuICAgIHB1YmxpYyBtYXBJdGVtczogYW55W107XHJcbiAgICBcclxufSIsIlxyXG5pbXBvcnQgeyBOb2RlLCBDb21wb25lbnQsIF9kZWNvcmF0b3IsIFNwcml0ZSwgVUlUcmFuc2Zvcm0sIFNwcml0ZUZyYW1lIH0gZnJvbSBcImNjXCI7XHJcbmltcG9ydCBNYXBQYXJhbXMgZnJvbSBcIi4uL2luZm8vTWFwUGFyYW1zXCI7XHJcblxyXG5jb25zdCB7IGNjY2xhc3MsIHByb3BlcnR5IH0gPSBfZGVjb3JhdG9yO1xyXG5cclxuQGNjY2xhc3MoXCJNYXBMYXllclwiKVxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBNYXBMYXllciBleHRlbmRzIENvbXBvbmVudCB7XHJcblxyXG4gICAgQHByb3BlcnR5KFNwcml0ZSlcclxuICAgIHByaXZhdGUgYmdJbWc6IFNwcml0ZSA9IG51bGw7XHJcblxyXG4gICAgcHJvdGVjdGVkIF9tYXBQYXJhbXM6IE1hcFBhcmFtcyA9IG51bGw7XHJcblxyXG4gICAgcHJvdGVjdGVkIHVwZGF0ZShkdDogbnVtYmVyKTogdm9pZCB7XHJcbiAgICAgICBcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgaW5pdChtYXBQYXJhbXM6IE1hcFBhcmFtcyk6IHZvaWQgeyBcclxuICAgICAgICB0aGlzLl9tYXBQYXJhbXMgPSBtYXBQYXJhbXM7XHJcbiAgICAgICAgaWYgKCF0aGlzLmJnSW1nKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGJnTm9kZTogTm9kZSA9IG5ldyBOb2RlKCk7XHJcbiAgICAgICAgICAgIHRoaXMubm9kZS5hZGRDaGlsZChiZ05vZGUpO1xyXG4gICAgICAgICAgICBiZ05vZGUubGF5ZXIgPSB0aGlzLm5vZGUubGF5ZXI7XHJcblxyXG4gICAgICAgICAgICB0aGlzLmJnSW1nID0gYmdOb2RlLmFkZENvbXBvbmVudChTcHJpdGUpO1xyXG4gICAgICAgICAgICB0aGlzLmJnSW1nLnNpemVNb2RlID0gU3ByaXRlLlNpemVNb2RlLlJBVztcclxuICAgICAgICAgICAgYmdOb2RlLmdldENvbXBvbmVudChVSVRyYW5zZm9ybSkuYW5jaG9yWCA9IDA7XHJcbiAgICAgICAgICAgIGJnTm9kZS5nZXRDb21wb25lbnQoVUlUcmFuc2Zvcm0pLmFuY2hvclkgPSAwO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBzcHJpdGVGcmFtZTogU3ByaXRlRnJhbWUgPSBuZXcgU3ByaXRlRnJhbWUoKTtcclxuICAgICAgICBzcHJpdGVGcmFtZS50ZXh0dXJlID0gbWFwUGFyYW1zLmJnVGV4O1xyXG4gICAgICAgIHRoaXMuYmdJbWcuc3ByaXRlRnJhbWUgPSBzcHJpdGVGcmFtZTtcclxuXHJcblxyXG4gICAgICAgIHRoaXMuZ2V0Q29tcG9uZW50KFVJVHJhbnNmb3JtKS53aWR0aCA9IHRoaXMud2lkdGg7XHJcbiAgICAgICAgdGhpcy5nZXRDb21wb25lbnQoVUlUcmFuc2Zvcm0pLmhlaWdodCA9IHRoaXMuaGVpZ2h0O1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXQgYmdJbWFnZSgpOiBTcHJpdGUge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmJnSW1nO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXQgd2lkdGgoKTogbnVtYmVyIHtcclxuICAgICAgICBpZiAodGhpcy5iZ0ltZykge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5iZ0ltZy5nZXRDb21wb25lbnQoVUlUcmFuc2Zvcm0pLndpZHRoO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX21hcFBhcmFtcy52aWV3V2lkdGg7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldCBoZWlnaHQoKTogbnVtYmVyIHtcclxuICAgICAgICBpZiAodGhpcy5iZ0ltZykge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5iZ0ltZy5nZXRDb21wb25lbnQoVUlUcmFuc2Zvcm0pLmhlaWdodDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLl9tYXBQYXJhbXMudmlld0hlaWdodDtcclxuICAgIH1cclxufSIsImltcG9ydCB7IFRleHR1cmUyRCB9IGZyb20gXCJjY1wiO1xyXG5pbXBvcnQgeyBNYXBMb2FkTW9kZWwsIE1hcFR5cGUgfSBmcm9tIFwiLi4vRW51bVwiO1xyXG5cclxuLyoqXHJcbiAqIOWcsOWbvuWPguaVsFxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTWFwUGFyYW1zIHtcclxuICAgIC8qKlxyXG4gICAgICog5Zyw5Zu+5ZCN56ewXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBuYW1lOiBzdHJpbmcgPSBcIlwiO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICog5bqV5Zu+6LWE5rqQ5ZCN56ewXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBiZ05hbWU6IHN0cmluZyA9IFwiXCI7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDlnLDlm77nsbvlnotcclxuICAgICAqL1xyXG4gICAgcHVibGljIG1hcFR5cGU6IE1hcFR5cGUgPSBNYXBUeXBlLkFuZ2xlNDU7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDlnLDlm77lrr1cclxuICAgICAqL1xyXG4gICAgcHVibGljIG1hcFdpZHRoOiBudW1iZXIgPSA3NTA7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDlnLDlm77pq5hcclxuICAgICAqL1xyXG4gICAgcHVibGljIG1hcEhlaWdodDogbnVtYmVyID0gMTYwMDtcclxuXHJcbiAgICAvKipcclxuICAgICAqIOWcsOWbvuWNleWFg+agvOWuvVxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgY2VpbFdpZHRoOiBudW1iZXIgPSA3NTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIOWcsOWbvuWNleWFg+agvOmrmFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgY2VpbEhlaWdodDogbnVtYmVyID0gNzU7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDlnLDlm77op4bph47lrr1cclxuICAgICAqL1xyXG4gICAgcHVibGljIHZpZXdXaWR0aDogbnVtYmVyID0gNzUwO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICog5Zyw5Zu+6KeG6YeO6auYXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyB2aWV3SGVpZ2h0OiBudW1iZXIgPSAxMzM0O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICog5Zyw5Zu+5YiH54mH5a69XHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBzbGljZVdpZHRoOiBudW1iZXIgPSAyNTY7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDlnLDlm77liIfniYfpq5hcclxuICAgICAqL1xyXG4gICAgcHVibGljIHNsaWNlSGVpZ2h0OiBudW1iZXIgPSAyNTY7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDlupXlm77liqDovb3mqKHlvI/vvIzmmK/ljZXlvKDov5jmmK/liIfniYfliqDovb1cclxuICAgICAqL1xyXG4gICAgcHVibGljIG1hcExvYWRNb2RlbDogTWFwTG9hZE1vZGVsID0gTWFwTG9hZE1vZGVsLnNpbmdsZTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIOWcsOWbvuW6leWbvlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgYmdUZXg6IFRleHR1cmUyRCA9IG51bGw7XHJcblxyXG5cclxufSIsImltcG9ydCB7IENvbnN0cmFpbnQsIG1hdGgsIFZlYzIgfSBmcm9tIFwiY2NcIjtcclxuaW1wb3J0IHsgSU1hcFJvYWQgfSBmcm9tIFwiLi4vTWFwUm9hZFV0aWxzXCI7XHJcbmltcG9ydCBSb2FkTm9kZSBmcm9tIFwiLi4vUm9hZE5vZGVcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE1hcFJvYWQ0NUFuZ2xlIGltcGxlbWVudHMgSU1hcFJvYWR7XHJcblxyXG4gICAgcHJpdmF0ZSBfcm93OiBudW1iZXI7XHJcbiAgICBwcml2YXRlIF9jb2w6IG51bWJlcjtcclxuICAgIHByaXZhdGUgX25vZGVXaWR0aDogbnVtYmVyO1xyXG4gICAgcHJpdmF0ZSBfbm9kZUhlaWdodDogbnVtYmVyO1xyXG4gICAgcHJpdmF0ZSBfaGFsZk5vZGVXaWR0aDogbnVtYmVyO1xyXG4gICAgcHJpdmF0ZSBfaGFsZk5vZGVIZWlnaHQ6IG51bWJlcjtcclxuXHJcbiAgICBwdWJsaWMgY29uc3RydWN0b3Iocm93OiBudW1iZXIsIGNvbDogbnVtYmVyLCBub2RlV2lkdGg6IG51bWJlciwgbm9kZUhlaWdodDogbnVtYmVyLCBoYWxmTm9kZVdpZHRoOiBudW1iZXIsIGhhbGZOb2RlSGVpZ2h0OiBudW1iZXIpIHtcclxuICAgICAgICB0aGlzLl9yb3cgPSByb3c7XHJcbiAgICAgICAgdGhpcy5fY29sID0gY29sO1xyXG4gICAgICAgIHRoaXMuX25vZGVXaWR0aCA9IG5vZGVXaWR0aDtcclxuICAgICAgICB0aGlzLl9ub2RlSGVpZ2h0ID0gbm9kZUhlaWdodDtcclxuICAgICAgICB0aGlzLl9oYWxmTm9kZVdpZHRoID0gaGFsZk5vZGVXaWR0aDtcclxuICAgICAgICB0aGlzLl9oYWxmTm9kZUhlaWdodCA9IGhhbGZOb2RlSGVpZ2h0O1xyXG4gICAgfVxyXG5cclxuICAgIGdldE5vZGVCeVBpeGVsKHg6IG51bWJlciwgeTogbnVtYmVyKTogUm9hZE5vZGUge1xyXG4gICAgICAgIGNvbnN0IHdQb2ludDogVmVjMiA9IHRoaXMuZ2V0V29ybGRQb2ludEJ5UGl4ZWwoeCwgeSk7XHJcbiAgICAgICAgY29uc3QgZlBvaW50OiBWZWMyID0gdGhpcy5nZXRQaXhlbEJ5V29ybGRQb2ludCh3UG9pbnQueCwgd1BvaW50LnkpO1xyXG4gICAgICAgIGNvbnN0IGRQb2ludDogVmVjMiA9IHRoaXMuZ2V0RGVyZWN0QnlQaXhlbCh4LCB5KTtcclxuXHJcbiAgICAgICAgY29uc3Qgbm9kZTogUm9hZE5vZGUgPSBuZXcgUm9hZE5vZGUoKTtcclxuICAgICAgICBub2RlLmN4ID0gd1BvaW50Lng7XHJcbiAgICAgICAgbm9kZS5jeSA9IHdQb2ludC55O1xyXG5cclxuICAgICAgICBub2RlLnB4ID0gZlBvaW50Lng7XHJcbiAgICAgICAgbm9kZS5weSA9IGZQb2ludC55O1xyXG4gICAgICAgIFxyXG4gICAgICAgIG5vZGUuZHggPSBkUG9pbnQueDtcclxuICAgICAgICBub2RlLmR5ID0gZFBvaW50Lnk7XHJcblxyXG4gICAgICAgIHJldHVybiBub2RlO1xyXG5cclxuICAgIH1cclxuICAgIGdldE5vZGVCeURlcmVjdChkeDogbnVtYmVyLCBkeTogbnVtYmVyKTogUm9hZE5vZGUge1xyXG4gICAgICAgIHZhciBmUG9pbnQ6IFZlYzIgPSB0aGlzLmdldFBpeGVsQnlEZXJlY3QoZHgsIGR5KTtcclxuICAgICAgICB2YXIgd1BvaW50OiBWZWMyID0gdGhpcy5nZXRXb3JsZFBvaW50QnlQaXhlbChmUG9pbnQueCwgZlBvaW50LnkpO1xyXG5cclxuICAgICAgICB2YXIgbm9kZTogUm9hZE5vZGUgPSBuZXcgUm9hZE5vZGUoKTtcclxuXHJcbiAgICAgICAgbm9kZS5jeCA9IHdQb2ludC54O1xyXG4gICAgICAgIG5vZGUuY3kgPSB3UG9pbnQueTtcclxuXHJcbiAgICAgICAgbm9kZS5weCA9IGZQb2ludC54O1xyXG4gICAgICAgIG5vZGUucHkgPSBmUG9pbnQueTtcclxuXHJcbiAgICAgICAgbm9kZS5keCA9IGR4O1xyXG4gICAgICAgIG5vZGUuZHkgPSBkeTtcclxuXHJcbiAgICAgICAgcmV0dXJuIG5vZGU7XHJcbiAgICB9XHJcbiAgICBnZXROb2RlQnlXb3JsZFBvaW50KGN4OiBudW1iZXIsIGN5OiBudW1iZXIpOiBSb2FkTm9kZSB7XHJcbiAgICAgICAgY29uc3QgcG9pbnQ6IFZlYzIgPSB0aGlzLmdldFBpeGVsQnlXb3JsZFBvaW50KGN4LCBjeSlcclxuICAgICAgICByZXR1cm4gdGhpcy5nZXROb2RlQnlQaXhlbChwb2ludC54LCBwb2ludC55KTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICog5qC55o2u5YOP57Sg5Z2Q5qCH5b6X5Yiw5Zy65pmv5LiW55WM5Z2Q5qCHXHJcbiAgICAgKiBAcGFyYW0geCBcclxuICAgICAqIEBwYXJhbSB5IFxyXG4gICAgICovXHJcbiAgICBnZXRXb3JsZFBvaW50QnlQaXhlbCh4OiBudW1iZXIsIHk6IG51bWJlcik6IG1hdGguVmVjMiB7XHJcbiAgICAgICAgY29uc3QgY3g6IG51bWJlciA9IE1hdGguY2VpbCh4IC8gdGhpcy5fbm9kZVdpZHRoIC0gMC41ICsgeSAvIHRoaXMuX25vZGVIZWlnaHQpIC0gMTtcclxuICAgICAgICBjb25zdCBjeTogbnVtYmVyID0gKHRoaXMuX2NvbCAtIDEpIC0gTWF0aC5jZWlsKHggLyB0aGlzLl9ub2RlV2lkdGggLSAwLjUgLSB5IC8gdGhpcy5fbm9kZUhlaWdodCk7XHJcbiAgICAgICAgcmV0dXJuIG1hdGgudjIoY3gsIGN5KTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICog5qC55o2u5LiW55WM5Z2Q5qCH6I635Y+W5YOP57Sg5Z2Q5qCHXHJcbiAgICAgKiBAcGFyYW0gY3ggXHJcbiAgICAgKiBAcGFyYW0gY3kgXHJcbiAgICAgKi9cclxuICAgIGdldFBpeGVsQnlXb3JsZFBvaW50KGN4OiBudW1iZXIsIGN5OiBudW1iZXIpOiBtYXRoLlZlYzIge1xyXG4gICAgICAgIGNvbnN0IHg6IG51bWJlciA9IE1hdGguZmxvb3IoKGN4ICsgMSAtIChjeSAtICh0aGlzLl9jb2wgLSAxKSkpICogdGhpcy5faGFsZk5vZGVXaWR0aCk7XHJcbiAgICAgICAgY29uc3QgeTogbnVtYmVyID0gTWF0aC5mbG9vcigoY3ggKyAxICsgKGN5IC0gKHRoaXMuX2NvbCAtIDEpKSkgKiB0aGlzLl9oYWxmTm9kZUhlaWdodCk7XHJcbiAgICAgICAgcmV0dXJuIG1hdGgudjIoeCwgeSk7XHJcbiAgICB9XHJcbiAgICBnZXREZXJlY3RCeVBpeGVsKHg6IG51bWJlciwgeTogbnVtYmVyKTogbWF0aC5WZWMyIHtcclxuICAgICAgICBjb25zdCB3b3JsZFBvaW50OiBWZWMyID0gdGhpcy5nZXRXb3JsZFBvaW50QnlQaXhlbCh4LCB5KTtcclxuICAgICAgICBjb25zdCBwaXhlbFBvaW50OiBWZWMyID0gdGhpcy5nZXRQaXhlbEJ5V29ybGRQb2ludCh3b3JsZFBvaW50LngsIHdvcmxkUG9pbnQueSk7XHJcbiAgICAgICAgY29uc3QgZHg6IG51bWJlciA9IE1hdGguZmxvb3IocGl4ZWxQb2ludC54IC8gdGhpcy5fbm9kZVdpZHRoKSAtIChwaXhlbFBvaW50LnggJSB0aGlzLl9ub2RlV2lkdGggPT0gMCA/IDEgOiAwKTtcclxuICAgICAgICBjb25zdCBkeTogbnVtYmVyID0gTWF0aC5mbG9vcihwaXhlbFBvaW50LnkgLyB0aGlzLl9oYWxmTm9kZUhlaWdodCkgLSAxO1xyXG4gICAgICAgIHJldHVybiBtYXRoLnYyKGR4LCBkeSk7XHJcbiAgICB9XHJcbiAgICBnZXREZXJlY3RCeVdvcmxkUG9pbnQoY3g6IG51bWJlciwgY3k6IG51bWJlcik6IG1hdGguVmVjMiB7XHJcbiAgICAgICAgdmFyIGR4OiBudW1iZXIgPSBNYXRoLmZsb29yKChjeCAtIChjeSAtICh0aGlzLl9jb2wgLSAxKSkpIC8gMik7XHJcbiAgICAgICAgdmFyIGR5OiBudW1iZXIgPSBjeCArIChjeSAtICh0aGlzLl9jb2wgLSAxKSk7XHJcbiAgICAgICAgcmV0dXJuIG1hdGgudjIoZHgsIGR5KTtcclxuICAgIH1cclxuICAgIGdldFBpeGVsQnlEZXJlY3QoZHg6IG51bWJlciwgZHk6IG51bWJlcik6IG1hdGguVmVjMiB7XHJcbiAgICAgICAgY29uc3QgeDogbnVtYmVyID0gTWF0aC5mbG9vcigoZHggKyBkeSAlIDIpICogdGhpcy5fbm9kZVdpZHRoICsgKDEgLSBkeSAlIDIpICogdGhpcy5faGFsZk5vZGVXaWR0aCk7XHJcbiAgICAgICAgY29uc3QgeTogbnVtYmVyID0gTWF0aC5mbG9vcigoZHkgKyAxKSAqIHRoaXMuX2hhbGZOb2RlSGVpZ2h0KTtcclxuICAgICAgICByZXR1cm4gbWF0aC52Mih4LCB5KTsgICBcclxuICAgIH1cclxuICAgIFxyXG59IiwiaW1wb3J0IHtJTWFwUm9hZH0gZnJvbSBcImRiOi8vYXNzZXRzL1NjcmlwdC9tb2R1bGVzL1JQRy9tYXAvTWFwUm9hZFV0aWxzXCI7XHJcbmltcG9ydCBSb2FkTm9kZSBmcm9tIFwiZGI6Ly9hc3NldHMvU2NyaXB0L21vZHVsZXMvUlBHL21hcC9Sb2FkTm9kZVwiO1xyXG5pbXBvcnQge21hdGgsIFZlYzJ9IGZyb20gXCJjY1wiO1xyXG5cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE1hcFJvYWQ5MEFuZ2xlIGltcGxlbWVudHMgSU1hcFJvYWQge1xyXG4gICAgcHJpdmF0ZSBfcm93Om51bWJlcjtcclxuICAgIHByaXZhdGUgX2NvbDpudW1iZXI7XHJcblxyXG4gICAgcHJpdmF0ZSBfbm9kZVdpZHRoOm51bWJlcjtcclxuICAgIHByaXZhdGUgX25vZGVIZWlnaHQ6bnVtYmVyO1xyXG4gICAgcHJpdmF0ZSBfaGFsZk5vZGVXaWR0aDpudW1iZXI7XHJcbiAgICBwcml2YXRlIF9oYWxmTm9kZUhlaWdodDpudW1iZXI7XHJcblxyXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKHJvdzpudW1iZXIsIGNvbDpudW1iZXIsIG5vZGVXaWR0aDpudW1iZXIsIG5vZGVIZWlnaHQ6bnVtYmVyLCBfaGFsZk5vZGVXaWR0aDpudW1iZXIsIF9oYWxmTm9kZUhlaWdodDpudW1iZXIpIHtcclxuICAgICAgICB0aGlzLl9yb3cgPSByb3c7XHJcbiAgICAgICAgdGhpcy5fY29sID0gY29sO1xyXG4gICAgICAgIHRoaXMuX25vZGVXaWR0aCA9IG5vZGVXaWR0aDtcclxuICAgICAgICB0aGlzLl9ub2RlSGVpZ2h0ID0gbm9kZUhlaWdodDtcclxuICAgICAgICB0aGlzLl9oYWxmTm9kZUhlaWdodCA9IF9oYWxmTm9kZUhlaWdodDtcclxuICAgICAgICB0aGlzLl9oYWxmTm9kZVdpZHRoID0gX2hhbGZOb2RlV2lkdGg7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIGdldERlcmVjdEJ5UGl4ZWwoeDogbnVtYmVyLCB5OiBudW1iZXIpIHtcclxuICAgICAgICBjb25zdCBkeDpudW1iZXIgPSBNYXRoLmZsb29yKHgvIHRoaXMuX25vZGVXaWR0aCk7XHJcbiAgICAgICAgY29uc3QgZHk6bnVtYmVyID0gTWF0aC5mbG9vcih5LyB0aGlzLl9ub2RlSGVpZ2h0KTtcclxuICAgICAgICByZXR1cm4gbWF0aC52MihkeCxkeSk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0RGVyZWN0QnlXb3JsZFBvaW50KGN4OiBudW1iZXIsIGN5OiBudW1iZXIpIHtcclxuICAgICAgICByZXR1cm4gbWF0aC52MihjeCxjeSk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0Tm9kZUJ5RGVyZWN0KGR4OiBudW1iZXIsIGR5OiBudW1iZXIpOiBSb2FkTm9kZSB7XHJcbiAgICAgICAgY29uc3QgIGZQb2ludDpWZWMyID0gdGhpcy5nZXRQaXhlbEJ5RGVyZWN0KGR4LGR5KTtcclxuICAgICAgICBjb25zdCAgd1BvaW50OlZlYzIgPSB0aGlzLmdldFdvcmxkUG9pbnRCeVBpeGVsKGZQb2ludC54LGZQb2ludC55KTtcclxuICAgICAgICBjb25zdCBub2RlOlJvYWROb2RlID0gbmV3IFJvYWROb2RlKCk7XHJcbiAgICAgICAgbm9kZS5jeCA9IHdQb2ludC54XHJcbiAgICAgICAgbm9kZS5jeSA9IHdQb2ludC55O1xyXG5cclxuICAgICAgICBub2RlLnB4ID0gZlBvaW50Lng7XHJcbiAgICAgICAgbm9kZS5weSAgPSBmUG9pbnQueTtcclxuICAgICAgICBub2RlLmR4ID0gZHg7XHJcbiAgICAgICAgbm9kZS5keSA9IGR5O1xyXG4gICAgICAgIHJldHVybiBub2RlO1xyXG4gICAgfVxyXG5cclxuICAgIGdldE5vZGVCeVBpeGVsKHg6IG51bWJlciwgeTogbnVtYmVyKTogUm9hZE5vZGUge1xyXG4gICAgICAgIGNvbnN0IHdQb2ludDpWZWMyID0gdGhpcy5nZXRXb3JsZFBvaW50QnlQaXhlbCh4LHkpO1xyXG4gICAgICAgIGNvbnN0ICBmUG9pbnQ6VmVjMiA9IHRoaXMuZ2V0UGl4ZWxCeVdvcmxkUG9pbnQod1BvaW50Lngsd1BvaW50LnkpO1xyXG4gICAgICAgIGNvbnN0ICBkUG9pbnQ6VmVjMiA9IHRoaXMuZ2V0RGVyZWN0QnlQaXhlbCh4LHkpO1xyXG4gICAgICAgIGNvbnN0IG5vZGU6Um9hZE5vZGUgPSBuZXcgUm9hZE5vZGUoKTtcclxuICAgICAgICBub2RlLmN4ID0gd1BvaW50LnhcclxuICAgICAgICBub2RlLmN5ID0gd1BvaW50Lnk7XHJcblxyXG4gICAgICAgIG5vZGUucHggPSBmUG9pbnQueDtcclxuICAgICAgICBub2RlLnB5ICA9IGZQb2ludC55O1xyXG4gICAgICAgIG5vZGUuZHggPSBkUG9pbnQueDtcclxuICAgICAgICBub2RlLmR5ID0gZFBvaW50Lnk7XHJcbiAgICAgICAgcmV0dXJuIG5vZGU7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0Tm9kZUJ5V29ybGRQb2ludChjeDogbnVtYmVyLCBjeTogbnVtYmVyKTogUm9hZE5vZGUge1xyXG4gICAgICAgIHZhciBwb2ludDpWZWMyID0gdGhpcy5nZXRQaXhlbEJ5V29ybGRQb2ludChjeCxjeSlcclxuICAgICAgICByZXR1cm4gdGhpcy5nZXROb2RlQnlQaXhlbChwb2ludC54LHBvaW50LnkpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldFBpeGVsQnlEZXJlY3QoZHg6IG51bWJlciwgZHk6IG51bWJlcikge1xyXG4gICAgICAgIGNvbnN0IHg6bnVtYmVyICA9IE1hdGguZmxvb3IoKGR4KzEpKnRoaXMuX25vZGVXaWR0aC0gdGhpcy5faGFsZk5vZGVXaWR0aCk7XHJcbiAgICAgICAgY29uc3QgeTpudW1iZXIgPSBNYXRoLmZsb29yKChkeSsxKSp0aGlzLl9ub2RlSGVpZ2h0LXRoaXMuX2hhbGZOb2RlSGVpZ2h0KTtcclxuICAgICAgICByZXR1cm4gbWF0aC52Mih4LHkpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldFBpeGVsQnlXb3JsZFBvaW50KGN4OiBudW1iZXIsIGN5OiBudW1iZXIpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5nZXRQaXhlbEJ5RGVyZWN0KGN4LGN5KTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRXb3JsZFBvaW50QnlQaXhlbCh4OiBudW1iZXIsIHk6IG51bWJlcikge1xyXG4gICAgICAgcmV0dXJuIHRoaXMuZ2V0RGVyZWN0QnlQaXhlbCh4LHkpO1xyXG4gICAgfVxyXG5cclxufSIsImltcG9ydCB7bWF0aCwgVmVjMn0gZnJvbSBcImNjXCI7XHJcbmltcG9ydCB7TWFwVHlwZX0gZnJvbSBcIi4uL0VudW1cIjtcclxuaW1wb3J0IFJvYWROb2RlIGZyb20gXCIuL1JvYWROb2RlXCI7XHJcbmltcG9ydCBNYXBSb2FkNDVBbmdsZSBmcm9tIFwiLi9tYXBSb2FkL01hcFJvYWQ0NUFuZ2xlXCI7XHJcbmltcG9ydCBNYXBSb2FkOTBBbmdsZSBmcm9tIFwiZGI6Ly9hc3NldHMvU2NyaXB0L21vZHVsZXMvUlBHL21hcC9tYXBSb2FkL01hcFJvYWQ5MEFuZ2xlXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBNYXBSb2FkVXRpbHMge1xyXG4gICAgcHJpdmF0ZSBzdGF0aWMgX2luc3RhbmNlOiBNYXBSb2FkVXRpbHM7XHJcbiAgICBwdWJsaWMgc3RhdGljIGdldCBpbnN0YW5jZSgpOiBNYXBSb2FkVXRpbHN7XHJcbiAgICAgICAgaWYgKCF0aGlzLl9pbnN0YW5jZSkge1xyXG4gICAgICAgICAgICB0aGlzLl9pbnN0YW5jZSA9IG5ldyBNYXBSb2FkVXRpbHMoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2luc3RhbmNlO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgX21hcFdpZHRoOiBudW1iZXI7XHJcbiAgICBcclxuICAgIHByaXZhdGUgX21hcEhlaWdodDogbnVtYmVyO1xyXG4gICAgXHJcbiAgICBwcml2YXRlIF9ub2RlV2lkdGg6IG51bWJlcjtcclxuICAgXHJcbiAgICBwcml2YXRlIF9ub2RlSGVpZ2h0OiBudW1iZXI7XHJcbiAgIFxyXG5cclxuICAgIHByaXZhdGUgX2hhbGZOb2RlV2lkdGg6IG51bWJlcjtcclxuICAgIFxyXG4gICAgcHJpdmF0ZSBfaGFsZk5vZGVIZWlnaHQ6IG51bWJlcjtcclxuICAgIFxyXG5cclxuICAgIHByaXZhdGUgX2NvbDogbnVtYmVyO1xyXG4gICBcclxuICAgIHByaXZhdGUgX3JvdzogbnVtYmVyO1xyXG4gIFxyXG5cclxuICAgIHByaXZhdGUgX21hcFR5cGU6IE1hcFR5cGU7XHJcbiAgICBcclxuXHJcbiAgICBwcml2YXRlIF9tYXBSb2FkOiBJTWFwUm9hZDtcclxuXHJcbiAgICBwdWJsaWMgdXBkYXRlTWFwSW5mbyhtYXBXaWR0aDogbnVtYmVyLCBtYXBIZWlnaHQ6IG51bWJlciwgbm9kZVdpZHRoOiBudW1iZXIsIG5vZGVIZWlnaHQ6IG51bWJlcixtYXBUeXBlOk1hcFR5cGUpOiB2b2lke1xyXG4gICAgICAgIHRoaXMuX21hcFdpZHRoID0gbWFwV2lkdGg7XHJcbiAgICAgICAgdGhpcy5fbWFwSGVpZ2h0ID0gbWFwSGVpZ2h0O1xyXG4gICAgICAgIHRoaXMuX25vZGVXaWR0aCA9IG5vZGVXaWR0aDtcclxuICAgICAgICB0aGlzLl9ub2RlSGVpZ2h0ID0gbm9kZUhlaWdodDtcclxuXHJcbiAgICAgICAgdGhpcy5faGFsZk5vZGVXaWR0aCA9IE1hdGguZmxvb3Iobm9kZVdpZHRoIC8gMik7XHJcbiAgICAgICAgdGhpcy5faGFsZk5vZGVIZWlnaHQgPSBNYXRoLmZsb29yKG5vZGVIZWlnaHQgLyAyKTtcclxuXHJcbiAgICAgICAgdGhpcy5fbWFwVHlwZSA9IG1hcFR5cGU7XHJcblxyXG4gICAgICAgIHN3aXRjaCAodGhpcy5fbWFwVHlwZSkge1xyXG4gICAgICAgICAgICBjYXNlIE1hcFR5cGUuQW5nbGU0NTpcclxuICAgICAgICAgICAgICAgIHRoaXMuX2NvbCA9IE1hdGguY2VpbChtYXBXaWR0aCAvIG5vZGVXaWR0aCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9yb3cgPSBNYXRoLmNlaWwobWFwSGVpZ2h0IC8gbm9kZUhlaWdodCkgKiAyO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fbWFwUm9hZCA9IG5ldyBNYXBSb2FkNDVBbmdsZSh0aGlzLl9yb3csIHRoaXMuX2NvbCwgdGhpcy5fbm9kZVdpZHRoLCB0aGlzLl9ub2RlSGVpZ2h0LCB0aGlzLl9oYWxmTm9kZVdpZHRoLCB0aGlzLl9oYWxmTm9kZUhlaWdodCk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBNYXBUeXBlLkFuZ2xlOTA6XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9jb2wgPSBNYXRoLmNlaWwobWFwV2lkdGggLyBub2RlV2lkdGgpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fcm93ID0gTWF0aC5jZWlsKG1hcEhlaWdodCAvIG5vZGVIZWlnaHQpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fbWFwUm9hZCA9IG5ldyBNYXBSb2FkOTBBbmdsZSh0aGlzLl9yb3csIHRoaXMuX2NvbCwgdGhpcy5fbm9kZVdpZHRoLCB0aGlzLl9ub2RlSGVpZ2h0LCB0aGlzLl9oYWxmTm9kZVdpZHRoLCB0aGlzLl9oYWxmTm9kZUhlaWdodCk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICBcclxuICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0Tm9kZUJ5UGl4ZWwoeDogbnVtYmVyLCB5OiBudW1iZXIpOiBSb2FkTm9kZXtcclxuICAgICAgICBpZiAodGhpcy5fbWFwUm9hZCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fbWFwUm9hZC5nZXROb2RlQnlQaXhlbCh4LCB5KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG5ldyBSb2FkTm9kZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXROb2RlQnlEZXJlY3QoZHg6IG51bWJlciwgZHk6IG51bWJlcik6IFJvYWROb2Rle1xyXG4gICAgICAgIGlmICh0aGlzLl9tYXBSb2FkKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9tYXBSb2FkLmdldE5vZGVCeURlcmVjdChkeCwgZHkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbmV3IFJvYWROb2RlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldE5vZGVCeVdvcmxkUG9pbnQoY3g6IG51bWJlciwgY3k6IG51bWJlcik6IFJvYWROb2Rle1xyXG4gICAgICAgIGlmICh0aGlzLl9tYXBSb2FkKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9tYXBSb2FkLmdldE5vZGVCeVdvcmxkUG9pbnQoY3gsIGN5KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG5ldyBSb2FkTm9kZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXRXb3JsZFBvaW50QnlQaXhlbCh4OiBudW1iZXIsIHk6IG51bWJlcik6IFZlYzJ7XHJcbiAgICAgICAgaWYgKHRoaXMuX21hcFJvYWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX21hcFJvYWQuZ2V0V29ybGRQb2ludEJ5UGl4ZWwoeCwgeSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBtYXRoLnYyKDAsIDApO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXRQaXhlbEJ5V29ybGRQb2ludChjeDogbnVtYmVyLCBjeTogbnVtYmVyKTogVmVjMiB7XHJcbiAgICAgICAgaWYgKHRoaXMuX21hcFJvYWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX21hcFJvYWQuZ2V0UGl4ZWxCeVdvcmxkUG9pbnQoY3gsIGN5KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG1hdGgudjIoMCwgMCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldERlcmVjdEJ5UGl4ZWwoeDogbnVtYmVyLCB5OiBudW1iZXIpOiBWZWMye1xyXG4gICAgICAgIGlmICh0aGlzLl9tYXBSb2FkKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9tYXBSb2FkLmdldERlcmVjdEJ5UGl4ZWwoeCwgeSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBtYXRoLnYyKDAsIDApO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXREZXJlY3RCeVdvcmxkUG9pbnQoY3g6IG51bWJlciwgY3k6IG51bWJlcik6IFZlYzIge1xyXG4gICAgICAgIGlmICh0aGlzLl9tYXBSb2FkKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9tYXBSb2FkLmdldERlcmVjdEJ5V29ybGRQb2ludChjeCwgY3kpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbWF0aC52MigwLCAwKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0UGl4ZWxCeURlcmVjdChkeDogbnVtYmVyLCBkeTogbnVtYmVyKTogVmVjMiB7XHJcbiAgICAgICAgaWYgKHRoaXMuX21hcFJvYWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX21hcFJvYWQuZ2V0UGl4ZWxCeURlcmVjdChkeCwgZHkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbWF0aC52MigwLCAwKTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgcHVibGljIGdldCBtYXBXaWR0aCgpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9tYXBXaWR0aDtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0IG1hcEhlaWdodCgpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9tYXBIZWlnaHQ7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldCBub2RlV2lkdGgoKTogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fbm9kZVdpZHRoO1xyXG4gICAgfVxyXG4gICBcclxuICAgIHB1YmxpYyBnZXQgbm9kZUhlaWdodCgpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9ub2RlSGVpZ2h0O1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXQgaGFsZk5vZGVXaWR0aCgpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9oYWxmTm9kZVdpZHRoO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXQgaGFsZk5vZGVIZWlnaHQoKTogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5faGFsZk5vZGVIZWlnaHQ7XHJcbiAgICB9IFxyXG4gICAgcHVibGljIGdldCBjb2woKTogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fY29sO1xyXG4gICAgfVxyXG4gICAgcHVibGljIGdldCByb3coKTogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fcm93O1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXQgbWFwVHlwZSgpOiBNYXBUeXBlIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fbWFwVHlwZTtcclxuICAgIH1cclxufVxyXG53aW5kb3dbXCJtYXBSb2FkVXRpbHNcIl0gPSBNYXBSb2FkVXRpbHMuaW5zdGFuY2U7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIElNYXBSb2FkIHtcclxuICAgIGdldE5vZGVCeVBpeGVsKHg6IG51bWJlciwgeTogbnVtYmVyKTogUm9hZE5vZGU7XHJcbiAgICBnZXROb2RlQnlEZXJlY3QoZHg6IG51bWJlciwgZHk6IG51bWJlcik6IFJvYWROb2RlO1xyXG4gICAgZ2V0Tm9kZUJ5V29ybGRQb2ludChjeDogbnVtYmVyLCBjeTogbnVtYmVyKTogUm9hZE5vZGU7XHJcbiAgICBnZXRXb3JsZFBvaW50QnlQaXhlbCh4OiBudW1iZXIsIHk6IG51bWJlcik6IFZlYzI7XHJcbiAgICBnZXRQaXhlbEJ5V29ybGRQb2ludChjeDogbnVtYmVyLCBjeTogbnVtYmVyKTogVmVjMjtcclxuICAgIGdldERlcmVjdEJ5UGl4ZWwoeDogbnVtYmVyLCB5OiBudW1iZXIpOiBWZWMyO1xyXG4gICAgZ2V0RGVyZWN0QnlXb3JsZFBvaW50KGN4OiBudW1iZXIsIGN5OiBudW1iZXIpOiBWZWMyO1xyXG4gICAgZ2V0UGl4ZWxCeURlcmVjdChkeDogbnVtYmVyLCBkeTogbnVtYmVyKTogVmVjMjtcclxufSIsImltcG9ydCB7IFZlYzIgfSBmcm9tIFwiY2NcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE1hdGhVdGlscyB7XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog55Sf5oiQYmV6aWVy5puy57q/6Lev5b6E54K5XHJcbiAgICAgKiBAcGFyYW0gYW5jaG9ycyAtIOabsue6v+aOp+WItueCueaVsOe7hO+8jOWMheWQq+i1t+e7iOeCuVxyXG4gICAgICogQHBhcmFtIGNvdW50IC0g55Sf5oiQ55qE5puy57q/54K55pWwXHJcbiAgICAgKiBAcmV0dXJucyDnlJ/miJDnmoTmm7Lnur/ngrnmlbDnu4RcclxuICAgICAqL1xyXG4gICAgcHVibGljIHN0YXRpYyBjcmVhdGVCZXppZXJQb2ludHMoYW5jaG9yczogVmVjMltdLCBjb3VudDogbnVtYmVyKTogVmVjMltdIHtcclxuICAgICAgICBsZXQgcG9pbnRzID0gW107XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPD0gY291bnQ7IGkrKykge1xyXG4gICAgICAgICAgICBsZXQgcCA9IHRoaXMuY2FjdWxhdGVCZXppZXJQb2ludChhbmNob3JzLCBpIC8gY291bnQpO1xyXG4gICAgICAgICAgICBwb2ludHMucHVzaChwKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHBvaW50cztcclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0gcG9pbnRzIC0g5puy57q/5o6n5Yi254K55pWw57uE77yM5YyF5ZCr6LW357uI54K5XHJcbiAgICAgKiBAcGFyYW0gdCAtIOavlOS+i++8jFswLCAxXVxyXG4gICAgICogQHJldHVybnMg55Sf5oiQ55qE5puy57q/54K5XHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBzdGF0aWMgY2FjdWxhdGVCZXppZXJQb2ludChwb2ludHM6IFZlYzJbXSwgdDogbnVtYmVyKSB7XHJcbiAgICAgICAgbGV0IGxlbiA9IHBvaW50cy5sZW5ndGg7XHJcbiAgICAgICAgbGV0IHJlcyA9IG5ldyBWZWMyKDAsIDApO1xyXG4gICAgICAgIGxldCBjb21iaW5hdGlvbiA9IGZ1bmN0aW9uIChuLCBtKSB7XHJcbiAgICAgICAgICAgIGxldCBuRmFjdG9yaWFsID0gMSwgbUZhY3RvcmlhbCA9IDE7XHJcbiAgICAgICAgICAgIHdoaWxlIChtID4gMCkge1xyXG4gICAgICAgICAgICAgICAgbkZhY3RvcmlhbCAqPSBuO1xyXG4gICAgICAgICAgICAgICAgbUZhY3RvcmlhbCAqPSBtO1xyXG4gICAgICAgICAgICAgICAgbi0tO1xyXG4gICAgICAgICAgICAgICAgbS0tO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBuRmFjdG9yaWFsIC8gbUZhY3RvcmlhbDtcclxuICAgICAgICB9O1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgbGV0IHAgPSBwb2ludHNbaV07XHJcbiAgICAgICAgICAgIHJlcy54ICs9IHAueCAqIGNvbWJpbmF0aW9uKGxlbiAtIDEsIGkpICogTWF0aC5wb3codCwgaSkgKiBNYXRoLnBvdygxIC0gdCwgbGVuIC0gMSAtIGkpO1xyXG4gICAgICAgICAgICByZXMueSArPSBwLnkgKiBjb21iaW5hdGlvbihsZW4gLSAxLCBpKSAqIE1hdGgucG93KHQsIGkpICogTWF0aC5wb3coMSAtIHQsIGxlbiAtIDEgLSBpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHJlcztcclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDlvKfluqbovazop5LluqZcclxuICAgICAqIEBwYXJhbSByYWRpYW4gLSDlvKfluqZcclxuICAgICAqIEByZXR1cm5zIOinkuW6plxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgc3RhdGljIFJhZGlhblRvQW5nbGUocmFkaWFuOiBudW1iZXIpIHtcclxuICAgICAgICByZXR1cm4gcmFkaWFuICogMTgwIC8gTWF0aC5QSTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDop5LluqbovazlvKfluqZcclxuICAgICAqIEBwYXJhbSBhbmdsZSAtIOinkuW6plxyXG4gICAgICogQHJldHVybnMg5byn5bqmXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBzdGF0aWMgQW5nbGVUb1JhZGlhbihhbmdsZTogbnVtYmVyKSB7XHJcbiAgICAgICAgcmV0dXJuIGFuZ2xlICogTWF0aC5QSSAvIDE4MDtcclxuICAgIH1cclxuXHJcblxyXG4gICAgLy8gY2xhc3MgZW5kXHJcbn1cclxuIiwiaW1wb3J0IHsgX2RlY29yYXRvciwgQ29tcG9uZW50LCBOb2RlLCBWZWMzIH0gZnJvbSAnY2MnO1xyXG5pbXBvcnQgQ2hhcmFjdGVyIGZyb20gJy4vQ2hhcmFjdGVyJztcclxuaW1wb3J0IHsgRWRpdE1vbnN0ZXJEYXRhIH0gZnJvbSAnLi4vRWRpdE9iakRhdGEnO1xyXG5jb25zdCB7IGNjY2xhc3MsIHByb3BlcnR5IH0gPSBfZGVjb3JhdG9yO1xyXG5cclxuQGNjY2xhc3MoJ01vbnN0ZXInKVxyXG5leHBvcnQgY2xhc3MgTW9uc3RlciBleHRlbmRzIENoYXJhY3RlciB7XHJcbiAgICBcclxuICAgIHB1YmxpYyBtb25zdGVySWQ6IG51bWJlciA9IDA7XHJcbiAgICBwdWJsaWMgZGVmYXVsdERpcjogbnVtYmVyID0gMDtcclxuXHJcbiAgICAvKipcclxuICAgICAqIOe8lui+keeahOaVsOaNrlxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIGVkaXREYXRhOiBFZGl0TW9uc3RlckRhdGEgPSBudWxsO1xyXG4gICAgc3RhcnQoKSB7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5Yid5aeL5YyWXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBpbml0KCkge1xyXG4gICAgICAgIC8vIHRoaXMud2lkdGggPSAxMDA7XHJcbiAgICAgICAgLy8gdGhpcy5oZWlnaHQgPSAxMDA7XHJcbiAgICAgICAgdGhpcy5kaXJlY3Rpb24gPSB0aGlzLmRlZmF1bHREaXI7XHJcblxyXG4gICAgICAgIC8vIHRoaXMubG9hZFJlcygpO1xyXG4gICAgfVxyXG5cclxuICAgIHVwZGF0ZShkZWx0YVRpbWU6IG51bWJlcikge1xyXG4gICAgICAgIFxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBpbml0RWRpdERhdGEoZWRpdERhdGEpOiB2b2lkIHsgXHJcbiAgICAgICAgdGhpcy5lZGl0RGF0YSA9IGVkaXREYXRhO1xyXG5cclxuICAgICAgICB0aGlzLm9iak5hbWUgPSBlZGl0RGF0YS5vYmpOYW1lO1xyXG4gICAgICAgIHRoaXMubW9uc3RlcklkID0gTnVtYmVyKGVkaXREYXRhLm9iaklkKTtcclxuICAgICAgICB0aGlzLm5vZGUucG9zaXRpb24gPSBuZXcgVmVjMyhlZGl0RGF0YS54LCBlZGl0RGF0YS55KTtcclxuICAgICAgICB0aGlzLmRlZmF1bHREaXIgPSBlZGl0RGF0YS5kaXJlY3Rpb247XHJcbiAgICAgICAgLy8gdGhpcy5pc1BhdHJvbCA9IGVkaXREYXRhLmlzUGF0cm9sO1xyXG4gICAgfVxyXG59XHJcblxyXG5cclxuIiwiaW1wb3J0IHsgTm9kZSwgTm9kZVBvb2wsIFVJVHJhbnNmb3JtIH0gZnJvbSBcImNjXCI7XHJcblxyXG4vKipcclxuICogQGZpbGVOYW1lIE5vZGVGYWN0b3J5LnRzXHJcbiAqIEBhdXRob3IgemhhbmdxaW9uZ1xyXG4gKiBAZGF0ZSAyMDI0LzEyLzE4IDE2OjM2OjEwXCJcclxuICogQGRlc2NyaXB0aW9uXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgTm9kZUZhY3Rvcnkge1xyXG4gICAgcHJpdmF0ZSBzdGF0aWMgX2luc3RhbmNlOiBOb2RlRmFjdG9yeTtcclxuICAgIHB1YmxpYyBzdGF0aWMgZ2V0IGluc3RhbmNlKCk6IE5vZGVGYWN0b3J5IHtcclxuICAgICAgICBpZiAoIU5vZGVGYWN0b3J5Ll9pbnN0YW5jZSkge1xyXG4gICAgICAgICAgICBOb2RlRmFjdG9yeS5faW5zdGFuY2UgPSBuZXcgTm9kZUZhY3RvcnkoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIE5vZGVGYWN0b3J5Ll9pbnN0YW5jZTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIF9ub2RlUG9vbDogTm9kZVBvb2w7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICB0aGlzLl9ub2RlUG9vbCA9IG5ldyBOb2RlUG9vbCgpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBjcmVhdGVOb2RlKCk6IE5vZGUge1xyXG4gICAgICAgIGxldCBub2RlOiBOb2RlID0gbnVsbDtcclxuICAgICAgICBpZiAodGhpcy5fbm9kZVBvb2wuc2l6ZSgpID4gMCkge1xyXG4gICAgICAgICAgICBub2RlID0gdGhpcy5fbm9kZVBvb2wuZ2V0KCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgbm9kZSA9IG5ldyBOb2RlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBub2RlO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyByZWxlYXNlKG5vZGU6IE5vZGUpOiB2b2lkIHtcclxuICAgICAgICBpZiAodGhpcy5fbm9kZVBvb2wpIHtcclxuICAgICAgICAgICAgdGhpcy5fbm9kZVBvb2wucHV0KG5vZGUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgeyBfZGVjb3JhdG9yLCBDb21wb25lbnQsIE5vZGUsIFZlYzMgfSBmcm9tICdjYyc7XHJcbmltcG9ydCBDaGFyYWN0ZXIgZnJvbSAnLi9DaGFyYWN0ZXInO1xyXG5pbXBvcnQgeyBFZGl0TnBjRGF0YSB9IGZyb20gJy4uL0VkaXRPYmpEYXRhJztcclxuY29uc3QgeyBjY2NsYXNzLCBwcm9wZXJ0eSB9ID0gX2RlY29yYXRvcjtcclxuXHJcbkBjY2NsYXNzKCdOcGMnKVxyXG5leHBvcnQgY2xhc3MgTnBjIGV4dGVuZHMgQ2hhcmFjdGVyIHtcclxuXHJcbiAgICBwdWJsaWMgbnBjSWQ6IG51bWJlciA9IDA7XHJcbiAgICBwdWJsaWMgZGVmYXVsdERpcjogbnVtYmVyID0gMDtcclxuXHJcbiAgICBwcml2YXRlIGVkaXREYXRhOiBFZGl0TnBjRGF0YSA9IG51bGw7XHJcbiAgICBzdGFydCgpIHtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgdXBkYXRlKGRlbHRhVGltZTogbnVtYmVyKSB7XHJcbiAgICAgICAgXHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGluaXQoKSB7XHJcbiAgICAgICAgLy8gdGhpcy53aWR0aCA9IDEwMDtcclxuICAgICAgICAvLyB0aGlzLmhlaWdodCA9IDEwMDtcclxuICAgICAgICB0aGlzLmRpcmVjdGlvbiA9IHRoaXMuZGVmYXVsdERpcjtcclxuICAgICAgICAvLyB0aGlzLmxvYWRSZXMoKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgaW5pdEVkaXREYXRhKGVkaXREYXRhOiBFZGl0TnBjRGF0YSkge1xyXG4gICAgICAgIHRoaXMuZWRpdERhdGEgPSBlZGl0RGF0YTtcclxuXHJcbiAgICAgICAgdGhpcy5vYmpOYW1lID0gZWRpdERhdGEub2JqTmFtZTtcclxuICAgICAgICB0aGlzLm5wY0lkID0gTnVtYmVyKGVkaXREYXRhLm9iaklkKTtcclxuICAgICAgICB0aGlzLm5vZGUucG9zaXRpb24gPSBuZXcgVmVjMyhlZGl0RGF0YS54LCBlZGl0RGF0YS55KTtcclxuICAgICAgICB0aGlzLmRlZmF1bHREaXIgPSBlZGl0RGF0YS5kaXJlY3Rpb247XHJcbiAgICAgICAgLy8gdGhpcy5pc1BhdHJvbCA9IGVkaXREYXRhLmlzUGF0cm9sO1xyXG4gICAgfVxyXG59XHJcblxyXG5cclxuIiwiaW1wb3J0IHsgVG93ZXJHYW1lU2NlbmUgfSBmcm9tIFwiZGI6Ly9hc3NldHMvU2NyaXB0L21vZHVsZXMvVG93ZXJEZWZlbnNlL1Rvd2VyR2FtZVNjZW5lXCI7XHJcblxyXG5leHBvcnQgZW51bSBQYW5lbFR5cGUge1xyXG4gICAgbm9uZSA9IDAsXHJcbiAgICBGYWlyeWJpcmRNYWluUGFuZWwgPSAxLFxyXG4gICAgUlBHUGFuZWwgPSAyLFxyXG4gICAgTWFpblBhbmVsID0gMyxcclxuICAgIFRvd2VyR2FtZVNjZW5lID0gNCxcclxuICAgIEdhbWVPdmVyT3JXaW4gPSA1LFxyXG4gICAgQUZLR2FtZSA9IDYsXHJcbiAgICBBRktSZXN1bHRQYW5lbCA9IDcsXHJcbn0iLCJpbXBvcnQgeyBWZWMyIH0gZnJvbSBcImNjXCI7XHJcbmltcG9ydCBJUm9hZFNlZWtlciBmcm9tIFwiLi4vSVJvYWRTZWVrZXJcIjtcclxuaW1wb3J0IEFTdGFyUm9hZFNlZWtlciBmcm9tIFwiLi9BU3RhclJvYWRTZWVrZXJcIjtcclxuaW1wb3J0IE1hcERhdGEgZnJvbSBcIi4vTWFwRGF0YVwiO1xyXG5pbXBvcnQgTWFwUm9hZFV0aWxzIGZyb20gXCIuL01hcFJvYWRVdGlsc1wiO1xyXG5pbXBvcnQgUm9hZE5vZGUgZnJvbSBcIi4vUm9hZE5vZGVcIjtcclxuaW1wb3J0IHtNYXBUeXBlLCBQYXRoT3B0aW1pemUsIFBhdGhRdWFkU2Vla30gZnJvbSBcIi4uL0VudW1cIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBhdGhGaW5kaW5nQWdlbnQge1xyXG4gICAgcHJpdmF0ZSBzdGF0aWMgX2luc3RhbmNlOiBQYXRoRmluZGluZ0FnZW50O1xyXG4gICAgcHVibGljIHN0YXRpYyBnZXQgaW5zdGFuY2UoKTogUGF0aEZpbmRpbmdBZ2VudHtcclxuICAgICAgICBpZiAoIXRoaXMuX2luc3RhbmNlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2luc3RhbmNlID0gbmV3IFBhdGhGaW5kaW5nQWdlbnQoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2luc3RhbmNlO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgX21hcERhdGE6IE1hcERhdGE7XHJcblxyXG4gICAgcHJpdmF0ZSBfbWFwVHlwZTogTWFwVHlwZTtcclxuICAgIHByaXZhdGUgX3JvYWREaWM6IHsgW2tleTogc3RyaW5nXTogUm9hZE5vZGUgfSA9IHt9O1xyXG4gICAgcHJpdmF0ZSBfcm9hZFNlZWtlcjogSVJvYWRTZWVrZXI7XHJcblxyXG5cclxuICAgIHB1YmxpYyBpbml0KG1hcERhdGE6IE1hcERhdGEpOiB2b2lke1xyXG4gICAgICAgIHRoaXMuX21hcERhdGEgPSBtYXBEYXRhO1xyXG4gICAgICAgIHRoaXMuX21hcFR5cGUgPSBtYXBEYXRhLnR5cGU7XHJcbiAgICAgICAgTWFwUm9hZFV0aWxzLmluc3RhbmNlLnVwZGF0ZU1hcEluZm8obWFwRGF0YS5tYXBXaWR0aCwgbWFwRGF0YS5tYXBIZWlnaHQsIG1hcERhdGEubm9kZVdpZHRoLCBtYXBEYXRhLm5vZGVIZWlnaHQsIG1hcERhdGEudHlwZSk7XHJcblxyXG4gICAgICAgIHRoaXMuX3JvYWREaWMgPSB7fTtcclxuICAgICAgICBjb25zdCByb2FkRGF0YUFycjogbnVtYmVyW11bXSA9IHRoaXMuX21hcERhdGEucm9hZERhdGFBcnI7XHJcblxyXG4gICAgICAgIHZhciBsZW46IG51bWJlciA9IHRoaXMuX21hcERhdGEucm9hZERhdGFBcnIubGVuZ3RoO1xyXG4gICAgICAgIHZhciBsZW4yOiBudW1iZXIgPSB0aGlzLl9tYXBEYXRhLnJvYWREYXRhQXJyWzBdLmxlbmd0aDtcclxuXHJcbiAgICAgICAgbGV0IHZhbHVlOiBudW1iZXIgPSAwO1xyXG4gICAgICAgIGxldCBkeDogbnVtYmVyID0gMDtcclxuICAgICAgICBsZXQgZHk6IG51bWJlciA9IDA7XHJcbiAgICAgICAgbGV0IGN4OiBudW1iZXIgPSAwO1xyXG4gICAgICAgIGxldCBjeTogbnVtYmVyID0gMDtcclxuXHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGxlbjI7IGorKykge1xyXG4gICAgICAgICAgICAgICAgdmFsdWUgPSByb2FkRGF0YUFycltpXVtqXTtcclxuICAgICAgICAgICAgICAgIGR4ID0gajtcclxuICAgICAgICAgICAgICAgIGR5ID0gaTtcclxuXHJcbiAgICAgICAgICAgICAgICBjb25zdCBub2RlOiBSb2FkTm9kZSA9IE1hcFJvYWRVdGlscy5pbnN0YW5jZS5nZXROb2RlQnlEZXJlY3QoZHgsIGR5KTtcclxuICAgICAgICAgICAgICAgIG5vZGUudmFsdWUgPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgIFxyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMuX3JvYWREaWNbbm9kZS5jeCArIFwiX1wiICsgbm9kZS5jeV0gPSBub2RlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5fcm9hZFNlZWtlciA9IG5ldyBBU3RhclJvYWRTZWVrZXIodGhpcy5fcm9hZERpYyk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHVwZGF0ZVJvYWRTZWVrZXJJbmZvKHBhdGhPcHRpbWl6ZTpQYXRoT3B0aW1pemUscGF0aFF1YWRTZWVrOlBhdGhRdWFkU2Vlayk6dm9pZHtcclxuICAgICAgICB0aGlzLl9yb2FkU2Vla2VyLnNldFBhdGhPcHRpbWl6ZShwYXRoT3B0aW1pemUpO1xyXG4gICAgICAgIHRoaXMuX3JvYWRTZWVrZXIuc2V0UGF0aFF1YWRTZWVrKHBhdGhRdWFkU2Vlayk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNldFJvYWRTZWVrZXJQYXNzQ29uZGl0aW9uKGNhbGxiYWNrOkZ1bmN0aW9uKTp2b2lke1xyXG4gICAgICAgIHRoaXMuX3JvYWRTZWVrZXIuc2V0Um9hZE5vZGVQYXNzQ29uZGl0aW9uKGNhbGxiYWNrKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc2Vla1BhdGgoc3RhcnRWMjogVmVjMiwgdGFyZ2V0VjI6IFZlYzIpOiBSb2FkTm9kZVtde1xyXG4gICAgICAgIGxldCBzdGFydE5vZGU6IFJvYWROb2RlID0gdGhpcy5nZXRSb2FkTm9kZUJ5UGl4ZWwoc3RhcnRWMi54LCBzdGFydFYyLnkpO1xyXG4gICAgICAgIGxldCB0YXJnZXROb2RlOiBSb2FkTm9kZSA9IHRoaXMuZ2V0Um9hZE5vZGVCeVBpeGVsKHRhcmdldFYyLngsIHRhcmdldFYyLnkpO1xyXG4gICAgICAgIGNvbnN0IHJvYWROb2RlQXJyYXk6IFJvYWROb2RlW10gPSB0aGlzLl9yb2FkU2Vla2VyLnNlZWtQYXRoKHN0YXJ0Tm9kZSwgdGFyZ2V0Tm9kZSk7XHJcbiAgICAgICAgLy8gY29uc3Qgcm9hZE5vZGVBcnJheTogUm9hZE5vZGVbXSA9IHRoaXMuX3JvYWRTZWVrZXIuc2Vla1BhdGgyKHN0YXJ0Tm9kZSwgdGFyZ2V0Tm9kZSk7XHJcbiAgICAgICAgcmV0dXJuIHJvYWROb2RlQXJyYXk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldFJvYWROb2RlQnlQaXhlbChweDogbnVtYmVyLCBweTogbnVtYmVyKTogUm9hZE5vZGV7XHJcbiAgICAgICAgbGV0IHBvaW50OiBWZWMyID0gTWFwUm9hZFV0aWxzLmluc3RhbmNlLmdldFdvcmxkUG9pbnRCeVBpeGVsKHB4LCBweSk7XHJcblxyXG4gICAgICAgIGxldCBub2RlOiBSb2FkTm9kZSA9IHRoaXMuZ2V0Um9hZE5vZGUocG9pbnQueCwgcG9pbnQueSk7XHJcbiAgICAgICAgLy8gaWYgKHRoaXMuX21hcFR5cGUgPT0gTWFwVHlwZS5BbmdsZTQ1KSB7XHJcbiAgICAgICAgLy8gICAgIG5vZGUgPSB0aGlzLmdldFJvYWROb2RlKHBvaW50LngsIHBvaW50LnkpO1xyXG4gICAgICAgIC8vIH1lbHNlIGlmKHRoaXMuX21hcFR5cGUgPT0gTWFwVHlwZS5BbmdsZTkwKSB7XHJcbiAgICAgICAgLy9cclxuICAgICAgICAvLyB9XHJcbiAgICAgICAgcmV0dXJuIG5vZGU7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXRSb2FkTm9kZShjeDogbnVtYmVyLCBjeTogbnVtYmVyKTogUm9hZE5vZGV7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3JvYWRTZWVrZXIuZ2V0Um9hZE5vZGUoY3gsIGN5KTtcclxuICAgIH1cclxufVxyXG5cclxud2luZG93W1wiUGF0aEZpbmRpbmdBZ2VudFwiXSA9IFBhdGhGaW5kaW5nQWdlbnQuaW5zdGFuY2U7IiwiaW1wb3J0IHsgTm9kZSwgQ29tcG9uZW50LCBfZGVjb3JhdG9yLCBJVHJpZ2dlckV2ZW50IH0gZnJvbSBcImNjXCI7XHJcblxyXG5pbXBvcnQgQ2hhcmFjdGVyLCB7IENoYXJhY3RlclN0YXRlIH0gZnJvbSBcIi4vQ2hhcmFjdGVyXCI7XHJcblxyXG5jb25zdCB7IGNjY2xhc3MsIHByb3BlcnR5IH0gPSBfZGVjb3JhdG9yO1xyXG5AY2NjbGFzcygnUGxheWVyJylcclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUGxheWVyIGV4dGVuZHMgQ2hhcmFjdGVyeyBcclxuICAgIHN0YXJ0KCkge1xyXG4gICAgICAgIHN1cGVyLnN0YXJ0KCk7XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgZ2V0IHN0YXRlKCk6IENoYXJhY3RlclN0YXRlIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fc3RhdGU7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNldCBzdGF0ZSh2YWx1ZTogQ2hhcmFjdGVyU3RhdGUpIHtcclxuICAgICAgICB0aGlzLl9zdGF0ZSA9IHZhbHVlO1xyXG5cclxuICAgICAgICBzd2l0Y2ggKHRoaXMuX3N0YXRlKSB7XHJcbiAgICAgICAgICAgIGNhc2UgQ2hhcmFjdGVyU3RhdGUuaWRsZTpcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnNrZWxldG9uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5za2VsZXRvbi5zZXRBbmltYXRpb24oMCwgXCJzdGFuZDJcIiwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgIGNhc2UgQ2hhcmFjdGVyU3RhdGUud2FsazpcclxuICAgICAgICAgICAgICAgIC8vIHRoaXMubW92aWVDbGlwLmJlZ2luID0gNjtcclxuICAgICAgICAgICAgICAgIC8vIHRoaXMubW92aWVDbGlwLmVuZCA9IDEyO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnNrZWxldG9uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5za2VsZXRvbi5zZXRBbmltYXRpb24oMCwgXCJydW5cIiwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgIGNhc2UgQ2hhcmFjdGVyU3RhdGUuc2l0ZG93bjpcclxuICAgICAgICAgICAgICAgIC8vIHRoaXMubW92aWVDbGlwLmJlZ2luID0gMTI7XHJcbiAgICAgICAgICAgICAgICAvLyB0aGlzLm1vdmllQ2xpcC5lbmQgPSAxODtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgY2FzZSBDaGFyYWN0ZXJTdGF0ZS5zaXRkb3duX3dhbGs6XHJcbiAgICAgICAgICAgICAgICAvLyB0aGlzLm1vdmllQ2xpcC5iZWdpbiA9IDE4O1xyXG4gICAgICAgICAgICAgICAgLy8gdGhpcy5tb3ZpZUNsaXAuZW5kID0gMjQ7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59IiwiaW1wb3J0IHsgRGVzdHJveVV0aWxzIH0gZnJvbSBcIi4vRGVzdHJveVV0aWxzXCI7XHJcblxyXG4vKipcclxuICogQGZpbGVOYW1lIFBvb2wudHNcclxuICogQGF1dGhvciB6aGFuZ3Fpb25nXHJcbiAqIEBkYXRlIDIwMjQvMTIvMjcgMjA6MTY6NDlcIlxyXG4gKiBAZGVzY3JpcHRpb25cclxuICovXHJcbmV4cG9ydCBjbGFzcyBQb29sPFQ+IHtcclxuICAgIHByaXZhdGUgJGNsYXp6OiBhbnk7XHJcbiAgICBwcml2YXRlICRpZGxlczogVFtdO1xyXG4gICAgcHJpdmF0ZSAkbWF4SWRsZTogbnVtYmVyO1xyXG4gICAgcHJpdmF0ZSAkaGFzU3RhdHVzOiBib29sZWFuO1xyXG5cclxuICAgIGlzRGVzdHJveTogYm9vbGVhbiA9IGZhbHNlO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKGNsYXp6OiBhbnksIG1heElkbGU6IG51bWJlciA9IDEwMCwgaGFzU3RhdHVzOiBib29sZWFuID0gZmFsc2UpIHtcclxuICAgICAgICB0aGlzLiRpZGxlcyA9IFtdO1xyXG4gICAgICAgIHRoaXMuJGNsYXp6ID0gY2xheno7XHJcbiAgICAgICAgdGhpcy4kbWF4SWRsZSA9IG1heElkbGU7XHJcbiAgICAgICAgdGhpcy4kaGFzU3RhdHVzID0gaGFzU3RhdHVzO1xyXG4gICAgfVxyXG5cclxuICAgIGNyZWF0ZSgpOiBUIHtcclxuICAgICAgICBsZXQgJHRlbXBPYmo7XHJcbiAgICAgICAgaWYgKHRoaXMuJGlkbGVzLmxlbmd0aCA9PSAwKVxyXG4gICAgICAgICAgICAkdGVtcE9iaiA9IG5ldyB0aGlzLiRjbGF6eigpO1xyXG4gICAgICAgIGVsc2VcclxuICAgICAgICAgICAgJHRlbXBPYmogPSB0aGlzLiRpZGxlcy5wb3AoKTtcclxuXHJcbiAgICAgICAgLy/mt7vliqDlnoPlnL7ku6PnoIFcclxuXHJcbiAgICAgICAgLy/lhbflpIfmv4DmtLvmjqXlj6PnmoTlr7nosaFcclxuICAgICAgICBpZiAodGhpcy4kaGFzU3RhdHVzICYmICR0ZW1wT2JqLmhhc093blByb3BlcnR5KFwiYWN0aXZhdGVcIikpXHJcbiAgICAgICAgICAgICR0ZW1wT2JqW1wiYWN0aXZhdGVcIl0oKTtcclxuXHJcbiAgICAgICAgcmV0dXJuICR0ZW1wT2JqO1xyXG4gICAgfVxyXG5cclxuICAgIGRlc3Ryb3kobzogYW55ID0gbnVsbCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuaXNEZXN0cm95ID0gdHJ1ZTtcclxuICAgICAgICBmb3IgKHZhciBpOiBudW1iZXIgPSAwOyBpIDwgdGhpcy4kaWRsZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgRGVzdHJveVV0aWxzLmRlc3Ryb3kodGhpcy4kaWRsZXNbaV0pXHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuJGlkbGVzID0gbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICByZWxlYXNlKG9iajogVCk6IHZvaWQge1xyXG4gICAgICAgIGlmICh0aGlzLiRpZGxlcy5sZW5ndGggPiB0aGlzLiRtYXhJZGxlKSB7XHJcbiAgICAgICAgICAgIERlc3Ryb3lVdGlscy5kZXN0cm95KG9iaik7XHJcbiAgICAgICAgICAgIC8v5re75Yqg5Z6D5Zy+5Luj56CBXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBpZiAodGhpcy4kaGFzU3RhdHVzICYmIG9iai5oYXNPd25Qcm9wZXJ0eShcInBhc3NpdmF0ZVwiKSlcclxuICAgICAgICAgICAgICAgIG9ialtcInBhc3NpdmF0ZVwiXSgpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy4kaWRsZXMucHVzaChvYmopO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBjbGVhcigpOiB2b2lkIHtcclxuICAgICAgICAvLyBkZXN0cm95KCk7XHJcbiAgICAgICAgdGhpcy4kaWRsZXMgPSBbXTtcclxuICAgIH1cclxuXHJcbiAgICBpc0Z1bGwoKTogYm9vbGVhbiB7XHJcbiAgICAgICAgaWYgKHRoaXMuJGlkbGVzLmxlbmd0aCA+IHRoaXMuJG1heElkbGUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICBnZXROdW1JZGxlKCk6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuJGlkbGVzLmxlbmd0aDtcclxuICAgIH1cclxufSIsImltcG9ydCB7IEFyZWFUeXBlIH0gZnJvbSBcIi4vQXJlYVR5cGVcIjtcclxuaW1wb3J0IHttYXRoLCBWZWMzfSBmcm9tIFwiY2NcIjtcclxuXHJcbmV4cG9ydCBlbnVtIEFuY2hvclBvaW50VHlwZSB7XHJcbiAgICBDZW50ZXIgPSAwLFxyXG4gICAgTGVmdERvd24gPSAxXHJcbn1cclxuLy8gUXVhZFRyZWVSZWN0LnRzXHJcbmV4cG9ydCBjbGFzcyBRdWFkVHJlZVJlY3Qge1xyXG4gICAgY29uc3RydWN0b3IoXHJcbiAgICAgICAgcHVibGljIHg6IG51bWJlcixcclxuICAgICAgICBwdWJsaWMgeTogbnVtYmVyLFxyXG4gICAgICAgIHB1YmxpYyB3aWR0aDogbnVtYmVyLFxyXG4gICAgICAgIHB1YmxpYyBoZWlnaHQ6IG51bWJlclxyXG4gICAgKSB7IH1cclxuXHJcbiAgICAvLyDmo4Dmn6Xnm67moIfnn6nlvaLmmK/lkKblrozlhajljIXlkKvlnKjlvZPliY3nn6nlvaLlhoVcclxuICAgIGNvbnRhaW5zKHRhcmdldDogUXVhZFRyZWVSZWN0LGFuY2hvclR5cGU6QW5jaG9yUG9pbnRUeXBlID0gQW5jaG9yUG9pbnRUeXBlLkNlbnRlcik6IGJvb2xlYW4ge1xyXG4gICAgICAgIGxldCBjb250YWluOmJvb2xlYW49IGZhbHNlO1xyXG4gICAgICAgIGlmKGFuY2hvclR5cGUgPT0gQW5jaG9yUG9pbnRUeXBlLkxlZnREb3duKXtcclxuICAgICAgICAgICAgLy8g55+p5b2iIEEg55qE6L6555WMXHJcbiAgICAgICAgICAgIGNvbnN0IEFMZWZ0ID0gdGhpcy54O1xyXG4gICAgICAgICAgICBjb25zdCBBUmlnaHQgPSB0aGlzLnggKyB0aGlzLndpZHRoO1xyXG4gICAgICAgICAgICBjb25zdCBBQm90dG9tID0gdGhpcy55O1xyXG4gICAgICAgICAgICBjb25zdCBBVG9wID0gdGhpcy55ICsgdGhpcy5oZWlnaHQ7XHJcblxyXG4gICAgICAgICAgICAvLyDnn6nlvaIgQiDnmoTovrnnlYxcclxuICAgICAgICAgICAgY29uc3QgQkxlZnQgPSB0YXJnZXQueDtcclxuICAgICAgICAgICAgY29uc3QgQlJpZ2h0ID0gdGFyZ2V0LnggKyB0YXJnZXQud2lkdGg7XHJcbiAgICAgICAgICAgIGNvbnN0IEJCb3R0b20gPSB0YXJnZXQueTtcclxuICAgICAgICAgICAgY29uc3QgQlRvcCA9IHRhcmdldC55ICsgdGFyZ2V0LmhlaWdodDtcclxuXHJcbiAgICAgICAgICAgIC8vIOajgOafpeefqeW9oiBBIOaYr+WQpuWMheWQq+efqeW9oiBCXHJcbiAgICAgICAgICAgIHJldHVybiBBTGVmdCA8PSBCTGVmdCAmJiBBUmlnaHQgPj0gQlJpZ2h0ICYmIEFCb3R0b20gPD0gQkJvdHRvbSAmJiBBVG9wID49IEJUb3A7XHJcbiAgICAgICAgfWVsc2UgaWYoYW5jaG9yVHlwZSA9PSBBbmNob3JQb2ludFR5cGUuQ2VudGVyKXtcclxuICAgICAgICAgICAgY29udGFpbiA9IE1hdGguYWJzKHRhcmdldC54IC0gdGhpcy54KSArIHRhcmdldC53aWR0aCAvIDIgPD0gdGhpcy53aWR0aCAvIDIgJiZcclxuICAgICAgICAgICAgICAgIE1hdGguYWJzKHRhcmdldC55IC0gdGhpcy55KSArIHRhcmdldC5oZWlnaHQgLyAyIDw9IHRoaXMuaGVpZ2h0IC8gMjtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGNvbnRhaW47XHJcbiAgICB9XHJcblxyXG4gICAgLy8g5qOA5p+l5Lik5Liq55+p5b2i5piv5ZCm55u45LqkXHJcbiAgICBpbnRlcnNlY3RzKHRhcmdldDogUXVhZFRyZWVSZWN0LGFuY2hvclR5cGU6QW5jaG9yUG9pbnRUeXBlID0gQW5jaG9yUG9pbnRUeXBlLkNlbnRlcik6IGJvb2xlYW4ge1xyXG4gICAgICAgIGxldCAgaW50ZXJzZWN0OiBib29sZWFuID0gZmFsc2U7XHJcbiAgICAgICAgaWYoYW5jaG9yVHlwZSA9PSBBbmNob3JQb2ludFR5cGUuQ2VudGVyKSB7XHJcbiAgICAgICAgICAgIGludGVyc2VjdCA9IE1hdGguYWJzKHRhcmdldC54IC0gdGhpcy54KSA8PSAodGhpcy53aWR0aCArIHRhcmdldC53aWR0aCkgLyAyICYmXHJcbiAgICAgICAgICAgICAgICBNYXRoLmFicyh0YXJnZXQueSAtIHRoaXMueSkgPD0gKHRoaXMuaGVpZ2h0ICsgdGFyZ2V0LmhlaWdodCkgLyAyO1xyXG4gICAgICAgIH1lbHNlIGlmKGFuY2hvclR5cGUgPT0gQW5jaG9yUG9pbnRUeXBlLkxlZnREb3duKSB7XHJcbiAgICAgICAgICAgIC8vIOefqeW9oiBBIOeahOi+ueeVjFxyXG4gICAgICAgICAgICBjb25zdCBBTGVmdCA9IHRhcmdldC54O1xyXG4gICAgICAgICAgICBjb25zdCBBUmlnaHQgPSB0YXJnZXQueCArIHRhcmdldC53aWR0aDtcclxuICAgICAgICAgICAgY29uc3QgQUJvdHRvbSA9IHRhcmdldC55O1xyXG4gICAgICAgICAgICBjb25zdCBBVG9wID0gdGFyZ2V0LnkgKyB0YXJnZXQuaGVpZ2h0O1xyXG5cclxuICAgICAgICAgICAgLy8g55+p5b2iIEIg55qE6L6555WMXHJcbiAgICAgICAgICAgIGNvbnN0IEJMZWZ0ID0gdGhpcy54O1xyXG4gICAgICAgICAgICBjb25zdCBCUmlnaHQgPSB0aGlzLnggKyB0aGlzLndpZHRoO1xyXG4gICAgICAgICAgICBjb25zdCBCQm90dG9tID0gdGhpcy55O1xyXG4gICAgICAgICAgICBjb25zdCBCVG9wID0gdGhpcy55ICsgdGhpcy5oZWlnaHQ7XHJcblxyXG4gICAgICAgICAgICAvLyDmo4Dmn6XmsLTlubPph43lj6BcclxuICAgICAgICAgICAgY29uc3QgaG9yaXpvbnRhbE92ZXJsYXAgPSBBUmlnaHQgPiBCTGVmdCAmJiBBTGVmdCA8IEJSaWdodDtcclxuXHJcbiAgICAgICAgICAgIC8vIOajgOafpeWeguebtOmHjeWPoFxyXG4gICAgICAgICAgICBjb25zdCB2ZXJ0aWNhbE92ZXJsYXAgPSBBVG9wID4gQkJvdHRvbSAmJiBBQm90dG9tIDwgQlRvcDtcclxuXHJcbiAgICAgICAgICAgIC8vIOWmguaenOawtOW5s+WSjOWeguebtOmDveaciemHjeWPoO+8jOWImeS4pOS4quefqeW9ouebuOS6pFxyXG4gICAgICAgICAgICBpbnRlcnNlY3QgPSBob3Jpem9udGFsT3ZlcmxhcCAmJiB2ZXJ0aWNhbE92ZXJsYXA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBpbnRlcnNlY3Q7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldElzSW5SYW5nZSh0YXJnZXQ6UXVhZFRyZWVSZWN0LHJhZGlhbjpudW1iZXIsYW5jaG9yVHlwZTpBbmNob3JQb2ludFR5cGUgPSBBbmNob3JQb2ludFR5cGUuQ2VudGVyKTpib29sZWFuIHtcclxuICAgICAgICBjb25zdCB0YXJnZXRQb3M6VmVjMyA9IG1hdGgudjModGFyZ2V0LngsdGFyZ2V0LnksMCk7XHJcbiAgICAgICAgY29uc3QgY3VyUG9zOlZlYzMgPSBtYXRoLnYzKHRoaXMueCx0aGlzLnkpO1xyXG4gICAgICAgIGNvbnN0IGRpc3RhbmNlOiBudW1iZXIgPSBWZWMzLmRpc3RhbmNlKGN1clBvcywgdGFyZ2V0UG9zKTtcclxuICAgICAgICByZXR1cm4gIGRpc3RhbmNlIDwgcmFkaWFuO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgUXVhZFRyZWU8VCBleHRlbmRzIHsgcmVjdDogUXVhZFRyZWVSZWN0IH0+IHtcclxuICAgIHByaXZhdGUgY2hpbGRyZW46IChRdWFkVHJlZTxUPiB8IG51bGwpW10gPSBbbnVsbCwgbnVsbCwgbnVsbCwgbnVsbF07XHJcbiAgICBwcml2YXRlIG9iamVjdHM6IFRbXSA9IFtdO1xyXG4gICAgcHJpdmF0ZSBkaXZpZGVkOiBib29sZWFuID0gZmFsc2U7XHJcbiAgICBwcml2YXRlIGRlcHRoOiBudW1iZXIgPSAwO1xyXG5cclxuICAgIHB1YmxpYyByZWN0OiBRdWFkVHJlZVJlY3Q7XHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IE1BWF9DT1VOVDogbnVtYmVyID0gMTA7XHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IE1BWF9ERVBUSDogbnVtYmVyID0gNTtcclxuXHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IGFuY2hvclBvaW50VHlwZTpBbmNob3JQb2ludFR5cGU7XHJcblxyXG4gICAgY29uc3RydWN0b3IocmVjdDogUXVhZFRyZWVSZWN0LCBtYXhDb3VudDogbnVtYmVyID0gMTAsIG1heERlcHRoOiBudW1iZXIgPSA1LGFuY2hvclBvaW50VHlwZTpBbmNob3JQb2ludFR5cGUgPSBBbmNob3JQb2ludFR5cGUuQ2VudGVyKSB7XHJcbiAgICAgICAgdGhpcy5yZWN0ID0gcmVjdDtcclxuICAgICAgICB0aGlzLk1BWF9DT1VOVCA9IG1heENvdW50O1xyXG4gICAgICAgIHRoaXMuTUFYX0RFUFRIID0gbWF4RGVwdGg7XHJcbiAgICAgICAgdGhpcy5hbmNob3JQb2ludFR5cGUgPSBhbmNob3JQb2ludFR5cGU7XHJcbiAgICB9XHJcblxyXG4gICAgLy8g5o+S5YWl5a+56LGhXHJcbiAgICBpbnNlcnQob2JqZWN0OiBUKTogYm9vbGVhbiB7XHJcbiAgICAgICAgaWYgKCF0aGlzLnJlY3QuY29udGFpbnMob2JqZWN0LnJlY3QsdGhpcy5hbmNob3JQb2ludFR5cGUpICYmICF0aGlzLnJlY3QuaW50ZXJzZWN0cyhvYmplY3QucmVjdCx0aGlzLmFuY2hvclBvaW50VHlwZSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlOyAvLyDlr7nosaHkuI3lnKjlvZPliY3oioLngrnojIPlm7TlhoVcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLm9iamVjdHMubGVuZ3RoIDwgdGhpcy5NQVhfQ09VTlQpIHtcclxuICAgICAgICAgICAgdGhpcy5vYmplY3RzLnB1c2gob2JqZWN0KTtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy5kZXB0aCA+PSB0aGlzLk1BWF9ERVBUSCkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7IC8vIOi+vuWIsOacgOWkp+a3seW6pu+8jOaXoOazleWIhuijglxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKCF0aGlzLmRpdmlkZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5kaXZpZGUoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZvciAoY29uc3QgY2hpbGQgb2YgdGhpcy5jaGlsZHJlbikge1xyXG4gICAgICAgICAgICBpZiAoY2hpbGQ/Lmluc2VydChvYmplY3QpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgZ2V0VGFyZ2V0SW5kZXgobm9kZTogVCk6IG51bWJlciB7XHJcbiAgICAgICAgY29uc3QgWDogbnVtYmVyID0gdGhpcy5yZWN0Lng7XHJcbiAgICAgICAgY29uc3QgWTogbnVtYmVyID0gdGhpcy5yZWN0Lnk7XHJcbiAgICAgICAgY29uc3QgaGFsZldpZHRoOiBudW1iZXIgPSB0aGlzLnJlY3Qud2lkdGggLyAyO1xyXG4gICAgICAgIGNvbnN0IGhhbGZIZWlnaHQ6IG51bWJlciA9IHRoaXMucmVjdC5oZWlnaHQgLyAyO1xyXG4gICAgICAgIGNvbnN0IG1pbl94OiBudW1iZXIgPSBub2RlLnJlY3QueCAtIG5vZGUucmVjdC53aWR0aCAvIDI7XHJcbiAgICAgICAgY29uc3QgbWluX3k6IG51bWJlciA9IG5vZGUucmVjdC55IC0gbm9kZS5yZWN0LmhlaWdodCAvIDI7XHJcbiAgICAgICAgY29uc3QgbWF4X3g6IG51bWJlciA9IG5vZGUucmVjdC54ICsgbm9kZS5yZWN0LndpZHRoIC8gMjtcclxuICAgICAgICBjb25zdCBtYXhfeTogbnVtYmVyID0gbm9kZS5yZWN0LnkgKyBub2RlLnJlY3QuaGVpZ2h0IC8gMjtcclxuXHJcbiAgICAgICAgaWYgKG1pbl94ID4gWCArIGhhbGZXaWR0aCB8fCBtYXhfeCA8IFggLSBoYWxmV2lkdGggfHwgbWluX3kgPiBZICsgaGFsZkhlaWdodCB8fCBtYXhfeSA8IFkgLSBoYWxmSGVpZ2h0KSByZXR1cm4gMDtcclxuXHJcbiAgICAgICAgICAgIGxldCBpZHg6bnVtYmVyID0gMDtcclxuICAgICAgICAgICAgbGV0IElzTGVmdDogYm9vbGVhbiA9IG1pbl94IDw9IFggPyB0cnVlIDogZmFsc2U7XHJcbiAgICAgICAgICAgIGxldCBJc1JpZ2h0OmJvb2xlYW4gPSBtYXhfeCA+PSBYID8gdHJ1ZSA6IGZhbHNlO1xyXG4gICAgICAgICAgICBsZXQgIElzQm90dG9tOmJvb2xlYW4gPSBtaW5feSA8PSBZID8gdHJ1ZSA6IGZhbHNlO1xyXG4gICAgICAgICAgICBsZXQgSXNUb3A6Ym9vbGVhbiA9IG1heF95ID49IFkgPyB0cnVlIDogZmFsc2U7XHJcblxyXG4gICAgICAgIGlmIChJc0xlZnQpIHtcclxuICAgICAgICAgICAgaWYgKElzVG9wKSBpZHggfD0gQXJlYVR5cGUuTFQ7XHJcbiAgICAgICAgICAgIGlmIChJc0JvdHRvbSkgaWR4IHw9IEFyZWFUeXBlLkxCO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoSXNSaWdodCkge1xyXG4gICAgICAgICAgICBpZiAoSXNUb3ApIGlkeCB8PSBBcmVhVHlwZS5SVDtcclxuICAgICAgICAgICAgaWYgKElzQm90dG9tKSBpZHggfD0gQXJlYVR5cGUuUkI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBpZHg7XHJcbiAgICB9XHJcblxyXG4gICAgLy8g5YiG6KOC5b2T5YmN6IqC54K55Li65Zub5Liq6LGh6ZmQXHJcbiAgICBwcml2YXRlIGRpdmlkZSgpOiB2b2lkIHtcclxuICAgICAgICBjb25zdCB7IHgsIHksIHdpZHRoLCBoZWlnaHQgfSA9IHRoaXMucmVjdDtcclxuICAgICAgICBjb25zdCBoYWxmV2lkdGggPSB3aWR0aCAvIDI7XHJcbiAgICAgICAgY29uc3QgaGFsZkhlaWdodCA9IGhlaWdodCAvIDI7XHJcblxyXG4gICAgICAgIGNvbnN0IGhhbGYyV2lkdGg6IG51bWJlciA9IGhhbGZXaWR0aCAvIDI7XHJcbiAgICAgICAgY29uc3QgaGFsZjJIZWlnaHQ6IG51bWJlciA9IGhhbGZIZWlnaHQgLyAyO1xyXG5cclxuICAgICAgICBpZih0aGlzLmFuY2hvclBvaW50VHlwZSA9PSBBbmNob3JQb2ludFR5cGUuQ2VudGVyKXtcclxuICAgICAgICAgICAgdGhpcy5jaGlsZHJlblswXSA9IG5ldyBRdWFkVHJlZShcclxuICAgICAgICAgICAgICAgIG5ldyBRdWFkVHJlZVJlY3QoeCAtIGhhbGYyV2lkdGgsIHkgKyBoYWxmMkhlaWdodCwgaGFsZldpZHRoLCBoYWxmSGVpZ2h0KSxcclxuICAgICAgICAgICAgICAgIHRoaXMuTUFYX0NPVU5ULFxyXG4gICAgICAgICAgICAgICAgdGhpcy5NQVhfREVQVEhcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgdGhpcy5jaGlsZHJlblsxXSA9IG5ldyBRdWFkVHJlZShcclxuICAgICAgICAgICAgICAgIG5ldyBRdWFkVHJlZVJlY3QoeCArIGhhbGYyV2lkdGgsIHkgKyBoYWxmMkhlaWdodCwgaGFsZldpZHRoLCBoYWxmSGVpZ2h0KSxcclxuICAgICAgICAgICAgICAgIHRoaXMuTUFYX0NPVU5ULFxyXG4gICAgICAgICAgICAgICAgdGhpcy5NQVhfREVQVEhcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgdGhpcy5jaGlsZHJlblsyXSA9IG5ldyBRdWFkVHJlZShcclxuICAgICAgICAgICAgICAgIG5ldyBRdWFkVHJlZVJlY3QoeCAtIGhhbGYyV2lkdGgsIHkgLSBoYWxmMkhlaWdodCwgaGFsZldpZHRoLCBoYWxmSGVpZ2h0KSxcclxuICAgICAgICAgICAgICAgIHRoaXMuTUFYX0NPVU5ULFxyXG4gICAgICAgICAgICAgICAgdGhpcy5NQVhfREVQVEhcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgdGhpcy5jaGlsZHJlblszXSA9IG5ldyBRdWFkVHJlZShcclxuICAgICAgICAgICAgICAgIG5ldyBRdWFkVHJlZVJlY3QoeCArIGhhbGYyV2lkdGgsIHkgLSBoYWxmMkhlaWdodCwgaGFsZldpZHRoLCBoYWxmSGVpZ2h0KSxcclxuICAgICAgICAgICAgICAgIHRoaXMuTUFYX0NPVU5ULFxyXG4gICAgICAgICAgICAgICAgdGhpcy5NQVhfREVQVEhcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICB9ZWxzZSBpZih0aGlzLmFuY2hvclBvaW50VHlwZSA9PSBBbmNob3JQb2ludFR5cGUuTGVmdERvd24pe1xyXG4gICAgICAgICAgICB0aGlzLmNoaWxkcmVuWzBdID0gbmV3IFF1YWRUcmVlKFxyXG4gICAgICAgICAgICAgICAgbmV3IFF1YWRUcmVlUmVjdCh4ICwgeSArIGhhbGZIZWlnaHQsIGhhbGZXaWR0aCwgaGFsZkhlaWdodCksXHJcbiAgICAgICAgICAgICAgICB0aGlzLk1BWF9DT1VOVCxcclxuICAgICAgICAgICAgICAgIHRoaXMuTUFYX0RFUFRILFxyXG4gICAgICAgICAgICAgICAgdGhpcy5hbmNob3JQb2ludFR5cGVcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgdGhpcy5jaGlsZHJlblsxXSA9IG5ldyBRdWFkVHJlZShcclxuICAgICAgICAgICAgICAgIG5ldyBRdWFkVHJlZVJlY3QoeCArIGhhbGZXaWR0aCwgeSArIGhhbGZIZWlnaHQsIGhhbGZXaWR0aCwgaGFsZkhlaWdodCksXHJcbiAgICAgICAgICAgICAgICB0aGlzLk1BWF9DT1VOVCxcclxuICAgICAgICAgICAgICAgIHRoaXMuTUFYX0RFUFRILFxyXG4gICAgICAgICAgICAgICAgdGhpcy5hbmNob3JQb2ludFR5cGVcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgdGhpcy5jaGlsZHJlblsyXSA9IG5ldyBRdWFkVHJlZShcclxuICAgICAgICAgICAgICAgIG5ldyBRdWFkVHJlZVJlY3QoeCwgeSAsIGhhbGZXaWR0aCwgaGFsZkhlaWdodCksXHJcbiAgICAgICAgICAgICAgICB0aGlzLk1BWF9DT1VOVCxcclxuICAgICAgICAgICAgICAgIHRoaXMuTUFYX0RFUFRILFxyXG4gICAgICAgICAgICAgICAgdGhpcy5hbmNob3JQb2ludFR5cGVcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgdGhpcy5jaGlsZHJlblszXSA9IG5ldyBRdWFkVHJlZShcclxuICAgICAgICAgICAgICAgIG5ldyBRdWFkVHJlZVJlY3QoeCArIGhhbGZXaWR0aCwgeSAsIGhhbGZXaWR0aCwgaGFsZkhlaWdodCksXHJcbiAgICAgICAgICAgICAgICB0aGlzLk1BWF9DT1VOVCxcclxuICAgICAgICAgICAgICAgIHRoaXMuTUFYX0RFUFRILFxyXG4gICAgICAgICAgICAgICAgdGhpcy5hbmNob3JQb2ludFR5cGVcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICB9XHJcblxyXG5cclxuXHJcbiAgICAgICAgdGhpcy5kaXZpZGVkID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLmRlcHRoKys7XHJcbiAgICB9XHJcblxyXG4gICAgLy8g5p+l6K+i5oyH5a6a6IyD5Zu05YaF55qE5a+56LGhXHJcbiAgICBxdWVyeShyYW5nZTogUXVhZFRyZWVSZWN0LCBmb3VuZDogVFtdID0gW10pOiBUW10ge1xyXG4gICAgICAgIGlmICghdGhpcy5yZWN0LmNvbnRhaW5zKHJhbmdlLHRoaXMuYW5jaG9yUG9pbnRUeXBlKSYmICF0aGlzLnJlY3QuaW50ZXJzZWN0cyhyYW5nZSx0aGlzLmFuY2hvclBvaW50VHlwZSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZvdW5kOyAvLyDojIPlm7TkuI3lnKjlvZPliY3oioLngrnlhoVcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZvciAoY29uc3Qgb2JqIG9mIHRoaXMub2JqZWN0cykge1xyXG4gICAgICAgICAgICBpZiAocmFuZ2UuaW50ZXJzZWN0cyhvYmoucmVjdCx0aGlzLmFuY2hvclBvaW50VHlwZSkpIHtcclxuICAgICAgICAgICAgICAgIGZvdW5kLnB1c2gob2JqKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuZGl2aWRlZCkge1xyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGNoaWxkIG9mIHRoaXMuY2hpbGRyZW4pIHtcclxuICAgICAgICAgICAgICAgIGlmIChjaGlsZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNoaWxkLnF1ZXJ5KHJhbmdlLCBmb3VuZCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBmb3VuZDtcclxuICAgIH1cclxuXHJcbiAgICBxdWVyeUluUmFuZ2UocmFuZ2U6UXVhZFRyZWVSZWN0LHJhZGlhbjpudW1iZXIsZm91bmQ6VFtdID0gW10pOiBUW10ge1xyXG4gICAgICAgIGlmICghdGhpcy5yZWN0LmNvbnRhaW5zKHJhbmdlLHRoaXMuYW5jaG9yUG9pbnRUeXBlKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZm91bmQ7IC8vIOiMg+WbtOS4jeWcqOW9k+WJjeiKgueCueWGhVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZm9yIChjb25zdCBvYmogb2YgdGhpcy5vYmplY3RzKSB7XHJcbiAgICAgICAgICAgIGlmKHJhbmdlLmdldElzSW5SYW5nZShvYmoucmVjdCxyYWRpYW4sdGhpcy5hbmNob3JQb2ludFR5cGUpKXtcclxuICAgICAgICAgICAgICAgIGZvdW5kLnB1c2gob2JqKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5kaXZpZGVkKSB7XHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgY2hpbGQgb2YgdGhpcy5jaGlsZHJlbikge1xyXG4gICAgICAgICAgICAgICAgaWYgKGNoaWxkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2hpbGQucXVlcnlJblJhbmdlKHJhbmdlLHJhZGlhbiwgZm91bmQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBmb3VuZDtcclxuICAgIH1cclxuICAgIHB1YmxpYyBnZXRBbGxDaGlsZE5vZGVzKHF0TGlzdDogUXVhZFRyZWU8VD5bXSkge1xyXG4gICAgICAgIHF0TGlzdC5wdXNoKHRoaXMpO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5jaGlsZHJlbi5sZW5ndGg7ICsraSkge1xyXG4gICAgICAgICAgICBjb25zdCBjaGlsZCA9IHRoaXMuY2hpbGRyZW5baV07XHJcbiAgICAgICAgICAgIGlmIChjaGlsZCkge1xyXG4gICAgICAgICAgICAgICAgY2hpbGQuZ2V0QWxsQ2hpbGROb2RlcyhxdExpc3QpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGNsZWFyKCk6IHZvaWQge1xyXG4gICAgICAgIC8vIOa4hemZpOW9k+WJjeiKgueCueWtmOWCqOeahOWvueixoVxyXG4gICAgICAgIHRoaXMub2JqZWN0cy5sZW5ndGggPSAwO1xyXG5cclxuICAgICAgICAvLyDpgJLlvZLmuIXpmaTlrZDoioLngrlcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuY2hpbGRyZW5baV0pIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuY2hpbGRyZW5baV0uY2xlYXIoKTsgLy8g6YCS5b2S5riF6Zmk5a2Q6IqC54K5XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNoaWxkcmVuW2ldID0gbnVsbDsgLy8g6YeK5pS+5a2Q6IqC54K5XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIOmHjee9ruWIhuijgueKtuaAgVxyXG4gICAgICAgIHRoaXMuZGl2aWRlZCA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuZGVwdGggPSAwO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyByZW1vdmUobm9kZTpUKTpib29sZWFue1xyXG4gICAgICAgIGxldCBpc1JlbW92ZSA9IGZhbHNlO1xyXG4gICAgICAgIGlmKCF0aGlzLnJlY3QuY29udGFpbnMobm9kZS5yZWN0LHRoaXMuYW5jaG9yUG9pbnRUeXBlKSAmJiAhdGhpcy5yZWN0LmludGVyc2VjdHMobm9kZS5yZWN0LHRoaXMuYW5jaG9yUG9pbnRUeXBlKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gaXNSZW1vdmU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBpbmRleDpudW1iZXIgPSB0aGlzLm9iamVjdHMuaW5kZXhPZihub2RlKTtcclxuICAgICAgICBpZihpbmRleCA+IC0xKXtcclxuICAgICAgICAgICAgdGhpcy5vYmplY3RzLnNwbGljZShpbmRleCwgMSk7XHJcbiAgICAgICAgICAgIGlzUmVtb3ZlID0gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmNoaWxkcmVuW2ldKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNoaWxkcmVuW2ldLnJlbW92ZShub2RlKTsgLy8g6YCS5b2S5riF6Zmk5a2Q6IqC54K5XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGlzUmVtb3ZlO1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IF9kZWNvcmF0b3IsIENvbG9yLCBDb21wb25lbnQsIEV2ZW50S2V5Ym9hcmQsIEV2ZW50VG91Y2gsIEdyYXBoaWNzLCBpbnB1dCwgSW5wdXQsIGluc3RhbnRpYXRlLCBLZXlDb2RlLCBtYXRoLCBOb2RlLCBOb2RlRXZlbnRUeXBlLCBQcmVmYWIsIFNpemUsIFZlYzMsIHZpZXcgfSBmcm9tICdjYyc7XHJcbmltcG9ydCB7IFF1YWRUcmVlLCBRdWFkVHJlZVJlY3QgfSBmcm9tICcuLi9Db21tb24vUXVhZFRyZWUnO1xyXG5pbXBvcnQgeyBHYW1lRWxlbWVudCB9IGZyb20gJy4vR2FtZUVsZW1lbnQnO1xyXG5jb25zdCB7IGNjY2xhc3MsIHByb3BlcnR5IH0gPSBfZGVjb3JhdG9yO1xyXG5cclxuQGNjY2xhc3MoJ1F1YWRUcmVlVGVzdCcpXHJcbmV4cG9ydCBjbGFzcyBRdWFkVHJlZVRlc3QgZXh0ZW5kcyBDb21wb25lbnQge1xyXG5cclxuICAgIEBwcm9wZXJ0eShQcmVmYWIpXHJcbiAgICBwdWJsaWMgZWxlbWVudFByZWZhYjogUHJlZmFiO1xyXG5cclxuICAgIHByaXZhdGUgcXVhZFRyZWU6IFF1YWRUcmVlPEdhbWVFbGVtZW50PiA9IG51bGw7XHJcbiAgICBwcml2YXRlIHNpemU6IFNpemU7XHJcblxyXG4gICAgcHVibGljIGVsZUxpc3QgPSBuZXcgQXJyYXk8R2FtZUVsZW1lbnQ+KCk7XHJcbiAgICBwdWJsaWMgIElzU2hvdzpib29sZWFuID0gdHJ1ZTtcclxuICAgIHB1YmxpYyBxdExpc3Q6IEFycmF5PFF1YWRUcmVlPEdhbWVFbGVtZW50Pj47XHJcbiAgICBwdWJsaWMgY2xpY2tMaXN0OiBBcnJheTxHYW1lRWxlbWVudD47XHJcblxyXG4gICAgcHJpdmF0ZSBpZEluZGV4OiBudW1iZXIgPSAwO1xyXG5cclxuICAgIEBwcm9wZXJ0eShHYW1lRWxlbWVudClcclxuICAgIHB1YmxpYyBteUVsZW1lbnQ6IEdhbWVFbGVtZW50O1xyXG5cclxuICAgIEBwcm9wZXJ0eShHcmFwaGljcylcclxuICAgIHB1YmxpYyBncmFwaGljczogR3JhcGhpY3M7XHJcblxyXG4gICAgcHJpdmF0ZSByYWRpdXM6IG51bWJlciA9IDIwMDtcclxuICAgIHByaXZhdGUgY291bnQ6IG51bWJlciA9IDIwO1xyXG5cclxuICAgIHByb3RlY3RlZCBvbkxvYWQoKTogdm9pZCB7XHJcbiAgICAgICAgLy8gdGhpcy5ncmFwaGljcyA9IHRoaXMuZ2V0Q29tcG9uZW50KEdyYXBoaWNzKTtcclxuICAgICAgICB0aGlzLnNpemUgPSB2aWV3LmdldFZpZXdwb3J0UmVjdCgpO1xyXG4gICAgICAgIGNvbnN0IHJlY3Q6IFF1YWRUcmVlUmVjdCA9IG5ldyBRdWFkVHJlZVJlY3QoMCwgMCwgdGhpcy5zaXplLndpZHRoLCB0aGlzLnNpemUuaGVpZ2h0KTtcclxuICAgICAgICB0aGlzLnF1YWRUcmVlID0gbmV3IFF1YWRUcmVlKHJlY3QpO1xyXG5cclxuICAgICAgICB0aGlzLmVsZUxpc3QgPSBbXTtcclxuICAgICAgICB0aGlzLnF0TGlzdCA9IFtdO1xyXG4gICAgICAgIHRoaXMuY2xpY2tMaXN0ID0gW107XHJcblxyXG4gICAgICAgIGlucHV0Lm9uKElucHV0LkV2ZW50VHlwZS5LRVlfRE9XTiwgdGhpcy5vbktleURvd24sIHRoaXMpXHJcblxyXG4gICAgICAgIHRoaXMubXlFbGVtZW50ID0gdGhpcy5DcmVhdGVFbGVtbnQobnVsbCx0cnVlKTtcclxuXHJcbiAgICAgICAgLy8gdGhpcy5DcmVhdGVFbGVtbnQobWF0aC52MygxMDAsIDEwMCwgMCkpXHJcbiAgICAgICAgXHJcbiAgICAgICAgdGhpcy5ub2RlLm9uKE5vZGVFdmVudFR5cGUuTU9VU0VfRE9XTiwgdGhpcy5vbk1vdXNlRG93biwgdGhpcyk7XHJcblxyXG4gICAgICAgXHJcbiAgICAgICAgLy8gZm9yIChsZXQgaTogbnVtYmVyID0gMDsgaSA8IHRoaXMuY291bnQ7IGkrKyl7XHJcbiAgICAgICAgLy8gICAgIGNvbnN0IGFuZ2xlOiBudW1iZXIgPSAoMiAqIE1hdGguUEkgLyB0aGlzLmNvdW50KSAqIGk7XHJcbiAgICAgICAgLy8gICAgIGNvbnN0IHg6IG51bWJlciA9IHRoaXMubXlFbGVtZW50Lm5vZGUucG9zaXRpb24ueCArIHRoaXMucmFkaXVzICogTWF0aC5jb3MoYW5nbGUpO1xyXG4gICAgICAgIC8vICAgICBjb25zdCB5OiBudW1iZXIgPSB0aGlzLm15RWxlbWVudC5ub2RlLnBvc2l0aW9uLnkgKyB0aGlzLnJhZGl1cyAqIE1hdGguc2luKGFuZ2xlKTtcclxuICAgICAgICAvLyAgICAgdGhpcy5DcmVhdGVFbGVtbnQobWF0aC52Myh4LCB5LCAwKSk7XHJcbiAgICAgICAgLy8gfVxyXG4gICAgICAgIFxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgZHJhd1NpemUoKTogdm9pZCB7IFxyXG4gICAgICAgIHRoaXMuZ3JhcGhpY3MuY2xlYXIoKTtcclxuICAgICAgICB0aGlzLmdyYXBoaWNzLmZpbGxDb2xvciA9IENvbG9yLlJFRDtcclxuICAgICAgICB0aGlzLmdyYXBoaWNzLnN0cm9rZUNvbG9yID0gQ29sb3IuUkVEO1xyXG4gICAgICAgIHRoaXMuZ3JhcGhpY3MubGluZVdpZHRoID0gMTBcclxuICAgICAgICB0aGlzLmdyYXBoaWNzLnJlY3QoLXRoaXMuc2l6ZS53aWR0aCAvIDIsIC10aGlzLnNpemUuaGVpZ2h0IC8gMiwgdGhpcy5zaXplLndpZHRoLCB0aGlzLnNpemUuaGVpZ2h0KTtcclxuICAgICAgICB0aGlzLmdyYXBoaWNzLnN0cm9rZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgb25Nb3VzZURvd24oZXZlbnQ6IEV2ZW50VG91Y2gpOiB2b2lkIHsgXHJcbiAgICAgICAgY29uc29sZS5sb2coXCLovpPlh7rngrnlh7vkuovku7blnZDmoIdcIixldmVudC5nZXRMb2NhdGlvblgoKSxldmVudC5nZXRMb2NhdGlvblkoKSlcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIG9uS2V5RG93bihldmVudDogRXZlbnRLZXlib2FyZCk6IHZvaWQgeyBcclxuICAgICAgICBzd2l0Y2ggKGV2ZW50LmtleUNvZGUpIHtcclxuICAgICAgICAgICAgY2FzZSBLZXlDb2RlLkFSUk9XX0xFRlQ6XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpOiBudW1iZXIgPSAwOyBpIDwgNTAwMDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5DcmVhdGVFbGVtbnQoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIEtleUNvZGUuQVJST1dfUklHSFQ6XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpOiBudW1iZXIgPSAwOyBpIDwgNTA7IGkrKyl7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5DcmVhdGVFbGVtbnQoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIEtleUNvZGUuQVJST1dfVVA6XHJcbiAgICAgICAgICAgICAgICB0aGlzLm15RWxlbWVudCA9IHRoaXMuQ3JlYXRlRWxlbW50KCk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBzdGFydCgpIHtcclxuICAgICAgICB0aGlzLmRyYXdTaXplKCk7XHJcbiAgICB9XHJcblxyXG4gICAgdXBkYXRlKGRlbHRhVGltZTogbnVtYmVyKSB7XHJcbiAgICAgICAgdGhpcy5UcmVlVXBkYXRlKCk7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8vIHByaXZhdGUgdm9pZCBGaXhlZFVwZGF0ZSgpIHtcclxuXHJcbiAgICAvLyB9XHJcblxyXG4gICAgcHJpdmF0ZSBUcmVlVXBkYXRlKCk6IHZvaWR7XHJcbiAgICAgICAgLy8gVHJlZVJvb3QuQ2xlYXIoKTtcclxuICAgICAgICB0aGlzLnF1YWRUcmVlLmNsZWFyKCk7XHJcbiAgICAgICAgdGhpcy5xdExpc3QubGVuZ3RoID0gMDtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuY2xpY2tMaXN0Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY2xpY2tMaXN0W2ldLkNsaWNrKGZhbHNlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5jbGlja0xpc3QubGVuZ3RoID0gMDtcclxuXHJcbiAgICAgICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IHRoaXMuZWxlTGlzdC5sZW5ndGg7IGluZGV4KyspIHtcclxuICAgICAgICAgICAgY29uc3QgZWxlbWVudCA9IHRoaXMuZWxlTGlzdFtpbmRleF07XHJcbiAgICAgICAgICAgIHRoaXMucXVhZFRyZWUuaW5zZXJ0KGVsZW1lbnQpO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLm15RWxlbWVudCkge1xyXG4gICAgICAgICAgICB0aGlzLmNsaWNrTGlzdCA9IHRoaXMucXVhZFRyZWUucXVlcnkodGhpcy5teUVsZW1lbnQucmVjdCk7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5jbGlja0xpc3QubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuY2xpY2tMaXN0W2ldLkNsaWNrKHRydWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy5Jc1Nob3cpIHtcclxuICAgICAgICAgICAgbGV0IHF0TGlzdDogUXVhZFRyZWU8R2FtZUVsZW1lbnQ+W10gPSBbXTtcclxuICAgICAgICAgICAgdGhpcy5xdWFkVHJlZS5nZXRBbGxDaGlsZE5vZGVzKHF0TGlzdClcclxuICAgICAgICAgICAgY29uc3QgcmVjdHMgPSBxdExpc3QubWFwKGUgPT4ge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGUucmVjdDtcclxuICAgICAgICAgICAgfSwgdGhpcyk7XHJcbiAgICAgICAgICAgIHRoaXMuZHJhd1JlY3QocmVjdHMpO1xyXG4gICAgICAgICAgICAvLyBmb3IgKGxldCBpID0gMDsgaSA8IHF0TGlzdC5sZW5ndGg7ICsraSkge1xyXG4gICAgICAgICAgICAgXHJcblxyXG4gICAgICAgICAgICAvLyAgICAgdGhpcy5kcmF3UmVjdChxdExpc3RbaV0ucmVjdCk7XHJcbiAgICAgICAgICAgIC8vIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgfVxyXG5cclxuXHJcbiAgICBwcml2YXRlIGRyYXdSZWN0KHJlY3Q6UXVhZFRyZWVSZWN0W10pOiB2b2lkIHtcclxuICAgICAgICAvLyB0aGlzLmRyYXdTaXplKCk7XHJcbiAgICAgICAgdGhpcy5ncmFwaGljcy5jbGVhcigpO1xyXG5cclxuICAgICAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgcmVjdC5sZW5ndGg7IGluZGV4KyspIHtcclxuICAgICAgICAgICAgY29uc3QgZWxlbWVudCA9IHJlY3RbaW5kZXhdO1xyXG4gICAgICAgICAgICB0aGlzLmdyYXBoaWNzLmZpbGxDb2xvciA9IENvbG9yLlJFRDtcclxuICAgICAgICAgICAgdGhpcy5ncmFwaGljcy5zdHJva2VDb2xvciA9IENvbG9yLllFTExPVztcclxuICAgICAgICAgICAgdGhpcy5ncmFwaGljcy5saW5lV2lkdGggPSA1O1xyXG4gICAgICAgICAgICBjb25zdCB4OiBudW1iZXIgPSBlbGVtZW50LnggLSBlbGVtZW50LndpZHRoIC8gMjtcclxuICAgICAgICAgICAgY29uc3QgeTogbnVtYmVyID0gZWxlbWVudC55IC0gZWxlbWVudC5oZWlnaHQgLyAyO1xyXG4gICAgICAgICAgICBcclxuXHJcbiAgICAgICAgICAgIHRoaXMuZ3JhcGhpY3MuY2lyY2xlKGVsZW1lbnQueCwgZWxlbWVudC55LCAxMCk7XHJcbiAgICAgICAgICAgIHRoaXMuZ3JhcGhpY3MuZmlsbCgpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5ncmFwaGljcy5yZWN0KHgsIHksIGVsZW1lbnQud2lkdGgsIGVsZW1lbnQuaGVpZ2h0KTtcclxuICAgICAgICAgICAgdGhpcy5ncmFwaGljcy5zdHJva2UoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcblxyXG5cclxuXHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIENyZWF0ZUVsZW1udChwb3M/OlZlYzMsaXNNeXNlbGY6Ym9vbGVhbiA9IGZhbHNlKTogR2FtZUVsZW1lbnQge1xyXG4gICAgICAgIGNvbnN0IG5vZGU6IE5vZGUgPSBpbnN0YW50aWF0ZSh0aGlzLmVsZW1lbnRQcmVmYWIpO1xyXG4gICAgICAgIGNvbnN0IGdhbWVFbGVtZW50OiBHYW1lRWxlbWVudCA9IG5vZGUuZ2V0Q29tcG9uZW50KEdhbWVFbGVtZW50KTtcclxuICAgICAgICBub2RlLm5hbWUgPSBgRWxlICR7dGhpcy5pZEluZGV4Kyt9YDtcclxuICAgICAgICBnYW1lRWxlbWVudC5Jbml0KHRoaXMuc2l6ZSxpc015c2VsZik7XHJcbiAgICAgICAgaWYgKCFwb3MpIHtcclxuICAgICAgICAgICAgcG9zID0gbWF0aC52MygwLCAwLCAwKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgbm9kZS5zZXRQb3NpdGlvbihwb3MpO1xyXG4gICAgICAgIG5vZGUucGFyZW50ID0gdGhpcy5ub2RlO1xyXG4gICAgICAgIGlmICghaXNNeXNlbGYpIHtcclxuICAgICAgICAgICAgdGhpcy5lbGVMaXN0LnB1c2goZ2FtZUVsZW1lbnQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZ2FtZUVsZW1lbnQ7XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG4iLCJpbXBvcnQgeyBfZGVjb3JhdG9yLCBDb21wb25lbnQsIEV2ZW50VG91Y2gsIExhYmVsLCBOb2RlLCBOb2RlRXZlbnRUeXBlLCBTcHJpdGUsIFNwcml0ZUZyYW1lIH0gZnJvbSAnY2MnO1xyXG5pbXBvcnQgVXRpbHMgZnJvbSAnLi4vLi4vQ29tbW9uL1V0aWxzJztcclxuaW1wb3J0IHsgVG93ZXJCdWlsZEluZm8gfSBmcm9tICcuL2luZm8vVG93ZXJCdWlsZEluZm8nO1xyXG5pbXBvcnQgeyBUb3dlckNoYXJhY3RlciB9IGZyb20gJy4vVG93ZXJDaGFyYWN0ZXInO1xyXG5pbXBvcnQgeyBUb3dlckNvbmZpZyB9IGZyb20gJy4vVG93ZXJDb25maWcnO1xyXG5pbXBvcnQgeyBUb3dlckxhdW5jaGVyIH0gZnJvbSAnLi9Ub3dlckxhdW5jaGVyJztcclxuY29uc3QgeyBjY2NsYXNzLCBwcm9wZXJ0eSB9ID0gX2RlY29yYXRvcjtcclxuXHJcbkBjY2NsYXNzKCdSZW1vdmVPclVwTGV2ZWwnKVxyXG5leHBvcnQgY2xhc3MgUmVtb3ZlT3JVcExldmVsIGV4dGVuZHMgQ29tcG9uZW50IHtcclxuICAgIHByaXZhdGUgdXBDb3N0TGFiZWw6IExhYmVsID0gbnVsbDtcclxuICAgIHByaXZhdGUgdXBDb3N0U3ByaXRlOiBTcHJpdGUgPSBudWxsO1xyXG4gICAgcHJpdmF0ZSByZW1vdmVCYWNrTGFiZWw6IExhYmVsID0gbnVsbDtcclxuXHJcbiAgICBAcHJvcGVydHkoW1Nwcml0ZUZyYW1lXSlcclxuICAgIHB1YmxpYyB1cFN0YXRlU3ByaXRlRnJhbWVzOiBTcHJpdGVGcmFtZVtdID0gW107XHJcblxyXG4gICAgcHJpdmF0ZSBidWlsZEluZm86IFRvd2VyQnVpbGRJbmZvID0gbnVsbDtcclxuXHJcbiAgICBwcml2YXRlIGlzTWF4TGV2ZWw6IGJvb2xlYW4gPSBmYWxzZTtcclxuXHJcbiAgICBwcml2YXRlIGhhbmRsZXJDYWxsOiAoaGFuZGxlclR5cGU6IG51bWJlciwgYnVpbGRJbmZvOiBUb3dlckJ1aWxkSW5mbykgPT4gdm9pZDtcclxuICAgIHByaXZhdGUgaGFuZGxlck9iajogYW55O1xyXG4gICAgcHJvdGVjdGVkIG9uTG9hZCgpOiB2b2lkIHtcclxuICAgICAgICBjb25zdCB1cENvc3ROb2RlOiBOb2RlID0gVXRpbHMuRmluZENoaWxkQnlOYW1lKHRoaXMubm9kZSwgXCJ1cENvc3RMZXZlbFwiKTtcclxuICAgICAgICBjb25zdCByZW1vdmVCYWNrTm9kZTogTm9kZSA9IFV0aWxzLkZpbmRDaGlsZEJ5TmFtZSh0aGlzLm5vZGUsIFwicmVtb3ZlQmFja0xhYmVsXCIpO1xyXG4gICAgICAgIGNvbnN0IHVwTm9kZTogTm9kZSA9IFV0aWxzLkZpbmRDaGlsZEJ5TmFtZSh0aGlzLm5vZGUsIFwidXBcIik7XHJcbiAgICAgICAgY29uc3QgcmVtb3ZlTm9kZTogTm9kZSA9IFV0aWxzLkZpbmRDaGlsZEJ5TmFtZSh0aGlzLm5vZGUsIFwicmVtb3ZlXCIpO1xyXG4gICAgICAgIGlmICh1cE5vZGUpIHtcclxuICAgICAgICAgICAgdXBOb2RlLm9uKE5vZGVFdmVudFR5cGUuVE9VQ0hfU1RBUlQsIHRoaXMub25DbGlja1VwTGV2ZWwsIHRoaXMpO1xyXG4gICAgICAgICAgICB0aGlzLnVwQ29zdFNwcml0ZSA9IHVwTm9kZS5nZXRDb21wb25lbnQoU3ByaXRlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHJlbW92ZU5vZGUpIHtcclxuICAgICAgICAgICAgcmVtb3ZlTm9kZS5vbihOb2RlRXZlbnRUeXBlLlRPVUNIX1NUQVJULCB0aGlzLm9uQ2xpY2tSZW1vdmVUb3dlciwgdGhpcyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh1cENvc3ROb2RlKSB7XHJcbiAgICAgICAgICAgIHRoaXMudXBDb3N0TGFiZWwgPSB1cENvc3ROb2RlLmdldENvbXBvbmVudChMYWJlbCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChyZW1vdmVCYWNrTm9kZSkge1xyXG4gICAgICAgICAgICB0aGlzLnJlbW92ZUJhY2tMYWJlbCA9IHJlbW92ZUJhY2tOb2RlLmdldENvbXBvbmVudChMYWJlbCk7XHJcblxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHN0YXJ0KCkge1xyXG5cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIG9uQ2xpY2tVcExldmVsKGV2ZW50OiBFdmVudFRvdWNoKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmJ1aWxkSW5mbykge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghdGhpcy5idWlsZEluZm8udG93ZXIpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5pc01heExldmVsKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMuaGFuZGxlckNhbGwgJiYgdGhpcy5oYW5kbGVyT2JqKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaGFuZGxlckNhbGwuY2FsbCh0aGlzLmhhbmRsZXJPYmosIDEsIHRoaXMuYnVpbGRJbmZvKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBvbkNsaWNrUmVtb3ZlVG93ZXIoZXZlbnQ6IEV2ZW50VG91Y2gpOiB2b2lkIHtcclxuICAgICAgICBpZiAoIXRoaXMuYnVpbGRJbmZvKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCF0aGlzLmJ1aWxkSW5mby50b3dlcikge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLmhhbmRsZXJDYWxsICYmIHRoaXMuaGFuZGxlck9iaikge1xyXG4gICAgICAgICAgICB0aGlzLmhhbmRsZXJDYWxsLmNhbGwodGhpcy5oYW5kbGVyT2JqLCAyLCB0aGlzLmJ1aWxkSW5mbyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyB1cGRhdGVJbmZvKGJ1aWxkSW5mbzogVG93ZXJCdWlsZEluZm8sIGhhbmRsZXJDYWxsOiAoaGFuZGxlclR5cGU6IG51bWJlciwgYnVpbGRJbmZvOiBUb3dlckJ1aWxkSW5mbykgPT4gdm9pZCA9IG51bGwsIGNhbGxPYmo6IGFueSA9IG51bGwpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLmJ1aWxkSW5mbyA9IGJ1aWxkSW5mbztcclxuICAgICAgICB0aGlzLmhhbmRsZXJDYWxsID0gaGFuZGxlckNhbGw7XHJcbiAgICAgICAgdGhpcy5oYW5kbGVyT2JqID0gY2FsbE9iajtcclxuICAgICAgICBjb25zdCB0b3dlcjogVG93ZXJDaGFyYWN0ZXIgPSB0aGlzLmJ1aWxkSW5mby50b3dlcjtcclxuICAgICAgICBsZXQgc3ByaXRlRnJhbWVJbmRleDogbnVtYmVyID0gMDtcclxuICAgICAgICBpZiAodGhpcy5idWlsZEluZm8gJiYgdG93ZXIpIHtcclxuICAgICAgICAgICAgY29uc3QgY3VycmVudExldmVsOiBudW1iZXIgPSB0b3dlci5sZXZlbDtcclxuICAgICAgICAgICAgY29uc3QgbmV4dExldmVsRGF0YSA9IFRvd2VyQ29uZmlnLmluc3RhbmNlLmdldFRvd2VyQ29uZmlnKHRvd2VyLnRvd2VySWQsIGN1cnJlbnRMZXZlbCArIDEpO1xyXG4gICAgICAgICAgICBpZiAobmV4dExldmVsRGF0YSkge1xyXG4gICAgICAgICAgICAgICAgc3ByaXRlRnJhbWVJbmRleCA9IFRvd2VyTGF1bmNoZXIuaW5zdGFuY2UudmFsdWUgPj0gbmV4dExldmVsRGF0YS5idWlsZENvc3QgPyAwIDogMTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHNwcml0ZUZyYW1lSW5kZXggPSAyO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMudXBDb3N0TGFiZWwubm9kZS5hY3RpdmUgPSBzcHJpdGVGcmFtZUluZGV4ICE9IDI7XHJcbiAgICAgICAgICAgIHRoaXMuaXNNYXhMZXZlbCA9IHNwcml0ZUZyYW1lSW5kZXggPT0gMjtcclxuICAgICAgICAgICAgaWYgKHRoaXMudXBDb3N0U3ByaXRlKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnVwQ29zdFNwcml0ZS5zcHJpdGVGcmFtZSA9IHRoaXMudXBTdGF0ZVNwcml0ZUZyYW1lc1tzcHJpdGVGcmFtZUluZGV4XTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodGhpcy51cENvc3RMYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy51cENvc3RMYWJlbC5zdHJpbmcgPSBuZXh0TGV2ZWxEYXRhID8gbmV4dExldmVsRGF0YS5idWlsZENvc3QudG9TdHJpbmcoKSA6ICcwJztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb25zdCBjdXJyZW50RGF0YSA9IFRvd2VyQ29uZmlnLmluc3RhbmNlLmdldFRvd2VyQ29uZmlnKHRvd2VyLnRvd2VySWQsIGN1cnJlbnRMZXZlbCk7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnJlbW92ZUJhY2tMYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5yZW1vdmVCYWNrTGFiZWwuc3RyaW5nID0gY3VycmVudERhdGEgPyBjdXJyZW50RGF0YS5yZW1vdmVCYWNrLnRvU3RyaW5nKCkgOiBcIjBcIjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy5idWlsZEluZm8ucmVtb3ZlQmFja0Nvc3QgPSBjdXJyZW50RGF0YSA/IGN1cnJlbnREYXRhLnJlbW92ZUJhY2sgOiAwO1xyXG4gICAgICAgICAgICB0aGlzLmJ1aWxkSW5mby51cExldmVsQ29zdCA9IG5leHRMZXZlbERhdGEgPyBuZXh0TGV2ZWxEYXRhLmJ1aWxkQ29zdCA6IDA7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHVwZGF0ZShkZWx0YVRpbWU6IG51bWJlcikge1xyXG5cclxuICAgIH1cclxufVxyXG5cclxuXHJcbiIsImltcG9ydCB7IF9kZWNvcmF0b3IsIENvbXBvbmVudCwgaW5zdGFudGlhdGUsIG1hdGgsIE5vZGUsIFByZWZhYiwgU3ByaXRlLCBTcHJpdGVGcmFtZSwgVUlUcmFuc2Zvcm0sIFZlYzIgfSBmcm9tICdjYyc7XHJcbmltcG9ydCB7IGNvbmZpZyB9IGZyb20gJy4vY29uZmlnJztcclxuaW1wb3J0IHsgSXRlbUNvbG9yIH0gZnJvbSAnLi9lbnVtJztcclxuaW1wb3J0IHsgQmxvY2sgfSBmcm9tICcuL0Jsb2NrJztcclxuY29uc3QgeyBjY2NsYXNzLCBwcm9wZXJ0eSB9ID0gX2RlY29yYXRvcjtcclxuXHJcbkBjY2NsYXNzKCdSZW5kZXInKVxyXG5leHBvcnQgY2xhc3MgUmVuZGVyIGV4dGVuZHMgQ29tcG9uZW50IHtcclxuXHJcbiAgICBAcHJvcGVydHkoUHJlZmFiKVxyXG4gICAgaXRlbTogUHJlZmFiID0gdW5kZWZpbmVkO1xyXG5cclxuICAgIEBwcm9wZXJ0eShbU3ByaXRlRnJhbWVdKVxyXG4gICAgaXRlbVNwcml0ZUZyYW1lOiBTcHJpdGVGcmFtZVtdID0gW107XHJcblxyXG4gICAgQHByb3BlcnR5KFNwcml0ZUZyYW1lKVxyXG4gICAgYmFja0dyb3VuZEl0ZW1TcHJpdGVGcmFtZTogU3ByaXRlRnJhbWUgPSB1bmRlZmluZWQ7XHJcblxyXG4gICAgQHByb3BlcnR5KE5vZGUpXHJcbiAgICBnYW1lUGFuZWw6IE5vZGUgPSB1bmRlZmluZWQ7XHJcbiAgICBAcHJvcGVydHkoTm9kZSlcclxuICAgIGJhY2tncm91bmRQYW5lbDogTm9kZSA9IHVuZGVmaW5lZDtcclxuXHJcbiAgICBpdGVtQXJyYXk6IE5vZGVbXVtdID0gW107XHJcbiAgICBiYWNrR3JvdW5kQXJyYXk6IE5vZGVbXVtdID0gW107XHJcblxyXG4gICAgcHJvdGVjdGVkIG9uTG9hZCgpOiB2b2lkIHtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGluaXQoKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5pdGVtQXJyYXkgPSBbXTtcclxuICAgICAgICB0aGlzLmJhY2tHcm91bmRBcnJheSA9IFtdO1xyXG4gICAgICAgIGNvbnN0IGhlaWdodDogbnVtYmVyID0gY29uZmlnLnJvdyAqIGNvbmZpZy5ibG9ja0hlaWdodDtcclxuICAgICAgICBjb25zdCB3aWR0aDogbnVtYmVyID0gY29uZmlnLmNvbCAqIGNvbmZpZy5ibG9ja1dpZHRoO1xyXG4gICAgICAgIGNvbnN0IHBhbmVsV2lkdGg6IG51bWJlciA9IDc0MDtcclxuICAgICAgICBjb25zdCBwYW5lbEhlaWdodDogbnVtYmVyID0gMTMzNDtcclxuICAgICAgICBjb25zdCBkaWZmSDogbnVtYmVyID0gTWF0aC5tYXgocGFuZWxIZWlnaHQgLSBoZWlnaHQsIDApO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY29uZmlnLnJvdzsgaSsrKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaXRlbUFycmF5W2ldID0gW107XHJcbiAgICAgICAgICAgIHRoaXMuYmFja0dyb3VuZEFycmF5W2ldID0gW107XHJcbiAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgY29uZmlnLmNvbDsgaisrKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB4OiBudW1iZXIgPSAtIHdpZHRoIC8gMiArIGNvbmZpZy5ibG9ja1dpZHRoIC8gMiArIGogKiBjb25maWcuYmxvY2tXaWR0aDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHk6IG51bWJlciA9IGhlaWdodCAvIDIgLSBjb25maWcuYmxvY2tIZWlnaHQgLyAyIC0gaSAqIGNvbmZpZy5ibG9ja0hlaWdodCAtIGRpZmZIIC8gMjtcclxuICAgICAgICAgICAgICAgIGxldCBiYWNrSXRlbTogTm9kZSA9IHRoaXMuYmFja0dyb3VuZEFycmF5W2ldW2pdO1xyXG4gICAgICAgICAgICAgICAgaWYgKCFiYWNrSXRlbSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGJhY2tJdGVtID0gdGhpcy5jcmVhdGVCYWNrR3JvdW5kSXRlbSh4LCB5KVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgYmFja0l0ZW0uZ2V0Q29tcG9uZW50KFNwcml0ZSkuc3ByaXRlRnJhbWUgPSB0aGlzLmJhY2tHcm91bmRJdGVtU3ByaXRlRnJhbWU7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmJhY2tHcm91bmRBcnJheVtpXVtqXSA9IGJhY2tJdGVtO1xyXG4gICAgICAgICAgICAgICAgbGV0IGl0ZW06IE5vZGUgPSB0aGlzLml0ZW1BcnJheVtpXVtqXVxyXG4gICAgICAgICAgICAgICAgaWYgKCFpdGVtKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaXRlbSA9IHRoaXMuY3JlYXRlSXRlbSh4LCB5KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRoaXMuaXRlbUFycmF5W2ldW2pdID0gaXRlbTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGNyZWF0ZUJhY2tHcm91bmRJdGVtKHg6IG51bWJlciwgeTogbnVtYmVyKTogTm9kZSB7XHJcbiAgICAgICAgY29uc3QgaXRlbTogTm9kZSA9IG5ldyBOb2RlKCk7XHJcbiAgICAgICAgY29uc3Qgc3ByaXRlOiBTcHJpdGUgPSBpdGVtLmFkZENvbXBvbmVudChTcHJpdGUpO1xyXG4gICAgICAgIHNwcml0ZS5zcHJpdGVGcmFtZSA9IHRoaXMuYmFja0dyb3VuZEl0ZW1TcHJpdGVGcmFtZTtcclxuICAgICAgICBzcHJpdGUuc2l6ZU1vZGUgPSBTcHJpdGUuU2l6ZU1vZGUuQ1VTVE9NO1xyXG4gICAgICAgIHRoaXMubm9kZS5hZGRDaGlsZChpdGVtKTtcclxuICAgICAgICBpdGVtLnNldFBvc2l0aW9uKHgsIHkpO1xyXG4gICAgICAgIGl0ZW0uYWRkQ29tcG9uZW50KFVJVHJhbnNmb3JtKS5jb250ZW50U2l6ZSA9IG1hdGguc2l6ZShjb25maWcuYmxvY2tXaWR0aCwgY29uZmlnLmJsb2NrSGVpZ2h0KTtcclxuICAgICAgICByZXR1cm4gaXRlbTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgY3JlYXRlSXRlbSh4OiBudW1iZXIsIHk6IG51bWJlcik6IE5vZGUge1xyXG4gICAgICAgIGNvbnN0IGl0ZW06IE5vZGUgPSBpbnN0YW50aWF0ZSh0aGlzLml0ZW0pO1xyXG4gICAgICAgIHRoaXMuZ2FtZVBhbmVsLmFkZENoaWxkKGl0ZW0pO1xyXG4gICAgICAgIGl0ZW0uZ2V0Q29tcG9uZW50KFNwcml0ZSkuc2l6ZU1vZGUgPSBTcHJpdGUuU2l6ZU1vZGUuQ1VTVE9NO1xyXG4gICAgICAgIGl0ZW0uZ2V0Q29tcG9uZW50KFVJVHJhbnNmb3JtKS5jb250ZW50U2l6ZSA9IG1hdGguc2l6ZShjb25maWcuYmxvY2tXaWR0aCwgY29uZmlnLmJsb2NrSGVpZ2h0KTtcclxuICAgICAgICBpdGVtLnNldFBvc2l0aW9uKHgsIHkpO1xyXG4gICAgICAgIHJldHVybiBpdGVtO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyByZW5kZXIoZGF0YUFycmF5OiBJdGVtQ29sb3JbXVtdKTogdm9pZCB7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb25maWcucm93OyBpKyspIHtcclxuICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBjb25maWcuY29sOyBqKyspIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGNvbG9yOiBJdGVtQ29sb3IgPSBkYXRhQXJyYXlbaV1bal07XHJcbiAgICAgICAgICAgICAgICB0aGlzLml0ZW1BcnJheVtpXVtqXS5nZXRDb21wb25lbnQoU3ByaXRlKS5zcHJpdGVGcmFtZSA9IHRoaXMuaXRlbVNwcml0ZUZyYW1lW2NvbG9yIC0gMV07XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByb3RlY3RlZCBvbkRlc3Ryb3koKTogdm9pZCB7XHJcbiAgICAgICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IHRoaXMuaXRlbUFycmF5Lmxlbmd0aDsgaW5kZXgrKykge1xyXG4gICAgICAgICAgICBjb25zdCBlbGVtZW50cyA9IHRoaXMuaXRlbUFycmF5W2luZGV4XTtcclxuICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBlbGVtZW50cy5sZW5ndGg7IGorKykge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZWxlbWVudCA9IGVsZW1lbnRzW2pdO1xyXG4gICAgICAgICAgICAgICAgaWYgKGVsZW1lbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICBlbGVtZW50LmRlc3Ryb3koKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLml0ZW1BcnJheSA9IFtdO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBwbGF5RWxpbWluYXRlRWZmKGVsaW1pbmF0ZVZlYzI6IFZlYzJbXSk6IFByb21pc2U8YW55PiB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgICAgICAgbGV0IHJlc3VsdDogbnVtYmVyID0gMDtcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBlbGltaW5hdGVWZWMyLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB2MiA9IGVsaW1pbmF0ZVZlYzJbaV07XHJcbiAgICAgICAgICAgICAgICBsZXQgYmxvY2s6IEJsb2NrID0gdGhpcy5pdGVtQXJyYXlbdjIueF1bdjIueV0uZ2V0Q29tcG9uZW50KEJsb2NrKTtcclxuICAgICAgICAgICAgICAgIGlmIChibG9jaykge1xyXG4gICAgICAgICAgICAgICAgICAgIGJsb2NrLnBsYXlFZmYoKS50aGVuKChyOiBib29sZWFuKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXN1bHQgPT0gZWxpbWluYXRlVmVjMi5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfSlcclxuICAgIH1cclxufVxyXG5cclxuXHJcbiIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIFJvYWROb2Rle1xyXG4gICAgcHJpdmF0ZSBfcHg6IG51bWJlcjtcclxuICAgIHByaXZhdGUgX3B5OiBudW1iZXI7XHJcbiAgICBwcml2YXRlIF9jeDogbnVtYmVyO1xyXG4gICAgcHJpdmF0ZSBfY3k6IG51bWJlcjtcclxuICAgIHByaXZhdGUgX2R4OiBudW1iZXI7XHJcbiAgICBwcml2YXRlIF9keTogbnVtYmVyO1xyXG4gICAgcHJpdmF0ZSBfdmFsdWU6IG51bWJlcjtcclxuICAgIHByaXZhdGUgX2Y6IG51bWJlcjtcclxuICAgIHByaXZhdGUgX2c6IG51bWJlcjtcclxuICAgIHByaXZhdGUgX2g6IG51bWJlcjtcclxuICAgIHByaXZhdGUgX3BhcmVudDogUm9hZE5vZGU7XHJcbiAgICBcclxuICAgIC8vLS0tLS0tLS0tLS0tLeS6jOWghuWPieWtmOWCqOe7k+aehC0tLS0tLS0tLS0tLS0tLS0tXHJcbiAgICBwcml2YXRlIF90cmVlUGFyZW50OiBSb2FkTm9kZSA9IG51bGw7IC8v5LqM5aCG5Y+J57uT5p6E55qE54i26IqC54K5XHJcblxyXG4gICAgcHJpdmF0ZSBfbGVmdDogUm9hZE5vZGUgPSBudWxsOyAvL+S6jOWghuWPiee7k+aehOeahOW3puWtkOiKgueCuVxyXG5cclxuICAgIHByaXZhdGUgX3JpZ2h0OiBSb2FkTm9kZSA9IG51bGw7IC8v5LqM5aCG5Y+J57uT5p6E55qE5Y+z5a2Q6IqC54K5XHJcblxyXG4gICAgcHJpdmF0ZSBfb3BlblRhZzogbnVtYmVyID0gMDsgLy/mmK/lkKblnKjlvIDlkK/liJfooajmoIforrBcclxuXHJcbiAgICBwcml2YXRlIF9jbG9zZVRhZzogbnVtYmVyID0gMDsgLy/mmK/lkKblnKjlhbPpl63liJfooajmoIforrBcclxuXHJcblxyXG4gICAgcHVibGljIHJlc2V0VHJlZSgpOiB2b2lke1xyXG4gICAgICAgIHRoaXMuX3RyZWVQYXJlbnQgPSBudWxsO1xyXG4gICAgICAgIHRoaXMuX2xlZnQgPSBudWxsO1xyXG4gICAgICAgIHRoaXMuX3JpZ2h0ID0gbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0IHB4KCk6IG51bWJlcntcclxuICAgICAgICByZXR1cm4gdGhpcy5fcHg7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNldCBweCh2YWx1ZTogbnVtYmVyKSB7XHJcbiAgICAgICAgdGhpcy5fcHggPSB2YWx1ZTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgcHVibGljIGdldCBweSgpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9weTtcclxuICAgIH1cclxuICAgIHB1YmxpYyBzZXQgcHkodmFsdWU6IG51bWJlcikge1xyXG4gICAgICAgIHRoaXMuX3B5ID0gdmFsdWU7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldCBjeCgpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9jeDtcclxuICAgIH1cclxuICAgIHB1YmxpYyBzZXQgY3godmFsdWU6IG51bWJlcikge1xyXG4gICAgICAgIHRoaXMuX2N4ID0gdmFsdWU7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldCBjeSgpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9jeTtcclxuICAgIH1cclxuICAgIHB1YmxpYyBzZXQgY3kodmFsdWU6IG51bWJlcikge1xyXG4gICAgICAgIHRoaXMuX2N5ID0gdmFsdWU7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldCBkeCgpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9keDtcclxuICAgIH1cclxuICAgIHB1YmxpYyBzZXQgZHgodmFsdWU6IG51bWJlcikge1xyXG4gICAgICAgIHRoaXMuX2R4ID0gdmFsdWU7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldCBkeSgpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9keTtcclxuICAgIH1cclxuICAgIHB1YmxpYyBzZXQgZHkodmFsdWU6IG51bWJlcikge1xyXG4gICAgICAgIHRoaXMuX2R5ID0gdmFsdWU7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldCB2YWx1ZSgpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl92YWx1ZTtcclxuICAgIH1cclxuICAgIHB1YmxpYyBzZXQgdmFsdWUodmFsdWU6IG51bWJlcikge1xyXG4gICAgICAgIHRoaXMuX3ZhbHVlID0gdmFsdWU7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldCBmKCk6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2Y7XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgc2V0IGYodmFsdWU6IG51bWJlcikge1xyXG4gICAgICAgIHRoaXMuX2YgPSB2YWx1ZTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0IGcoKTogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fZztcclxuICAgIH1cclxuICAgIHB1YmxpYyBzZXQgZyh2YWx1ZTogbnVtYmVyKSB7XHJcbiAgICAgICAgdGhpcy5fZyA9IHZhbHVlO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXQgaCgpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9oO1xyXG4gICAgfVxyXG4gICAgcHVibGljIHNldCBoKHZhbHVlOiBudW1iZXIpIHtcclxuICAgICAgICB0aGlzLl9oID0gdmFsdWU7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldCBwYXJlbnQoKTogUm9hZE5vZGUge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9wYXJlbnQ7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNldCBwYXJlbnQodmFsdWU6IFJvYWROb2RlKSB7XHJcbiAgICAgICAgdGhpcy5fcGFyZW50ID0gdmFsdWU7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8vLS0tLS0tLS0tLS0tLeS6jOWghuWPieWtmOWCqOe7k+aehC0tLS0tLS0tLS0tLS0tLS0tXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDkuozloIblj4nnu5PmnoTnmoTniLboioLngrlcclxuICAgICAqL1xyXG4gICAgcHVibGljIGdldCB0cmVlUGFyZW50KCk6IFJvYWROb2RlIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fdHJlZVBhcmVudDtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc2V0IHRyZWVQYXJlbnQodmFsdWU6IFJvYWROb2RlKSB7XHJcbiAgICAgICAgdGhpcy5fdHJlZVBhcmVudCA9IHZhbHVlO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5LqM5aCG5Y+J57uT5p6E55qE5bem5a2Q6IqC54K5XHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBnZXQgbGVmdCgpOiBSb2FkTm9kZSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2xlZnQ7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNldCBsZWZ0KHZhbHVlOiBSb2FkTm9kZSkge1xyXG4gICAgICAgIHRoaXMuX2xlZnQgPSB2YWx1ZTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOS6jOWghuWPiee7k+aehOeahOWPs+WtkOiKgueCuVxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZ2V0IHJpZ2h0KCk6IFJvYWROb2RlIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fcmlnaHQ7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNldCByaWdodCh2YWx1ZTogUm9hZE5vZGUpIHtcclxuICAgICAgICB0aGlzLl9yaWdodCA9IHZhbHVlO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5piv5ZCm5Zyo5byA5ZCv5YiX6KGo5qCH6K6wXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBnZXQgb3BlblRhZygpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9vcGVuVGFnO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzZXQgb3BlblRhZyh2YWx1ZTogbnVtYmVyKSB7XHJcbiAgICAgICAgdGhpcy5fb3BlblRhZyA9IHZhbHVlO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5piv5ZCm5Zyo5YWz6Zet5YiX6KGo5qCH6K6wXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBnZXQgY2xvc2VUYWcoKTogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fY2xvc2VUYWc7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNldCBjbG9zZVRhZyh2YWx1ZTogbnVtYmVyKSB7XHJcbiAgICAgICAgdGhpcy5fY2xvc2VUYWcgPSB2YWx1ZTtcclxuICAgIH1cclxufSIsImltcG9ydCB7IEdhbWVDb25zdCB9IGZyb20gXCIuLi9HYW1lQ29uc3RcIjtcclxuaW1wb3J0IHsgRmlnaHRIZXJvSW5mbyB9IGZyb20gXCIuLi9pbmZvcy9GaWdodEhlcm9JbmZvXCI7XHJcbmltcG9ydCB7IEdhbWVFbnRpdHkgfSBmcm9tIFwiLi9HYW1lRW50aXR5XCI7XHJcblxyXG4vKipcclxuICogQGZpbGVOYW1lIFJvbGVFbnRpdHkudHNcclxuICogQGF1dGhvciB6aGFuZ3Fpb25nXHJcbiAqIEBkYXRlIDIwMjQvMTIvMjcgMTk6Mjg6MDJcIlxyXG4gKiBAZGVzY3JpcHRpb25cclxuICovXHJcbmV4cG9ydCBjbGFzcyBSb2xlRW50aXR5IGV4dGVuZHMgR2FtZUVudGl0eSB7XHJcbiAgICBkYXRhOiBGaWdodEhlcm9JbmZvO1xyXG5cclxuICAgIHByaXZhdGUgc2NhbGVTaXplOiBudW1iZXIgPSAwLjQ7XHJcblxyXG4gICAgcHVibGljIHN0YXR1czogbnVtYmVyID0gMDtcclxuXHJcbiAgICBwdWJsaWMgaW5pdCgpOiB2b2lkIHtcclxuXHJcbiAgICAgICAgc3VwZXIuaW5pdCgpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBhc3luYyBzZXREYXRhKGRhdGE6IEZpZ2h0SGVyb0luZm8pOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgICAgICB0aGlzLmRhdGEgPSBkYXRhO1xyXG4gICAgICAgIHRoaXMuc2V0SWQoZGF0YS5nZXRFbnRpdHlJZCgpKTtcclxuICAgICAgICAvLyB0aGlzLnNldExheWVyKGRhdGEuaGVyb0NvbmZpZy5sYXllcik7XHJcbiAgICAgICAgdGhpcy5zZXRMYXllcihHYW1lQ29uc3QuUk9MRV9MQVlFUik7XHJcbiAgICAgICAgdGhpcy5zZXRTY2FsZSh0aGlzLnNjYWxlU2l6ZSwgdGhpcy5zY2FsZVNpemUpO1xyXG4gICAgICAgIHRoaXMuc2V0U3BlZWQoZGF0YS5oZXJvQ29uZmlnLnNwZWVkKTtcclxuXHJcbiAgICB9XHJcblxyXG5cclxufSIsImltcG9ydCB7IF9kZWNvcmF0b3IsIENvbXBvbmVudCwgZHJhZ29uQm9uZXMsIG1hdGgsIE5vZGUsIFByb2dyZXNzQmFyLCBTcHJpdGUgfSBmcm9tICdjYyc7XHJcbmltcG9ydCBVdGlscyBmcm9tICcuLi8uLi9Db21tb24vVXRpbHMnO1xyXG5pbXBvcnQgeyBJUlBHTW9kZWxEYXRhLCBSUEdDb25maWcgfSBmcm9tICcuL1JQR0NvbmZpZyc7XHJcbmltcG9ydCB7IFJQR01vZGVsQW5pbU5hbWUsIFJQR01vZGVsRGlyZWN0aW9uIH0gZnJvbSAnLi9FbnVtJztcclxuY29uc3QgeyBjY2NsYXNzLCBwcm9wZXJ0eSB9ID0gX2RlY29yYXRvcjtcclxuXHJcbkBjY2NsYXNzKCdSb2xlRW50aXR5JylcclxuZXhwb3J0IGNsYXNzIFJvbGVFbnRpdHkgZXh0ZW5kcyBDb21wb25lbnQge1xyXG5cclxuICAgIHByaXZhdGUgc3BOb2RlOiBOb2RlO1xyXG4gICAgcHJpdmF0ZSBwcm9ncmVzc05vZGU6IE5vZGU7XHJcblxyXG4gICAgcHJpdmF0ZSBtb2RlbERhdGE6IElSUEdNb2RlbERhdGE7XHJcblxyXG4gICAgcHJpdmF0ZSBkaXJldGlvbjogUlBHTW9kZWxEaXJlY3Rpb247XHJcbiAgICBwcml2YXRlIGN1cnJlbnREaXJldGlvbjogUlBHTW9kZWxEaXJlY3Rpb247XHJcbiAgICBwcm90ZWN0ZWQgb25Mb2FkKCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuc3BOb2RlID0gVXRpbHMuRmluZENoaWxkQnlOYW1lKHRoaXMubm9kZSwgXCJwbGF5ZXJcIik7XHJcbiAgICAgICAgdGhpcy5wcm9ncmVzc05vZGUgPSBVdGlscy5GaW5kQ2hpbGRCeU5hbWUodGhpcy5ub2RlLCBcIlByb2dyZXNzQmFyXCIpO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXJ0KCkge1xyXG5cclxuICAgIH1cclxuXHJcbiAgICB1cGRhdGUoZGVsdGFUaW1lOiBudW1iZXIpIHtcclxuICAgICAgICBcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgcGxheUFuaW1hdGlvbihuYW1lOiBSUEdNb2RlbEFuaW1OYW1lLHRpbWU6bnVtYmVyID0gMSk6IFByb21pc2U8Ym9vbGVhbj57XHJcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuc3BOb2RlKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBkciA9IHRoaXMuc3BOb2RlLmdldENvbXBvbmVudChkcmFnb25Cb25lcy5Bcm1hdHVyZURpc3BsYXkpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGRyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRpbWUgIT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkci5hZGRFdmVudExpc3RlbmVyKGRyYWdvbkJvbmVzLkV2ZW50T2JqZWN0LkNPTVBMRVRFLCAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LCB0aGlzKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkci5wbGF5QW5pbWF0aW9uKG5hbWUsIHRpbWUpXHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRyLnBsYXlBbmltYXRpb24obmFtZSwgdGltZSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSh0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlamVjdChmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByZWplY3QoZmFsc2UpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSlcclxuICAgIH1cclxuXHJcbiAgICBzZXRNb2RlRGF0YShkYXRhOiBJUlBHTW9kZWxEYXRhKTogdm9pZHtcclxuICAgICAgICB0aGlzLm1vZGVsRGF0YSA9IGRhdGE7XHJcbiAgICAgICAgdGhpcy5kaXJldGlvbiA9IGRhdGEuY2FtcCA9PSAwID8gUlBHTW9kZWxEaXJlY3Rpb24uTGVmdCA6IFJQR01vZGVsRGlyZWN0aW9uLlJpZ2h0O1xyXG4gICAgICAgIHRoaXMuY3VycmVudERpcmV0aW9uID0gdGhpcy5kaXJldGlvbjtcclxuICAgICAgICBpZiAoZGF0YS5jYW1wID09IDEpIHtcclxuICAgICAgICAgICAgdGhpcy5ub2RlLnNldFNjYWxlKC0xLCAxKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gdGhpcy5zZXRDb2xvcihkYXRhLmluZGV4KTtcclxuICAgICAgICB0aGlzLnNldEhwKGRhdGEuaHAgLyAxMDApO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog6L2s5o2i5pa55ZCRXHJcbiAgICAgKiBAcmV0dXJucyBcclxuICAgICAqL1xyXG4gICAgcHVibGljIHJvdGF0aW9uRGlyZXRpb24oKTogYm9vbGVhbntcclxuICAgICAgICBsZXQgbmV3RGlyZXRpb246IFJQR01vZGVsRGlyZWN0aW9uID0gbnVsbDtcclxuICAgICAgICBpZiAodGhpcy5jdXJyZW50RGlyZXRpb24gPT0gUlBHTW9kZWxEaXJlY3Rpb24uTGVmdCkge1xyXG4gICAgICAgICAgICBuZXdEaXJldGlvbiA9IFJQR01vZGVsRGlyZWN0aW9uLlJpZ2h0O1xyXG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5jdXJyZW50RGlyZXRpb24gPT0gUlBHTW9kZWxEaXJlY3Rpb24uUmlnaHQpIHtcclxuICAgICAgICAgICAgbmV3RGlyZXRpb24gPSBSUEdNb2RlbERpcmVjdGlvbi5MZWZ0O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IHNhY2xlWDogbnVtYmVyID0gMTtcclxuICAgICAgICBpZiAobmV3RGlyZXRpb24gPT09IFJQR01vZGVsRGlyZWN0aW9uLlJpZ2h0KSB7XHJcbiAgICAgICAgICAgIHNhY2xlWCA9IC0xO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLm5vZGUuc2V0U2NhbGUoc2FjbGVYLCAxKTtcclxuICAgICAgICB0aGlzLmN1cnJlbnREaXJldGlvbiA9IG5ld0RpcmV0aW9uO1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzZXRDb2xvcihpbmRleDogbnVtYmVyKTogdm9pZHtcclxuICAgICAgICBpZiAodGhpcy5zcE5vZGUpIHtcclxuICAgICAgICAgICAgY29uc3QgY29sb3I6IHN0cmluZyA9IFJQR0NvbmZpZy5pbnMuY29sb3JzW2luZGV4XTtcclxuICAgICAgICAgICAgdGhpcy5zcE5vZGUuZ2V0Q29tcG9uZW50KFNwcml0ZSkuY29sb3IgPSBtYXRoLmNvbG9yKGNvbG9yKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgc2V0SHAodmFsdWU6IG51bWJlcik6IHZvaWR7XHJcbiAgICAgICAgaWYgKHRoaXMucHJvZ3Jlc3NOb2RlKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHByb2dyZXNzOiBQcm9ncmVzc0JhciA9IHRoaXMucHJvZ3Jlc3NOb2RlLmdldENvbXBvbmVudChQcm9ncmVzc0Jhcik7XHJcbiAgICAgICAgICAgIGlmIChwcm9ncmVzcykge1xyXG4gICAgICAgICAgICAgICAgcHJvZ3Jlc3MucHJvZ3Jlc3MgPSB2YWx1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuXHJcbiIsImltcG9ydCB7IG1hdGgsIFZlYzIgfSBmcm9tIFwiY2NcIjtcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgSVJQR01vZGVsRGF0YXtcclxuICAgIGluZGV4PzogbnVtYmVyO1xyXG4gICAgcG9zOiBWZWMyO1xyXG4gICAgYXR0YWNrOiBudW1iZXI7XHJcbiAgICBkZWY6IG51bWJlcjtcclxuICAgIHNwZWVkOiBudW1iZXI7XHJcbiAgICBocDogbnVtYmVyO1xyXG4gICAgY2FtcDogbnVtYmVyO1xyXG4gICAgbG9uZzogYm9vbGVhbjtcclxuICAgIHN0YXRlPzogUlBHU3RhdGVUeXBlO1xyXG59XHJcblxyXG5leHBvcnQgZW51bSBSUEdTdGF0ZVR5cGV7XHJcbiAgICBEZWF0aCA9IDAsXHJcbiAgICBBd2FpdCxcclxuICAgIE1vdmUsXHJcbiAgICBBdHRhY2ssXHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBSUEdDb25maWcgeyBcclxuICAgIHByaXZhdGUgc3RhdGljIF9pbnN0OiBSUEdDb25maWc7XHJcbiAgICBwdWJsaWMgc3RhdGljIGdldCBpbnMoKTogUlBHQ29uZmlne1xyXG4gICAgICAgIGlmICghdGhpcy5faW5zdCkge1xyXG4gICAgICAgICAgICB0aGlzLl9pbnN0ID0gbmV3IFJQR0NvbmZpZygpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcy5faW5zdDtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgbGVmdERhdGFzOiBJUlBHTW9kZWxEYXRhW107XHJcbiAgICBwdWJsaWMgcmlnaHREYXRhczogSVJQR01vZGVsRGF0YVtdO1xyXG5cclxuICAgIHB1YmxpYyBjb2xvcnM6IHN0cmluZ1tdID0gW107XHJcbiAgICBwdWJsaWMgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgdGhpcy5pbml0RGF0YSgpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgaW5pdERhdGEoKTogdm9pZHtcclxuICAgICAgICB0aGlzLmNvbG9ycyA9IFtcclxuICAgICAgICAgICAgXCIjRjdBRUFFXCIsXHJcbiAgICAgICAgICAgIFwiIzlGQURFNFwiLFxyXG4gICAgICAgICAgICBcIiNFOUU1OEFcIixcclxuICAgICAgICAgICAgXCIjQjZEMzhCXCIsXHJcbiAgICAgICAgICAgIFwiIzhCRDNCRlwiLFxyXG5cclxuICAgICAgICAgICAgXCIjRUM0NzI3XCIsXHJcbiAgICAgICAgICAgIFwiI0QxQjYyOFwiLFxyXG4gICAgICAgICAgICBcIiM1NDhCMjFcIixcclxuICAgICAgICAgICAgXCIjMkVCMTlDXCIsXHJcbiAgICAgICAgICAgIFwiIzJFNERCMVwiXHJcbiAgICAgICAgXVxyXG4gICAgICAgIHRoaXMubGVmdERhdGFzID0gW1xyXG4gICAgICAgICAgICA8SVJQR01vZGVsRGF0YT57XHJcbiAgICAgICAgICAgICAgICBpbmRleDogMCxcclxuICAgICAgICAgICAgICAgIGF0dGFjazogMzAsXHJcbiAgICAgICAgICAgICAgICBkZWY6IDUsXHJcbiAgICAgICAgICAgICAgICBzcGVlZDogMTUsXHJcbiAgICAgICAgICAgICAgICBocDogMTAwLFxyXG4gICAgICAgICAgICAgICAgY2FtcDogMCxcclxuICAgICAgICAgICAgICAgIGxvbmc6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgcG9zOiBtYXRoLnYyKC0xMDQuODY5LCAyMzIpLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICA8SVJQR01vZGVsRGF0YT57XHJcbiAgICAgICAgICAgICAgICBpbmRleDogMSxcclxuICAgICAgICAgICAgICAgIGF0dGFjazogMzUsXHJcbiAgICAgICAgICAgICAgICBkZWY6IDEwLFxyXG4gICAgICAgICAgICAgICAgc3BlZWQ6IDIwLFxyXG4gICAgICAgICAgICAgICAgaHA6IDEwMCxcclxuICAgICAgICAgICAgICAgIGNhbXA6IDAsXHJcbiAgICAgICAgICAgICAgICBsb25nOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgIHBvczogbWF0aC52MigtMTA0Ljg2OSwgLTM3LjUzNSksXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIDxJUlBHTW9kZWxEYXRhPntcclxuICAgICAgICAgICAgICAgIGluZGV4OiAyLFxyXG4gICAgICAgICAgICAgICAgYXR0YWNrOiA0MCxcclxuICAgICAgICAgICAgICAgIGRlZjogMTUsXHJcbiAgICAgICAgICAgICAgICBzcGVlZDogMzUsXHJcbiAgICAgICAgICAgICAgICBocDogMTAwLFxyXG4gICAgICAgICAgICAgICAgY2FtcDogMCxcclxuICAgICAgICAgICAgICAgIGxvbmc6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgcG9zOiBtYXRoLnYyKC0yNTAsIDM4OS4yMjgpLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICA8SVJQR01vZGVsRGF0YT57XHJcbiAgICAgICAgICAgICAgICBpbmRleDogMyxcclxuICAgICAgICAgICAgICAgIGF0dGFjazogNTUsXHJcbiAgICAgICAgICAgICAgICBkZWY6IDEwLFxyXG4gICAgICAgICAgICAgICAgc3BlZWQ6IDQwLFxyXG4gICAgICAgICAgICAgICAgaHA6IDEwMCxcclxuICAgICAgICAgICAgICAgIGNhbXA6IDAsXHJcbiAgICAgICAgICAgICAgICBsb25nOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgIHBvczogbWF0aC52MigtMjUwLCAxNjEuNDA3KSxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgPElSUEdNb2RlbERhdGE+e1xyXG4gICAgICAgICAgICAgICAgaW5kZXg6IDQsXHJcbiAgICAgICAgICAgICAgICBhdHRhY2s6IDQwLFxyXG4gICAgICAgICAgICAgICAgZGVmOiA1LFxyXG4gICAgICAgICAgICAgICAgc3BlZWQ6IDUwLFxyXG4gICAgICAgICAgICAgICAgaHA6IDEwMCxcclxuICAgICAgICAgICAgICAgIGNhbXA6IDAsXHJcbiAgICAgICAgICAgICAgICBsb25nOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgIHBvczogbWF0aC52MigtMjUwLCAtOTguNTAyKSxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICBdO1xyXG4gICAgICAgIHRoaXMucmlnaHREYXRhcyA9IFtcclxuICAgICAgICAgICAgPElSUEdNb2RlbERhdGE+e1xyXG4gICAgICAgICAgICAgICAgaW5kZXg6IDUsXHJcbiAgICAgICAgICAgICAgICBhdHRhY2s6IDIwLFxyXG4gICAgICAgICAgICAgICAgZGVmOiA1LFxyXG4gICAgICAgICAgICAgICAgc3BlZWQ6IDE1LFxyXG4gICAgICAgICAgICAgICAgaHA6IDEwMCxcclxuICAgICAgICAgICAgICAgIGNhbXA6IDEsXHJcbiAgICAgICAgICAgICAgICBsb25nOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgIHBvczogbWF0aC52MigxMTkuNzQzLCAyMzIpLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICA8SVJQR01vZGVsRGF0YT57XHJcbiAgICAgICAgICAgICAgICBpbmRleDogNixcclxuICAgICAgICAgICAgICAgIGF0dGFjazogMzUsXHJcbiAgICAgICAgICAgICAgICBkZWY6IDEwLFxyXG4gICAgICAgICAgICAgICAgc3BlZWQ6IDIwLFxyXG4gICAgICAgICAgICAgICAgaHA6IDEwMCxcclxuICAgICAgICAgICAgICAgIGNhbXA6IDEsXHJcbiAgICAgICAgICAgICAgICBsb25nOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgIHBvczogbWF0aC52MigxMTkuNzQzLCAtMzcuNTM1KSxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgPElSUEdNb2RlbERhdGE+e1xyXG4gICAgICAgICAgICAgICAgaW5kZXg6IDcsXHJcbiAgICAgICAgICAgICAgICBhdHRhY2s6IDQwLFxyXG4gICAgICAgICAgICAgICAgZGVmOiAxNSxcclxuICAgICAgICAgICAgICAgIHNwZWVkOiAzNSxcclxuICAgICAgICAgICAgICAgIGhwOiAxMDAsXHJcbiAgICAgICAgICAgICAgICBjYW1wOiAxLFxyXG4gICAgICAgICAgICAgICAgbG9uZzogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICBwb3M6IG1hdGgudjIoMjUwLCAzODkuMjI4KSxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgPElSUEdNb2RlbERhdGE+e1xyXG4gICAgICAgICAgICAgICAgaW5kZXg6IDgsXHJcbiAgICAgICAgICAgICAgICBhdHRhY2s6IDQ1LFxyXG4gICAgICAgICAgICAgICAgZGVmOiAxMCxcclxuICAgICAgICAgICAgICAgIHNwZWVkOiA0MCxcclxuICAgICAgICAgICAgICAgIGhwOiAxMDAsXHJcbiAgICAgICAgICAgICAgICBjYW1wOiAxLFxyXG4gICAgICAgICAgICAgICAgbG9uZzogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICBwb3M6IG1hdGgudjIoMjUwLCAxNjEuNDA3KSxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgPElSUEdNb2RlbERhdGE+e1xyXG4gICAgICAgICAgICAgICAgaW5kZXg6IDksXHJcbiAgICAgICAgICAgICAgICBhdHRhY2s6IDUwLFxyXG4gICAgICAgICAgICAgICAgZGVmOiA1LFxyXG4gICAgICAgICAgICAgICAgc3BlZWQ6IDUwLFxyXG4gICAgICAgICAgICAgICAgaHA6IDEwMCxcclxuICAgICAgICAgICAgICAgIGNhbXA6IDEsXHJcbiAgICAgICAgICAgICAgICBsb25nOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgIHBvczogbWF0aC52MigyNTAsIC05OC41MDIpLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIF1cclxuICAgIH1cclxufSIsImltcG9ydCB7IF9kZWNvcmF0b3IsIENvbXBvbmVudCwgTm9kZSwgU3ByaXRlRnJhbWUgfSBmcm9tICdjYyc7XHJcbmNvbnN0IHsgY2NjbGFzcywgcHJvcGVydHkgfSA9IF9kZWNvcmF0b3I7XHJcblxyXG5AY2NjbGFzcygnUlBHTGF1bmNoZXInKVxyXG5leHBvcnQgY2xhc3MgUlBHTGF1bmNoZXIgZXh0ZW5kcyBDb21wb25lbnQge1xyXG5cclxuICAgIHB1YmxpYyBzdGF0aWMgaW5zOiBSUEdMYXVuY2hlcjtcclxuXHJcbiAgICBwcm90ZWN0ZWQgb25Mb2FkKCk6IHZvaWQge1xyXG4gICAgICAgIGlmIChSUEdMYXVuY2hlci5pbnMpIHtcclxuICAgICAgICAgICAgdGhpcy5kZXN0cm95KCk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9IGVsc2UgeyBcclxuICAgICAgICAgICAgUlBHTGF1bmNoZXIuaW5zID0gdGhpcztcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgc3RhcnQoKSB7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIHVwZGF0ZShkZWx0YVRpbWU6IG51bWJlcikge1xyXG4gICAgICAgIFxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgc2VlZDogbnVtYmVyID0gNTtcclxuICAgIHByaXZhdGUgaW5pdFNlZWQ6IG51bWJlciA9IDU7XHJcbiAgICBwcml2YXRlIGxvZ1JhbmRvbUFycmF5OiBudW1iZXJbXSA9IFtdO1xyXG5cclxuICAgIHB1YmxpYyBzZXRSYW5kb21TZWVkKHNlZWQ6IG51bWJlcik6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuaW5pdFNlZWQgPSBzZWVkO1xyXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCLmlLbliLDpmo/mnLrmlbBcIiwgdGhpcy5pbml0U2VlZCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNlZWRSYW5kb20oKTogbnVtYmVyIHtcclxuICAgICAgICBpZiAodGhpcy5sb2dSYW5kb21BcnJheS5sZW5ndGggPCAzMCkge1xyXG4gICAgICAgICAgICB0aGlzLmxvZ1JhbmRvbUFycmF5LnB1c2godGhpcy5zZWVkKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5zZWVkID0gKHRoaXMuc2VlZCAqIDkzMDEgKyA0OTI5NykgJSAyMzMyODA7XHJcbiAgICAgICAgY29uc3QgdmFsdWU6IG51bWJlciA9IHRoaXMuc2VlZCAvIDIzMzI4MC4wO1xyXG4gICAgICAgIHJldHVybiB2YWx1ZTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAgICAqIOmaj+acuuiOt+W+l2ludOaVtOaVsCBcclxuICAgICAgICAqIEBwYXJhbSBtaW5OdW065pyA5bCP6IyD5Zu0KDDlvIDlp4spXHJcbiAgICAgICAgKiBAcGFyYW0gbWF4TnVtOuacgOWkp+iMg+WbtFxyXG4gICAgICAgICogQHBhcmFtIHN0ZXBMZW465aKe5Yqg6IyD5Zu077yI5pW05pWw77yM6buY6K6k5Li6Me+8iVxyXG4gICAgICAgICogQHJldHVybiBcclxuICAgICAgICAqL1xyXG4gICAgcHVibGljIHJhbmRvbUludChtaW5OdW06IG51bWJlciwgbWF4TnVtOiBudW1iZXIgPSAwLCBzdGVwTGVuOiBudW1iZXIgPSAxKTogbnVtYmVyIHtcclxuICAgICAgICBpZiAobWluTnVtID4gbWF4TnVtKSB7XHJcbiAgICAgICAgICAgIHZhciBuVGVtcDogbnVtYmVyID0gbWluTnVtO1xyXG4gICAgICAgICAgICBtaW5OdW0gPSBtYXhOdW07XHJcbiAgICAgICAgICAgIG1heE51bSA9IG5UZW1wO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgbkRlbHRhUmFuZ2U6IG51bWJlciA9IChtYXhOdW0gLSBtaW5OdW0pICsgKDEgKiBzdGVwTGVuKTtcclxuICAgICAgICB2YXIgblJhbmRvbU51bWJlcjogbnVtYmVyID0gdGhpcy5zZWVkUmFuZG9tKCkgKiBuRGVsdGFSYW5nZTtcclxuICAgICAgICBuUmFuZG9tTnVtYmVyICs9IG1pbk51bTtcclxuICAgICAgICByZXR1cm4gTWF0aC5mbG9vcihuUmFuZG9tTnVtYmVyIC8gc3RlcExlbikgKiBzdGVwTGVuO1xyXG4gICAgfVxyXG59XHJcblxyXG5cclxuIiwiaW1wb3J0IHsgX2RlY29yYXRvciwgQ29tcG9uZW50LCBFbXB0eURldmljZSwgbWF0aCwgbmV4dFBvdzIsIE5vZGUsIHBhdGgsIFR3ZWVuLCB0d2VlbiB9IGZyb20gJ2NjJztcclxuaW1wb3J0IEJhc2VWaWV3IGZyb20gJy4uLy4uL3VpL0Jhc2VWaWV3JztcclxuaW1wb3J0IHsgcmVnaXN0ZXJWaWV3IH0gZnJvbSAnLi4vLi4vdWkvVmlld1JlZ2lzdGVyTWdyJztcclxuaW1wb3J0IHsgUGFuZWxUeXBlIH0gZnJvbSAnLi4vLi4vdWkvUGFuZWxFbnVtJztcclxuaW1wb3J0IHsgTGF5ZXJUeXBlIH0gZnJvbSAnLi4vLi4vdWkvTGF5ZXJNYW5hZ2VyJztcclxuaW1wb3J0IHsgSVJQR01vZGVsRGF0YSwgUlBHQ29uZmlnLCBSUEdTdGF0ZVR5cGUgfSBmcm9tICcuL1JQR0NvbmZpZyc7XHJcbmltcG9ydCBWaWV3Q29uc3QgZnJvbSAnLi4vLi4vdWkvVmlld0NvbnN0JztcclxuaW1wb3J0IEFzc2V0TWdyIGZyb20gJy4uLy4uL0NvbW1vbi9Bc3NldE1ncic7XHJcbmltcG9ydCB7IFJQR0xhdW5jaGVyIGFzIFJQR0xhdW5jaGVyIH0gZnJvbSAnLi9SUEdMYXVuY2hlcic7XHJcbmltcG9ydCB7IFJQR01vZGVsQW5pbU5hbWUgfSBmcm9tICcuL0VudW0nO1xyXG5pbXBvcnQgeyBSb2xlRW50aXR5IH0gZnJvbSAnLi9Sb2xlRW50aXR5JztcclxuY29uc3QgeyBjY2NsYXNzLCBwcm9wZXJ0eSB9ID0gX2RlY29yYXRvcjtcclxuXHJcbkBjY2NsYXNzKCdSUEdQYW5lbCcpXHJcbmV4cG9ydCBjbGFzcyBSUEdQYW5lbCBleHRlbmRzIEJhc2VWaWV3IHtcclxuICAgIFxyXG5cclxuICAgIHByaXZhdGUgb3JkZXJJbmRleDogbnVtYmVyO1xyXG4gICAgcHJpdmF0ZSBvcmRlckFycmFyeTogSVJQR01vZGVsRGF0YVtdO1xyXG5cclxuICAgIHByaXZhdGUgbGVmdEZpZ2h0TW9kZWxzOiBOb2RlW107XHJcbiAgICBwcml2YXRlIHJpZ2h0RmlnaHRNb2RlbHM6IE5vZGVbXTtcclxuXHJcbiAgICBwcml2YXRlIHRhcmdldEluZGV4OiBudW1iZXI7XHJcbiAgICBwdWJsaWMgYXN5bmMgb25PcGVuKGZyb21VSTogbnVtYmVyIHwgc3RyaW5nLCAuLi5hcmdzOiBhbnkpIHtcclxuICAgICAgICB0aGlzLmluaXRNb2RlbERhdGEoKTtcclxuICAgICAgICBhd2FpdCB0aGlzLmluaXRNb2RlbCgpO1xyXG4gICAgICAgIHRoaXMub3JkZXJJbmRleCA9IDA7XHJcbiAgICAgICAgdGhpcy5uZXh0QXR0YWNrKCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBpbml0TW9kZWxEYXRhKCk6IHZvaWR7XHJcbiAgICAgICAgXHJcbiAgICAgICAgdGhpcy5vcmRlckFycmFyeSA9IFtdO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgUlBHQ29uZmlnLmlucy5sZWZ0RGF0YXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgY29uc3QgZWxlbWVudDogSVJQR01vZGVsRGF0YSA9IFJQR0NvbmZpZy5pbnMubGVmdERhdGFzW2ldO1xyXG4gICAgICAgICAgICBjb25zdCByaWdodERhdGE6IElSUEdNb2RlbERhdGEgPSBSUEdDb25maWcuaW5zLnJpZ2h0RGF0YXNbaV07XHJcbiAgICAgICAgICAgIGNvbnN0IGNvcHlEYXRhOiBJUlBHTW9kZWxEYXRhID0ge1xyXG4gICAgICAgICAgICAgICAgaW5kZXg6IGVsZW1lbnQuaW5kZXgsXHJcbiAgICAgICAgICAgICAgICBhdHRhY2s6IGVsZW1lbnQuYXR0YWNrLFxyXG4gICAgICAgICAgICAgICAgZGVmOiBlbGVtZW50LmRlZixcclxuICAgICAgICAgICAgICAgIGNhbXA6IGVsZW1lbnQuY2FtcCxcclxuICAgICAgICAgICAgICAgIGhwOiBlbGVtZW50LmhwLFxyXG4gICAgICAgICAgICAgICAgc3BlZWQ6IGVsZW1lbnQuc3BlZWQsXHJcbiAgICAgICAgICAgICAgICBwb3M6IGVsZW1lbnQucG9zLFxyXG4gICAgICAgICAgICAgICAgbG9uZzogZWxlbWVudC5sb25nLFxyXG4gICAgICAgICAgICAgICAgc3RhdGU6UlBHU3RhdGVUeXBlLkF3YWl0XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNvbnN0IGNvcHlSaWdodERhdGE6IElSUEdNb2RlbERhdGEgPSB7XHJcbiAgICAgICAgICAgICAgICBpbmRleDogcmlnaHREYXRhLmluZGV4LFxyXG4gICAgICAgICAgICAgICAgYXR0YWNrOiByaWdodERhdGEuYXR0YWNrLFxyXG4gICAgICAgICAgICAgICAgZGVmOiByaWdodERhdGEuZGVmLFxyXG4gICAgICAgICAgICAgICAgY2FtcDogcmlnaHREYXRhLmNhbXAsXHJcbiAgICAgICAgICAgICAgICBocDogcmlnaHREYXRhLmhwLFxyXG4gICAgICAgICAgICAgICAgc3BlZWQ6IHJpZ2h0RGF0YS5zcGVlZCxcclxuICAgICAgICAgICAgICAgIHBvczogcmlnaHREYXRhLnBvcyxcclxuICAgICAgICAgICAgICAgIGxvbmc6IHJpZ2h0RGF0YS5sb25nLFxyXG4gICAgICAgICAgICAgICAgc3RhdGU6IFJQR1N0YXRlVHlwZS5Bd2FpdFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMub3JkZXJBcnJhcnlbaV0gPSBjb3B5RGF0YTtcclxuICAgICAgICAgICAgdGhpcy5vcmRlckFycmFyeVtpICsgNV0gPSBjb3B5UmlnaHREYXRhO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGFzeW5jIGluaXRNb2RlbCgpIHtcclxuICAgICAgICB0aGlzLmxlZnRGaWdodE1vZGVscyA9IFtdO1xyXG4gICAgICAgIHRoaXMucmlnaHRGaWdodE1vZGVscyA9IFtdO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5vcmRlckFycmFyeS5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBsZXQgZGF0YSA9IHRoaXMub3JkZXJBcnJhcnlbaV07XHJcbiAgICAgICAgICAgIGxldCBub2RlID0gYXdhaXQgdGhpcy5jcmVhdGVNb2RlKGRhdGEpO1xyXG4gICAgICAgICAgICBpZiAoZGF0YS5jYW1wID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmxlZnRGaWdodE1vZGVsc1tkYXRhLmluZGV4XSA9IG5vZGU7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZGF0YS5jYW1wID09PSAxKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJpZ2h0RmlnaHRNb2RlbHNbZGF0YS5pbmRleF0gPSBub2RlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgYXN5bmMgY3JlYXRlTW9kZShkYXRhOklSUEdNb2RlbERhdGEpe1xyXG4gICAgICAgIGNvbnN0IHBhdGg6IHN0cmluZyA9IFZpZXdDb25zdC5kZWZhdWx0UHJlZmFiUGF0aFByZWZpeCArIFwiUlBHUm9sZUVudGl0eVwiO1xyXG4gICAgICAgIGxldCBub2RlID0gYXdhaXQgQXNzZXRNZ3IuaW5zdGFuY2UuY3JlYXRlUHJlZmFiKHBhdGgpO1xyXG4gICAgICAgIGlmICghbm9kZSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBub2RlLnNldFBvc2l0aW9uKGRhdGEucG9zLngsIGRhdGEucG9zLnkpO1xyXG4gICAgICAgIG5vZGUucGFyZW50ID0gdGhpcy5ub2RlO1xyXG4gICAgICAgIGNvbnN0IGN0cjogUm9sZUVudGl0eSA9IG5vZGUuZ2V0Q29tcG9uZW50KFJvbGVFbnRpdHkpO1xyXG4gICAgICAgIGlmIChjdHIpIHtcclxuICAgICAgICAgICAgY3RyLnNldE1vZGVEYXRhKGRhdGEpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjdHIucGxheUFuaW1hdGlvbihSUEdNb2RlbEFuaW1OYW1lLklkZWwpO1xyXG4gICAgICAgIHJldHVybiBub2RlO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXJ0KCkge1xyXG5cclxuICAgIH1cclxuXHJcbiAgICB1cGRhdGUoZGVsdGFUaW1lOiBudW1iZXIpIHtcclxuICAgICAgICBcclxuICAgIH1cclxuXHJcblxyXG4gICAgcHJpdmF0ZSBnZXRPcmRlckFycmFyeUJ5Q2FtcChjYW1wOiBudW1iZXIpOiBJUlBHTW9kZWxEYXRhW117XHJcbiAgICAgICAgY29uc3QgcmVzdWx0OiBJUlBHTW9kZWxEYXRhW10gPSBbXTtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMub3JkZXJBcnJhcnkubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgY29uc3QgZGF0YSA9IHRoaXMub3JkZXJBcnJhcnlbaV07XHJcbiAgICAgICAgICAgIGlmIChkYXRhLmNhbXAgPT09IGNhbXAgJiYgZGF0YS5zdGF0ZSAhPSBSUEdTdGF0ZVR5cGUuRGVhdGgpIHtcclxuICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKGRhdGEpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBnZXRPcmRlckRhdGFCeUluZGV4KGluZGV4OiBudW1iZXIpOiBJUlBHTW9kZWxEYXRhIHtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMub3JkZXJBcnJhcnkubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgY29uc3QgZGF0YSA9IHRoaXMub3JkZXJBcnJhcnlbaV07XHJcbiAgICAgICAgICAgIGlmIChkYXRhLmluZGV4ID09PSBpbmRleCAmJiBkYXRhLnN0YXRlICE9IFJQR1N0YXRlVHlwZS5EZWF0aCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGRhdGE7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0TW9kZWxTdGF0ZShvYmo6IElSUEdNb2RlbERhdGEsIHN0YXRlOiBSUEdTdGF0ZVR5cGUpOiB2b2lke1xyXG4gICAgICAgIGlmIChzdGF0ZSA9PSBSUEdTdGF0ZVR5cGUuTW92ZSkge1xyXG4gICAgICAgICAgICBsZXQgdGFyZ2V0Q2FtcDogbnVtYmVyID0gMDtcclxuICAgICAgICAgICAgaWYgKG9iai5jYW1wID09IDApIHtcclxuICAgICAgICAgICAgICAgIHRhcmdldENhbXAgPSAxO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIFxyXG5cclxuICAgICAgICAgICAgY29uc3QgY2FtcExpc3Q6IElSUEdNb2RlbERhdGFbXSA9IHRoaXMuZ2V0T3JkZXJBcnJhcnlCeUNhbXAodGFyZ2V0Q2FtcCk7XHJcbiAgICAgICAgICAgIGNvbnN0IGluZGV4OiBudW1iZXIgPSBSUEdMYXVuY2hlci5pbnMucmFuZG9tSW50KDAsIGNhbXBMaXN0Lmxlbmd0aCAtIDEpO1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIumaj+acuuWHuuadpeeahOS4i+agh1wiLCBpbmRleCk7XHJcbiAgICAgICAgICAgIGxldCB0YXJnZXRPYmogPSBjYW1wTGlzdFtpbmRleF07XHJcbiAgICAgICAgICAgIC8vIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5vcmRlckFycmFyeS5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAvLyAgICAgY29uc3QgZGF0YSA9IHRoaXMub3JkZXJBcnJhcnlbaV07XHJcbiAgICAgICAgICAgIC8vICAgICBpZiAoZGF0YS5jYW1wID09PSB0YXJnZXRDYW1wICYmIGRhdGEuc3RhdGUgIT0gUlBHU3RhdGVUeXBlLklkZWEpIHtcclxuICAgICAgICAgICAgLy8gICAgICAgICB0YXJnZXRPYmogPSBkYXRhO1xyXG4gICAgICAgICAgICAvLyAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAvLyAgICAgfVxyXG4gICAgICAgICAgICAvLyB9XHJcbiAgICAgICAgICAgIHRoaXMudGFyZ2V0SW5kZXggPSBudWxsO1xyXG4gICAgICAgICAgICBpZiAodGFyZ2V0T2JqKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnRhcmdldEluZGV4ID0gdGFyZ2V0T2JqLmluZGV4O1xyXG4gICAgICAgICAgICAgICAgdGhpcy5tb3ZlKG9iaiwgdGFyZ2V0T2JqKS50aGVuKCh2YWx1ZSkgPT4geyBcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNldE1vZGVsU3RhdGUob2JqLCBSUEdTdGF0ZVR5cGUuQXR0YWNrKTtcclxuICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIH0pLmNhdGNoKGVyciA9PiB7IFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGFyZ2V0Q2FtcCA9PSAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIuS9oOi1ouS6hlwiKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7IFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCLkvaDovpPkuoZcIik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2UgaWYgKHN0YXRlID09IFJQR1N0YXRlVHlwZS5BdHRhY2spIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMudGFyZ2V0SW5kZXggIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgbGV0ICB0YXJnZXRDYW1wID0gMDtcclxuICAgICAgICAgICAgICAgIGlmIChvYmouY2FtcCA9PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0Q2FtcCA9IDE7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgY29uc3QgdGFyZ2V0RGF0YSA9IHRoaXMuZ2V0T3JkZXJEYXRhQnlJbmRleCh0aGlzLnRhcmdldEluZGV4KTtcclxuICAgICAgICAgICAgICAgIHRoaXMuYXR0YWNrKG9iaiwgdGFyZ2V0RGF0YSkudGhlbigodmFsdWUxKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIuaJp+ihjOWIsOaUu+WHu+i/lOWbnuatpemqpOS6hlwiKVxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubW92ZShvYmosIG9iaix0cnVlKS50aGVuKCh2YWx1ZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWUxIDw9IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0TW9kZWxTdGF0ZSh0YXJnZXREYXRhLCBSUEdTdGF0ZVR5cGUuRGVhdGgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm9yZGVySW5kZXggKz0gMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5uZXh0QXR0YWNrKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSkuY2F0Y2goZXJyID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnIpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICB9KS5jYXRjaChlcnIgPT4geyBcclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGVycik7XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIGlmIChzdGF0ZSA9PSBSUEdTdGF0ZVR5cGUuRGVhdGgpIHtcclxuICAgICAgICAgICAgaWYgKG9iaikge1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IHRoaXMub3JkZXJBcnJhcnkubGVuZ3RoOyBpbmRleCsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZWxlbWVudCA9IHRoaXMub3JkZXJBcnJhcnlbaW5kZXhdO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChlbGVtZW50LmluZGV4ID09IG9iai5pbmRleCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB0aGlzLm9yZGVyQXJyYXJ5LnNwbGljZShpbmRleCwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuc3RhdGUgPSBSUEdTdGF0ZVR5cGUuRGVhdGg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNvbnN0IG1vZGVsOiBOb2RlID0gdGhpcy5nZXRUYXJnZXRNb2RlbChvYmopO1xyXG4gICAgICAgICAgICAgICAgaWYgKG1vZGVsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihgJHtvYmouaW5kZXh96KKr5omT5q275LqGISEhIWApO1xyXG4gICAgICAgICAgICAgICAgICAgIG1vZGVsLnJlbW92ZUZyb21QYXJlbnQoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICB9XHJcblxyXG4gICAgLy8gcHJpdmF0ZSB1cGRhdGVUYXJnZXRIcCh0YXJnZXQ6IElSUEdNb2RlbERhdGEsIGN1cnJlbnRIcDogbnVtYmVyKTogdm9pZHtcclxuICAgIC8vICAgICBpZiAoIXRhcmdldCkge1xyXG4gICAgLy8gICAgICAgICByZXR1cm47XHJcbiAgICAvLyAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgLy8gfVxyXG5cclxuICAgIHByaXZhdGUgZ2V0VGFyZ2V0TW9kZWwodGFyZ2V0OiBJUlBHTW9kZWxEYXRhKTogTm9kZXtcclxuICAgICAgICBsZXQgbW9kZWw6IE5vZGUgPSBudWxsO1xyXG4gICAgICAgIGlmICh0YXJnZXQuY2FtcCA9PSAwKSB7XHJcbiAgICAgICAgICAgIG1vZGVsID0gdGhpcy5sZWZ0RmlnaHRNb2RlbHNbdGFyZ2V0LmluZGV4XTtcclxuICAgICAgICB9IGVsc2UgaWYgKHRhcmdldC5jYW1wID09IDEpIHtcclxuICAgICAgICAgICAgbW9kZWwgPSB0aGlzLnJpZ2h0RmlnaHRNb2RlbHNbdGFyZ2V0LmluZGV4XTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG1vZGVsO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgYXR0YWNrKGF0dGFja2VyOiBJUlBHTW9kZWxEYXRhLCB0YXJnZXQ6IElSUEdNb2RlbERhdGEpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWNldCkgPT4ge1xyXG4gICAgICAgICAgICBpZiAoIWF0dGFja2VyIHx8ICF0YXJnZXQpIHsgXHJcbiAgICAgICAgICAgICAgICByZWplY2V0KFwi5pS75Ye75pWw5o2u5Li656m6XCIpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IHRhcmdldERhdGEgPSB0aGlzLm9yZGVyQXJyYXJ5W3RhcmdldC5pbmRleF07XHJcbiAgICAgICAgICAgIGlmICghdGFyZ2V0RGF0YSkge1xyXG4gICAgICAgICAgICAgICAgcmVqZWNldChcIuaUu+WHu+WvueixoeayoeaJvuWIsFwiKTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb25zdCB0YXJnZXRDdXJyZW50SHA6IG51bWJlciA9ICh0YXJnZXQuaHAgKyB0YXJnZXQuZGVmKSAtIGF0dGFja2VyLmF0dGFjaztcclxuICAgICAgICAgICAgdGFyZ2V0LmhwID0gdGFyZ2V0Q3VycmVudEhwO1xyXG4gICAgICAgICAgICBsZXQgbW9kZWw6IE5vZGUgPSB0aGlzLmdldFRhcmdldE1vZGVsKHRhcmdldCk7XHJcbiAgICAgICAgICAgIGlmICghbW9kZWwpIHtcclxuICAgICAgICAgICAgICAgIHJlamVjZXQoXCLnm67moIfmqKHlnovmsqHmib7liLBcIik7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY29uc3QgbW9kZWxDdHI6IFJvbGVFbnRpdHkgPSBtb2RlbC5nZXRDb21wb25lbnQoUm9sZUVudGl0eSk7XHJcbiAgICAgICAgICAgIGlmICghbW9kZWxDdHIpIHtcclxuICAgICAgICAgICAgICAgIHJlamVjZXQoXCLmqKHlnovmsqHmnInnu5HlrprnrqHnkIbohJrmnKxcIik7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY29uc3QgYXR0YWNrTW9kZWw6IE5vZGUgPSB0aGlzLmdldFRhcmdldE1vZGVsKGF0dGFja2VyKTtcclxuICAgICAgICAgICAgaWYgKGF0dGFja01vZGVsKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBhdHRhY2tDdHI6IFJvbGVFbnRpdHkgPSBhdHRhY2tNb2RlbC5nZXRDb21wb25lbnQoUm9sZUVudGl0eSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoYXR0YWNrQ3RyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYXR0YWNrQ3RyLnBsYXlBbmltYXRpb24oUlBHTW9kZWxBbmltTmFtZS5BdHRhY2spLnRoZW4odmFsdWUgPT4geyBcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihgJHthdHRhY2tlci5pbmRleH0g5pS75Ye75LqGJHt0YXJnZXQuaW5kZXh9LOmAoOaIkOS6hiR7YXR0YWNrZXIuYXR0YWNrfeS8pOWusyzpmLLlvqHkuoYke3RhcmdldC5kZWZ9LOi/mOWJqSR7dGFyZ2V0LmhwfWApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RlbEN0ci5zZXRIcCh0YXJnZXRDdXJyZW50SHAgLyAxMDApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHRhcmdldEN1cnJlbnRIcCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSkuY2F0Y2goZXJyID0+IHsgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pXHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBtb3ZlKG9iajogSVJQR01vZGVsRGF0YSwgdGFyZ2V0OiBJUlBHTW9kZWxEYXRhLGlzQmFjazpib29sZWFuID0gZmFsc2UpOiBQcm9taXNlPGFueT57XHJcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHsgXHJcbiAgICAgICAgICAgIGlmICghb2JqIHx8ICF0YXJnZXQpIHtcclxuICAgICAgICAgICAgICAgIHJlamVjdChcIuaVsOaNruS4uuepulwiKTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBsZXQgbW9kZWw6IE5vZGUgPSB0aGlzLmdldFRhcmdldE1vZGVsKG9iaik7XHJcbiAgICAgICAgICAgIGlmICghbW9kZWwpIHtcclxuICAgICAgICAgICAgICAgIHJlamVjdChcIuaooeWei+S4uuepulwiKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IGN0cjogUm9sZUVudGl0eSA9IG1vZGVsLmdldENvbXBvbmVudChSb2xlRW50aXR5KTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGlmIChjdHIpIHtcclxuICAgICAgICAgICAgICAgIGlmIChpc0JhY2spIHtcclxuICAgICAgICAgICAgICAgICAgICBjdHIucm90YXRpb25EaXJldGlvbigpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY3RyLnBsYXlBbmltYXRpb24oUlBHTW9kZWxBbmltTmFtZS5XYWxrKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0d2Vlbihtb2RlbCkudG8oMSwgeyBwb3NpdGlvbjogbWF0aC52Myh0YXJnZXQucG9zLngsIHRhcmdldC5wb3MueSwgMCkgfSkuY2FsbCgodGFyZ2V0LCBkYXRhKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoY3RyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzQmFjaykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjdHIucm90YXRpb25EaXJldGlvbigpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBjdHIucGxheUFuaW1hdGlvbihSUEdNb2RlbEFuaW1OYW1lLklkZWwsMCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXNvbHZlKHRydWUpO1xyXG4gICAgICAgICAgICB9LCB0aGlzKS5zdGFydCgpO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgXHJcbiAgICB9XHJcblxyXG5cclxuICAgIG5leHRBdHRhY2soKTogdm9pZHtcclxuICAgICAgICBpZiAodGhpcy5vcmRlckluZGV4ID4gOSkge1xyXG4gICAgICAgICAgICB0aGlzLm9yZGVySW5kZXggPSAwO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBhdHRhY2tlcjogSVJQR01vZGVsRGF0YSA9IHRoaXMub3JkZXJBcnJhcnlbdGhpcy5vcmRlckluZGV4XTtcclxuICAgICAgICBpZiAoYXR0YWNrZXIuc3RhdGUgPT09IFJQR1N0YXRlVHlwZS5Bd2FpdCkge1xyXG4gICAgICAgICAgICB0aGlzLnNldE1vZGVsU3RhdGUoYXR0YWNrZXIsIFJQR1N0YXRlVHlwZS5Nb3ZlKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLm9yZGVySW5kZXggKz0gMTtcclxuICAgICAgICAgICAgdGhpcy5uZXh0QXR0YWNrKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbnJlZ2lzdGVyVmlldyh7IHZpZXdDbHM6IFJQR1BhbmVsLCBpZDogUGFuZWxUeXBlLlJQR1BhbmVsLCBsYXllcjogTGF5ZXJUeXBlLnZpZXcgfSlcclxuXHJcbiIsImltcG9ydCB7X2RlY29yYXRvciwgRXZlbnRUb3VjaCwgTm9kZSwgVmVjM30gZnJvbSAnY2MnO1xyXG5pbXBvcnQgTWFwRGF0YSBmcm9tICcuL21hcC9NYXBEYXRhJztcclxuaW1wb3J0IHtNYXBJdGVtVHlwZSwgTWFwTG9hZE1vZGVsfSBmcm9tICcuL0VudW0nO1xyXG5pbXBvcnQgUGxheWVyIGZyb20gJy4vY2hhcmFjdGVyL1BsYXllcic7XHJcbmltcG9ydCB7RWRpdE1vbnN0ZXJEYXRhLCBFZGl0TnBjRGF0YSwgRWRpdFNwYXduUG9pbnREYXRhLCBFZGl0VHJhbnNmZXJEYXRhfSBmcm9tICcuL0VkaXRPYmpEYXRhJztcclxuaW1wb3J0IFNwYXduUG9pbnQgZnJvbSAnLi90cmFuc2Zlci9TcGF3blBvaW50JztcclxuaW1wb3J0IHtHYW1lTWFuYWdlcn0gZnJvbSAnLi9HYW1lTWFuYWdlcic7XHJcbmltcG9ydCBUcmFuc2ZlckRvb3IgZnJvbSAnLi90cmFuc2Zlci9UcmFuc2ZlckRvb3InO1xyXG5pbXBvcnQge01vbnN0ZXJ9IGZyb20gJy4vY2hhcmFjdGVyL01vbnN0ZXInO1xyXG5pbXBvcnQge05wY30gZnJvbSAnLi9jaGFyYWN0ZXIvTnBjJztcclxuaW1wb3J0IHtTY2VuZUJhc2V9IGZyb20gXCJkYjovL2Fzc2V0cy9TY3JpcHQvbW9kdWxlcy9TY2VuZUJhc2VcIjtcclxuXHJcbmNvbnN0IHsgY2NjbGFzcywgcHJvcGVydHkgfSA9IF9kZWNvcmF0b3I7XHJcblxyXG5AY2NjbGFzcygnU2NlbmNlTWFwJylcclxuZXhwb3J0IGNsYXNzIFNjZW5jZU1hcCBleHRlbmRzIFNjZW5lQmFzZSB7XHJcbiAgICAvLyBAcHJvcGVydHkoTm9kZSlcclxuICAgIC8vIHB1YmxpYyBsYXllcjogTm9kZSA9IG51bGw7XHJcbiAgICAvL1xyXG4gICAgLy8gQHByb3BlcnR5KE1hcExheWVyKVxyXG4gICAgLy8gcHVibGljIG1hcExheWVyOiBNYXBMYXllciA9IG51bGw7XHJcbiAgICAvL1xyXG4gICAgLy8gQHByb3BlcnR5KEVudGl0eUxheWVyKVxyXG4gICAgLy8gcHVibGljIGVudGl0eUxheWVyOiBFbnRpdHlMYXllciA9IG51bGw7XHJcbiAgICAvL1xyXG4gICAgLy8gQHByb3BlcnR5KENhbWVyYSlcclxuICAgIC8vIHByaXZhdGUgY2FtZXJhOiBDYW1lcmEgPSBudWxsO1xyXG5cclxuXHJcbiAgICAvLyBwcml2YXRlIF9tYXBEYXRhOiBNYXBEYXRhO1xyXG4gICAgLy8gcHJpdmF0ZSBfbWFwSWQ6IG51bWJlcjtcclxuICAgIC8vXHJcbiAgICAvLyBwcml2YXRlIHRhcmdldFBvczogVmVjMyA9IG5ldyBWZWMzKDAsIDAsIDApO1xyXG4gICAgLy9cclxuICAgIC8vIHByaXZhdGUgd2luU2l6ZTogU2l6ZSA9IG5ldyBTaXplKCk7XHJcbiAgICAvLyBwcml2YXRlIF9tYXBQYXJhbXM6IE1hcFBhcmFtcyA9IG51bGw7XHJcblxyXG4gICAgLyoqXHJcbiAgICAqIOWcuuaZr+mHjOaJgOacieeahOWHuueUn+eCuVxyXG4gICAgKi9cclxuICAgIHB1YmxpYyBzcGF3blBvaW50TGlzdDogU3Bhd25Qb2ludFtdID0gW107XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDlnLrmma/ph4zmiYDmnInnmoTkvKDpgIHpl6hcclxuICAgICAqL1xyXG4gICAgcHVibGljIHRyYW5zZmVyRG9vckxpc3Q6IFRyYW5zZmVyRG9vcltdID0gW107XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDlnLrmma/ph4zmiYDmnInnmoRucGNcclxuICAgICAqL1xyXG4gICAgcHVibGljIG5wY0xpc3Q6IE5wY1tdID0gW107XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDlnLrmma/ph4zmiYDmnInnmoTmgKrnialcclxuICAgICAqL1xyXG4gICAgcHVibGljIG1vbnN0ZXJMaXN0OiBNb25zdGVyW10gPSBbXTtcclxuXHJcbiAgICBwcml2YXRlIHBsYXllcjogUGxheWVyID0gbnVsbDtcclxuXHJcbiAgICAvLyBwcml2YXRlIGlzSW5pdDogYm9vbGVhbiA9IGZhbHNlO1xyXG5cclxuXHJcbiAgICBzdGFydCgpIHtcclxuICAgICAgICBzdXBlci5zdGFydCgpO1xyXG4gICAgICAgIC8vIHRoaXMud2luU2l6ZSA9IHZpZXcuZ2V0VmlzaWJsZVNpemUoKTtcclxuICAgICAgICAvLyB0aGlzLm5vZGUuc2V0UG9zaXRpb24obWF0aC52MygtdGhpcy53aW5TaXplLndpZHRoIC8gMiwgLXRoaXMud2luU2l6ZS5oZWlnaHQgLyAyKSk7XHJcbiAgICAgICAgdGhpcy5ub2RlLm9uKE5vZGUuRXZlbnRUeXBlLlRPVUNIX1NUQVJULCB0aGlzLm9uTWFwVG91Y2gsIHRoaXMpO1xyXG4gICAgICAgIC8vIHRoaXMubm9kZS5vbihOb2RlLkV2ZW50VHlwZS5UT1VDSF9TVEFSVCwgKGV2ZW50OiBFdmVudFRvdWNoKSA9PiB7XHJcbiAgICAgICAgLy8gICAgIGNvbnN0IHNjcmVlblBvaW50ID0gZXZlbnQuZ2V0TG9jYXRpb24oKTtcclxuICAgICAgICAvLyAgICAgY29uc29sZS5sb2coJ+WFqOWxgOeCueWHu+eahOWxj+W5leWdkOaghzonLCBzY3JlZW5Qb2ludCk7XHJcbiAgICAgICAgLy8gfSwgdGhpcyk7XHJcblxyXG4gICAgICAgIHRoaXMuc2V0TWFwSWQoMSxNYXBMb2FkTW9kZWwuc2luZ2xlKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBwdWJsaWMgc2V0IG1hcElkKHZhbHVlOiBudW1iZXIpIHtcclxuICAgIC8vICAgICB0aGlzLl9tYXBJZCA9IHZhbHVlO1xyXG4gICAgLy8gICAgIHRoaXMubG9hZE1hcCh2YWx1ZSk7XHJcbiAgICAvLyB9XHJcbiAgICAvL1xyXG4gICAgLy8gcHVibGljIGdldCBtYXBJZCgpOiBudW1iZXJ7XHJcbiAgICAvLyAgICAgcmV0dXJuIHRoaXMuX21hcElkO1xyXG4gICAgLy8gfVxyXG5cclxuICAgIC8vIHB1YmxpYyBsb2FkTWFwKG1hcElkOiBudW1iZXIsIG1hcExvYWRNb2RlbDogTWFwTG9hZE1vZGVsID0gTWFwTG9hZE1vZGVsLnNpbmdsZSkge1xyXG4gICAgLy8gICAgIGlmIChtYXBMb2FkTW9kZWwgPT0gTWFwTG9hZE1vZGVsLnNpbmdsZSkge1xyXG4gICAgLy8gICAgICAgICB0aGlzLmxvYWRTaW5nbGVNYXAobWFwSWQpO1xyXG4gICAgLy8gICAgIH0gZWxzZSB7XHJcbiAgICAvLyAgICAgICAgIC8vIHRoaXMubG9hZFNsaWNlc01hcChtYXBJZCk7XHJcbiAgICAvLyAgICAgfVxyXG4gICAgLy8gfVxyXG5cclxuICAgIC8vIHByb3RlY3RlZCBsb2FkU2luZ2xlTWFwKG1hcElkOiBudW1iZXIpIHtcclxuICAgIC8vICAgICB2YXIgZGF0YVBhdGg6IHN0cmluZyA9IGBNYXAvbWFwJHttYXBJZH0vbWFwJHttYXBJZH1gO1xyXG4gICAgLy8gICAgIHJlc291cmNlcy5sb2FkKGRhdGFQYXRoLCBKc29uQXNzZXQsIChlcnJvcjogRXJyb3IsIHJlczogSnNvbkFzc2V0KSA9PiB7XHJcbiAgICAvLyAgICAgICAgIGlmIChlcnJvciAhPSBudWxsKSB7XHJcbiAgICAvLyAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIuWKoOi9veWcsOWbvuaVsOaNruWksei0pSBwYXRoID0gXCIsIGRhdGFQYXRoLCBcImVycm9yXCIsIGVycm9yKTtcclxuICAgIC8vICAgICAgICAgICAgIHJldHVybjtcclxuICAgIC8vICAgICAgICAgfVxyXG4gICAgLy9cclxuICAgIC8vICAgICAgICAgdmFyIG1hcERhdGE6IE1hcERhdGEgPSByZXMuanNvbiBhcyBNYXBEYXRhO1xyXG4gICAgLy9cclxuICAgIC8vICAgICAgICAgdmFyIGJnUGF0aDogc3RyaW5nID0gZGF0YVBhdGggKyBcIi90ZXh0dXJlXCI7XHJcbiAgICAvLyAgICAgICAgIHJlc291cmNlcy5sb2FkKGJnUGF0aCwgVGV4dHVyZTJELCAoZXJyb3I6IEVycm9yLCB0ZXg6IFRleHR1cmUyRCkgPT4ge1xyXG4gICAgLy8gICAgICAgICAgICAgaWYgKGVycm9yICE9IG51bGwpIHtcclxuICAgIC8vICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIuWKoOi9veWcsOWbvuiDjOaZr+Wksei0pSBwYXRoID0gXCIsIGJnUGF0aCwgXCJlcnJvclwiLCBlcnJvcik7XHJcbiAgICAvLyAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgLy8gICAgICAgICAgICAgfVxyXG4gICAgLy8gICAgICAgICAgICAgY29uc29sZS5sb2cobWFwRGF0YSwgdGV4KTtcclxuICAgIC8vICAgICAgICAgICAgIHRoaXMuaW5pdChtYXBEYXRhLCB0ZXgpO1xyXG4gICAgLy8gICAgICAgICAgICAgLy8gdGhpcy5zY2VuZU1hcC5pbml0KG1hcERhdGEsIHRleCwgTWFwTG9hZE1vZGVsLnNpbmdsZSlcclxuICAgIC8vICAgICAgICAgfSk7XHJcbiAgICAvL1xyXG4gICAgLy8gICAgIH0pO1xyXG4gICAgLy8gfVxyXG5cclxuICAgIHByb3RlY3RlZCBnZXRNYXBQYXRoKG1hcElkOiBudW1iZXIpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiBgTWFwL21hcCR7bWFwSWR9L21hcCR7bWFwSWR9YFxyXG4gICAgfVxyXG5cclxuICAgIHByb3RlY3RlZCBpbml0TWFwRGF0YShtYXBEYXRhOiBNYXBEYXRhKSB7XHJcbiAgICAgICAgdGhpcy5pbml0TWFwRWxlbWVudCgpO1xyXG4gICAgICAgIHRoaXMuYWZ0ZXJJbml0TWFwRWxlbWVudCgpO1xyXG4gICAgICAgIHRoaXMuaW5pdFBsYXllcigpO1xyXG5cclxuICAgICAgICB0aGlzLnNldFZpZXdUb1BsYXllcigpO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICBwcml2YXRlIGluaXRNYXBFbGVtZW50KCk6IHZvaWR7XHJcbiAgICAgICAgY29uc3QgbWFwSXRlbXM6IGFueVtdID0gdGhpcy5tYXBEYXRhLm1hcEl0ZW1zO1xyXG4gICAgICAgIGlmICghbWFwSXRlbXMpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBtYXBJdGVtcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBjb25zdCBtYXBJdGVtID0gbWFwSXRlbXNbaV07XHJcbiAgICAgICAgICAgIGNvbnN0IG1hcEl0ZW1UeXBlID0gbWFwSXRlbS50eXBlO1xyXG4gICAgICAgICAgICBpZiAobWFwSXRlbVR5cGUgPT0gTWFwSXRlbVR5cGUuTnBjKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmluaXROcGMobWFwSXRlbSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobWFwSXRlbVR5cGUgPT0gTWFwSXRlbVR5cGUuTW9uc3Rlcikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5pbml0TW9uc3RlcihtYXBJdGVtKTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmIChtYXBJdGVtVHlwZSA9PSBNYXBJdGVtVHlwZS5UcmFuc2Zlcikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5pbml0VHJhbnNmZXJEb29yKG1hcEl0ZW0pO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKG1hcEl0ZW1UeXBlID09IE1hcEl0ZW1UeXBlLlNwYXduUG9pbnQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuaW5pdFNwYXduUG9pbnQobWFwSXRlbSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAqIOWIneWni+WMlk5wY1xyXG4gICAgKi9cclxuICAgIHByaXZhdGUgaW5pdE5wYyhlZGl0RGF0YTogRWRpdE5wY0RhdGEpIHtcclxuICAgICAgICB2YXIgbnBjOiBOcGMgPSBHYW1lTWFuYWdlci5pbnN0YW5jZS5nZXROUEMoKTtcclxuICAgICAgICBucGMubm9kZS5wYXJlbnQgPSB0aGlzLmVudGl0eUxheWVyLm5vZGU7XHJcbiAgICAgICAgbnBjLmluaXRFZGl0RGF0YShlZGl0RGF0YSk7XHJcbiAgICAgICAgbnBjLmluaXQoKTtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDliJ3lp4vljJbmgKrnialcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBpbml0TW9uc3RlcihlZGl0RGF0YTogRWRpdE1vbnN0ZXJEYXRhKSB7XHJcbiAgICAgICAgdmFyIG1vbnN0ZXI6IE1vbnN0ZXIgPSBHYW1lTWFuYWdlci5pbnN0YW5jZS5nZXRNb25zdGVyKCk7XHJcbiAgICAgICAgbW9uc3Rlci5ub2RlLnBhcmVudCA9IHRoaXMuZW50aXR5TGF5ZXIubm9kZTtcclxuICAgICAgICBtb25zdGVyLmluaXRFZGl0RGF0YShlZGl0RGF0YSk7XHJcbiAgICAgICAgbW9uc3Rlci5pbml0KCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDliJ3lp4vljJbkvKDpgIHpl6hcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBpbml0VHJhbnNmZXJEb29yKGVkaXREYXRhOiBFZGl0VHJhbnNmZXJEYXRhKSB7XHJcbiAgICAgICAgdmFyIHRyYW5zZmVyRG9vcjogVHJhbnNmZXJEb29yID0gR2FtZU1hbmFnZXIuaW5zdGFuY2UuZ2V0VHJhbnNmZXJEb29yKGVkaXREYXRhLnRyYW5zZmVyVHlwZSk7XHJcbiAgICAgICAgdHJhbnNmZXJEb29yLm5vZGUucGFyZW50ID0gdGhpcy5lbnRpdHlMYXllci5ub2RlO1xyXG4gICAgICAgIHRyYW5zZmVyRG9vci5pbml0RWRpdERhdGEoZWRpdERhdGEpO1xyXG4gICAgICAgIHRyYW5zZmVyRG9vci5pbml0KCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBpbml0U3Bhd25Qb2ludChlZGl0RGF0YTogRWRpdFNwYXduUG9pbnREYXRhKSB7XHJcbiAgICAgICAgdmFyIHNwYXduUG9pbnQ6IFNwYXduUG9pbnQgPSBHYW1lTWFuYWdlci5pbnN0YW5jZS5nZXRTcGF3blBvaW50KCk7XHJcbiAgICAgICAgc3Bhd25Qb2ludC5ub2RlLnBhcmVudCA9IHRoaXMuZW50aXR5TGF5ZXIubm9kZTtcclxuICAgICAgICBzcGF3blBvaW50LmluaXRFZGl0RGF0YShlZGl0RGF0YSk7XHJcbiAgICAgICAgc3Bhd25Qb2ludC5pbml0KCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGluaXRQbGF5ZXIoKSB7XHJcbiAgICAgICAgdmFyIHNwYXduUG9pbnQ6IFNwYXduUG9pbnQgPSB0aGlzLmdldFNwYXduUG9pbnQoMCk7XHJcblxyXG4gICAgICAgIHRoaXMucGxheWVyID0gR2FtZU1hbmFnZXIuaW5zdGFuY2UuZ2V0UGxheWVyKCk7XHJcbiAgICAgICAgdGhpcy5wbGF5ZXIubm9kZS5wYXJlbnQgPSB0aGlzLmVudGl0eUxheWVyLm5vZGU7XHJcbiAgICAgICAgdGhpcy5wbGF5ZXIubm9kZS5wb3NpdGlvbiA9IHNwYXduUG9pbnQgIT0gbnVsbCA/IHNwYXduUG9pbnQubm9kZS5wb3NpdGlvbiA6IG5ldyBWZWMzKDEwMDAsIDEwMDAsIDApOyAvL+WmguaenOaJvuW+l+WIsOWHuueUn+eCueWwseWIneWni+WMluWcqOWHuueUn+eCueeahOS9jee9ru+8jOWQpuWImem7mOiupOS4gOS4quWHuueUn+S9jee9rueCuee7meeOqeWutu+8jOmYsuatouaKpemUmeOAglxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5qC55o2uaWTojrflj5blh7rnlJ/ngrlcclxuICAgICAqIEBwYXJhbSBzcGF3bklkIFxyXG4gICAgICogQHJldHVybnMgXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBnZXRTcGF3blBvaW50KHNwYXduSWQ6IG51bWJlciA9IDApIHtcclxuICAgICAgICBmb3IgKHZhciBpOiBudW1iZXIgPSAwOyBpIDwgdGhpcy5zcGF3blBvaW50TGlzdC5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5zcGF3blBvaW50TGlzdFtpXS5zcGF3bklkID09IHNwYXduSWQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnNwYXduUG9pbnRMaXN0W2ldO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoc3Bhd25JZCA9PSAwKSB7XHJcbiAgICAgICAgICAgIC8v5aaC5p6c5rKh5pyJ5om+5Yiw5Yy56YWN55qE5Ye655Sf54K577yM5YiZ5a+75om+6buY6K6k5Ye655Sf54K5XHJcbiAgICAgICAgICAgIGZvciAodmFyIGk6IG51bWJlciA9IDA7IGkgPCB0aGlzLnNwYXduUG9pbnRMaXN0Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5zcGF3blBvaW50TGlzdFtpXS5kZWZhdWx0U3Bhd24pIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5zcGF3blBvaW50TGlzdFtpXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc29sZS5lcnJvcihg5Zyw5Zu+JHt0aGlzLm1hcERhdGEubmFtZX3kuI3lrZjlnKjov5nkuKrlh7rnlJ/ngrkgc3Bhd25JZCA9ICR7c3Bhd25JZH1gKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBhZnRlckluaXRNYXBFbGVtZW50KCkge1xyXG4gICAgICAgIHRoaXMuc3Bhd25Qb2ludExpc3QgPSB0aGlzLmdldENvbXBvbmVudHNJbkNoaWxkcmVuKFNwYXduUG9pbnQpO1xyXG4gICAgICAgIHRoaXMudHJhbnNmZXJEb29yTGlzdCA9IHRoaXMuZ2V0Q29tcG9uZW50c0luQ2hpbGRyZW4oVHJhbnNmZXJEb29yKTtcclxuICAgICAgICB0aGlzLm5wY0xpc3QgPSB0aGlzLmdldENvbXBvbmVudHNJbkNoaWxkcmVuKE5wYyk7XHJcbiAgICAgICAgdGhpcy5tb25zdGVyTGlzdCA9IHRoaXMuZ2V0Q29tcG9uZW50c0luQ2hpbGRyZW4oTW9uc3Rlcik7XHJcbiAgICB9IFxyXG5cclxuICAgIC8qKlxyXG4gICAgICog6I635b6X5Zyw5Zu+5Y+C5pWwXHJcbiAgICAgKiBAcGFyYW0gbWFwRGF0YSBcclxuICAgICAqIEBwYXJhbSBiZ1RleCBcclxuICAgICAqIEBwYXJhbSBtYXBMb2FkTW9kZWwgXHJcbiAgICAgKiBAcmV0dXJucyBcclxuICAgICAqL1xyXG4gICAgLy8gcHVibGljIGdldE1hcFBhcmFtcyhtYXBEYXRhOiBNYXBEYXRhLCBiZ1RleDogVGV4dHVyZTJELCBtYXBMb2FkTW9kZWw6IE1hcExvYWRNb2RlbCA9IDEpOiBNYXBQYXJhbXMge1xyXG4gICAgLy8gICAgIC8v5Yid5aeL5YyW5bqV5Zu+5Y+C5pWwXHJcbiAgICAvLyAgICAgdmFyIG1hcFBhcmFtczogTWFwUGFyYW1zID0gbmV3IE1hcFBhcmFtcygpO1xyXG4gICAgLy8gICAgIG1hcFBhcmFtcy5uYW1lID0gbWFwRGF0YS5uYW1lO1xyXG4gICAgLy8gICAgIG1hcFBhcmFtcy5iZ05hbWUgPSBtYXBEYXRhLmJnTmFtZTtcclxuICAgIC8vICAgICBtYXBQYXJhbXMubWFwVHlwZSA9IG1hcERhdGEudHlwZTtcclxuICAgIC8vICAgICBtYXBQYXJhbXMubWFwV2lkdGggPSBtYXBEYXRhLm1hcFdpZHRoO1xyXG4gICAgLy8gICAgIG1hcFBhcmFtcy5tYXBIZWlnaHQgPSBtYXBEYXRhLm1hcEhlaWdodDtcclxuICAgIC8vICAgICBtYXBQYXJhbXMuY2VpbFdpZHRoID0gbWFwRGF0YS5ub2RlV2lkdGg7XHJcbiAgICAvLyAgICAgbWFwUGFyYW1zLmNlaWxIZWlnaHQgPSBtYXBEYXRhLm5vZGVIZWlnaHQ7XHJcbiAgICAvLyAgICAgbWFwUGFyYW1zLnZpZXdXaWR0aCA9IG1hcERhdGEubWFwV2lkdGggPiB0aGlzLndpblNpemUud2lkdGggPyB0aGlzLndpblNpemUud2lkdGggOiBtYXBEYXRhLm1hcFdpZHRoO1xyXG4gICAgLy8gICAgIG1hcFBhcmFtcy52aWV3SGVpZ2h0ID0gbWFwRGF0YS5tYXBIZWlnaHQgPiB0aGlzLndpblNpemUuaGVpZ2h0ID8gdGhpcy53aW5TaXplLmhlaWdodCA6IG1hcERhdGEubWFwSGVpZ2h0O1xyXG4gICAgLy8gICAgIG1hcFBhcmFtcy5zbGljZVdpZHRoID0gMjU2O1xyXG4gICAgLy8gICAgIG1hcFBhcmFtcy5zbGljZUhlaWdodCA9IDI1NjtcclxuICAgIC8vICAgICBtYXBQYXJhbXMuYmdUZXggPSBiZ1RleDtcclxuICAgIC8vICAgICBtYXBQYXJhbXMubWFwTG9hZE1vZGVsID0gbWFwTG9hZE1vZGVsO1xyXG4gICAgLy9cclxuICAgIC8vICAgICByZXR1cm4gbWFwUGFyYW1zO1xyXG4gICAgLy8gfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICrmiorop4bph47lrprkvY3liLDnu5nlrprkvY3nva4gXHJcbiAgICAqIEBwYXJhbSBweFxyXG4gICAgKiBAcGFyYW0gcHlcclxuICAgICogXHJcbiAgICAqL1xyXG4gICAgLy8gcHVibGljIHNldFZpZXdUb1BvaW50KHB4OiBudW1iZXIsIHB5OiBudW1iZXIpOiB2b2lkIHtcclxuICAgIC8vICAgICB0aGlzLnRhcmdldFBvcyA9IG5ldyBWZWMzKHB4LCBweSkuc3VidHJhY3QobmV3IFZlYzModGhpcy53aW5TaXplLndpZHRoIC8gMiwgdGhpcy53aW5TaXplLmhlaWdodCAvIDIpKTtcclxuICAgIC8vXHJcbiAgICAvLyAgICAgaWYgKHRoaXMudGFyZ2V0UG9zLnggPiB0aGlzLl9tYXBQYXJhbXMubWFwV2lkdGggLSB0aGlzLndpblNpemUud2lkdGgpIHtcclxuICAgIC8vICAgICAgICAgdGhpcy50YXJnZXRQb3MueCA9IHRoaXMuX21hcFBhcmFtcy5tYXBXaWR0aCAtIHRoaXMud2luU2l6ZS53aWR0aDtcclxuICAgIC8vICAgICB9IGVsc2UgaWYgKHRoaXMudGFyZ2V0UG9zLnggPCAwKSB7XHJcbiAgICAvLyAgICAgICAgIHRoaXMudGFyZ2V0UG9zLnggPSAwO1xyXG4gICAgLy9cclxuICAgIC8vICAgICB9XHJcbiAgICAvL1xyXG4gICAgLy8gICAgIGlmICh0aGlzLnRhcmdldFBvcy55ID4gdGhpcy5fbWFwUGFyYW1zLm1hcEhlaWdodCAtIHRoaXMud2luU2l6ZS5oZWlnaHQpIHtcclxuICAgIC8vICAgICAgICAgdGhpcy50YXJnZXRQb3MueSA9IHRoaXMuX21hcFBhcmFtcy5tYXBIZWlnaHQgLSB0aGlzLndpblNpemUuaGVpZ2h0O1xyXG4gICAgLy8gICAgIH0gZWxzZSBpZiAodGhpcy50YXJnZXRQb3MueSA8IDApIHtcclxuICAgIC8vICAgICAgICAgdGhpcy50YXJnZXRQb3MueSA9IDA7XHJcbiAgICAvLyAgICAgfVxyXG4gICAgLy9cclxuICAgIC8vICAgICB0aGlzLnRhcmdldFBvcy56ID0gdGhpcy5jYW1lcmEubm9kZS5wb3NpdGlvbi56O1xyXG4gICAgLy8gICAgIHRoaXMuY2FtZXJhLm5vZGUucG9zaXRpb24gPSB0aGlzLnRhcmdldFBvcztcclxuICAgIC8vXHJcbiAgICAvLyAgICAgLy8gaWYgKHRoaXMuX21hcFBhcmFtcy5tYXBMb2FkTW9kZWwgPT0gTWFwTG9hZE1vZGVsLnNsaWNlcykge1xyXG4gICAgLy8gICAgIC8vICAgICB0aGlzLm1hcExheWVyLmxvYWRTbGljZUltYWdlKHRoaXMudGFyZ2V0UG9zLngsIHRoaXMudGFyZ2V0UG9zLnkpO1xyXG4gICAgLy8gICAgIC8vIH1cclxuICAgIC8vIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDop4blm77ot5/pmo/njqnlrrZcclxuICAgICAqIEBwYXJhbSBkdCBcclxuICAgICAqL1xyXG4gICAgLy8gcHVibGljIGZvbGxvd1BsYXllcihkdDogbnVtYmVyKSB7XHJcbiAgICAvLyAgICAgaWYgKHRoaXMucGxheWVyID09IG51bGwpIHtcclxuICAgIC8vICAgICAgICAgcmV0dXJuO1xyXG4gICAgLy8gICAgIH1cclxuICAgIC8vXHJcbiAgICAvLyAgICAgdGhpcy50YXJnZXRQb3MgPSB0aGlzLnBsYXllci5ub2RlLnBvc2l0aW9uLmNsb25lKCkuc3VidHJhY3QobmV3IFZlYzModGhpcy53aW5TaXplLndpZHRoIC8gMiwgdGhpcy53aW5TaXplLmhlaWdodCAvIDIpKTtcclxuICAgIC8vXHJcbiAgICAvLyAgICAgaWYgKHRoaXMudGFyZ2V0UG9zLnggPiB0aGlzLl9tYXBQYXJhbXMubWFwV2lkdGggLSB0aGlzLndpblNpemUud2lkdGgpIHtcclxuICAgIC8vICAgICAgICAgdGhpcy50YXJnZXRQb3MueCA9IHRoaXMuX21hcFBhcmFtcy5tYXBXaWR0aCAtIHRoaXMud2luU2l6ZS53aWR0aDtcclxuICAgIC8vICAgICB9IGVsc2UgaWYgKHRoaXMudGFyZ2V0UG9zLnggPCAwKSB7XHJcbiAgICAvLyAgICAgICAgIHRoaXMudGFyZ2V0UG9zLnggPSAwO1xyXG4gICAgLy9cclxuICAgIC8vICAgICB9XHJcbiAgICAvL1xyXG4gICAgLy8gICAgIGlmICh0aGlzLnRhcmdldFBvcy55ID4gdGhpcy5fbWFwUGFyYW1zLm1hcEhlaWdodCAtIHRoaXMud2luU2l6ZS5oZWlnaHQpIHtcclxuICAgIC8vICAgICAgICAgdGhpcy50YXJnZXRQb3MueSA9IHRoaXMuX21hcFBhcmFtcy5tYXBIZWlnaHQgLSB0aGlzLndpblNpemUuaGVpZ2h0O1xyXG4gICAgLy8gICAgIH0gZWxzZSBpZiAodGhpcy50YXJnZXRQb3MueSA8IDApIHtcclxuICAgIC8vICAgICAgICAgdGhpcy50YXJnZXRQb3MueSA9IDA7XHJcbiAgICAvLyAgICAgfVxyXG4gICAgLy9cclxuICAgIC8vXHJcbiAgICAvLyAgICAgdGhpcy50YXJnZXRQb3MueiA9IHRoaXMuY2FtZXJhLm5vZGUucG9zaXRpb24uejtcclxuICAgIC8vXHJcbiAgICAvLyAgICAgLy/mkYTlg4/mnLrlubPmu5Hot5/pmo9cclxuICAgIC8vICAgICB0aGlzLnRhcmdldFBvcyA9IHRoaXMuY2FtZXJhLm5vZGUucG9zaXRpb24uY2xvbmUoKS5sZXJwKHRoaXMudGFyZ2V0UG9zLCBkdCAqIDIuMCk7XHJcbiAgICAvLyAgICAgLy8gdGhpcy5jYW1lcmEubm9kZS5wb3NpdGlvbiA9IHRoaXMudGFyZ2V0UG9zO1xyXG4gICAgLy8gICAgIHRoaXMuY2FtZXJhLm5vZGUuc2V0UG9zaXRpb24odGhpcy50YXJnZXRQb3MpO1xyXG4gICAgLy9cclxuICAgIC8vICAgICAvLyBpZiAodGhpcy5fbWFwUGFyYW1zLm1hcExvYWRNb2RlbCA9PSBNYXBMb2FkTW9kZWwuc2xpY2VzKSB7XHJcbiAgICAvLyAgICAgLy8gICAgIHRoaXMubWFwTGF5ZXIubG9hZFNsaWNlSW1hZ2UodGhpcy50YXJnZXRQb3MueCwgdGhpcy50YXJnZXRQb3MueSk7XHJcbiAgICAvLyAgICAgLy8gfVxyXG4gICAgLy9cclxuICAgIC8vIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOWwhuinhumHjuWvueWHhueOqeWutlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgc2V0Vmlld1RvUGxheWVyKCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuc2V0Vmlld1RvUG9pbnQodGhpcy5wbGF5ZXIubm9kZS5wb3NpdGlvbi54LCB0aGlzLnBsYXllci5ub2RlLnBvc2l0aW9uLnkpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgb25NYXBUb3VjaChldmVudDogRXZlbnRUb3VjaCk6IHZvaWQgeyBcclxuICAgICAgICB2YXIgdG91UG9zOiBWZWMzID0gbmV3IFZlYzMoZXZlbnQuZ2V0VUlMb2NhdGlvbigpLngsIGV2ZW50LmdldFVJTG9jYXRpb24oKS55KTtcclxuICAgICAgICB2YXIgdGFyZ2V0UG9zOiBWZWMzID0gbmV3IFZlYzMoKTtcclxuICAgICAgICBWZWMzLmFkZCh0YXJnZXRQb3MsIHRoaXMuY2FtZXJhLm5vZGUucG9zaXRpb24sIHRvdVBvcyk7IC8v6K6h566X54K55Ye75Zyw5Zu+55qE5L2N572u77yM6K6h566X57uT5p6c6L6T5Ye65YiwdGFyZ2V0UG9zXHJcbiAgICAgICAgY29uc29sZS5sb2coXCLngrnlh7vnmoTlg4/ntKDlnZDmoIdcIiwgdGFyZ2V0UG9zLngsIHRhcmdldFBvcy55KTtcclxuICAgICAgICB0aGlzLnBsYXllci5uYXZUbyh0YXJnZXRQb3MueCwgdGFyZ2V0UG9zLnkpO1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKHRoaXMucGxheWVyKTtcclxuICAgIH1cclxuXHJcbiAgICB1cGRhdGUoZGVsdGFUaW1lOiBudW1iZXIpIHtcclxuXHJcbiAgICAgICAgaWYgKCF0aGlzLmlzSW5pdCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmKHRoaXMucGxheWVyKXtcclxuICAgICAgICAgICAgdGhpcy5mb2xsb3dUYXJnZXQodGhpcy5wbGF5ZXIubm9kZSxkZWx0YVRpbWUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyB0aGlzLmZvbGxvd1BsYXllcihkZWx0YVRpbWUpO1xyXG5cclxuICAgIH1cclxufVxyXG5cclxuXHJcbiIsImltcG9ydCB7IFZlYzMgfSBmcm9tIFwiY2NcIjtcclxuaW1wb3J0IHsgSGFzaE1hcCB9IGZyb20gXCIuLi8uLi9Db21tb24vbWFwcy9IYXNoTWFwXCI7XHJcbmltcG9ydCB7IENvbnRhaW5lcnMgfSBmcm9tIFwiLi9Db250YWluZXJzXCI7XHJcbmltcG9ydCB7IFVuaXQgfSBmcm9tIFwiLi9Vbml0XCI7XHJcbmltcG9ydCB7IElEZXB0aEhlbHBlciB9IGZyb20gXCIuL2RlcHRoSGVscGVyL0RlcHRoSGVscGVyXCI7XHJcbmltcG9ydCB7IEdhbWVDb25zdCB9IGZyb20gXCIuL0dhbWVDb25zdFwiO1xyXG5cclxuLyoqXHJcbiAqIEBmaWxlTmFtZSBTY2VuZS50c1xyXG4gKiBAYXV0aG9yIHpoYW5ncWlvbmdcclxuICogQGRhdGUgMjAyNC8xMi8yMyAxNTo0Nzo0M1wiXHJcbiAqIEBkZXNjcmlwdGlvblxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIFNjZW5lIGV4dGVuZHMgQ29udGFpbmVycyB7XHJcbiAgICBpZDogc3RyaW5nO1xyXG4gICAgdHlwZTogc3RyaW5nO1xyXG4gICAgdW5pdE1hcDogSGFzaE1hcDxzdHJpbmcsIFVuaXQ+O1xyXG4gICAgdW5pdE5hbWVNYXA6IEhhc2hNYXA8c3RyaW5nLCBVbml0PjtcclxuICAgIGVudGl0eVR5cGVNYXA6IEhhc2hNYXA8bnVtYmVyLCBVbml0W10+O1xyXG5cclxuICAgIGRlcHRoSGVscGVyOiBJRGVwdGhIZWxwZXJbXTtcclxuXHJcbiAgICBsYXllcnM6IHN0cmluZ1tdID0gW107XHJcblxyXG4gICAgcHJpdmF0ZSBfc3RhdHVzOiBzdHJpbmc7XHJcblxyXG4gICAgcHJpdmF0ZSBxdWV1ZTogVW5pdFtdID0gW107XHJcblxyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgc3VwZXIoKTtcclxuICAgICAgICB0aGlzLnVuaXRNYXAgPSBuZXcgSGFzaE1hcDxzdHJpbmcsIFVuaXQ+KCk7XHJcbiAgICAgICAgdGhpcy51bml0TmFtZU1hcCA9IG5ldyBIYXNoTWFwPHN0cmluZywgVW5pdD4oKTtcclxuICAgICAgICB0aGlzLmVudGl0eVR5cGVNYXAgPSBuZXcgSGFzaE1hcDxudW1iZXIsIFVuaXRbXT4oKTtcclxuICAgICAgICB0aGlzLnF1ZXVlID0gW107XHJcbiAgICAgICAgdGhpcy5kZXB0aEhlbHBlciA9IFtdO1xyXG4gICAgfVxyXG5cclxuICAgIGluaXQoKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5yZW1vdmVEZXB0aCgpO1xyXG5cclxuICAgICAgICB0aGlzLmxheWVycyA9IFtcclxuICAgICAgICAgICAgR2FtZUNvbnN0LkJHX0xBWUVSLFxyXG4gICAgICAgICAgICBHYW1lQ29uc3QuTUFQX0JvdHRvbV9Sb2xlX0xBWUVSLFxyXG4gICAgICAgICAgICBHYW1lQ29uc3QuTUFQX0xBWUVSLFxyXG4gICAgICAgICAgICBHYW1lQ29uc3QuREVDT1JBVEVfTEFZRVIsXHJcbiAgICAgICAgICAgIEdhbWVDb25zdC5NQVBfU0hBRE9XX0xBWUVSLFxyXG4gICAgICAgICAgICBHYW1lQ29uc3QuTUFQX01BR0lDX0xBWUVSLFxyXG4gICAgICAgICAgICBHYW1lQ29uc3QuTUFQX0VGRkVDVF9MQVlFUixcclxuICAgICAgICAgICAgR2FtZUNvbnN0Lk1BUF9EUk9QX0xBWUVSLFxyXG4gICAgICAgICAgICBHYW1lQ29uc3QuRUZGRUNUX0JvdHRvbV9MQVlFUixcclxuICAgICAgICAgICAgR2FtZUNvbnN0LkVGRkVDVF9UT1BfTEFZRVIsXHJcbiAgICAgICAgICAgIEdhbWVDb25zdC5ST0xFX0xBWUVSLFxyXG4gICAgICAgICAgICBHYW1lQ29uc3QuUk9MRV9OQU1FX0xBWUVSLFxyXG4gICAgICAgICAgICBHYW1lQ29uc3QuRUZGRUNUX0xBWUVSLFxyXG4gICAgICAgICAgICBHYW1lQ29uc3QuSElUX0VGRkVDVF9MQVlFUixcclxuICAgICAgICAgICAgR2FtZUNvbnN0LkNFTlRFUl9MQVlFUixcclxuICAgICAgICAgICAgR2FtZUNvbnN0LlRPUF9MQVlFUixcclxuICAgICAgICAgICAgR2FtZUNvbnN0LkhVUlRfRUZGRUNUX0xBWUVSLFxyXG4gICAgICAgIF1cclxuICAgICAgICB0aGlzLnNldENvbnRhaW5lcnModGhpcy5sYXllcnMpO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5sYXllcnMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgY29uc3QgbGF5ZXJOYW1lOiBzdHJpbmcgPSB0aGlzLmxheWVyc1tpXTtcclxuXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmluaXREZXB0aExheWVyKCk7XHJcbiAgICAgICAgdGhpcy5vbkluaXQoKTtcclxuICAgIH1cclxuXHJcbiAgICBzZXRTb3J0KHY6IGJvb2xlYW4pOiB2b2lkIHtcclxuICAgICAgICBpZiAodGhpcy5kZXB0aEhlbHBlcikge1xyXG4gICAgICAgICAgICBpZiAodikge1xyXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBkZXB0aCBvZiB0aGlzLmRlcHRoSGVscGVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZGVwdGguc3RhcnQoMjAwKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgZGVwdGggb2YgdGhpcy5kZXB0aEhlbHBlcikge1xyXG4gICAgICAgICAgICAgICAgICAgIGRlcHRoLnN0b3AoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcm90ZWN0ZWQgc2V0RGVwdGhzKGRlcHRoTGF5ZXJzOiBzdHJpbmdbXSwgdHlwZTogbnVtYmVyID0gMSk6IHZvaWQge1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZGVwdGhMYXllcnMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgY29uc3QgbGF5ZXI6IHN0cmluZyA9IGRlcHRoTGF5ZXJzW2ldO1xyXG4gICAgICAgICAgICAvL3RvZG9cclxuICAgICAgICAgICAgY29uc3QgZGVwdGhIZWxwZXI6IElEZXB0aEhlbHBlciA9IG51bGw7XHJcbiAgICAgICAgICAgIGRlcHRoSGVscGVyLmxheWVyTmFtZSA9IGxheWVyO1xyXG4gICAgICAgICAgICBkZXB0aEhlbHBlci5zZXRUYXJnZXQodGhpcy5nZXRDaGlsZENvbnRhaW5lcihsYXllcikpO1xyXG4gICAgICAgICAgICB0aGlzLmRlcHRoSGVscGVyLnB1c2goZGVwdGhIZWxwZXIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnNldFNvcnQodHJ1ZSk7XHJcbiAgICB9XHJcblxyXG4gICAgaW5pdERlcHRoTGF5ZXIoKTogdm9pZCB7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIGVudGVyKCk6IHZvaWQge1xyXG5cclxuICAgIH1cclxuXHJcbiAgICBvbkVudGVyKCk6IHZvaWQge1xyXG5cclxuICAgIH1cclxuXHJcbiAgICBsZWF2ZSgpOiB2b2lkIHtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgb25MZWF2ZSgpOiB2b2lkIHtcclxuXHJcbiAgICB9XHJcblxyXG5cclxuICAgIHByb3RlY3RlZCBvbkluaXQoKTogdm9pZCB7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIGNsZWFyKCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuZW50aXR5VHlwZU1hcC5jbGVhcigpO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICBzZXRTdGF0dXMoc3RhdHVzOiBzdHJpbmcpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLl9zdGF0dXMgPSBzdGF0dXM7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0U3RhdHVzKCk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3N0YXR1cztcclxuICAgIH1cclxuXHJcbiAgICByZXNldFVuaXRJZChvbGRQYXJ0SWQ6IHN0cmluZywgbmV3UGFydElkOiBzdHJpbmcpOiB2b2lkIHtcclxuICAgICAgICBpZiAodGhpcy51bml0TWFwLmhhc0tleShvbGRQYXJ0SWQpKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHVuaXQ6IFVuaXQgPSB0aGlzLnVuaXRNYXAucmVtb3ZlKG9sZFBhcnRJZCk7XHJcbiAgICAgICAgICAgIHRoaXMudW5pdE1hcC5wdXQobmV3UGFydElkLCB1bml0KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldElkKCk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaWQ7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldE5hbWUoKTogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5uYW1lO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzZXRMb2NhdGlvbih4OiBudW1iZXIsIHk6IG51bWJlcik6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuc2V0UG9zaXRpb24oeCwgeSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldExvY2F0aW9uKCk6IFZlYzMge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnBvc2l0aW9uLmNsb25lKCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldExvY2F0aW9uU2NhbGUoKTogVmVjMyB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc2NhbGUuY2xvbmUoKTtcclxuICAgIH1cclxuXHJcbiAgICByZW1vdmVEZXB0aCgpOiB2b2lkIHtcclxuICAgICAgICBpZiAodGhpcy5kZXB0aEhlbHBlcikge1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuZGVwdGhIZWxwZXIubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZGVwdGhIZWxwZXJbaV0uZGVzdG9yeSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuZGVwdGhIZWxwZXIgPSBbXTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZGVzdHJveSgpOiBib29sZWFuIHtcclxuICAgICAgICBjb25zdCB1bml0T2JqOiBPYmplY3QgPSB0aGlzLnVuaXRNYXAuZ2V0Q29udGFpbmVyKCk7XHJcbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gdW5pdE9iaikge1xyXG5cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMudW5pdE1hcC5jbGVhcigpO1xyXG4gICAgICAgIHRoaXMudW5pdE5hbWVNYXAuY2xlYXIoKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHN1cGVyLmRlc3Ryb3koKTtcclxuICAgIH1cclxuXHJcbiAgICB1cGRhdGVTY2VuZSgpOiB2b2lkIHtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgYWRkVW5pdCh1bml0OiBVbml0KTogdm9pZCB7XHJcbiAgICAgICAgbGV0IGlzUmVwZWF0OiBib29sZWFuID0gZmFsc2U7XHJcbiAgICAgICAgaWYgKHRoaXMudW5pdE1hcC5oYXNLZXkodW5pdC5nZXRJZCgpKSkge1xyXG4gICAgICAgICAgICBpc1JlcGVhdCA9IHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuYWRkVW5pdFRvVHlwZU1hcCh1bml0KTtcclxuICAgICAgICB0aGlzLnVuaXRNYXAucHV0KHVuaXQuZ2V0SWQoKSwgdW5pdCk7XHJcbiAgICAgICAgdGhpcy51bml0TmFtZU1hcC5wdXQodW5pdC5nZXROYW1lKCksIHVuaXQpO1xyXG4gICAgICAgIHVuaXQuc2V0U2NlbmUodGhpcyk7XHJcbiAgICAgICAgaWYgKCFpc1JlcGVhdCkge1xyXG4gICAgICAgICAgICB0aGlzLnF1ZXVlLnB1c2godW5pdCk7XHJcbiAgICAgICAgICAgIHRoaXMucXVldWVBZGRDaGlsZCgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBhZGRVbml0VG9UeXBlTWFwKHVuaXQ6IFVuaXQpOiB2b2lkIHtcclxuICAgICAgICBsZXQgdW5pdHM6IFVuaXRbXSA9IHRoaXMuZW50aXR5VHlwZU1hcC5nZXQodW5pdC50eXBlKTtcclxuICAgICAgICBpZiAoIXVuaXRzKSB7XHJcbiAgICAgICAgICAgIHVuaXRzID0gW107XHJcbiAgICAgICAgICAgIHRoaXMuZW50aXR5VHlwZU1hcC5wdXQodW5pdC50eXBlLCB1bml0cyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghdGhpcy51bml0TWFwLmhhc0tleSh1bml0LmdldElkKCkpKSB7XHJcbiAgICAgICAgICAgIHVuaXRzLnB1c2godW5pdCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJlb212ZVVuaXRUb1R5cGVNYXAodW5pdDogVW5pdCk6IHZvaWQge1xyXG4gICAgICAgIGNvbnN0IHVuaXRzOiBVbml0W10gPSB0aGlzLmVudGl0eVR5cGVNYXAuZ2V0KHVuaXQudHlwZSk7XHJcbiAgICAgICAgaWYgKHVuaXRzKSB7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCB1bml0cy5sZW5ndGg7IGluZGV4KyspIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGVsZW1lbnQ6IFVuaXQgPSB1bml0c1tpbmRleF07XHJcbiAgICAgICAgICAgICAgICBpZiAoZWxlbWVudC5nZXRJZCgpID09IHVuaXQuZ2V0SWQoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHVuaXRzLnNwbGljZShpbmRleCwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG5cclxuICAgIGdldFVuaXRzQnlUeXBlcyh0eXBlczogbnVtYmVyW10pOiBVbml0W10ge1xyXG4gICAgICAgIGxldCByZXN1bHRzOiBVbml0W10gPSBbXTtcclxuICAgICAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgdHlwZXMubGVuZ3RoOyBpbmRleCsrKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHR5cGU6IG51bWJlciA9IHR5cGVzW2luZGV4XTtcclxuICAgICAgICAgICAgY29uc3QgdW5pdHM6IFVuaXRbXSA9IHRoaXMuZW50aXR5VHlwZU1hcC5nZXQodHlwZSk7XHJcbiAgICAgICAgICAgIGlmICh1bml0cykge1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0cyA9IHJlc3VsdHMuY29uY2F0KHVuaXRzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmVzdWx0c1xyXG4gICAgfVxyXG5cclxuICAgIHJlbW92ZVVuaXRCeUlkKGlkOiBzdHJpbmcsIGlzRGlzcG9zZTogYm9vbGVhbiA9IGZhbHNlKTogVW5pdCB7XHJcbiAgICAgICAgbGV0IHVuaXQ6IFVuaXQgPSB0aGlzLnVuaXRNYXAucmVtb3ZlKGlkKTtcclxuICAgICAgICBpZiAodW5pdCAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIHRoaXMudW5pdE5hbWVNYXAucmVtb3ZlKHVuaXQuZ2V0TmFtZSgpKTtcclxuICAgICAgICAgICAgdGhpcy5yZW1vdmVVbml0KHVuaXQsIGlzRGlzcG9zZSk7XHJcblxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdW5pdDtcclxuICAgIH1cclxuXHJcblxyXG4gICAgZ2V0VW5pdHModHlwZTogbnVtYmVyID0gMCk6IFVuaXRbXSB7XHJcbiAgICAgICAgaWYgKHR5cGUgPT0gMCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy51bml0TWFwLnZhbHVlcygpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBsZXQgcmV1c2x0czogVW5pdFtdID0gW107XHJcbiAgICAgICAgY29uc3QgdmFsdWVzOiBVbml0W10gPSB0aGlzLnVuaXRNYXAudmFsdWVzKCk7XHJcbiAgICAgICAgbGV0IHVuaXQ6IFVuaXQgPSBudWxsO1xyXG4gICAgICAgIGZvciAobGV0IGk6IG51bWJlciA9IDA7IGkgPCB2YWx1ZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgdW5pdCA9IHZhbHVlc1tpXTtcclxuICAgICAgICAgICAgaWYgKHVuaXQuZ2V0VHlwZSgpID09IHR5cGUpIHtcclxuICAgICAgICAgICAgICAgIHJldXNsdHMucHVzaCh1bml0KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmV1c2x0cztcclxuICAgIH1cclxuXHJcbiAgICByZW1vdmVVbml0QnlOYW1lKG5hbWU6IHN0cmluZywgaXNEaXNwb3NlOiBib29sZWFuID0gZmFsc2UpOiBVbml0IHtcclxuICAgICAgICBsZXQgdW5pdDogVW5pdCA9IHRoaXMuZ2V0VW5pdEJ5TmFtZShuYW1lKTtcclxuICAgICAgICBpZiAodW5pdCAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnJlbW92ZVVuaXRCeUlkKHVuaXQuZ2V0SWQoKSwgaXNEaXNwb3NlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIGdldFVuaXRCeUlkKGlkOiBzdHJpbmcpOiBVbml0IHtcclxuICAgICAgICByZXR1cm4gdGhpcy51bml0TWFwLmdldChpZCk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0VW5pdEJ5TmFtZSh1bml0TmFtZTogc3RyaW5nKTogVW5pdCB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMudW5pdE5hbWVNYXAuZ2V0KHVuaXROYW1lKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIHJlbW92ZVVuaXQodW5pdDogVW5pdCwgaXNEaXNwb3NlOiBib29sZWFuID0gZmFsc2UpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLnJlb212ZVVuaXRUb1R5cGVNYXAodW5pdCk7XHJcbiAgICAgICAgY29uc3QgcXVldWVJbmRleDogbnVtYmVyID0gdGhpcy5xdWV1ZS5pbmRleE9mKHVuaXQpXHJcbiAgICAgICAgaWYgKHF1ZXVlSW5kZXggIT0gLTEpIHtcclxuICAgICAgICAgICAgdGhpcy5xdWV1ZS5zcGxpY2UocXVldWVJbmRleCwgMSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5kZXB0aEhlbHBlci5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBjb25zdCBkZXB0aDogSURlcHRoSGVscGVyID0gdGhpcy5kZXB0aEhlbHBlcltpXTtcclxuICAgICAgICAgICAgaWYgKGRlcHRoLmxheWVyTmFtZSA9PSB1bml0LmdldExheWVyKCkpIHtcclxuICAgICAgICAgICAgICAgIGRlcHRoLnJlbW92ZUNoaWxkKHVuaXQuZ2V0RGlzcGxheSgpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodW5pdC5nZXREaXNwbGF5KCkucGFyZW50ID09IHRoaXMuZ2V0Q2hpbGRDb250YWluZXIodW5pdC5nZXRMYXllcigpKSkge1xyXG4gICAgICAgICAgICB0aGlzLmdldENoaWxkQ29udGFpbmVyKHVuaXQuZ2V0TGF5ZXIoKSkucmVtb3ZlQ2hpbGQodW5pdC5nZXREaXNwbGF5KCkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB1bml0Lm9uUmVtb3ZlKCk7XHJcbiAgICAgICAgaWYgKGlzRGlzcG9zZSkge1xyXG4gICAgICAgICAgICB1bml0LmRlc3Ryb3koKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcXVldWVBZGRDaGlsZCgpOiB2b2lkIHtcclxuICAgICAgICBpZiAodGhpcy5xdWV1ZS5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHVuaXQ6IFVuaXQgPSB0aGlzLnF1ZXVlLnNoaWZ0KCk7XHJcbiAgICAgICAgICAgIHRoaXMuZ2V0Q2hpbGRDb250YWluZXIodW5pdC5nZXRMYXllcigpKS5hZGRDaGlsZCh1bml0LmdldERpc3BsYXkoKSk7XHJcbiAgICAgICAgICAgIHVuaXQub25BZGQoKTtcclxuXHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5kZXB0aEhlbHBlci5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuZGVwdGhIZWxwZXJbaV0ubGF5ZXJOYW1lID09IHVuaXQuZ2V0TGF5ZXIoKSAmJiB0aGlzLmRlcHRoSGVscGVyICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmRlcHRoSGVscGVyW2ldLmFkZENoaWxkKHVuaXQuZ2V0RGlzcGxheSgpKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59IiwiaW1wb3J0IHtcclxuICAgIF9kZWNvcmF0b3IsXHJcbiAgICBDYW1lcmEsXHJcbiAgICBDQ0Jvb2xlYW4sXHJcbiAgICBDb21wb25lbnQsXHJcbiAgICBKc29uQXNzZXQsXHJcbiAgICBtYXRoLCBOb2RlLFxyXG4gICAgcmVzb3VyY2VzLFxyXG4gICAgU2l6ZSxcclxuICAgIFRleHR1cmUyRCxcclxuICAgIFVJVHJhbnNmb3JtLFxyXG4gICAgVmVjMyxcclxuICAgIHZpZXdcclxufSBmcm9tIFwiY2NcIjtcclxuaW1wb3J0IE1hcExheWVyIGZyb20gXCJkYjovL2Fzc2V0cy9TY3JpcHQvbW9kdWxlcy9SUEcvbGF5ZXIvTWFwTGF5ZXJcIjtcclxuaW1wb3J0IEVudGl0eUxheWVyIGZyb20gXCJkYjovL2Fzc2V0cy9TY3JpcHQvbW9kdWxlcy9SUEcvbGF5ZXIvRW50aXR5TGF5ZXJcIjtcclxuaW1wb3J0IE1hcERhdGEgZnJvbSBcImRiOi8vYXNzZXRzL1NjcmlwdC9tb2R1bGVzL1JQRy9tYXAvTWFwRGF0YVwiO1xyXG5pbXBvcnQgTWFwUGFyYW1zIGZyb20gXCJkYjovL2Fzc2V0cy9TY3JpcHQvbW9kdWxlcy9SUEcvaW5mby9NYXBQYXJhbXNcIjtcclxuaW1wb3J0IHtNYXBJdGVtVHlwZSwgTWFwTG9hZE1vZGVsfSBmcm9tIFwiZGI6Ly9hc3NldHMvU2NyaXB0L21vZHVsZXMvUlBHL0VudW1cIjtcclxuaW1wb3J0IFBhdGhGaW5kaW5nQWdlbnQgZnJvbSBcImRiOi8vYXNzZXRzL1NjcmlwdC9tb2R1bGVzL1JQRy9tYXAvUGF0aEZpbmRpbmdBZ2VudFwiO1xyXG5pbXBvcnQge1Rvd2VyTGF1bmNoZXJ9IGZyb20gXCJkYjovL2Fzc2V0cy9TY3JpcHQvbW9kdWxlcy9Ub3dlckRlZmVuc2UvVG93ZXJMYXVuY2hlclwiO1xyXG5jb25zdCB7IGNjY2xhc3MsIHByb3BlcnR5IH0gPSBfZGVjb3JhdG9yO1xyXG5AY2NjbGFzcyhcIlNjZW5lQmFzZVwiKVxyXG5leHBvcnQgY2xhc3MgU2NlbmVCYXNlIGV4dGVuZHMgQ29tcG9uZW50e1xyXG4gICAgQHByb3BlcnR5KE1hcExheWVyKVxyXG4gICAgcHVibGljIG1hcExheWVyOiBNYXBMYXllciA9IG51bGw7XHJcblxyXG4gICAgQHByb3BlcnR5KEVudGl0eUxheWVyKVxyXG4gICAgcHVibGljIGVudGl0eUxheWVyOiBFbnRpdHlMYXllciA9IG51bGw7XHJcblxyXG4gICAgQHByb3BlcnR5KENhbWVyYSlcclxuICAgIHB1YmxpYyBjYW1lcmE6IENhbWVyYSA9IG51bGw7XHJcblxyXG5cclxuICAgIHByaXZhdGUgX21hcERhdGE6IE1hcERhdGE7XHJcbiAgICBwcml2YXRlIF9tYXBJZDogbnVtYmVyO1xyXG5cclxuICAgIHByaXZhdGUgdGFyZ2V0UG9zOiBWZWMzID0gbmV3IFZlYzMoMCwgMCwgMCk7XHJcblxyXG4gICAgcHJvdGVjdGVkIHdpblNpemU6IFNpemUgPSBuZXcgU2l6ZSgpO1xyXG4gICAgcHJpdmF0ZSBfbWFwUGFyYW1zOiBNYXBQYXJhbXMgPSBudWxsO1xyXG5cclxuXHJcbiAgICBwcm90ZWN0ZWQgaXNJbml0OiBib29sZWFuID0gZmFsc2U7XHJcblxyXG4gICAgcHJvdGVjdGVkIHN0YXJ0KCkge1xyXG4gICAgICAgIHRoaXMud2luU2l6ZSA9IHZpZXcuZ2V0VmlzaWJsZVNpemUoKTtcclxuICAgICAgICB0aGlzLm5vZGUuc2V0UG9zaXRpb24obWF0aC52MygtdGhpcy53aW5TaXplLndpZHRoIC8gMiwgLXRoaXMud2luU2l6ZS5oZWlnaHQgLyAyKSk7XHJcbiAgICAgICAgdGhpcy5zZXRNYXBJZCgxKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0IG1hcERhdGEoKTogTWFwRGF0YSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX21hcERhdGE7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNldE1hcElkKG1hcElkOiBudW1iZXIsIG1hcExvYWRNb2RlbDogTWFwTG9hZE1vZGVsID0gTWFwTG9hZE1vZGVsLnNpbmdsZSkge1xyXG4gICAgICAgIHRoaXMuX21hcElkID0gbWFwSWQ7XHJcbiAgICAgICAgVG93ZXJMYXVuY2hlci5pbnN0YW5jZS5tYXBJZCA9IG1hcElkO1xyXG4gICAgICAgIHRoaXMubG9hZE1hcChtYXBJZCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldCBtYXBJZCgpOiBudW1iZXJ7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX21hcElkO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgbG9hZE1hcChtYXBJZDogbnVtYmVyLCBtYXBMb2FkTW9kZWw6IE1hcExvYWRNb2RlbCA9IE1hcExvYWRNb2RlbC5zaW5nbGUpIHtcclxuICAgICAgICBpZiAobWFwTG9hZE1vZGVsID09IE1hcExvYWRNb2RlbC5zaW5nbGUpIHtcclxuICAgICAgICAgICAgdGhpcy5sb2FkU2luZ2xlTWFwKG1hcElkKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAvLyB0aGlzLmxvYWRTbGljZXNNYXAobWFwSWQpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcm90ZWN0ZWQgZ2V0TWFwUGF0aChtYXBJZDpudW1iZXIpOnN0cmluZ3tcclxuICAgICAgICByZXR1cm4gXCJcIlxyXG4gICAgfVxyXG5cclxuICAgIHByb3RlY3RlZCBsb2FkU2luZ2xlTWFwKG1hcElkOiBudW1iZXIpIHtcclxuICAgICAgICB2YXIgZGF0YVBhdGg6IHN0cmluZyA9ICB0aGlzLmdldE1hcFBhdGgobWFwSWQpOyAvL2BNYXAvbWFwJHttYXBJZH0vbWFwJHttYXBJZH1gO1xyXG4gICAgICAgIHJlc291cmNlcy5sb2FkKGRhdGFQYXRoLCBKc29uQXNzZXQsIChlcnJvcjogRXJyb3IsIHJlczogSnNvbkFzc2V0KSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChlcnJvciAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIuWKoOi9veWcsOWbvuaVsOaNruWksei0pSBwYXRoID0gXCIsIGRhdGFQYXRoLCBcImVycm9yXCIsIGVycm9yKTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdmFyIG1hcERhdGE6IE1hcERhdGEgPSByZXMuanNvbiBhcyBNYXBEYXRhO1xyXG5cclxuICAgICAgICAgICAgdmFyIGJnUGF0aDogc3RyaW5nID0gZGF0YVBhdGggKyBcIi90ZXh0dXJlXCI7XHJcbiAgICAgICAgICAgIHJlc291cmNlcy5sb2FkKGJnUGF0aCwgVGV4dHVyZTJELCAoZXJyb3I6IEVycm9yLCB0ZXg6IFRleHR1cmUyRCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKGVycm9yICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIuWKoOi9veWcsOWbvuiDjOaZr+Wksei0pSBwYXRoID0gXCIsIGJnUGF0aCwgXCJlcnJvclwiLCBlcnJvcik7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2cobWFwRGF0YSwgdGV4KTtcclxuICAgICAgICAgICAgICAgIHRoaXMuaW5pdChtYXBEYXRhLCB0ZXgpO1xyXG4gICAgICAgICAgICAgICAgLy8gdGhpcy5zY2VuZU1hcC5pbml0KG1hcERhdGEsIHRleCwgTWFwTG9hZE1vZGVsLnNpbmdsZSlcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBpbml0KG1hcERhdGE6IE1hcERhdGEsIGJnVGV4dHVyZTogVGV4dHVyZTJEKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5fbWFwRGF0YSA9IG1hcERhdGE7XHJcblxyXG4gICAgICAgIHRoaXMuX21hcFBhcmFtcyA9IHRoaXMuZ2V0TWFwUGFyYW1zKG1hcERhdGEsIGJnVGV4dHVyZSxNYXBMb2FkTW9kZWwuc2luZ2xlKTtcclxuICAgICAgICB0aGlzLm1hcExheWVyLmluaXQodGhpcy5fbWFwUGFyYW1zKTtcclxuXHJcbiAgICAgICAgUGF0aEZpbmRpbmdBZ2VudC5pbnN0YW5jZS5pbml0KG1hcERhdGEpO1xyXG4gICAgICAgIHZhciB1aVRyYW5zZm9ybSA9IHRoaXMubm9kZS5nZXRDb21wb25lbnQoVUlUcmFuc2Zvcm0pO1xyXG4gICAgICAgIGlmICh1aVRyYW5zZm9ybSkge1xyXG4gICAgICAgICAgICB1aVRyYW5zZm9ybS53aWR0aCA9IHRoaXMubWFwTGF5ZXIud2lkdGg7XHJcbiAgICAgICAgICAgIHVpVHJhbnNmb3JtLmhlaWdodCA9IHRoaXMubWFwTGF5ZXIuaGVpZ2h0O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5pbml0TWFwRGF0YShtYXBEYXRhKTtcclxuICAgICAgICB0aGlzLmlzSW5pdCA9IHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgcHJvdGVjdGVkIGluaXRNYXBEYXRhKG1hcERhdGE6IE1hcERhdGEpIHtcclxuXHJcbiAgICB9XHJcblxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqIOiOt+W+l+WcsOWbvuWPguaVsFxyXG4gICAgICogQHBhcmFtIG1hcERhdGFcclxuICAgICAqIEBwYXJhbSBiZ1RleFxyXG4gICAgICogQHBhcmFtIG1hcExvYWRNb2RlbFxyXG4gICAgICogQHJldHVybnNcclxuICAgICAqL1xyXG4gICAgcHVibGljIGdldE1hcFBhcmFtcyhtYXBEYXRhOiBNYXBEYXRhLCBiZ1RleDogVGV4dHVyZTJELCBtYXBMb2FkTW9kZWw6IE1hcExvYWRNb2RlbCA9IDEpOiBNYXBQYXJhbXMge1xyXG4gICAgICAgIC8v5Yid5aeL5YyW5bqV5Zu+5Y+C5pWwXHJcbiAgICAgICAgdmFyIG1hcFBhcmFtczogTWFwUGFyYW1zID0gbmV3IE1hcFBhcmFtcygpO1xyXG4gICAgICAgIG1hcFBhcmFtcy5uYW1lID0gbWFwRGF0YS5uYW1lO1xyXG4gICAgICAgIG1hcFBhcmFtcy5iZ05hbWUgPSBtYXBEYXRhLmJnTmFtZTtcclxuICAgICAgICBtYXBQYXJhbXMubWFwVHlwZSA9IG1hcERhdGEudHlwZTtcclxuICAgICAgICBtYXBQYXJhbXMubWFwV2lkdGggPSBtYXBEYXRhLm1hcFdpZHRoO1xyXG4gICAgICAgIG1hcFBhcmFtcy5tYXBIZWlnaHQgPSBtYXBEYXRhLm1hcEhlaWdodDtcclxuICAgICAgICBtYXBQYXJhbXMuY2VpbFdpZHRoID0gbWFwRGF0YS5ub2RlV2lkdGg7XHJcbiAgICAgICAgbWFwUGFyYW1zLmNlaWxIZWlnaHQgPSBtYXBEYXRhLm5vZGVIZWlnaHQ7XHJcbiAgICAgICAgbWFwUGFyYW1zLnZpZXdXaWR0aCA9IG1hcERhdGEubWFwV2lkdGggPiB0aGlzLndpblNpemUud2lkdGggPyB0aGlzLndpblNpemUud2lkdGggOiBtYXBEYXRhLm1hcFdpZHRoO1xyXG4gICAgICAgIG1hcFBhcmFtcy52aWV3SGVpZ2h0ID0gbWFwRGF0YS5tYXBIZWlnaHQgPiB0aGlzLndpblNpemUuaGVpZ2h0ID8gdGhpcy53aW5TaXplLmhlaWdodCA6IG1hcERhdGEubWFwSGVpZ2h0O1xyXG4gICAgICAgIG1hcFBhcmFtcy5zbGljZVdpZHRoID0gMjU2O1xyXG4gICAgICAgIG1hcFBhcmFtcy5zbGljZUhlaWdodCA9IDI1NjtcclxuICAgICAgICBtYXBQYXJhbXMuYmdUZXggPSBiZ1RleDtcclxuICAgICAgICBtYXBQYXJhbXMubWFwTG9hZE1vZGVsID0gbWFwTG9hZE1vZGVsO1xyXG5cclxuICAgICAgICByZXR1cm4gbWFwUGFyYW1zO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICrmiorop4bph47lrprkvY3liLDnu5nlrprkvY3nva5cclxuICAgICAqIEBwYXJhbSBweFxyXG4gICAgICogQHBhcmFtIHB5XHJcbiAgICAgKlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgc2V0Vmlld1RvUG9pbnQocHg6IG51bWJlciwgcHk6IG51bWJlcik6IHZvaWQge1xyXG4gICAgICAgIHRoaXMudGFyZ2V0UG9zID0gbmV3IFZlYzMocHgsIHB5KS5zdWJ0cmFjdChuZXcgVmVjMyh0aGlzLndpblNpemUud2lkdGggLyAyLCB0aGlzLndpblNpemUuaGVpZ2h0IC8gMikpO1xyXG5cclxuICAgICAgICBpZiAodGhpcy50YXJnZXRQb3MueCA+IHRoaXMuX21hcFBhcmFtcy5tYXBXaWR0aCAtIHRoaXMud2luU2l6ZS53aWR0aCkge1xyXG4gICAgICAgICAgICB0aGlzLnRhcmdldFBvcy54ID0gdGhpcy5fbWFwUGFyYW1zLm1hcFdpZHRoIC0gdGhpcy53aW5TaXplLndpZHRoO1xyXG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy50YXJnZXRQb3MueCA8IDApIHtcclxuICAgICAgICAgICAgdGhpcy50YXJnZXRQb3MueCA9IDA7XHJcblxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoaXMudGFyZ2V0UG9zLnkgPiB0aGlzLl9tYXBQYXJhbXMubWFwSGVpZ2h0IC0gdGhpcy53aW5TaXplLmhlaWdodCkge1xyXG4gICAgICAgICAgICB0aGlzLnRhcmdldFBvcy55ID0gdGhpcy5fbWFwUGFyYW1zLm1hcEhlaWdodCAtIHRoaXMud2luU2l6ZS5oZWlnaHQ7XHJcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLnRhcmdldFBvcy55IDwgMCkge1xyXG4gICAgICAgICAgICB0aGlzLnRhcmdldFBvcy55ID0gMDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMudGFyZ2V0UG9zLnogPSB0aGlzLmNhbWVyYS5ub2RlLnBvc2l0aW9uLno7XHJcbiAgICAgICAgdGhpcy5jYW1lcmEubm9kZS5wb3NpdGlvbiA9IHRoaXMudGFyZ2V0UG9zO1xyXG5cclxuICAgICAgICAvLyBpZiAodGhpcy5fbWFwUGFyYW1zLm1hcExvYWRNb2RlbCA9PSBNYXBMb2FkTW9kZWwuc2xpY2VzKSB7XHJcbiAgICAgICAgLy8gICAgIHRoaXMubWFwTGF5ZXIubG9hZFNsaWNlSW1hZ2UodGhpcy50YXJnZXRQb3MueCwgdGhpcy50YXJnZXRQb3MueSk7XHJcbiAgICAgICAgLy8gfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog6KeG5Zu+6Lef6ZqPXHJcbiAgICAgKiBAcGFyYW0gdGFyZ2V0Tm9kZVxyXG4gICAgICogQHBhcmFtIGR0XHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBmb2xsb3dUYXJnZXQodGFyZ2V0Tm9kZTpOb2RlLGR0OiBudW1iZXIpIHtcclxuICAgICAgICBpZiAodGFyZ2V0Tm9kZSA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMudGFyZ2V0UG9zID0gdGFyZ2V0Tm9kZS5wb3NpdGlvbi5jbG9uZSgpLnN1YnRyYWN0KG5ldyBWZWMzKHRoaXMud2luU2l6ZS53aWR0aCAvIDIsIHRoaXMud2luU2l6ZS5oZWlnaHQgLyAyKSk7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLnRhcmdldFBvcy54ID4gdGhpcy5fbWFwUGFyYW1zLm1hcFdpZHRoIC0gdGhpcy53aW5TaXplLndpZHRoKSB7XHJcbiAgICAgICAgICAgIHRoaXMudGFyZ2V0UG9zLnggPSB0aGlzLl9tYXBQYXJhbXMubWFwV2lkdGggLSB0aGlzLndpblNpemUud2lkdGg7XHJcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLnRhcmdldFBvcy54IDwgMCkge1xyXG4gICAgICAgICAgICB0aGlzLnRhcmdldFBvcy54ID0gMDtcclxuXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy50YXJnZXRQb3MueSA+IHRoaXMuX21hcFBhcmFtcy5tYXBIZWlnaHQgLSB0aGlzLndpblNpemUuaGVpZ2h0KSB7XHJcbiAgICAgICAgICAgIHRoaXMudGFyZ2V0UG9zLnkgPSB0aGlzLl9tYXBQYXJhbXMubWFwSGVpZ2h0IC0gdGhpcy53aW5TaXplLmhlaWdodDtcclxuICAgICAgICB9IGVsc2UgaWYgKHRoaXMudGFyZ2V0UG9zLnkgPCAwKSB7XHJcbiAgICAgICAgICAgIHRoaXMudGFyZ2V0UG9zLnkgPSAwO1xyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIHRoaXMudGFyZ2V0UG9zLnogPSB0aGlzLmNhbWVyYS5ub2RlLnBvc2l0aW9uLno7XHJcblxyXG4gICAgICAgIC8v5pGE5YOP5py65bmz5ruR6Lef6ZqPXHJcbiAgICAgICAgdGhpcy50YXJnZXRQb3MgPSB0aGlzLmNhbWVyYS5ub2RlLnBvc2l0aW9uLmNsb25lKCkubGVycCh0aGlzLnRhcmdldFBvcywgZHQgKiAyLjApO1xyXG4gICAgICAgIC8vIHRoaXMuY2FtZXJhLm5vZGUucG9zaXRpb24gPSB0aGlzLnRhcmdldFBvcztcclxuICAgICAgICB0aGlzLmNhbWVyYS5ub2RlLnNldFBvc2l0aW9uKHRoaXMudGFyZ2V0UG9zKTtcclxuXHJcbiAgICAgICAgLy8gaWYgKHRoaXMuX21hcFBhcmFtcy5tYXBMb2FkTW9kZWwgPT0gTWFwTG9hZE1vZGVsLnNsaWNlcykge1xyXG4gICAgICAgIC8vICAgICB0aGlzLm1hcExheWVyLmxvYWRTbGljZUltYWdlKHRoaXMudGFyZ2V0UG9zLngsIHRoaXMudGFyZ2V0UG9zLnkpO1xyXG4gICAgICAgIC8vIH1cclxuXHJcbiAgICB9XHJcbn0iLCIvKiogXHJcbiAqIOeUu+W4g+eahOagh+WHhuWMluWwuuWvuO+8jOWwseaYr+S5i+WJjeivtOeahFxyXG4gKiBpUGFkIOiuvuWkh+S4reeahOeUu+W4g+WwuuWvuCA9IDEwMDEgeCAxMzM0ICjlhbbkuK0gMTAwMSDiiYggMTY2OC8xLjY2NzIpXHJcbiAqIGlQaG9uZTE26K6+5aSH5Lit55qE55S75biD5bC65a+4ID0gNzUwIHgxNjI277yI5YW25LitIDE2MjYgPSAyNTU2LzEuNTcy77yJXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgR19WSUVXX1NJWkUgPSBuZXcgU2l6ZSgwLCAwKTtcclxuaW1wb3J0IHsgX2RlY29yYXRvciwgQ29tcG9uZW50LCBOb2RlLCBSZXNvbHV0aW9uUG9saWN5LCBTaXplLCB2aWV3IH0gZnJvbSAnY2MnO1xyXG5jb25zdCB7IGNjY2xhc3MsIHByb3BlcnR5IH0gPSBfZGVjb3JhdG9yO1xyXG5cclxuLyoqXHJcbiAqIEBmaWxlTmFtZSBTY3JlZW5BZGFwdGF0aW9uLnRzXHJcbiAqIEBhdXRob3IgemhhbmdxaW9uZ1xyXG4gKiBAZGF0ZSAyMDI1LzAxLzE1IDE5OjU3OjQzXCJcclxuICogQGRlc2NyaXB0aW9uXHJcbiAqL1xyXG5cclxuQGNjY2xhc3MoJ1NjcmVlbkFkYXB0YXRpb24nKVxyXG5leHBvcnQgY2xhc3MgU2NyZWVuQWRhcHRhdGlvbiBleHRlbmRzIENvbXBvbmVudCB7XHJcbiAgICBzdGFydCgpIHtcclxuICAgICAgICB0aGlzLmFkYXB0ZXJTY3JlZW4oKTtcclxuICAgIH1cclxuXHJcbiAgICBwcm90ZWN0ZWQgdXBkYXRlKGR0OiBudW1iZXIpOiB2b2lkIHtcclxuICAgICAgICAvLyB0aGlzLmFkYXB0ZXJTY3JlZW4oKTtcclxuICAgIH1cclxuXHJcbiAgICBhZGFwdGVyU2NyZWVuKCkge1xyXG4gICAgICAgIGxldCByZXNvbHV0aW9uUG9saWN5OiBSZXNvbHV0aW9uUG9saWN5ID0gdmlldy5nZXRSZXNvbHV0aW9uUG9saWN5KCk7XHJcbiAgICAgICAgbGV0IGRlc2lnblNpemUgPSB2aWV3LmdldERlc2lnblJlc29sdXRpb25TaXplKCk7XHJcbiAgICAgICAgLy8gbGV0IGZyYW1lU2l6ZSA9ICBzY3JlZW4ud2luZG93U2l6ZTtcclxuICAgICAgICBsZXQgZnJhbWVXID0gc2NyZWVuLndpZHRoO1xyXG4gICAgICAgIGxldCBmcmFtZUggPSBzY3JlZW4uaGVpZ2h0O1xyXG4gICAgICAgIC8qKiDmmK/lkKbmmK/lsY/luZXmm7Tlrr0gKi9cclxuICAgICAgICBjb25zdCBpc1NjcmVlbldpZHRoTGFyZ2VyID0gKGZyYW1lVyAvIGZyYW1lSCkgPiAoZGVzaWduU2l6ZS53aWR0aCAvIGRlc2lnblNpemUuaGVpZ2h0KTtcclxuICAgICAgICBsZXQgdGFyZ2V0UmVzb2x1dGlvblBvbGljeSA9IGlzU2NyZWVuV2lkdGhMYXJnZXIgPyBSZXNvbHV0aW9uUG9saWN5LkZJWEVEX0hFSUdIVCA6IFJlc29sdXRpb25Qb2xpY3kuRklYRURfV0lEVEg7XHJcbiAgICAgICAgaWYgKHRhcmdldFJlc29sdXRpb25Qb2xpY3kgIT09IHJlc29sdXRpb25Qb2xpY3kuZ2V0Q29udGVudFN0cmF0ZWd5KCkuc3RyYXRlZ3kpIHtcclxuICAgICAgICAgICAgLyoqIOS/neivgeiuvuiuoeWIhui+qOeOh+eahOWGheWuuemDveiDveaYvuekuuWHuuadpSAqL1xyXG4gICAgICAgICAgICB2aWV3LnNldERlc2lnblJlc29sdXRpb25TaXplKGRlc2lnblNpemUud2lkdGgsIGRlc2lnblNpemUuaGVpZ2h0LCB0YXJnZXRSZXNvbHV0aW9uUG9saWN5KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKiDlrp7pmYXnmoTlsLrlr7jkvJrlkozorr7orqHliIbovqjnjoflnKjkuIDkuKrnu7TluqbvvIzkvYbmmK/lrr3miJbpq5jmm7TlpKcgKi9cclxuICAgICAgICBpZiAoaXNTY3JlZW5XaWR0aExhcmdlcikge1xyXG4gICAgICAgICAgICBHX1ZJRVdfU0laRS53aWR0aCA9IE1hdGguY2VpbChkZXNpZ25TaXplLmhlaWdodCAqIHNjcmVlbi53aWR0aCAvIHNjcmVlbi5oZWlnaHQpO1xyXG4gICAgICAgICAgICBHX1ZJRVdfU0laRS5oZWlnaHQgPSBkZXNpZ25TaXplLmhlaWdodDtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBHX1ZJRVdfU0laRS53aWR0aCA9IGRlc2lnblNpemUud2lkdGg7XHJcbiAgICAgICAgICAgIEdfVklFV19TSVpFLmhlaWdodCA9IE1hdGguY2VpbChkZXNpZ25TaXplLndpZHRoICogc2NyZWVuLmhlaWdodCAvIHNjcmVlbi53aWR0aCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zb2xlLmxvZyhg5bGP5bmVJHtpc1NjcmVlbldpZHRoTGFyZ2VyID8gXCLmm7Tlrr0sIOmrmOW6pumAgumFjVwiIDogXCLmm7Tpq5gsIOWuveW6pumAgumFjVwifSDorr7orqHliIbovqjnjofmr5TkvovkuIvnmoTlsY/luZXlsLrlr7g6ICR7R19WSUVXX1NJWkUud2lkdGh9eCR7R19WSUVXX1NJWkUuaGVpZ2h0fWApO1xyXG4gICAgfVxyXG59IiwiaW1wb3J0IHtfZGVjb3JhdG9yLCBDb21wb25lbnQsIEV2ZW50VG91Y2gsIE5vZGVFdmVudFR5cGUsIHJlc291cmNlcywgU3ByaXRlLCBTcHJpdGVGcmFtZSwgVGV4dHVyZTJELCBWZWMzfSBmcm9tICdjYyc7XHJcbmltcG9ydCB7VG93ZXJDb25maWd9IGZyb20gXCJkYjovL2Fzc2V0cy9TY3JpcHQvbW9kdWxlcy9Ub3dlckRlZmVuc2UvVG93ZXJDb25maWdcIjtcclxuaW1wb3J0IHtUb3dlckxhdW5jaGVyfSBmcm9tIFwiZGI6Ly9hc3NldHMvU2NyaXB0L21vZHVsZXMvVG93ZXJEZWZlbnNlL1Rvd2VyTGF1bmNoZXJcIjtcclxuaW1wb3J0IHtUb3dlckdhbWVVSU1hbmFnZXJ9IGZyb20gXCJkYjovL2Fzc2V0cy9TY3JpcHQvbW9kdWxlcy9Ub3dlckRlZmVuc2UvVG93ZXJHYW1lVUlNYW5hZ2VyXCI7XHJcbmltcG9ydCB7IFRvd2VyQnVpbGRJbmZvIH0gZnJvbSAnLi9pbmZvL1Rvd2VyQnVpbGRJbmZvJztcclxuXHJcbmNvbnN0IHsgY2NjbGFzcywgcHJvcGVydHkgfSA9IF9kZWNvcmF0b3I7XHJcblxyXG5AY2NjbGFzcygnU2VsZWN0VG93ZXJCdWlsZCcpXHJcbmV4cG9ydCBjbGFzcyBTZWxlY3RUb3dlckJ1aWxkIGV4dGVuZHMgQ29tcG9uZW50IHtcclxuXHJcbiAgICBwcml2YXRlIGNhbGxCYWNrOihidWlsZEluZm86VG93ZXJCdWlsZEluZm8pID0+IHZvaWQ7XHJcbiAgICBwcml2YXRlIGNhbGxPYmo6YW55O1xyXG5cclxuICAgIHByaXZhdGUgdG93ZXJJZDpudW1iZXI7XHJcbiAgICBwcml2YXRlIGxldmVsOm51bWJlcjtcclxuICAgIHB1YmxpYyBidWlsZEluZm86VG93ZXJCdWlsZEluZm87XHJcblxyXG4gICAgcHJpdmF0ZSB0b3dlckRhdGE6e2J1aWxkQ29zdDpudW1iZXIscmVtb3ZlQmFjazpudW1iZXJ9ID0gbnVsbDtcclxuICAgIHN0YXJ0KCkge1xyXG4gICAgICAgIHRoaXMubm9kZS5vbihOb2RlRXZlbnRUeXBlLlRPVUNIX1NUQVJULCB0aGlzLm9uVG91Y2hOb2RlLHRoaXMpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgb25Ub3VjaE5vZGUoZXZlbnQ6RXZlbnRUb3VjaCk6dm9pZHtcclxuICAgICAgICBpZighdGhpcy50b3dlckRhdGEpe1xyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFwi5b2T5YmN6YCJ5Lit5aGU55qE6YWN572u5LiN5a2Y5ZyoXCIpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmKFRvd2VyTGF1bmNoZXIuaW5zdGFuY2UudmFsdWUgPj0gdGhpcy50b3dlckRhdGEuYnVpbGRDb3N0KXtcclxuICAgICAgICAgICAgaWYodGhpcy5jYWxsQmFjayAmJiB0aGlzLmNhbGxPYmope1xyXG4gICAgICAgICAgICAgICAgdGhpcy5idWlsZEluZm8uc2VsZWN0ZWRUb3dlcklkID0gdGhpcy50b3dlcklkO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jYWxsQmFjay5jYWxsKHRoaXMuY2FsbE9iaix0aGlzLmJ1aWxkSW5mbyk7XHJcbiAgICAgICAgICAgICAgICBUb3dlckdhbWVVSU1hbmFnZXIuaW5zdGFuY2Uuc2hvd1NlbGVjdFRvd2VyKGZhbHNlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc2V0VG93ZXJJZChpZDpudW1iZXIsbGV2ZWw6bnVtYmVyID0gMSk6dm9pZHtcclxuICAgICAgICB0aGlzLnRvd2VySWQgPSBpZDtcclxuICAgICAgICB0aGlzLmxldmVsID0gbGV2ZWw7XHJcblxyXG4gICAgICAgIGNvbnN0IHRvd2VyRGF0YSA9IFRvd2VyQ29uZmlnLmluc3RhbmNlLmdldFRvd2VyQ29uZmlnKHRoaXMudG93ZXJJZCx0aGlzLmxldmVsKTtcclxuICAgICAgICBpZih0b3dlckRhdGEpe1xyXG4gICAgICAgICAgICB0aGlzLnRvd2VyRGF0YSA9IHRvd2VyRGF0YTtcclxuICAgICAgICAgICAgY29uc3QgY2FuQnVpbGQ6Ym9vbGVhbiA9IFRvd2VyTGF1bmNoZXIuaW5zdGFuY2UudmFsdWUgPj0gdG93ZXJEYXRhLmJ1aWxkQ29zdDtcclxuICAgICAgICAgICAgY29uc3QgYnVpbGRQYXRoOnN0cmluZyA9IGB0b3dlci9yZXMvTm9ybWFsTW9yZGVsL0dhbWUvVG93ZXIvJHt0aGlzLnRvd2VySWR9L0NhbkNsaWNrJHtjYW5CdWlsZCA/IDEgOiAwfS90ZXh0dXJlYDtcclxuICAgICAgICAgICAgcmVzb3VyY2VzLmxvYWQoYnVpbGRQYXRoLFRleHR1cmUyRCwoZXJyLHRleDpUZXh0dXJlMkQpPT57XHJcbiAgICAgICAgICAgICAgICBpZihlcnIpe1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyLnN0YWNrKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjb25zdCBzcHJpdGU6U3ByaXRlID0gdGhpcy5ub2RlLmdldENvbXBvbmVudChTcHJpdGUpO1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgc3BmOlNwcml0ZUZyYW1lID0gbmV3IFNwcml0ZUZyYW1lKCk7XHJcbiAgICAgICAgICAgICAgICBzcGYudGV4dHVyZSA9IHRleDtcclxuICAgICAgICAgICAgICAgIHNwcml0ZS5zcHJpdGVGcmFtZSA9IHNwZjtcclxuICAgICAgICAgICAgfSlcclxuXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzZXRCdWlsZEluZm8oYnVpbGRJbmZvOlRvd2VyQnVpbGRJbmZvKXtcclxuICAgICAgICB0aGlzLmJ1aWxkSW5mbyA9IGJ1aWxkSW5mbztcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc2V0Q2xpY2tDYWxsKGNhbGw6KGJ1aWxkSW5mbzpUb3dlckJ1aWxkSW5mbyk9PnZvaWQsY2FsbE9iajphbnkpOnZvaWR7XHJcbiAgICAgICAgdGhpcy5jYWxsQmFjayA9IGNhbGw7XHJcbiAgICAgICAgdGhpcy5jYWxsT2JqID0gY2FsbE9iajtcclxuICAgIH1cclxuXHJcbiAgICB1cGRhdGUoZGVsdGFUaW1lOiBudW1iZXIpIHtcclxuICAgICAgICBcclxuICAgIH1cclxufVxyXG5cclxuXHJcbiIsIi8qKlxyXG4gKiBAZmlsZU5hbWUgU2tpbGxDb25maWdWby50c1xyXG4gKiBAYXV0aG9yIHpoYW5ncWlvbmdcclxuICogQGRhdGUgMjAyNC8xMi8zMSAxOTozNjo1NlwiXHJcbiAqIEBkZXNjcmlwdGlvblxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIFNraWxsQ29uZmlnVm8ge1xyXG4gICAgc2tpbGxJZDogbnVtYmVyO1xyXG4gICAgZmlyc3RDZDogbnVtYmVyO1xyXG4gICAgY2Q6IG51bWJlcjtcclxuICAgIC8qKiAx6KGo56S66IO96YeP5oqA6IO977yMMuiHquWKqOmHiuaUvuaKgOiDve+8jDPooqvliqjmioDog73vvIw06KKr5Yqo6Kem5Y+R5Li75Yqo5oqA6IO9LCA156We5Zmo5oqA6IO9LjblnKPpvpnmioDog70gKi9cclxuICAgIHR5cGU6IG51bWJlcjtcclxuICAgIC8qKiDkuLvnm67moIcgKi9cclxuICAgIHRhcmdldDogbnVtYmVyO1xyXG4gICAgLyoqIDHmma7mlLsgMuaKgOiDvSAqL1xyXG4gICAgc2tpbGxUeXBlOiBudW1iZXI7XHJcblxyXG4gICAgLy/pgInmi6nnm67moIfnsbvlnosgMO+8mumAieaLqeexu+WeiyAxOiDpgInmi6npmLXokKXnsbvlnosgMSDkuI3lkIzpmLXokKUgMiDlkIzpmLXokKUgMyDlhajpg6hcclxuICAgIHRhcmdldFR5cGVzOiBudW1iZXJbXTtcclxuICAgIC8qKiDmlr3ms5Xot53nprsgKi9cclxuICAgIGRpc3RhbmNlOiBudW1iZXI7XHJcbiAgICAvKiog5oqA6IO95Lyk5a6zICovXHJcbiAgICBodXJ0OiBudW1iZXI7XHJcbiAgICAvKiog5oGi5aSN55qE6IO96YePICovXHJcbiAgICByZWNvdmV5QW5nZXI6IG51bWJlcjtcclxuXHJcblxyXG59IiwiXHJcbmltcG9ydCB7Tm9kZSwgQ0NJbnRlZ2VyLCBDb21wb25lbnQsIF9kZWNvcmF0b3IsIFZlYzMsIENDQm9vbGVhbiB9IGZyb20gXCJjY1wiO1xyXG5pbXBvcnQgeyBFZGl0U3Bhd25Qb2ludERhdGEgfSBmcm9tIFwiLi4vRWRpdE9iakRhdGFcIjtcclxuXHJcbmNvbnN0IHsgY2NjbGFzcywgcHJvcGVydHkgfSA9IF9kZWNvcmF0b3I7XHJcblxyXG4vKipcclxuICog5Zyw5Zu+5Ye655Sf54K5XHJcbiAqL1xyXG5AY2NjbGFzcygnU3Bhd25Qb2ludCcpXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNwYXduUG9pbnQgZXh0ZW5kcyBDb21wb25lbnQge1xyXG5cclxuICAgIC8qKlxyXG4gICAgICog5Zyo5pys5Zyw5Zu+77yM5Ye655Sf54K5SWRcclxuICAgICAqL1xyXG4gICAgQHByb3BlcnR5KENDSW50ZWdlcilcclxuICAgIHB1YmxpYyBzcGF3bklkOiBudW1iZXIgPSAwO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICog5piv5ZCm5piv6buY6K6k5Ye655Sf54K5XHJcbiAgICAgKi9cclxuICAgIEBwcm9wZXJ0eShDQ0Jvb2xlYW4pXHJcbiAgICBwdWJsaWMgZGVmYXVsdFNwYXduOmJvb2xlYW4gPSBmYWxzZVxyXG4gICAgXHJcbiAgICAvKipcclxuICAgICAqIOe8lui+keeahOaVsOaNrlxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIGVkaXREYXRhOkVkaXRTcGF3blBvaW50RGF0YSA9IG51bGw7XHJcbiAgICAvLyBMSUZFLUNZQ0xFIENBTExCQUNLUzpcclxuXHJcbiAgICAvLyBvbkxvYWQgKCkge31cclxuXHJcbiAgICBzdGFydCAoKSB7XHJcbiAgICAgICAgLy90aGlzLm5vZGUub3BhY2l0eSA9IDA7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDliJ3lp4vljJZcclxuICAgICAqL1xyXG4gICAgcHVibGljIGluaXQoKVxyXG4gICAge1xyXG5cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOWIneWni+WMlue8lui+keaVsOaNrlxyXG4gICAgICogQHBhcmFtIGVkaXREYXRhIFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgaW5pdEVkaXREYXRhKGVkaXREYXRhOkVkaXRTcGF3blBvaW50RGF0YSlcclxuICAgIHtcclxuICAgICAgICB0aGlzLmVkaXREYXRhID0gZWRpdERhdGE7XHJcblxyXG4gICAgICAgIHRoaXMubm9kZS5wb3NpdGlvbiA9IG5ldyBWZWMzKGVkaXREYXRhLngsZWRpdERhdGEueSk7XHJcblxyXG4gICAgICAgIHRoaXMuc3Bhd25JZCA9IGVkaXREYXRhLnNwYXduSWQ7XHJcbiAgICAgICAgdGhpcy5kZWZhdWx0U3Bhd24gPSBlZGl0RGF0YS5kZWZhdWx0U3Bhd247XHJcbiAgICB9XHJcblxyXG4gICAgLy8gdXBkYXRlIChkdCkge31cclxufVxyXG4iLCJpbXBvcnQgeyBfZGVjb3JhdG9yLCBBc3NldCwgYXNzZXRNYW5hZ2VyLCBDb21wb25lbnQsIEltYWdlQXNzZXQsIE5vZGUsIHJlc291cmNlcywgc3AsIFRleHRBc3NldCwgVGV4dHVyZTJEIH0gZnJvbSAnY2MnO1xyXG5pbXBvcnQgQXNzZXRNZ3IgZnJvbSAnLi9Bc3NldE1ncic7XHJcbmltcG9ydCB7IEdhbWVDb25zdCB9IGZyb20gJy4uL21vZHVsZXMvQUZLL0dhbWVDb25zdCc7XHJcbmltcG9ydCB7IEhhbmRsZXIgfSBmcm9tICcuL0hhbmRsZXInO1xyXG5pbXBvcnQgeyBBY3Rpb25JbmZvIH0gZnJvbSAnLi4vbW9kdWxlcy9BRksvaW5mb3MvQWN0aW9uSW5mbyc7XHJcbmNvbnN0IHsgY2NjbGFzcywgcHJvcGVydHkgfSA9IF9kZWNvcmF0b3I7XHJcblxyXG5AY2NjbGFzcygnU3BpbmVTa2VsZXRvbicpXHJcbmV4cG9ydCBjbGFzcyBTcGluZVNrZWxldG9uIGV4dGVuZHMgQ29tcG9uZW50IHtcclxuICAgIHByaXZhdGUgc2tlbGV0b246IHNwLlNrZWxldG9uID0gbnVsbDtcclxuXHJcbiAgICBwcml2YXRlIHBsYXlUaW1lczogbnVtYmVyID0gLTE7XHJcbiAgICBwcml2YXRlIF9jdXJyZW50VGltZXM6IG51bWJlciA9IDA7XHJcbiAgICBwcml2YXRlIF9jdXJyZW50QW5pbWF0aW9uTmFtZTogc3RyaW5nO1xyXG4gICAgcHJpdmF0ZSBfZW5kQW5pbWF0aW9uTmFtZTogc3RyaW5nO1xyXG5cclxuICAgIHB1YmxpYyBrZXlGcmFtZUhhbmRsZXI6IEhhbmRsZXI7XHJcblxyXG4gICAgcHJpdmF0ZSBydW5pbmc6IGJvb2xlYW4gPSBmYWxzZTtcclxuXHJcbiAgICBwcml2YXRlIGFuaW1hdGlvblF1ZXVlOiBBY3Rpb25JbmZvW107XHJcblxyXG4gICAgcHJpdmF0ZSBjdXJyZW50SW5mbzogQWN0aW9uSW5mbztcclxuXHJcbiAgICBwcml2YXRlIF9yb3NvbHZlOiBhbnk7XHJcbiAgICBwcm90ZWN0ZWQgb25Mb2FkKCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuc2tlbGV0b24gPSB0aGlzLm5vZGUuZ2V0Q29tcG9uZW50KHNwLlNrZWxldG9uKTtcclxuICAgICAgICBpZiAoIXRoaXMuc2tlbGV0b24pIHtcclxuICAgICAgICAgICAgdGhpcy5za2VsZXRvbiA9IHRoaXMubm9kZS5hZGRDb21wb25lbnQoc3AuU2tlbGV0b24pO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmFuaW1hdGlvblF1ZXVlID0gW107XHJcbiAgICAgICAgLy8gdGhpcy5za2VsZXRvbi5zZXRDb21wbGV0ZUxpc3RlbmVyKHRoaXMub25BbmltYXRpb25Db21wbGV0ZSk7XHJcbiAgICB9XHJcbiAgICBzdGFydCgpIHtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNldFNwaW5lSWQoc3BpbmVJZDogbnVtYmVyLCBhbmltYXRpb25OYW1lOiBzdHJpbmcgPSBHYW1lQ29uc3QuSWRsZSk6IFByb21pc2U8dm9pZD4ge1xyXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IHNrZWxldG9uUGF0aDogc3RyaW5nID0gYHNwaW5lL2JvZHkvYWZrL2hlcm8vc2FuaW1fJHtzcGluZUlkfWA7XHJcbiAgICAgICAgICAgIHJlc291cmNlcy5sb2FkKHNrZWxldG9uUGF0aCwgc3AuU2tlbGV0b25EYXRhLCAoZXJyLCBkYXRhOiBzcC5Ta2VsZXRvbkRhdGEpID0+IHtcclxuICAgICAgICAgICAgICAgIGlmIChlcnIpIHtcclxuICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNrZWxldG9uLnNrZWxldG9uRGF0YSA9IGRhdGE7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNrZWxldG9uLnNldENvbXBsZXRlTGlzdGVuZXIodGhpcy5vbkFpbWF0aW9uQ29tcGxldGUpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaW5mbzogQWN0aW9uSW5mbyA9IG5ldyBBY3Rpb25JbmZvKGFuaW1hdGlvbk5hbWUpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXRBbmltYXRpb24oaW5mbyk7XHJcbiAgICAgICAgICAgICAgICByZXNvbHZlKCk7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfSlcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIF9vblBsYXkoaW5mbzogQWN0aW9uSW5mbyk6IHZvaWQge1xyXG4gICAgICAgIGlmICghaW5mbykge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLnNrZWxldG9uICYmIGluZm8ubmFtZSAhPSB0aGlzLl9jdXJyZW50QW5pbWF0aW9uTmFtZSkge1xyXG4gICAgICAgICAgICB0aGlzLl9jdXJyZW50VGltZXMgPSAwO1xyXG4gICAgICAgICAgICB0aGlzLl9lbmRBbmltYXRpb25OYW1lID0gaW5mby5lbmRBY3Rpb25OYW1lO1xyXG4gICAgICAgICAgICB0aGlzLl9jdXJyZW50QW5pbWF0aW9uTmFtZSA9IGluZm8ubmFtZTtcclxuICAgICAgICAgICAgdGhpcy5wbGF5VGltZXMgPSBpbmZvLnRpbWVzO1xyXG4gICAgICAgICAgICB0aGlzLnNrZWxldG9uLmxvb3AgPSB0cnVlO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5wbGF5VGltZXMgIT0gLTEpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2tlbGV0b24uc2V0Q29tcGxldGVMaXN0ZW5lcigoZW50ZXI6IHNwLnNwaW5lLlRyYWNrRW50cnkpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5wbGF5VGltZXMgIT0gLTEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fY3VycmVudFRpbWVzKys7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9jdXJyZW50VGltZXMgPj0gdGhpcy5wbGF5VGltZXMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2xlYXIoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubmV4dCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2tlbGV0b24uc2V0Q29tcGxldGVMaXN0ZW5lcihudWxsKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLnNrZWxldG9uLnNldEV2ZW50TGlzdGVuZXIoKGVudHJ5OiBzcC5zcGluZS5UcmFja0VudHJ5LCBldmVudDogc3Auc3BpbmUuRXZlbnQpID0+IHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmtleUZyYW1lSGFuZGxlcikge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMua2V5RnJhbWVIYW5kbGVyLmV4ZWN1dGUoZW50cnksIGV2ZW50KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgdGhpcy5za2VsZXRvbi5hbmltYXRpb24gPSBpbmZvLm5hbWU7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzZXRBbmltYXRpb24oaW5mbzogQWN0aW9uSW5mbyk6IFByb21pc2U8dm9pZD4ge1xyXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgICAgICAgIGlmICghaW5mbykge1xyXG4gICAgICAgICAgICAgICAgcmVqZWN0KFwi5L+h5oGv5pyJ6K+vXCIpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnNrZWxldG9uICYmIGluZm8ubmFtZSAhPSB0aGlzLl9jdXJyZW50QW5pbWF0aW9uTmFtZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fY3VycmVudFRpbWVzID0gMDtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2VuZEFuaW1hdGlvbk5hbWUgPSBpbmZvLmVuZEFjdGlvbk5hbWU7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9jdXJyZW50QW5pbWF0aW9uTmFtZSA9IGluZm8ubmFtZTtcclxuICAgICAgICAgICAgICAgIHRoaXMucGxheVRpbWVzID0gaW5mby50aW1lcztcclxuICAgICAgICAgICAgICAgIHRoaXMuc2tlbGV0b24ubG9vcCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5wbGF5VGltZXMgIT0gLTEpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNrZWxldG9uLnNldENvbXBsZXRlTGlzdGVuZXIoKGVudGVyOiBzcC5zcGluZS5UcmFja0VudHJ5KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnBsYXlUaW1lcyAhPSAtMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fY3VycmVudFRpbWVzKys7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fY3VycmVudFRpbWVzID49IHRoaXMucGxheVRpbWVzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jbGVhcigpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2tlbGV0b24uc2V0Q29tcGxldGVMaXN0ZW5lcihudWxsKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRoaXMuc2tlbGV0b24uc2V0RXZlbnRMaXN0ZW5lcigoZW50cnk6IHNwLnNwaW5lLlRyYWNrRW50cnksIGV2ZW50OiBzcC5zcGluZS5FdmVudCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmtleUZyYW1lSGFuZGxlcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmtleUZyYW1lSGFuZGxlci5leGVjdXRlKGVudHJ5LCBldmVudCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIHRoaXMuc2tlbGV0b24uYW5pbWF0aW9uID0gaW5mby5uYW1lO1xyXG4gICAgICAgICAgICAgICAgaWYgKGluZm8udGltZXMgPT0gLTEpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByZXNvbHZlKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KVxyXG4gICAgICAgIC8vIGlmIChvcGVyID09IEdhbWVDb25zdC5BY3Rpb25fT3ByZV9PbmUpIHtcclxuICAgICAgICAvLyAgICAgdGhpcy5raWxsQWxsKCk7XHJcbiAgICAgICAgLy8gfVxyXG4gICAgICAgIC8vIHRoaXMuYW5pbWF0aW9uUXVldWUucHVzaChpbmZvKTtcclxuICAgICAgICAvLyBpZiAoIXRoaXMucnVuaW5nKSB7XHJcbiAgICAgICAgLy8gICAgIGlmICh0aGlzLmFuaW1hdGlvblF1ZXVlLmxlbmd0aCA+IDApLy/liKTmlq3pmJ/liJfkuK3mmK/lkKbov5jmnInliqjkvZxcclxuICAgICAgICAvLyAgICAge1xyXG4gICAgICAgIC8vICAgICAgICAgdGhpcy5ydW5pbmcgPSB0cnVlO1xyXG4gICAgICAgIC8vICAgICAgICAgdGhpcy5uZXh0UnVuKCk7XHJcbiAgICAgICAgLy8gICAgIH1cclxuICAgICAgICAvLyB9XHJcbiAgICB9XHJcblxyXG4gICAga2lsbEFsbCgpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLnJ1bkN1cnJlbnQoKVxyXG4gICAgICAgIHRoaXMuYW5pbWF0aW9uUXVldWUgPSBbXTtcclxuICAgICAgICB0aGlzLnJ1bmluZyA9IGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgcnVuQ3VycmVudCgpOiB2b2lkIHtcclxuICAgICAgICBpZiAodGhpcy5jdXJyZW50SW5mbykge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5jdXJyZW50SW5mby5oYW5kbGVyKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnRJbmZvLmhhbmRsZXIuZXhlY3V0ZSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIGlmICh0aGlzLmN1cnJlbnRJbmZvLmVuZEFjdGlvbk5hbWUpIHtcclxuICAgICAgICAgICAgLy8gICAgIHRoaXMucGxheUVuZEFuaW1hdGlvbih0aGlzLmN1cnJlbnRJbmZvLmVuZEFjdGlvbk5hbWUpXHJcbiAgICAgICAgICAgIC8vIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBuZXh0UnVuKCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMucnVuQ3VycmVudCgpO1xyXG4gICAgICAgIHRoaXMuY3VycmVudEluZm8gPSB0aGlzLmFuaW1hdGlvblF1ZXVlLnNoaWZ0KCk7XHJcbiAgICAgICAgdGhpcy5fb25QbGF5KHRoaXMuY3VycmVudEluZm8pXHJcbiAgICB9XHJcblxyXG4gICAgbmV4dCgpOiB2b2lkIHtcclxuICAgICAgICBpZiAodGhpcy5hbmltYXRpb25RdWV1ZS5sZW5ndGggPD0gMCkge1xyXG4gICAgICAgICAgICAvL+mYn+WIl+aXoOeahOivne+8jOWBnOatolxyXG4gICAgICAgICAgICB0aGlzLnJ1bmluZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5jdXJyZW50SW5mbykge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuY3VycmVudEluZm8uaGFuZGxlcikge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudEluZm8uaGFuZGxlci5leGVjdXRlKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMubmV4dFJ1bigpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0IGN1cnJlbnRBbmltYXRpb24oKTogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fY3VycmVudEFuaW1hdGlvbk5hbWU7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBwbGF5RW5kQW5pbWF0aW9uKG5hbWU6IHN0cmluZyk6IHZvaWQge1xyXG4gICAgICAgIGxldCBlbmRBbmltYXRpb25OYW1lOiBzdHJpbmcgPSBuYW1lID8gbmFtZSA6IEdhbWVDb25zdC5JZGxlO1xyXG4gICAgICAgIGNvbnN0IGVuZEluZm86IEFjdGlvbkluZm8gPSBuZXcgQWN0aW9uSW5mbyhlbmRBbmltYXRpb25OYW1lKTtcclxuICAgICAgICB0aGlzLnNldEFuaW1hdGlvbihlbmRJbmZvKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGNsZWFyKCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMucGxheVRpbWVzID0gLTE7XHJcbiAgICAgICAgdGhpcy5fY3VycmVudFRpbWVzID0gMDtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIG9uQWltYXRpb25Db21wbGV0ZShlbnRlcnk6IHNwLnNwaW5lLlRyYWNrRW50cnkpOiB2b2lkIHtcclxuICAgICAgICBpZiAodGhpcy5wbGF5VGltZXMgPT0gLTEpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLl9jdXJyZW50VGltZXMrKztcclxuICAgICAgICBpZiAodGhpcy5fY3VycmVudFRpbWVzID49IHRoaXMucGxheVRpbWVzKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY2xlYXIoKTtcclxuICAgICAgICAgICAgLy8gdGhpcy5wbGF5RW5kQW5pbWF0aW9uKEdhbWVDb25zdC5JZGxlKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcblxyXG5cclxuICAgIHVwZGF0ZShkZWx0YVRpbWU6IG51bWJlcikge1xyXG5cclxuICAgIH1cclxufVxyXG5cclxuXHJcbiIsImltcG9ydCB7IF9kZWNvcmF0b3IsIGFzc2V0TWFuYWdlciwgQ29tcG9uZW50LCBJbWFnZUFzc2V0LCBOb2RlLCByZXNvdXJjZXMsIFNrZWxldG9uLCBzcCwgVGV4dHVyZTJEIH0gZnJvbSAnY2MnO1xyXG5jb25zdCB7IGNjY2xhc3MsIHByb3BlcnR5IH0gPSBfZGVjb3JhdG9yO1xyXG5cclxuQGNjY2xhc3MoJ1NwaW5lVGVzdCcpXHJcbmV4cG9ydCBjbGFzcyBTcGluZVRlc3QgZXh0ZW5kcyBDb21wb25lbnQge1xyXG4gICAgc3RhcnQoKSB7XHJcbiAgICAgICAgbGV0IGNvbXAgPSB0aGlzLmdldENvbXBvbmVudChzcC5Ta2VsZXRvbikgXHJcblwiXCJcclxuICAgICAgICBsZXQgaW1hZ2UgPSBcInJlc291cmNlcy9zcGluZS81NDE1NC9FNTQxNTQucG5nXCI7XHJcbiAgICAgICAgbGV0IHNrZSA9IFwicmVzb3VyY2VzL3NwaW5lLzU0MTU0L0U1NDE1NC5za2VsXCI7XHJcbiAgICAgICAgbGV0IGF0bGFzID0gXCJyZXNvdXJjZXMvc3BpbmUvNTQxNTQvRTU0MTU0LmF0bGFzXCI7XHJcblxyXG5cclxuICAgICAgICByZXNvdXJjZXMubG9hZERpcihcInNwaW5lLzU0MTU0L1wiLCBmdW5jdGlvbiAoZXJyLCBhc3NldHMpIHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coYXNzZXRzKVxyXG5cclxuXHJcbiAgICAgICAgICAgIGxldCB0ZXh0dXJlOiBUZXh0dXJlMkQgPSBhc3NldHNbM10gYXMgVGV4dHVyZTJEO1xyXG4gICAgICAgICAgICBsZXQgc2tlbGV0b25EYXRhOiBzcC5Ta2VsZXRvbkRhdGEgPSBhc3NldHNbMl0gYXMgc3AuU2tlbGV0b25EYXRhO1xyXG4gICAgICAgICAgICAgICAgLy8gbGV0IGFzc2V0ID0gbmV3IHNwLlNrZWxldG9uRGF0YSgpO1xyXG4gICAgICAgICAgICAgICAgLy8gYXNzZXQuX25hdGl2ZUFzc2V0ID0gYXNzZXRzWzFdO1xyXG4gICAgICAgICAgICAgICAgLy8gYXNzZXQuYXRsYXNUZXh0ID0gYXNzZXRzWzBdO1xyXG4gICAgICAgICAgICAgICAgLy8gYXNzZXQudGV4dHVyZXMgPSBbdGV4dHVyZV07XHJcbiAgICAgICAgICAgICAgICAvLyBhc3NldC50ZXh0dXJlTmFtZXMgPSBbJ0U1NDE1NC5wbmcnXTtcclxuICAgICAgICAgICAgICAgIC8vIGFzc2V0Ll91dWlkID0gc2tlOyAvLyDlj6/ku6XkvKDlhaXku7vmhI/lrZfnrKbkuLLvvIzkvYbkuI3og73kuLrnqbpcclxuICAgICAgICAgICAgICAgIC8vIGFzc2V0Ll9uYXRpdmVVcmwgPSBza2U7IC8vIOS8oOWFpeS4gOS4quS6jOi/m+WItui3r+W+hOeUqOS9nCBpbml0U2tlbGV0b24g5pe255qEIGZpbGVQYXRoIOWPguaVsOS9v+eUqFxyXG4gICAgICAgICAgICBjb21wLnNrZWxldG9uRGF0YSA9IHNrZWxldG9uRGF0YTtcclxuICAgICAgICAgICAgICAgIC8vIGxldCBhbmkgPSBjb21wLnNldEFuaW1hdGlvbigwLCAnd2FsaycsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgLy8gYXNzZXRNYW5hZ2VyLmxvYWRSZW1vdGUoaW1hZ2UsIChlcnJvciwgaW1nOiBJbWFnZUFzc2V0KSA9PiB7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIC8vIGFzc2V0TWFuYWdlci5sb2FkQW55KFt7IHVybDogYXRsYXMsIGV4dDogJy50eHQnIH0sIHsgdXJsOiBza2UsIGV4dDogJy5iaW4nIH1dLCAoZXJyb3IsIGFzc2V0cykgPT4ge1xyXG4gICAgICBcclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgIC8vICAgICAvLyB9KTtcclxuICAgICAgICAvLyB9KTtcclxuICAgIH1cclxuXHJcbiAgICB1cGRhdGUoZGVsdGFUaW1lOiBudW1iZXIpIHtcclxuICAgICAgICBcclxuICAgIH1cclxufVxyXG5cclxuXHJcbiIsIi8qKlxyXG4gKiBAY2xhc3M6IFN0cmluZ1V0aWxzXHJcbiAqIEBkZXNjcmlwdGlvbjog5a2X56ym5Liy5bel5YW357G7XHJcbiAqIEBhdXRob3I6IFJhblxyXG4gKiBAdGltZTogMjAyNC0wOC0xMiAyMDowNjozMVxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU3RyaW5nVXRpbHMge1xyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqIOWIpOaWreepuuWtl+espuS4slxyXG4gICAgICogQHBhcmFtIHN0ciAtIFxyXG4gICAgICogQHJldHVybnMgXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBzdGF0aWMgZW1wdHkoc3RyOiBzdHJpbmcpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gc3RyID09IG51bGwgfHwgc3RyID09IFwiXCIgfHwgc3RyLmxlbmd0aCA8PSAwO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqIOeUn+aIkOWvjOaWh+acrFxyXG4gICAgICogQHBhcmFtIHN0ciAtIOWtl+espuS4slxyXG4gICAgICogQHBhcmFtIGNvbG9yIC0g6aKc6ImyXHJcbiAgICAgKiBAcGFyYW0gc2l6ZSAtIOWtl+S9k+Wkp+Wwj1xyXG4gICAgICogQHJldHVybnMg5a+M5paH5pys5a2X56ym5LiyXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBzdGF0aWMgZ2VuZXJhdGVSaWNoVGV4dChzdHI6IHN0cmluZywgY29sb3I/OiBudW1iZXIgfCBzdHJpbmcsIHNpemU/OiBudW1iZXIpIHtcclxuICAgICAgICBsZXQgcmV0ID0gXCJcIjtcclxuICAgICAgICByZXQgPSB0aGlzLmNvbG9yUmljaFRleHQoc3RyLCBjb2xvcik7XHJcbiAgICAgICAgcmV0ID0gdGhpcy5zaXplUmljaFRleHQocmV0LCBzaXplKTtcclxuICAgICAgICByZXR1cm4gcmV0O1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqIOminOiJsuWvjOaWh+acrFxyXG4gICAgICogQHBhcmFtIHN0ciAtIOWtl+espuS4slxyXG4gICAgICogQHBhcmFtIGNvbG9yIC0g6aKc6ImyXHJcbiAgICAgKiBAcmV0dXJucyDlr4zmlofmnKzlrZfnrKbkuLJcclxuICAgICAqL1xyXG4gICAgcHVibGljIHN0YXRpYyBjb2xvclJpY2hUZXh0KHN0cjogc3RyaW5nLCBjb2xvcj86IG51bWJlciB8IHN0cmluZykge1xyXG4gICAgICAgIGlmIChjb2xvciA9PT0gbnVsbCkgcmV0dXJuIHN0cjtcclxuXHJcbiAgICAgICAgbGV0IGVsZSA9IGA8Y29sb3I9JHtjb2xvcn0+JWQ8L2NvbG9yPmA7XHJcbiAgICAgICAgcmV0dXJuIGVsZS5yZXBsYWNlKFwiJWRcIiwgc3RyKTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDlrZflj7flr4zmlofmnKxcclxuICAgICAqIEBwYXJhbSBzdHIgLSDlrZfnrKbkuLJcclxuICAgICAqIEBwYXJhbSBzaXplIC0g5a2X5Y+3XHJcbiAgICAgKiBAcmV0dXJucyDlr4zmlofmnKzlrZfnrKbkuLJcclxuICAgICAqL1xyXG4gICAgcHVibGljIHN0YXRpYyBzaXplUmljaFRleHQoc3RyOiBzdHJpbmcsIHNpemU/OiBudW1iZXIpIHtcclxuICAgICAgICBpZiAoc2l6ZSA9PT0gbnVsbCkgcmV0dXJuIHN0cjtcclxuXHJcbiAgICAgICAgbGV0IGVsZSA9IGA8c2l6ZT0ke3NpemV9PiVkPC9zaXplPmA7XHJcbiAgICAgICAgcmV0dXJuIGVsZS5yZXBsYWNlKFwiJWRcIiwgc3RyKTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDliqDnspflr4zmlofmnKxcclxuICAgICAqIEBwYXJhbSBzdHIgLSDlrZfnrKbkuLJcclxuICAgICAqIEByZXR1cm5zIOWvjOaWh+acrOWtl+espuS4slxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgc3RhdGljIGJvbGRSaWNoVGV4dChzdHI6IHN0cmluZykge1xyXG4gICAgICAgIGxldCBlbGUgPSBgPGI+JWQ8L2I+YDtcclxuICAgICAgICByZXR1cm4gZWxlLnJlcGxhY2UoXCIlZFwiLCBzdHIpO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvLyBjbGFzcyBlbmRcclxufVxyXG4iLCJpbXBvcnQge19kZWNvcmF0b3IsIENvbXBvbmVudCwgTm9kZSwgVmVjMn0gZnJvbSAnY2MnO1xyXG5jb25zdCB7IGNjY2xhc3MsIHByb3BlcnR5IH0gPSBfZGVjb3JhdG9yO1xyXG5cclxuQGNjY2xhc3MoJ1Rlc3QnKVxyXG5leHBvcnQgY2xhc3MgVGVzdCBleHRlbmRzIENvbXBvbmVudCB7XHJcblxyXG4gICAgQHByb3BlcnR5KE5vZGUpXHJcbiAgICBwdWJsaWMgdGFyZ2V0Tm9kZTpOb2RlID0gbnVsbDtcclxuXHJcbiAgICBwcml2YXRlIHNwZWVkOm51bWJlciA9IDIwMFxyXG4gICAgc3RhcnQoKSB7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIHVwZGF0ZShkZWx0YVRpbWU6IG51bWJlcikge1xyXG4gICAgICAgIGNvbnN0IGN1cnJlbnRQb3MgPSB0aGlzLm5vZGUucG9zaXRpb24uY2xvbmUoKTtcclxuICAgICAgICBjb25zdCB0YXJnZXRQb3M9IHRoaXMudGFyZ2V0Tm9kZS5wb3NpdGlvbi5jbG9uZSgpO1xyXG4gICAgICAgIGNvbnN0IHJhZGlhbiA9IE1hdGguYXRhbjIodGFyZ2V0UG9zLnkgLSBjdXJyZW50UG9zLnksdGFyZ2V0UG9zLnggLSBjdXJyZW50UG9zLngpO1xyXG5cclxuICAgICAgICBjb25zdCBkaXJlY3Rpb24gID0gdGFyZ2V0UG9zLnN1YnRyYWN0KGN1cnJlbnRQb3MpLm5vcm1hbGl6ZSgpO1xyXG4gICAgICAgIGNvbnN0IGFuZ2xlID0gcmFkaWFuIC8gTWF0aC5QSSAqMTgwO1xyXG4gICAgICAgIHRoaXMubm9kZS5hbmdsZSA9IGFuZ2xlIC0gOTBcclxuXHJcbiAgICAgICAgY29uc3QgZGlzcGxhY2VtZW50ID0gZGlyZWN0aW9uLm11bHRpcGx5U2NhbGFyKHRoaXMuc3BlZWQgKiBkZWx0YVRpbWUpO1xyXG4gICAgICAgIHRoaXMubm9kZS5wb3NpdGlvbiA9IHRoaXMubm9kZS5wb3NpdGlvbi5jbG9uZSgpLmFkZChkaXNwbGFjZW1lbnQpO1xyXG4gICAgfVxyXG59XHJcblxyXG5cclxuIiwiaW1wb3J0IHsgX2RlY29yYXRvciwgQ29tcG9uZW50LCBOb2RlLCBWZWMyIH0gZnJvbSAnY2MnO1xyXG5jb25zdCB7IGNjY2xhc3MsIHByb3BlcnR5IH0gPSBfZGVjb3JhdG9yO1xyXG5cclxuZXhwb3J0IGNsYXNzIFRpbGUge1xyXG4gICAgcHVibGljIHBvc2l0aW9uWDogbnVtYmVyO1xyXG4gICAgcHVibGljIHBvc2l0aW9uWTogbnVtYmVyO1xyXG5cclxuICAgIHB1YmxpYyB2YWx1ZTogbnVtYmVyO1xyXG5cclxuICAgIHB1YmxpYyBtZWdyZUZyb20gPSBudWxsO1xyXG4gICAgcHVibGljIHByZXZpb3VzUG9zaXRpb246IFZlYzIgPSBuZXcgVmVjMigwLCAwKTtcclxuXHJcbiAgICBwdWJsaWMgc2V0dXAocG9zOiBWZWMyLCB2YWx1ZTogbnVtYmVyKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5wb3NpdGlvblggPSBwb3MueDtcclxuICAgICAgICB0aGlzLnBvc2l0aW9uWSA9IHBvcy55O1xyXG4gICAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZSB8fCAyO1xyXG4gICAgICAgIHRoaXMubWVncmVGcm9tID0gbnVsbDtcclxuICAgICAgICB0aGlzLnByZXZpb3VzUG9zaXRpb24gPSBuZXcgVmVjMigwLCAwKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc2F2ZVBvc2l0aW9uKCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMucHJldmlvdXNQb3NpdGlvbi5zZXQodGhpcy5wb3NpdGlvblgsIHRoaXMucG9zaXRpb25ZKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgdXBkYXRlUG9zaXRpb24ocG9zaXRpb246IFZlYzIpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLnBvc2l0aW9uWCA9IHBvc2l0aW9uLng7XHJcbiAgICAgICAgdGhpcy5wb3NpdGlvblkgPSBwb3NpdGlvbi55O1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzZXJpYWxpemUoKTogYW55IHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBwb3NpdGlvbjoge1xyXG4gICAgICAgICAgICAgICAgeDogdGhpcy5wb3NpdGlvblgsXHJcbiAgICAgICAgICAgICAgICB5OiB0aGlzLnBvc2l0aW9uWVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB2YWx1ZTogdGhpcy52YWx1ZVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuXHJcbiIsIi8qKlxyXG4gKiBAY2xhc3M6IERhdGVVdGlsc1xyXG4gKiBAZGVzY3JpcHRpb246IOaXpeacn+W3peWFt+exu1xyXG4gKiBAYXV0aG9yOiBSYW5cclxuICogQHRpbWU6IDIwMjQtMDgtMTIgMjA6MDc6MzlcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFRpbWVVaXRscyB7XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5qC85byP5YyW56eS5pWwXHJcbiAgICAgKiBAcGFyYW0gc2Vjb25kIO+8muenklxyXG4gICAgICogQHBhcmFtIGZvcm1hdCDvvJrmoLzlvI/vvIznvLrnnIHkuLpoaDptbTpzc1xyXG4gICAgICogQHJldHVybnMg5pe26Ze05a2X56ym5LiyXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBzdGF0aWMgZm9ybWF0U2Vjb25kKHNlY29uZDogbnVtYmVyLCBmb3JtYXQ6IHN0cmluZyA9IFwiaGg6bW06c3NcIikge1xyXG4gICAgICAgIGxldCBoID0gMCwgbSA9IDAsIHMgPSAwO1xyXG4gICAgICAgIGlmIChzZWNvbmQgPj0gMzYwMCkge1xyXG4gICAgICAgICAgICBoID0gTWF0aC5mbG9vcihzZWNvbmQgLyAzNjAwKTtcclxuICAgICAgICAgICAgc2Vjb25kIC09IGggKiAzNjAwO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoc2Vjb25kID49IDYwKSB7XHJcbiAgICAgICAgICAgIG0gPSBNYXRoLmZsb29yKHNlY29uZCAvIDYwKTtcclxuICAgICAgICAgICAgc2Vjb25kIC09IG0gKiA2MDtcclxuICAgICAgICB9XHJcbiAgICAgICAgcyA9IHNlY29uZDtcclxuICAgICAgICBsZXQgZm9ybWF0QXJyID0gZm9ybWF0LnNwbGl0KFwiOlwiKTtcclxuICAgICAgICBzd2l0Y2ggKGZvcm1hdEFyci5sZW5ndGgpIHtcclxuICAgICAgICAgICAgY2FzZSAxOiByZXR1cm4gYCR7cyA8IDEwICYmIGZvcm1hdEFyclswXS5sZW5ndGggPj0gMiA/IFwiMFwiIDogXCJcIn0ke3N9YDtcclxuICAgICAgICAgICAgY2FzZSAyOiByZXR1cm4gYCR7bSA8IDEwICYmIGZvcm1hdEFyclsxXS5sZW5ndGggPj0gMiA/IFwiMFwiIDogXCJcIn0ke219OiR7cyA8IDEwICYmIGZvcm1hdEFyclswXS5sZW5ndGggPj0gMiA/IFwiMFwiIDogXCJcIn0ke3N9YDtcclxuICAgICAgICAgICAgY2FzZSAzOiByZXR1cm4gYCR7aCA8IDEwICYmIGZvcm1hdEFyclsyXS5sZW5ndGggPj0gMiA/IFwiMFwiIDogXCJcIn0ke2h9OiR7bSA8IDEwICYmIGZvcm1hdEFyclsxXS5sZW5ndGggPj0gMiA/IFwiMFwiIDogXCJcIn0ke219OiR7cyA8IDEwICYmIGZvcm1hdEFyclswXS5sZW5ndGggPj0gMiA/IFwiMFwiIDogXCJcIn0ke3N9YDtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIFwiXCI7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8vIGNsYXNzIGVuZFxyXG59XHJcbiIsImltcG9ydCB7IF9kZWNvcmF0b3IsIENvbXBvbmVudCwgRXZlbnRUb3VjaCwgbWlzYywgTm9kZSwgVmVjMiB9IGZyb20gJ2NjJztcclxuaW1wb3J0IHsgVG91Y2hFdmVudCB9IGZyb20gJy4vRW51bSc7XHJcbmNvbnN0IHsgY2NjbGFzcywgcHJvcGVydHkgfSA9IF9kZWNvcmF0b3I7XHJcblxyXG5AY2NjbGFzcygnVG91Y2gnKVxyXG5leHBvcnQgY2xhc3MgVG91Y2ggZXh0ZW5kcyBDb21wb25lbnQge1xyXG5cclxuICAgIHN0YXJ0KCkge1xyXG5cclxuICAgIH1cclxuXHJcbiAgICBwcm90ZWN0ZWQgb25Mb2FkKCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMucmVnaXN0ZXJFdmVudCgpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyByZWdpc3RlckV2ZW50KCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMubm9kZS5vbihOb2RlLkV2ZW50VHlwZS5UT1VDSF9FTkQsIChlOiBFdmVudFRvdWNoKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IHN0YXJ0UG9pbnQgPSBlLmdldFN0YXJ0TG9jYXRpb24oKTtcclxuICAgICAgICAgICAgY29uc3QgZW5kUG9pbnQgPSBlLmdldExvY2F0aW9uKCk7XHJcbiAgICAgICAgICAgIGNvbnN0IHY6IFZlYzIgPSBlbmRQb2ludC5zdWJ0cmFjdChzdGFydFBvaW50KTtcclxuICAgICAgICAgICAgbGV0IHJhZGlhbnM6IG51bWJlciA9IE1hdGguYXRhbjIodi55LCB2LngpO1xyXG4gICAgICAgICAgICBjb25zdCBkZWdyZWVzID0gbWlzYy5yYWRpYW5zVG9EZWdyZWVzKHJhZGlhbnMpO1xyXG4gICAgICAgICAgICBsZXQgaW5kZXg6IG51bWJlciA9IE1hdGguZmxvb3IoZGVncmVlcyAvIDQ1KTtcclxuICAgICAgICAgICAgdGhpcy5lbWl0RXZlbnRCeUluZGV4KGluZGV4KTtcclxuICAgICAgICB9LCB0aGlzKVxyXG4gICAgfVxyXG5cclxuICAgIGVtaXRFdmVudEJ5SW5kZXgoaW5kZXg6IG51bWJlcikge1xyXG4gICAgICAgIC8vIDgg5pa55ZCR5Yik5patXHJcbiAgICAgICAgaWYgKGluZGV4ID09PSAwIHx8IGluZGV4ID09PSAtMSkge1xyXG4gICAgICAgICAgICB0aGlzLm5vZGUuZW1pdChUb3VjaEV2ZW50LlJJR0hUKVxyXG4gICAgICAgIH0gZWxzZSBpZiAoaW5kZXggPT09IDEgfHwgaW5kZXggPT09IDIpIHtcclxuICAgICAgICAgICAgdGhpcy5ub2RlLmVtaXQoVG91Y2hFdmVudC5VUClcclxuICAgICAgICB9IGVsc2UgaWYgKGluZGV4ID09PSAtMiB8fCBpbmRleCA9PT0gLTMpIHtcclxuICAgICAgICAgICAgdGhpcy5ub2RlLmVtaXQoVG91Y2hFdmVudC5ET1dOKVxyXG4gICAgICAgIH0gZWxzZSBpZiAoaW5kZXggPT09IC00IHx8IGluZGV4ID09PSAzIHx8IGluZGV4ID09PSA0KSB7XHJcbiAgICAgICAgICAgIHRoaXMubm9kZS5lbWl0KFRvdWNoRXZlbnQuTEVGVClcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFwi5peg5q2k5pa55ZCRXCIpXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHVwZGF0ZShkZWx0YVRpbWU6IG51bWJlcikge1xyXG5cclxuICAgIH1cclxufVxyXG5cclxuXHJcbiIsImltcG9ydCB7X2RlY29yYXRvciwgQ29tcG9uZW50LCBFdmVudFRvdWNoLCBOb2RlLCBWZWMyfSBmcm9tICdjYyc7XHJcbmNvbnN0IHsgY2NjbGFzcywgcHJvcGVydHkgfSA9IF9kZWNvcmF0b3I7XHJcblxyXG5AY2NjbGFzcygnVG91Y2hNb3ZlJylcclxuZXhwb3J0IGNsYXNzIFRvdWNoTW92ZSBleHRlbmRzIENvbXBvbmVudCB7XHJcblxyXG4gICAgcHJpdmF0ZSBpc0RyYWdnaW5nOiBib29sZWFuID0gZmFsc2U7XHJcbiAgICBwcml2YXRlIGRyYWdPZmZzZXQ6IFZlYzIgPSBuZXcgVmVjMigpO1xyXG4gICAgc3RhcnQoKSB7XHJcbiAgICAgICAgdGhpcy5ub2RlLm9uKE5vZGUuRXZlbnRUeXBlLlRPVUNIX1NUQVJULHRoaXMub25Ub3VjaFN0YXJ0LHRoaXMpO1xyXG4gICAgICAgIHRoaXMubm9kZS5vbihOb2RlLkV2ZW50VHlwZS5UT1VDSF9NT1ZFLHRoaXMub25Ub3VjaE1vdmUsdGhpcyk7XHJcbiAgICAgICAgdGhpcy5ub2RlLm9uKE5vZGUuRXZlbnRUeXBlLlRPVUNIX0VORCx0aGlzLm9uVG91Y2hFbmQsdGhpcyk7XHJcbiAgICAgICAgdGhpcy5ub2RlLm9uKE5vZGUuRXZlbnRUeXBlLlRPVUNIX0NBTkNFTCwgdGhpcy5vblRvdWNoRW5kLCB0aGlzKTtcclxuICAgIH1cclxuXHJcbiAgICBvblRvdWNoU3RhcnQoZXZlbnQ6IEV2ZW50VG91Y2gpOnZvaWR7XHJcbiAgICAgICAgdGhpcy5pc0RyYWdnaW5nID0gdHJ1ZTtcclxuICAgICAgICBjb25zdCBsb2NhdGlvbkluTm9kZSA9IGV2ZW50LmdldExvY2F0aW9uKCkvL3RoaXMubm9kZS5jb252ZXJ0VG9Ob2RlU3BhY2VBUih0b3VjaC5nZXRMb2NhdGlvbigpKTtcclxuICAgICAgICB0aGlzLmRyYWdPZmZzZXQuc2V0KGxvY2F0aW9uSW5Ob2RlLnggLSB0aGlzLm5vZGUucG9zaXRpb24ueCwgbG9jYXRpb25Jbk5vZGUueSAtIHRoaXMubm9kZS5wb3NpdGlvbi55KTtcclxuICAgIH1cclxuXHJcbiAgICBvblRvdWNoTW92ZShldmVudDpFdmVudFRvdWNoKTp2b2lke1xyXG4gICAgICAgIGlmICh0aGlzLmlzRHJhZ2dpbmcpIHtcclxuICAgICAgICAgICAgLy8gY29uc3QgdG91Y2ggPSBldmVudC5nZXRUb3VjaCgpO1xyXG4gICAgICAgICAgICBjb25zdCBsb2NhdGlvbkluTm9kZSA9IGV2ZW50LmdldExvY2F0aW9uKCkgLy90aGlzLm5vZGUuY29udmVydFRvTm9kZVNwYWNlQVIodG91Y2guZ2V0TG9jYXRpb24oKSk7XHJcbiAgICAgICAgICAgIHRoaXMubm9kZS5zZXRQb3NpdGlvbihsb2NhdGlvbkluTm9kZS54IC0gdGhpcy5kcmFnT2Zmc2V0LngsIGxvY2F0aW9uSW5Ob2RlLnkgLSB0aGlzLmRyYWdPZmZzZXQueSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgb25Ub3VjaEVuZChldmVudDogRXZlbnRUb3VjaCk6dm9pZHtcclxuICAgICAgICB0aGlzLmlzRHJhZ2dpbmcgPSBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICB1cGRhdGUoZGVsdGFUaW1lOiBudW1iZXIpIHtcclxuICAgICAgICBcclxuICAgIH1cclxufVxyXG5cclxuXHJcbiIsImltcG9ydCB7IF9kZWNvcmF0b3IsIENvbXBvbmVudCwgTm9kZSB9IGZyb20gJ2NjJztcclxuaW1wb3J0IFJvYWROb2RlIGZyb20gXCJkYjovL2Fzc2V0cy9TY3JpcHQvbW9kdWxlcy9SUEcvbWFwL1JvYWROb2RlXCI7XHJcbmltcG9ydCB7IFRvd2VyQ2hhcmFjdGVyIH0gZnJvbSBcImRiOi8vYXNzZXRzL1NjcmlwdC9tb2R1bGVzL1Rvd2VyRGVmZW5zZS9Ub3dlckNoYXJhY3RlclwiO1xyXG5jb25zdCB7IGNjY2xhc3MsIHByb3BlcnR5IH0gPSBfZGVjb3JhdG9yO1xyXG5cclxuQGNjY2xhc3MoJ1Rvd2VyQnVpbGRJbmZvJylcclxuZXhwb3J0IGNsYXNzIFRvd2VyQnVpbGRJbmZvIGV4dGVuZHMgQ29tcG9uZW50IHtcclxuXHJcbiAgICBwdWJsaWMgcm9hZDogUm9hZE5vZGU7XHJcblxyXG4gICAgcHVibGljIHNlbGVjdGVkVG93ZXJJZDogbnVtYmVyO1xyXG4gICAgcHVibGljIHJlbW92ZUJhY2tDb3N0OiBudW1iZXI7XHJcbiAgICBwdWJsaWMgdXBMZXZlbENvc3Q6IG51bWJlcjtcclxuXHJcbiAgICBwdWJsaWMgZ2V0IGlkKCk6IHN0cmluZyB7XHJcbiAgICAgICAgaWYgKCF0aGlzLnJvYWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBgJHt0aGlzLnJvYWQuY3h9XyR7dGhpcy5yb2FkLmN5fWA7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHRvd2VyOiBUb3dlckNoYXJhY3RlcjtcclxuICAgIHN0YXJ0KCkge1xyXG5cclxuICAgIH1cclxuXHJcbiAgICB1cGRhdGUoZGVsdGFUaW1lOiBudW1iZXIpIHtcclxuXHJcbiAgICB9XHJcbn1cclxuXHJcbiIsImltcG9ydCB7XHJcbiAgICBfZGVjb3JhdG9yLCBBbmltYXRpb24sIENDQm9vbGVhbiwgQ0NJbnRlZ2VyLCBDb2xsaWRlcjJELCBDb2xvcixcclxuICAgIENvbXBvbmVudCxcclxuICAgIEV2ZW50VG91Y2gsIEdyYXBoaWNzLFxyXG4gICAgaW5zdGFudGlhdGUsIElQaHlzaWNzMkRDb250YWN0LFxyXG4gICAgbWF0aCxcclxuICAgIE5vZGUsXHJcbiAgICBOb2RlRXZlbnRUeXBlLFxyXG4gICAgTm9kZVBvb2wsXHJcbiAgICBQcmVmYWIsXHJcbiAgICBSaWdpZEJvZHkyRCwgU3ByaXRlLCBTcHJpdGVGcmFtZSwgVUlUcmFuc2Zvcm0sXHJcbiAgICBWZWMyLFxyXG4gICAgVmVjM1xyXG59IGZyb20gJ2NjJztcclxuaW1wb3J0IHsgQmVoYXZpb3VyIH0gZnJvbSBcImRiOi8vYXNzZXRzL1NjcmlwdC9tb2R1bGVzL1JQRy9CZWhhdmlvdXJcIjtcclxuaW1wb3J0IHsgQnVsbGV0IH0gZnJvbSBcImRiOi8vYXNzZXRzL1NjcmlwdC9tb2R1bGVzL1Rvd2VyRGVmZW5zZS9CdWxsZXRcIjtcclxuaW1wb3J0IHsgRW5lbXkgfSBmcm9tIFwiZGI6Ly9hc3NldHMvU2NyaXB0L21vZHVsZXMvVG93ZXJEZWZlbnNlL0VuZW15XCI7XHJcbmltcG9ydCB7IFRvd2VyTGF1bmNoZXIgfSBmcm9tIFwiZGI6Ly9hc3NldHMvU2NyaXB0L21vZHVsZXMvVG93ZXJEZWZlbnNlL1Rvd2VyTGF1bmNoZXJcIjtcclxuaW1wb3J0IENoYXJhY3RlciBmcm9tIFwiZGI6Ly9hc3NldHMvU2NyaXB0L21vZHVsZXMvUlBHL2NoYXJhY3Rlci9DaGFyYWN0ZXJcIjtcclxuaW1wb3J0IHsgQnVsbGV0TWFuYWdlciB9IGZyb20gXCJkYjovL2Fzc2V0cy9TY3JpcHQvbW9kdWxlcy9Ub3dlckRlZmVuc2UvQnVsbGV0TWFuYWdlclwiO1xyXG5pbXBvcnQgeyBUb3dlckNvbnN0IH0gZnJvbSBcImRiOi8vYXNzZXRzL1NjcmlwdC9tb2R1bGVzL1Rvd2VyRGVmZW5zZS9Ub3dlckNvbnN0XCI7XHJcbmltcG9ydCB7IFRvd2VyRGF0YURUTyB9IGZyb20gJy4vaW5mby9Ub3dlckRhdGFEVE8nO1xyXG5pbXBvcnQgeyBUb3dlckNvbmZpZyB9IGZyb20gJy4vVG93ZXJDb25maWcnO1xyXG5jb25zdCB7IGNjY2xhc3MsIHByb3BlcnR5IH0gPSBfZGVjb3JhdG9yO1xyXG5cclxuQGNjY2xhc3MoJ1Rvd2VyQ2hhcmFjdGVyJylcclxuZXhwb3J0IGNsYXNzIFRvd2VyQ2hhcmFjdGVyIGV4dGVuZHMgQ2hhcmFjdGVyIHtcclxuICAgIGdldCB0b3dlckRhdGEoKTogVG93ZXJEYXRhRFRPIHtcclxuICAgICAgICBpZighdGhpcy5fdG93ZXJEYXRhKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3Rvd2VyRGF0YSA9IG5ldyBUb3dlckRhdGFEVE8oKTtcclxuICAgICAgICAgICAgdGhpcy5fdG93ZXJEYXRhLmJ1aWxkQ29zdCA9IDEwMDtcclxuICAgICAgICAgICAgdGhpcy5fdG93ZXJEYXRhLmhhcm0gPSAxMDtcclxuICAgICAgICAgICAgdGhpcy5fdG93ZXJEYXRhLnNwZWVkID0gMzAwO1xyXG4gICAgICAgICAgICB0aGlzLl90b3dlckRhdGEucmVtb3ZlQmFjayA9IDkwO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcy5fdG93ZXJEYXRhO1xyXG4gICAgfVxyXG5cclxuICAgIHNldCB0b3dlckRhdGEodmFsdWU6IFRvd2VyRGF0YURUTykge1xyXG4gICAgICAgIHRoaXMuX3Rvd2VyRGF0YSA9IHZhbHVlO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBsb2NrVGFyZ2V0OiBOb2RlID0gbnVsbDtcclxuXHJcbiAgICBAcHJvcGVydHkoTm9kZSlcclxuICAgIHB1YmxpYyB0ZW1wTG9ja1RhcmdldDogTm9kZSA9IG51bGw7XHJcblxyXG4gICAgQHByb3BlcnR5KFByZWZhYilcclxuICAgIHB1YmxpYyBidWxsZXRQcmVmYWI6IFByZWZhYiA9IG51bGw7XHJcblxyXG4gICAgQHByb3BlcnR5KEdyYXBoaWNzKVxyXG4gICAgcHVibGljIGdyYXBoaWNzOiBHcmFwaGljcyA9IG51bGw7XHJcbiAgICBAcHJvcGVydHkoQ0NJbnRlZ2VyKVxyXG4gICAgcHVibGljIHJhbmdlOiBudW1iZXIgPSAxMDA7XHJcbiAgICBAcHJvcGVydHkoeyB0b29sdGlwOiBcIuaOp+WItueCruWhlOaYr+WQpumcgOimgeaXi+i9rFwiLCB0eXBlOiBDQ0Jvb2xlYW4gfSlcclxuICAgIHB1YmxpYyBmb3J0SXNSb3RhdGU6IGJvb2xlYW4gPSB0cnVlO1xyXG5cclxuICAgIEBwcm9wZXJ0eSh7IHRvb2x0aXA6IFwi54Ku5aGU562J57qn5aSW6KeC6LWE5rqQXCIsIHR5cGU6IFtTcHJpdGVGcmFtZV0gfSlcclxuICAgIHB1YmxpYyBUb3dlclNwcml0ZUZyYW1lOiBTcHJpdGVGcmFtZVtdID0gW107XHJcbiAgICBAcHJvcGVydHkoQ0NCb29sZWFuKVxyXG4gICAgcHVibGljIGlzVGVzdDpib29sZWFuID0gZmFsc2U7XHJcblxyXG4gICAgcHJpdmF0ZSBmaXJlUmF0ZTogbnVtYmVyID0gMC4zO1xyXG4gICAgcHJpdmF0ZSB0aW1lU2luY2VMYXN0RmlyZTogbnVtYmVyID0gMDtcclxuXHJcbiAgICBwcml2YXRlIGZvcnQ6IE5vZGUgPSBudWxsO1xyXG5cclxuICAgIHByaXZhdGUgZW5lbXlMaXN0OiB7IFtrZXk6IHN0cmluZ106IEVuZW15IH07XHJcblxyXG4gICAgcHJpdmF0ZSBhbmltYXRpb246IEFuaW1hdGlvbiA9IG51bGw7XHJcblxyXG4gICAgcHJpdmF0ZSBfbGV2ZWw6IG51bWJlciA9IDE7XHJcbiAgICBwcml2YXRlIF90b3dlckRhdGE6IFRvd2VyRGF0YURUTyA9IG51bGw7XHJcblxyXG4gICAgcHVibGljIGdldCBsZXZlbCgpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9sZXZlbDtcclxuICAgIH1cclxuXHJcblxyXG4gICAgcHVibGljIHRvd2VySWQ6IG51bWJlciA9IDA7XHJcbiAgICBvbkxvYWQoKSB7XHJcbiAgICAgICAgc3VwZXIub25Mb2FkKCk7XHJcbiAgICAgICAgdGhpcy5mb3J0ID0gdGhpcy5ub2RlLmdldENoaWxkQnlOYW1lKFwiZm9ydFwiKTtcclxuICAgICAgICBpZiAodGhpcy5mb3J0KSB7XHJcbiAgICAgICAgICAgIHRoaXMuYW5pbWF0aW9uID0gdGhpcy5mb3J0LmdldENvbXBvbmVudChBbmltYXRpb24pO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyB0aGlzLm5vZGUub24oTm9kZUV2ZW50VHlwZS5UT1VDSF9TVEFSVCwgdGhpcy5vbkNsaWNrTm9kZSwgdGhpcyk7XHJcbiAgICAgICAgdGhpcy5lbmVteUxpc3QgPSB7fTtcclxuICAgIH1cclxuXHJcblxyXG5cclxuICAgIHByaXZhdGUgb25DbGlja05vZGUoZXZlbnQ6IEV2ZW50VG91Y2gpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLmNyZWF0ZUJ1bGxldCgpO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXJ0KCkge1xyXG4gICAgICAgIGlmIChUb3dlckxhdW5jaGVyLmluc3RhbmNlICYmIFRvd2VyTGF1bmNoZXIuaW5zdGFuY2UuaXNEZWJ1Zykge1xyXG4gICAgICAgICAgICB0aGlzLmRyYXdSYW5nZSgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGRyYXdSYW5nZSgpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLmdyYXBoaWNzLmNsZWFyKCk7XHJcbiAgICAgICAgdGhpcy5ncmFwaGljcy5zdHJva2VDb2xvciA9IENvbG9yLlJFRDtcclxuICAgICAgICB0aGlzLmdyYXBoaWNzLmxpbmVXaWR0aCA9IDU7XHJcbiAgICAgICAgdGhpcy5ncmFwaGljcy5jaXJjbGUoMCwgMCwgdGhpcy5yYW5nZSk7XHJcbiAgICAgICAgdGhpcy5ncmFwaGljcy5zdHJva2UoKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0VGFyZ2V0KCk6IEVuZW15IHtcclxuICAgICAgICBpZiAoIXRoaXMuZW5lbXlMaXN0KSB7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBlbmVteUtleXM6IHN0cmluZ1tdID0gT2JqZWN0LmtleXModGhpcy5lbmVteUxpc3QpO1xyXG4gICAgICAgIGlmIChlbmVteUtleXMubGVuZ3RoIDw9IDApIHtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxldCBpbmRleDogbnVtYmVyID0gLTE7XHJcbiAgICAgICAgbGV0IG1pbkhwOiBudW1iZXIgPSBOdW1iZXIuTUFYX1ZBTFVFO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZW5lbXlLZXlzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGVuZW15OiBFbmVteSA9IHRoaXMuZW5lbXlMaXN0W2VuZW15S2V5c1tpXV07XHJcbiAgICAgICAgICAgIGlmIChlbmVteS5ocCA8IG1pbkhwKSB7XHJcbiAgICAgICAgICAgICAgICBtaW5IcCA9IGVuZW15LmhwO1xyXG4gICAgICAgICAgICAgICAgaW5kZXggPSBpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChpbmRleCAhPSAtMSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5lbmVteUxpc3RbZW5lbXlLZXlzW2luZGV4XV07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzLmVuZW15TGlzdFtlbmVteUtleXNbMF1dO1xyXG4gICAgfVxyXG5cclxuICAgIHVwZGF0ZShkZWx0YVRpbWU6IG51bWJlcikge1xyXG4gICAgICAgIGlmKCF0aGlzLmlzVGVzdCAmJiBUb3dlckxhdW5jaGVyLmluc3RhbmNlICYmIChUb3dlckxhdW5jaGVyLmluc3RhbmNlLmdhbWVPdmVyIHx8IFRvd2VyTGF1bmNoZXIuaW5zdGFuY2UucGF1c2UpKXtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnRpbWVTaW5jZUxhc3RGaXJlICs9IGRlbHRhVGltZTtcclxuICAgICAgICB0aGlzLmVuZW15TGlzdCA9IHt9O1xyXG4gICAgICAgIGxldCBmb3VuZExpc3Q6IEJlaGF2aW91cltdID0gW107XHJcbiAgICAgICAgaWYgKFRvd2VyTGF1bmNoZXIuaW5zdGFuY2UgJiYgVG93ZXJMYXVuY2hlci5pbnN0YW5jZS5xdWFkVHJlZSkge1xyXG4gICAgICAgICAgICBmb3VuZExpc3QgPSBUb3dlckxhdW5jaGVyLmluc3RhbmNlLnF1YWRUcmVlLnF1ZXJ5SW5SYW5nZSh0aGlzLnJlY3QsIHRoaXMucmFuZ2UpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBjb25zdCBmb3VuZEVuZW15TGlzdDpFbmVteVtdID0gW107XHJcbiAgICAgICAgaWYgKGZvdW5kTGlzdC5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZm91bmRMaXN0Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBlID0gZm91bmRMaXN0W2ldO1xyXG4gICAgICAgICAgICAgICAgaWYgKGUgaW5zdGFuY2VvZiBFbmVteSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZW5lbXlMaXN0W2UudXVpZF0gPSBlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IGVuZW15OiBFbmVteSA9IHRoaXMuZ2V0VGFyZ2V0KCk7XHJcbiAgICAgICAgdGhpcy5sb2NrVGFyZ2V0ID0gZW5lbXkgPyBlbmVteS5ub2RlIDogdGhpcy50ZW1wTG9ja1RhcmdldDtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMubG9ja1RhcmdldCAmJiB0aGlzLmZvcnRJc1JvdGF0ZSkge1xyXG4gICAgICAgICAgICBjb25zdCBjdXJyZW50UG9zID0gdGhpcy5ub2RlLnBvc2l0aW9uLmNsb25lKCk7XHJcbiAgICAgICAgICAgIGNvbnN0IHRhcmdldFBvcyA9IHRoaXMubG9ja1RhcmdldC5wb3NpdGlvbi5jbG9uZSgpO1xyXG4gICAgICAgICAgICBjb25zdCByYWRpYW4gPSBNYXRoLmF0YW4yKHRhcmdldFBvcy55IC0gY3VycmVudFBvcy55LCB0YXJnZXRQb3MueCAtIGN1cnJlbnRQb3MueCk7XHJcbiAgICAgICAgICAgIGNvbnN0IGFuZ2xlID0gcmFkaWFuIC8gTWF0aC5QSSAqIDE4MDtcclxuICAgICAgICAgICAgdGhpcy5mb3J0LmFuZ2xlID0gYW5nbGUgLy8tIDkwXHJcblxyXG4gICAgICAgICAgICAvLyB0aGlzLm5vZGUubG9va0F0KHRoaXMubG9ja1RhcmdldC53b3JsZFBvc2l0aW9uLG1hdGgudjMoMCwxLDApKTtcclxuICAgICAgICAgICAgLy8gdGhpcy5ub2RlLmV1bGVyQW5nbGVzID0gbWF0aC52MygwLDAsdGhpcy5ub2RlLmV1bGVyQW5nbGVzLnopXHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgaWYgKHRoaXMubG9ja1RhcmdldCAmJiB0aGlzLnRpbWVTaW5jZUxhc3RGaXJlID4gdGhpcy5maXJlUmF0ZSkge1xyXG4gICAgICAgICAgICB0aGlzLnRpbWVTaW5jZUxhc3RGaXJlID0gMDtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coXCLliJvlu7rlrZDlvLnkuoZcIilcclxuICAgICAgICAgICAgdGhpcy5wbGF5RmlyZUFuaW1hdGlvbigpO1xyXG5cclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gdGhpcy50cmFuc2Zvcm0ubG9va0F0Wih0YXJnZXRQb3MpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgcGxheUZpcmVBbmltYXRpb24oKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKHRoaXMuYW5pbWF0aW9uKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGNsaXBzID0gdGhpcy5hbmltYXRpb24uY2xpcHM7XHJcbiAgICAgICAgICAgIGNvbnN0IG5hbWVzOiBzdHJpbmdbXSA9IGNsaXBzLm1hcChjbGlwID0+IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBjbGlwLm5hbWVcclxuICAgICAgICAgICAgfSwgdGhpcylcclxuICAgICAgICAgICAgdGhpcy5hbmltYXRpb24ub24oQW5pbWF0aW9uLkV2ZW50VHlwZS5GSU5JU0hFRCwgdGhpcy5vbkFuaW1hdGlvbkZpbmlzaGVkLCB0aGlzKVxyXG4gICAgICAgICAgICB0aGlzLmFuaW1hdGlvbi5wbGF5KG5hbWVzW01hdGgubWF4KDAsIHRoaXMubGV2ZWwgLSAxKV0pXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5pu05paw54Ku5aGU5aSW6KeCXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgdXBkYXRlVG93ZXJPdXR3YXJkKCk6IHZvaWQge1xyXG4gICAgICAgIGlmICh0aGlzLmZvcnQpIHtcclxuICAgICAgICAgICAgY29uc3QgZm9ydFNwcmludGU6IFNwcml0ZSA9IHRoaXMuZm9ydC5nZXRDb21wb25lbnQoU3ByaXRlKTtcclxuICAgICAgICAgICAgaWYgKGZvcnRTcHJpbnRlKSB7XHJcbiAgICAgICAgICAgICAgICBmb3J0U3ByaW50ZS5zcHJpdGVGcmFtZSA9IHRoaXMuVG93ZXJTcHJpdGVGcmFtZVtNYXRoLm1heCgwLCB0aGlzLmxldmVsIC0gMSldO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyB1cGRhdGVMZXZlbChsZXZlbDogbnVtYmVyKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5fbGV2ZWwgPSBsZXZlbDtcclxuICAgICAgICB0aGlzLnVwZGF0ZVRvd2VyT3V0d2FyZCgpO1xyXG4gICAgICAgIHRoaXMuX3Rvd2VyRGF0YSA9IFRvd2VyQ29uZmlnLmluc3RhbmNlLmdldFRvd2VyQ29uZmlnKHRoaXMudG93ZXJJZCwgdGhpcy5sZXZlbCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBvbkFuaW1hdGlvbkZpbmlzaGVkKCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuY3JlYXRlQnVsbGV0KCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBjcmVhdGVCdWxsZXQoKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmxvY2tUYXJnZXQgfHwgKFRvd2VyTGF1bmNoZXIuaW5zdGFuY2UgJiYgKFRvd2VyTGF1bmNoZXIuaW5zdGFuY2UuZ2FtZU92ZXIgfHwgVG93ZXJMYXVuY2hlci5pbnN0YW5jZS5wYXVzZSkpKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgYnVsbGV0ID0gQnVsbGV0TWFuYWdlci5pbnN0YW5jZS5jcmVhdGUodGhpcy5idWxsZXRQcmVmYWIpO1xyXG4gICAgICAgIGNvbnN0IG5vZGU6IE5vZGUgPSBidWxsZXQubm9kZTtcclxuICAgICAgICAvLyBjb25zdCBwb3MgPSBuZXcgVmVjMygpO1xyXG4gICAgICAgIGNvbnN0IHBvcyA9IHRoaXMubm9kZS5wb3NpdGlvbi5jbG9uZSgpO1xyXG4gICAgICAgIGNvbnN0IGZvcnRSYWRpdXM6bnVtYmVyID0gdGhpcy5mb3J0LmdldENvbXBvbmVudChVSVRyYW5zZm9ybSkud2lkdGggLzI7XHJcbiAgICAgICAgY29uc3QgYW5nbGU6bnVtYmVyID0gdGhpcy5mb3J0LmFuZ2xlO1xyXG4gICAgICAgIGNvbnN0IHg6bnVtYmVyID0gcG9zLnggKyBmb3J0UmFkaXVzICogTWF0aC5jb3MoYW5nbGUpO1xyXG4gICAgICAgIGNvbnN0IHk6bnVtYmVyID0gcG9zLnkgKyBmb3J0UmFkaXVzICogTWF0aC5zaW4oYW5nbGUpO1xyXG4gICAgICAgIG5vZGUuc2V0UG9zaXRpb24oeCx5KTtcclxuICAgICAgICAvLyBidWxsZXQudGFyZ2V0Tm9kZSA9IHRoaXMubG9ja1RhcmdldDtcclxuICAgICAgICBub2RlLnBhcmVudCA9IHRoaXMubm9kZS5wYXJlbnQ7XHJcbiAgICAgICAgY29uc3QgZGlyZWN0aW9uOiBWZWMzID0gdGhpcy5sb2NrVGFyZ2V0LnBvc2l0aW9uLmNsb25lKCkuc3VidHJhY3QodGhpcy5ub2RlLnBvc2l0aW9uLmNsb25lKCkpO1xyXG4gICAgICAgIGJ1bGxldC5zaG9ydChkaXJlY3Rpb24sIHRoaXMpO1xyXG5cclxuICAgIH1cclxufVxyXG5cclxuXHJcbiIsImltcG9ydCB7IF9kZWNvcmF0b3IsIEpzb25Bc3NldCwgcmVzb3VyY2VzIH0gZnJvbSAnY2MnO1xyXG5pbXBvcnQgeyBUb3dlckxhdW5jaGVyIH0gZnJvbSBcImRiOi8vYXNzZXRzL1NjcmlwdC9tb2R1bGVzL1Rvd2VyRGVmZW5zZS9Ub3dlckxhdW5jaGVyXCI7XHJcbmltcG9ydCB7IFRvd2VyRGF0YURUTyB9IGZyb20gJy4vaW5mby9Ub3dlckRhdGFEVE8nO1xyXG5pbXBvcnQge1Rvd2VyTWFwRFRPfSBmcm9tIFwiZGI6Ly9hc3NldHMvU2NyaXB0L21vZHVsZXMvVG93ZXJEZWZlbnNlL2luZm8vVG93ZXJNYXBEVE9cIjtcclxuXHJcbmNvbnN0IHsgY2NjbGFzcywgcHJvcGVydHkgfSA9IF9kZWNvcmF0b3I7XHJcblxyXG5cclxuZXhwb3J0IGNsYXNzIFRvd2VyQ29uZmlnIHtcclxuICAgIHByaXZhdGUgc3RhdGljIF9pbnN0YW5jZTogVG93ZXJDb25maWc7XHJcbiAgICBwdWJsaWMgc3RhdGljIGdldCBpbnN0YW5jZSgpOiBUb3dlckNvbmZpZyB7XHJcbiAgICAgICAgaWYgKCFUb3dlckNvbmZpZy5faW5zdGFuY2UpIHtcclxuICAgICAgICAgICAgVG93ZXJDb25maWcuX2luc3RhbmNlID0gbmV3IFRvd2VyQ29uZmlnKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBUb3dlckNvbmZpZy5faW5zdGFuY2U7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBfY29uZmlnOiBhbnkgPSBudWxsO1xyXG5cclxuICAgIHByaXZhdGUgX3Rvd2VyRGF0YTogeyBba2V5OiBudW1iZXJdOiB7IFtrZXk6IHN0cmluZ106IFRvd2VyRGF0YURUTyB9IH07XHJcbiAgICBwcml2YXRlIF9tYXBEYXRhOiB7IFtrZXk6IG51bWJlcl06IHsgW2tleTogc3RyaW5nXTogVG93ZXJNYXBEVE8gfSB9O1xyXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHRoaXMuaW5pdCgpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgaW5pdCgpOiB2b2lkIHtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGxvYWRDb25maWcoKTogUHJvbWlzZTxhbnk+IHtcclxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2U8YW55PigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgICAgICAgIHJlc291cmNlcy5sb2FkKFwidG93ZXIvY29uZmlnXCIsIChlcnIsIGRhdGEpID0+IHtcclxuICAgICAgICAgICAgICAgIGlmIChlcnIpIHtcclxuICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXNvbHZlKGRhdGEpO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH0pXHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGluaXRDb25maWcoY29uZmlnOiBKc29uQXNzZXQpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLl9jb25maWcgPSBjb25maWcuanNvbjtcclxuICAgICAgICB0aGlzLl90b3dlckRhdGEgPSB7fTtcclxuICAgICAgICB0aGlzLl9tYXBEYXRhICAgPSB7fTtcclxuICAgICAgICBjb25zdCB0b3dlcnNEYXRhID0gdGhpcy5fY29uZmlnW1widG93ZXJzXCJdO1xyXG4gICAgICAgIGlmICh0b3dlcnNEYXRhKSB7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGtleSBpbiB0b3dlcnNEYXRhKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0b3dlcklkOiBudW1iZXIgPSBOdW1iZXIoa2V5KTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHRvd3JEYXRhID0gdG93ZXJzRGF0YVtrZXldO1xyXG4gICAgICAgICAgICAgICAgbGV0IGlkRHRvTWFwID0gdGhpcy5fdG93ZXJEYXRhW3Rvd2VySWRdO1xyXG4gICAgICAgICAgICAgICAgaWYgKCFpZER0b01hcCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlkRHRvTWFwID0ge307XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGxldmVsS2V5IGluIHRvd3JEYXRhKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0b3dyRGF0YSwgbGV2ZWxLZXkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGVsZW1lbnQgPSB0b3dyRGF0YVtsZXZlbEtleV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGR0bzogVG93ZXJEYXRhRFRPID0gbmV3IFRvd2VyRGF0YURUTygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkdG8uYnVpbGRDb3N0ID0gZWxlbWVudC5idWlsZENvc3Q7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGR0by5yZW1vdmVCYWNrID0gZWxlbWVudC5yZW1vdmVCYWNrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkdG8uaGFybSA9IGVsZW1lbnQuaGFybTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZHRvLnNwZWVkID0gZWxlbWVudC5zcGVlZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWREdG9NYXBbbGV2ZWxLZXldID0gZHRvO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRoaXMuX3Rvd2VyRGF0YVt0b3dlcklkXSA9IGlkRHRvTWFwO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IHRoZW1lQ29uZmlncyA9IHRoaXMuX2NvbmZpZ1tcInRoZW1lXCJdO1xyXG4gICAgICAgIGZvciAobGV0IGtleSBpbiB0aGVtZUNvbmZpZ3MpIHtcclxuICAgICAgICAgICAgY29uc3QgdGhlbWU6bnVtYmVyID0gTnVtYmVyKGtleSk7XHJcbiAgICAgICAgICAgIGxldCB0aGVtZURhdGEgPSB0aGlzLl9tYXBEYXRhW3RoZW1lXTtcclxuICAgICAgICAgICAgaWYoIXRoZW1lRGF0YSkge1xyXG4gICAgICAgICAgICAgICAgdGhlbWVEYXRhID0ge307XHJcbiAgICAgICAgICAgIH0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBjb25zdCBjb25maWdEYXRhID0gdGhlbWVDb25maWdzW2tleV07XHJcbiAgICAgICAgICAgIGlmICghY29uZmlnRGF0YSkge1xyXG4gICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZm9yIChjb25zdCBjb25maWdEYXRhS2V5IGluIGNvbmZpZ0RhdGEpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG1hcENvbmZpZyA9IGNvbmZpZ0RhdGFbY29uZmlnRGF0YUtleV07XHJcbiAgICAgICAgICAgICAgICBjb25zdCBtYXBEYXRhOiBUb3dlck1hcERUTyA9IG5ldyBUb3dlck1hcERUTygpXHJcbiAgICAgICAgICAgICAgICBtYXBEYXRhLmNhbkJ1aWxkVG93ZXJJZHMgPSBtYXBDb25maWcudG93ZXJzO1xyXG4gICAgICAgICAgICAgICAgbWFwRGF0YS5zdGFydFZhbHVlID0gbWFwQ29uZmlnLnN0YXJ0VmFsdWU7XHJcbiAgICAgICAgICAgICAgICBtYXBEYXRhLmVuZW15Q291bnQgID0gbWFwQ29uZmlnLmVuZW15Q291bnQ7XHJcbiAgICAgICAgICAgICAgICB0aGVtZURhdGFbY29uZmlnRGF0YUtleV0gPSBtYXBEYXRhO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuX21hcERhdGFbdGhlbWVdID0gdGhlbWVEYXRhO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBUb3dlckxhdW5jaGVyLmluc3RhbmNlLnZhbHVlID0gdGhpcy5fY29uZmlnW1wic3RhcnRWYWx1ZVwiXTtcclxuICAgICAgICBjb25zdCBtYXBEYXRhID0gdGhpcy5nZXRNYXBEYXRhKCk7XHJcbiAgICAgICAgaWYgKG1hcERhdGEpIHtcclxuICAgICAgICAgICAgVG93ZXJMYXVuY2hlci5pbnN0YW5jZS52YWx1ZSA9IG1hcERhdGEuc3RhcnRWYWx1ZVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0Q29uZmlnKGtleTogc3RyaW5nKTogYW55IHtcclxuICAgICAgICBpZiAoIXRoaXMuX2NvbmZpZykge1xyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NvbmZpZ1trZXldO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXRNYXBEYXRhKHRoZW1lSWQ6IG51bWJlciA9IFRvd2VyTGF1bmNoZXIuaW5zdGFuY2UudGhlbWUsIG1hcElkOiBudW1iZXIgPSBUb3dlckxhdW5jaGVyLmluc3RhbmNlLm1hcElkKTogVG93ZXJNYXBEVE8ge1xyXG4gICAgICAgIGlmICghdGhpcy5fbWFwRGF0YSkge1xyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgdGhlbWVDb25maWdzID0gdGhpcy5fbWFwRGF0YVt0aGVtZUlkXTtcclxuICAgICAgICBpZiAoIXRoZW1lQ29uZmlncykge1xyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgdGhlbWUgPSB0aGVtZUNvbmZpZ3NbYG1hcCR7bWFwSWR9YF07XHJcbiAgICAgICAgcmV0dXJuIHRoZW1lXHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldFRvd2VyQ29uZmlnKHRvd2VySWQ6IG51bWJlciwgbGV2ZWw6IG51bWJlciA9IDEpOiBUb3dlckRhdGFEVE8ge1xyXG4gICAgICAgIGlmICghdGhpcy5fdG93ZXJEYXRhKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCB0b3dlckRhdGEgPSB0aGlzLl90b3dlckRhdGFbdG93ZXJJZF07XHJcbiAgICAgICAgaWYgKCF0b3dlckRhdGEpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0b3dlckRhdGFbYGxldmVsJHtsZXZlbH1gXVxyXG4gICAgfVxyXG59XHJcbiIsIlxyXG5leHBvcnQgY2xhc3MgVG93ZXJDb25zdCAge1xyXG4gICAgcHJpdmF0ZSBzdGF0aWMgX2luc3RhbmNlOlRvd2VyQ29uc3Q7XHJcbiAgICBwdWJsaWMgIHN0YXRpYyAgZ2V0IGluc3RhbmNlKCk6VG93ZXJDb25zdCB7XHJcbiAgICAgICAgaWYoIXRoaXMuX2luc3RhbmNlKXtcclxuICAgICAgICAgICAgdGhpcy5faW5zdGFuY2UgPSBuZXcgVG93ZXJDb25zdCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcy5faW5zdGFuY2U7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHJlYWRvbmx5IENvbGxpZGVyVGFnX0Jvc3M6bnVtYmVyID0gMTtcclxuICAgIHB1YmxpYyByZWFkb25seSBDb2xsaWRlclRhZ19FbmVteTpudW1iZXIgPSAyO1xyXG4gICAgcHVibGljIHJlYWRvbmx5IENvbGxpZGVyVGFnX0J1bGxldDpudW1iZXIgPSAzO1xyXG59XHJcbiIsImV4cG9ydCBjbGFzcyBUb3dlckRhdGFEVE8ge1xyXG4gICAgcHVibGljIGJ1aWxkQ29zdDogbnVtYmVyO1xyXG4gICAgcHVibGljIHJlbW92ZUJhY2s6IG51bWJlcjtcclxuICAgIHB1YmxpYyBoYXJtOiBudW1iZXI7XHJcbiAgICBwdWJsaWMgc3BlZWQ6IG51bWJlcjtcclxufSIsImltcG9ydCB7X2RlY29yYXRvcn0gZnJvbSAnY2MnO1xyXG5pbXBvcnQgQmFzZVZpZXcgZnJvbSBcImRiOi8vYXNzZXRzL1NjcmlwdC91aS9CYXNlVmlld1wiO1xyXG5pbXBvcnQge3JlZ2lzdGVyVmlld30gZnJvbSBcImRiOi8vYXNzZXRzL1NjcmlwdC91aS9WaWV3UmVnaXN0ZXJNZ3JcIjtcclxuaW1wb3J0IHtQYW5lbFR5cGV9IGZyb20gXCJkYjovL2Fzc2V0cy9TY3JpcHQvdWkvUGFuZWxFbnVtXCI7XHJcbmltcG9ydCB7TGF5ZXJUeXBlfSBmcm9tIFwiZGI6Ly9hc3NldHMvU2NyaXB0L3VpL0xheWVyTWFuYWdlclwiO1xyXG5pbXBvcnQgVmlld0NvbnN0IGZyb20gXCJkYjovL2Fzc2V0cy9TY3JpcHQvdWkvVmlld0NvbnN0XCI7XHJcblxyXG5jb25zdCB7IGNjY2xhc3MsIHByb3BlcnR5IH0gPSBfZGVjb3JhdG9yO1xyXG5cclxuQGNjY2xhc3MoJ1Rvd2VyR2FtZVNjZW5lJylcclxuZXhwb3J0IGNsYXNzIFRvd2VyR2FtZVNjZW5lIGV4dGVuZHMgQmFzZVZpZXcge1xyXG4gICAgc3RhcnQoKSB7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIHVwZGF0ZShkZWx0YVRpbWU6IG51bWJlcikge1xyXG4gICAgICAgIFxyXG4gICAgfVxyXG59XHJcblxyXG5yZWdpc3RlclZpZXcoe1xyXG4gICAgdmlld0NsczpUb3dlckdhbWVTY2VuZSxcclxuICAgIGlkOlBhbmVsVHlwZS5Ub3dlckdhbWVTY2VuZSxcclxuICAgIGxheWVyOkxheWVyVHlwZS52aWV3LFxyXG4gICAgcHJlZmFiUGF0aFByZWZpeDpWaWV3Q29uc3QuZGVmYXVsdFByZWZhYlBhdGhQcmVmaXggKyBcInRvd2VyL1wiXHJcbn0pXHJcbiIsImltcG9ydCB7IF9kZWNvcmF0b3IsIENvbXBvbmVudCwgTGFiZWwsIG1hdGgsIE5vZGUsIE5vZGVQb29sLCBTcHJpdGUsIFZlYzMgfSBmcm9tICdjYyc7XHJcbmltcG9ydCB7IFRvd2VyQ29uZmlnIH0gZnJvbSBcImRiOi8vYXNzZXRzL1NjcmlwdC9tb2R1bGVzL1Rvd2VyRGVmZW5zZS9Ub3dlckNvbmZpZ1wiO1xyXG5pbXBvcnQgeyBTZWxlY3RUb3dlckJ1aWxkIH0gZnJvbSBcImRiOi8vYXNzZXRzL1NjcmlwdC9tb2R1bGVzL1Rvd2VyRGVmZW5zZS9TZWxlY3RUb3dlckJ1aWxkXCI7XHJcbmltcG9ydCB7IFRvd2VyQnVpbGRJbmZvIH0gZnJvbSBcImRiOi8vYXNzZXRzL1NjcmlwdC9tb2R1bGVzL1Rvd2VyRGVmZW5zZS9pbmZvL1Rvd2VyQnVpbGRJbmZvXCI7XHJcbmltcG9ydCB7IFJlbW92ZU9yVXBMZXZlbCB9IGZyb20gJy4vUmVtb3ZlT3JVcExldmVsJztcclxuXHJcbmNvbnN0IHsgY2NjbGFzcywgcHJvcGVydHkgfSA9IF9kZWNvcmF0b3I7XHJcblxyXG5AY2NjbGFzcygnR2FtZVVJTWFuYWdlcicpXHJcbmV4cG9ydCBjbGFzcyBUb3dlckdhbWVVSU1hbmFnZXIgZXh0ZW5kcyBDb21wb25lbnQge1xyXG5cclxuICAgIHByaXZhdGUgc3RhdGljIF9pbnN0YW5jZTogVG93ZXJHYW1lVUlNYW5hZ2VyO1xyXG4gICAgcHVibGljIHN0YXRpYyBnZXQgaW5zdGFuY2UoKTogVG93ZXJHYW1lVUlNYW5hZ2VyIHtcclxuICAgICAgICBpZiAoIVRvd2VyR2FtZVVJTWFuYWdlci5faW5zdGFuY2UpIHtcclxuICAgICAgICAgICAgVG93ZXJHYW1lVUlNYW5hZ2VyLl9pbnN0YW5jZSA9IG5ldyBUb3dlckdhbWVVSU1hbmFnZXIoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIFRvd2VyR2FtZVVJTWFuYWdlci5faW5zdGFuY2U7XHJcbiAgICB9XHJcblxyXG4gICAgQHByb3BlcnR5KExhYmVsKVxyXG4gICAgcHVibGljIHR1cm5pcExhYmVsOiBMYWJlbCA9IG51bGw7XHJcbiAgICBAcHJvcGVydHkoTm9kZSlcclxuICAgIHB1YmxpYyBzZWxlY3RlZFRvd2VyTm9kZTogTm9kZSA9IG51bGw7XHJcbiAgICBAcHJvcGVydHkoTm9kZSlcclxuICAgIHB1YmxpYyByZW1vdmVPclVwZGF0ZTogTm9kZSA9IG51bGw7XHJcblxyXG4gICAgcHJpdmF0ZSBfbm9kZVBvb2w6IE5vZGVQb29sID0gbnVsbDtcclxuXHJcbiAgICBwcm90ZWN0ZWQgb25Mb2FkKCkge1xyXG4gICAgICAgIGlmICghVG93ZXJHYW1lVUlNYW5hZ2VyLl9pbnN0YW5jZSkge1xyXG4gICAgICAgICAgICBUb3dlckdhbWVVSU1hbmFnZXIuX2luc3RhbmNlID0gdGhpcztcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLmRlc3Ryb3koKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgc3RhcnQoKSB7XHJcbiAgICAgICAgdGhpcy5fbm9kZVBvb2wgPSBuZXcgTm9kZVBvb2woKTtcclxuICAgIH1cclxuXHJcbiAgICB1cGRhdGUoZGVsdGFUaW1lOiBudW1iZXIpIHtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHVwZGF0ZVZhbHVlKHZhbHVlOiBudW1iZXIpOiB2b2lkIHtcclxuICAgICAgICBpZiAodGhpcy50dXJuaXBMYWJlbCkge1xyXG4gICAgICAgICAgICB0aGlzLnR1cm5pcExhYmVsLnN0cmluZyA9IHZhbHVlLnRvU3RyaW5nKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXQgcmVvbW92ZVVwZGF0ZVN0YXRlKCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIGlmICh0aGlzLnJlbW92ZU9yVXBkYXRlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnJlbW92ZU9yVXBkYXRlLmFjdGl2ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzZXQgcmVvbW92ZVVwZGF0ZVN0YXRlKHNob3c6IGJvb2xlYW4pIHtcclxuICAgICAgICBpZiAodGhpcy5yZW1vdmVPclVwZGF0ZSkge1xyXG4gICAgICAgICAgICB0aGlzLnJlbW92ZU9yVXBkYXRlLmFjdGl2ZSA9IHNob3c7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXQgc2VsZWN0ZWRUb3dlclN0YXRlKCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIGlmICh0aGlzLnNlbGVjdGVkVG93ZXJOb2RlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnNlbGVjdGVkVG93ZXJOb2RlLmFjdGl2ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzZXQgc2VsZWN0ZWRUb3dlclN0YXRlKHZhbHVlOiBib29sZWFuKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuc2VsZWN0ZWRUb3dlck5vZGUpIHtcclxuICAgICAgICAgICAgdGhpcy5zZWxlY3RlZFRvd2VyTm9kZS5hY3RpdmUgPSB2YWx1ZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNob3dSZW1vdmVPclVwZGF0ZShzaG93OiBib29sZWFuLCBidWlsZEluZm8/OiBUb3dlckJ1aWxkSW5mbywgc2VsZWN0Q2FsbDogKGhhbmRsZXJUeXBlOiBudW1iZXIsIGJ1aWxkSW5mbzogVG93ZXJCdWlsZEluZm8pID0+IHZvaWQgPSBudWxsLCBjYWxsT2JqOiBhbnkgPSBudWxsKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKCF0aGlzLnJlbW92ZU9yVXBkYXRlKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5yZW9tb3ZlVXBkYXRlU3RhdGUgPSBzaG93O1xyXG4gICAgICAgIGlmIChzaG93ICYmIGJ1aWxkSW5mbykge1xyXG4gICAgICAgICAgICB0aGlzLnJlbW92ZU9yVXBkYXRlLnNldFBvc2l0aW9uKGJ1aWxkSW5mby5ub2RlLnBvc2l0aW9uLmNsb25lKCkpO1xyXG4gICAgICAgICAgICBjb25zdCBzY3JpcHQ6IFJlbW92ZU9yVXBMZXZlbCA9IHRoaXMucmVtb3ZlT3JVcGRhdGUuZ2V0Q29tcG9uZW50KFJlbW92ZU9yVXBMZXZlbCk7XHJcbiAgICAgICAgICAgIGlmIChzY3JpcHQpIHtcclxuICAgICAgICAgICAgICAgIHNjcmlwdC51cGRhdGVJbmZvKGJ1aWxkSW5mbywgc2VsZWN0Q2FsbCwgY2FsbE9iaik7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5pi+56S66YCJ5oup5aGU5bu66YCgXHJcbiAgICAgKiBAcGFyYW0gc2hvdyDmmK/lkKbmmL7npLpcclxuICAgICAqIEBwYXJhbSBidWlsZEluZm9cclxuICAgICAqIEBwYXJhbSBzZWxlY3RDYWxsIOmAieaLqeWbnuiwg+WHveaVsFxyXG4gICAgICogQHBhcmFtIHNlbGVjdE9iaiDpgInmi6nlm57osIPlh73mlbDlr7nosaFcclxuICAgICAqL1xyXG4gICAgcHVibGljIHNob3dTZWxlY3RUb3dlcihzaG93OiBib29sZWFuLCBidWlsZEluZm8/OiBUb3dlckJ1aWxkSW5mbywgc2VsZWN0Q2FsbDogKGJ1aWxkSW5mbzogVG93ZXJCdWlsZEluZm8pID0+IHZvaWQgPSBudWxsLCBzZWxlY3RPYmo6IGFueSA9IG51bGwpOiBib29sZWFuIHtcclxuICAgICAgICBpZiAoIXRoaXMuc2VsZWN0ZWRUb3dlck5vZGUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnNlbGVjdGVkVG93ZXJTdGF0ZSA9IHNob3c7XHJcblxyXG4gICAgICAgIGNvbnN0IGNoaWxkcmVuQ291bnQ6IG51bWJlciA9IHRoaXMuc2VsZWN0ZWRUb3dlck5vZGUuY2hpbGRyZW4ubGVuZ3RoO1xyXG5cclxuICAgICAgICBmb3IgKGxldCBpID0gY2hpbGRyZW5Db3VudCAtIDE7IGkgPj0gMDsgaS0tKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGNoaWxkID0gdGhpcy5zZWxlY3RlZFRvd2VyTm9kZS5jaGlsZHJlbltpXVxyXG4gICAgICAgICAgICBjaGlsZC5yZW1vdmVGcm9tUGFyZW50KCk7XHJcbiAgICAgICAgICAgIHRoaXMuX25vZGVQb29sLnB1dChjaGlsZCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoc2hvdykge1xyXG4gICAgICAgICAgICB0aGlzLnNlbGVjdGVkVG93ZXJOb2RlLnNldFBvc2l0aW9uKGJ1aWxkSW5mby5ub2RlLnBvc2l0aW9uLmNsb25lKCkpO1xyXG4gICAgICAgICAgICBjb25zdCBtYXBEYXRhID0gVG93ZXJDb25maWcuaW5zdGFuY2UuZ2V0TWFwRGF0YSgpO1xyXG4gICAgICAgICAgICBpZiAobWFwRGF0YSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgY2FuQnVpbGRUb3dlcnM6IG51bWJlcltdID0gbWFwRGF0YS5jYW5CdWlsZFRvd2VySWRzO1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjYW5CdWlsZFRvd2Vycy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHRvd2VySWQ6IG51bWJlciA9IGNhbkJ1aWxkVG93ZXJzW2ldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHRvd2VyQnVpbGQ6IFNlbGVjdFRvd2VyQnVpbGQgPSB0aGlzLmdldE5vZGUoKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdGVkVG93ZXJOb2RlLmFkZENoaWxkKHRvd2VyQnVpbGQubm9kZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHRvd2VyQnVpbGQuc2V0VG93ZXJJZCh0b3dlcklkKTtcclxuICAgICAgICAgICAgICAgICAgICB0b3dlckJ1aWxkLnNldEJ1aWxkSW5mbyhidWlsZEluZm8pXHJcbiAgICAgICAgICAgICAgICAgICAgdG93ZXJCdWlsZC5zZXRDbGlja0NhbGwoc2VsZWN0Q2FsbCwgc2VsZWN0T2JqKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGdldE5vZGUoKTogU2VsZWN0VG93ZXJCdWlsZCB7XHJcbiAgICAgICAgaWYgKHRoaXMuX25vZGVQb29sLnNpemUoKSA+IDApIHtcclxuICAgICAgICAgICAgY29uc3Qgbm9kZTogTm9kZSA9IHRoaXMuX25vZGVQb29sLmdldCgpO1xyXG4gICAgICAgICAgICBsZXQgYnVpbGQ6IFNlbGVjdFRvd2VyQnVpbGQgPSBub2RlLmdldENvbXBvbmVudChTZWxlY3RUb3dlckJ1aWxkKTtcclxuICAgICAgICAgICAgaWYgKCFidWlsZCkge1xyXG4gICAgICAgICAgICAgICAgYnVpbGQgPSBub2RlLmFkZENvbXBvbmVudChTZWxlY3RUb3dlckJ1aWxkKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBub2RlLmFkZENvbXBvbmVudChTcHJpdGUpO1xyXG4gICAgICAgICAgICByZXR1cm4gYnVpbGQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IG5vZGUgPSBuZXcgTm9kZSgpO1xyXG4gICAgICAgIG5vZGUuYWRkQ29tcG9uZW50KFNwcml0ZSk7XHJcbiAgICAgICAgcmV0dXJuIG5vZGUuYWRkQ29tcG9uZW50KFNlbGVjdFRvd2VyQnVpbGQpO1xyXG4gICAgfVxyXG59XHJcblxyXG5cclxuIiwiaW1wb3J0IHsgX2RlY29yYXRvciwgQ29sb3IsIENvbXBvbmVudCwgR3JhcGhpY3MsIFNpemUsIFZlYzIsIFZlYzMsIHZpZXcgfSBmcm9tICdjYyc7XHJcbmltcG9ydCBFbnRpdHlMYXllciBmcm9tIFwiZGI6Ly9hc3NldHMvU2NyaXB0L21vZHVsZXMvUlBHL2xheWVyL0VudGl0eUxheWVyXCI7XHJcbmltcG9ydCB7IEVuZW15IH0gZnJvbSBcImRiOi8vYXNzZXRzL1NjcmlwdC9tb2R1bGVzL1Rvd2VyRGVmZW5zZS9FbmVteVwiO1xyXG5pbXBvcnQgeyBUb3dlckNoYXJhY3RlciB9IGZyb20gXCJkYjovL2Fzc2V0cy9TY3JpcHQvbW9kdWxlcy9Ub3dlckRlZmVuc2UvVG93ZXJDaGFyYWN0ZXJcIjtcclxuaW1wb3J0IHsgVG93ZXJCdWlsZEluZm8gfSBmcm9tIFwiZGI6Ly9hc3NldHMvU2NyaXB0L21vZHVsZXMvVG93ZXJEZWZlbnNlL2luZm8vVG93ZXJCdWlsZEluZm9cIjtcclxuaW1wb3J0IHsgVG93ZXJNYXBMYXllciB9IGZyb20gJy4vVG93ZXJNYXBMYXllcic7XHJcbmltcG9ydCB7IEFuY2hvclBvaW50VHlwZSwgUXVhZFRyZWUsIFF1YWRUcmVlUmVjdCB9IGZyb20gJy4uLy4uL0NvbW1vbi9RdWFkVHJlZSc7XHJcbmltcG9ydCB7IEJlaGF2aW91ciB9IGZyb20gJy4uL1JQRy9CZWhhdmlvdXInO1xyXG5pbXBvcnQgeyBHYW1lRWxlbWVudCB9IGZyb20gXCJkYjovL2Fzc2V0cy9TY3JpcHQvbW9kdWxlcy9HYW1lRWxlbWVudFwiO1xyXG5pbXBvcnQgeyBCdWxsZXQgfSBmcm9tIFwiZGI6Ly9hc3NldHMvU2NyaXB0L21vZHVsZXMvVG93ZXJEZWZlbnNlL0J1bGxldFwiO1xyXG5pbXBvcnQgeyBCdWxsZXRNYW5hZ2VyIH0gZnJvbSBcImRiOi8vYXNzZXRzL1NjcmlwdC9tb2R1bGVzL1Rvd2VyRGVmZW5zZS9CdWxsZXRNYW5hZ2VyXCI7XHJcbmltcG9ydCB7IEJvc3MgfSBmcm9tIFwiZGI6Ly9hc3NldHMvU2NyaXB0L21vZHVsZXMvVG93ZXJEZWZlbnNlL0Jvc3NcIjtcclxuaW1wb3J0IHsgRWZmZWN0TWFuYWdlciB9IGZyb20gXCJkYjovL2Fzc2V0cy9TY3JpcHQvbW9kdWxlcy9Ub3dlckRlZmVuc2UvRWZmZWN0TWFuYWdlclwiO1xyXG5pbXBvcnQgeyBUb3dlckdhbWVVSU1hbmFnZXIgfSBmcm9tIFwiZGI6Ly9hc3NldHMvU2NyaXB0L21vZHVsZXMvVG93ZXJEZWZlbnNlL1Rvd2VyR2FtZVVJTWFuYWdlclwiO1xyXG5pbXBvcnQge3ZpZXdNYW5hZ2VyfSBmcm9tIFwiZGI6Ly9hc3NldHMvU2NyaXB0L3VpL1ZpZXdNYW5hZ2VyXCI7XHJcbmltcG9ydCB7UGFuZWxUeXBlfSBmcm9tIFwiZGI6Ly9hc3NldHMvU2NyaXB0L3VpL1BhbmVsRW51bVwiO1xyXG5pbXBvcnQge1Rvd2VyU2NlbmVNYXB9IGZyb20gXCJkYjovL2Fzc2V0cy9TY3JpcHQvbW9kdWxlcy9Ub3dlckRlZmVuc2UvVG93ZXJTY2VuZU1hcFwiO1xyXG5pbXBvcnQge01hcExvYWRNb2RlbH0gZnJvbSBcImRiOi8vYXNzZXRzL1NjcmlwdC9tb2R1bGVzL1JQRy9FbnVtXCI7XHJcbmltcG9ydCB7VG93ZXJNYXBEVE99IGZyb20gXCJkYjovL2Fzc2V0cy9TY3JpcHQvbW9kdWxlcy9Ub3dlckRlZmVuc2UvaW5mby9Ub3dlck1hcERUT1wiO1xyXG5pbXBvcnQge1Rvd2VyQ29uZmlnfSBmcm9tIFwiZGI6Ly9hc3NldHMvU2NyaXB0L21vZHVsZXMvVG93ZXJEZWZlbnNlL1Rvd2VyQ29uZmlnXCI7XHJcblxyXG5jb25zdCB7IGNjY2xhc3MsIHByb3BlcnR5IH0gPSBfZGVjb3JhdG9yO1xyXG5cclxuQGNjY2xhc3MoJ1Rvd2VyTGF1bmNoZXInKVxyXG5leHBvcnQgY2xhc3MgVG93ZXJMYXVuY2hlciBleHRlbmRzIENvbXBvbmVudCB7XHJcblxyXG4gICAgQHByb3BlcnR5KEdyYXBoaWNzKVxyXG4gICAgcHVibGljIGdyYXBoaWNzOiBHcmFwaGljcyA9IG51bGw7XHJcbiAgICAvLyBAcHJvcGVydHkoVG93ZXJTY2VuZU1hcClcclxuICAgIC8vIHB1YmxpYyBtYXA6IFRvd2VyU2NlbmVNYXAgPSBudWxsO1xyXG5cclxuICAgIHByaXZhdGUgc3RhdGljIF9pbnN0YW5jZTogVG93ZXJMYXVuY2hlcjtcclxuICAgIHB1YmxpYyBzdGF0aWMgZ2V0IGluc3RhbmNlKCk6IFRvd2VyTGF1bmNoZXIge1xyXG4gICAgICAgIC8vIGlmICghdGhpcy5faW5zdGFuY2UpIHtcclxuICAgICAgICAvLyAgICAgdGhpcy5faW5zdGFuY2UgPSBuZXcgVG93ZXJMYXVuY2hlcigpO1xyXG4gICAgICAgIC8vIH1cclxuICAgICAgICByZXR1cm4gdGhpcy5faW5zdGFuY2U7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGlzSW5pdDogYm9vbGVhbiA9IGZhbHNlO1xyXG5cclxuICAgIHB1YmxpYyBzcGVlZDogbnVtYmVyID0gMTtcclxuICAgIHB1YmxpYyBwYXVzZTogYm9vbGVhbiA9IGZhbHNlO1xyXG4gICAgcHVibGljIHRoZW1lOiBudW1iZXIgPSAxO1xyXG4gICAgcHVibGljIGdhbWVPdmVyOiBib29sZWFuID0gZmFsc2U7XHJcbiAgICBwdWJsaWMgbWFwSWQ6IG51bWJlciA9IDE7XHJcblxyXG5cclxuICAgIHB1YmxpYyBwb3BFbmVteUNvdW50Om51bWJlciA9IDA7XHJcblxyXG4gICAgcHJpdmF0ZSBfdmFsdWU6IG51bWJlciA9IDA7XHJcbiAgICBwdWJsaWMgc2V0IHZhbHVlKHZhbHVlOiBudW1iZXIpIHtcclxuICAgICAgICB0aGlzLl92YWx1ZSA9IHZhbHVlO1xyXG4gICAgICAgIFRvd2VyR2FtZVVJTWFuYWdlci5pbnN0YW5jZS51cGRhdGVWYWx1ZSh2YWx1ZSk7XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgZ2V0IHZhbHVlKCk6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3ZhbHVlO1xyXG4gICAgfVxyXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHN1cGVyKCk7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgX2VudGl0eUxheWVyOiBFbnRpdHlMYXllcjtcclxuICAgIHByaXZhdGUgX21hcExheWVyOiBUb3dlck1hcExheWVyO1xyXG5cclxuICAgIHByaXZhdGUgX2VuZW15TGlzdDogeyBba2V5OiBzdHJpbmddOiBFbmVteSB9O1xyXG4gICAgcHJpdmF0ZSBfdG93ZXJMaXN0OiB7IFtrZXk6IHN0cmluZ106IFRvd2VyQ2hhcmFjdGVyIH07XHJcbiAgICBwcml2YXRlIF9ib3NzOiBCb3NzO1xyXG5cclxuICAgIHByaXZhdGUgX2J1aWxkSW5mb3M6IHsgW2tleTogc3RyaW5nXTogVG93ZXJCdWlsZEluZm8gfTtcclxuXHJcbiAgICBwcml2YXRlIF9tYXBQYXRoQ2FjaGU6IHsgW2tleTogc3RyaW5nXTogVmVjMltdIH07XHJcblxyXG4gICAgcHVibGljIHF1YWRUcmVlOiBRdWFkVHJlZTxCZWhhdmlvdXI+ID0gbnVsbDtcclxuXHJcbiAgICBwdWJsaWMgaXNEZWJ1ZzogYm9vbGVhbiA9IHRydWU7XHJcblxyXG4gICAgcHJvdGVjdGVkIG9uTG9hZCgpIHtcclxuICAgICAgICBpZiAoIVRvd2VyTGF1bmNoZXIuX2luc3RhbmNlKSB7XHJcbiAgICAgICAgICAgIFRvd2VyTGF1bmNoZXIuX2luc3RhbmNlID0gdGhpcztcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLmRlc3Ryb3koKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGluaXQoZW50aXR5TGF5ZXI6IEVudGl0eUxheWVyLCBtYXBMYXllcjogVG93ZXJNYXBMYXllcik6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuX2VudGl0eUxheWVyID0gZW50aXR5TGF5ZXI7XHJcbiAgICAgICAgdGhpcy5fbWFwTGF5ZXIgPSBtYXBMYXllcjtcclxuICAgICAgICB0aGlzLl9lbmVteUxpc3QgPSB7fTtcclxuICAgICAgICB0aGlzLl90b3dlckxpc3QgPSB7fTtcclxuICAgICAgICB0aGlzLl9idWlsZEluZm9zID0ge307XHJcbiAgICAgICAgdGhpcy5fbWFwUGF0aENhY2hlID0ge307XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGFzeW5jIGdldFdvcmxkUGF0aCgpOiBQcm9taXNlPFZlYzJbXT4ge1xyXG4gICAgICAgIGNvbnN0IG1hcEtleTogc3RyaW5nID0gYCR7dGhpcy50aGVtZX1fJHt0aGlzLm1hcElkfWA7XHJcbiAgICAgICAgbGV0IHJlc3VsdDogVmVjMltdID0gdGhpcy5fbWFwUGF0aENhY2hlW21hcEtleV07XHJcbiAgICAgICAgaWYgKHJlc3VsdCAmJiByZXN1bHQubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5fbWFwTGF5ZXIpIHtcclxuICAgICAgICAgICAgcmVzdWx0ID0gYXdhaXQgdGhpcy5fbWFwTGF5ZXIuYW5pbWF0aW9uUGF0aC5nZXRXb3JsZFBhdGhCeU1hcElkKHRoaXMubWFwSWQsIHRoaXMudGhlbWUpO1xyXG4gICAgICAgICAgICB0aGlzLl9tYXBQYXRoQ2FjaGVbbWFwS2V5XSA9IHJlc3VsdDtcclxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIFtdXHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGFkZEVuZW15KGVuZW15OiBFbmVteSk6IHZvaWQge1xyXG4gICAgICAgIGlmICghZW5lbXkgfHwgIWVuZW15Lm5vZGUpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyB0aGlzLnF1YWRUcmVlLmluc2VydChlbmVteSk7XHJcbiAgICAgICAgdGhpcy5fZW5lbXlMaXN0W2VuZW15LnV1aWRdID0gZW5lbXk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHJlbW92ZUVuZW15KGVuZW15OiBFbmVteSk6IHZvaWQge1xyXG4gICAgICAgIGlmICghZW5lbXkgfHwgIWVuZW15Lm5vZGUpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyB0aGlzLnF1YWRUcmVlLnJlbW92ZShlbmVteSk7XHJcbiAgICAgICAgZGVsZXRlIHRoaXMuX2VuZW15TGlzdFtlbmVteS51dWlkXTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgYWRkQnVpbGRJbmZvKGJ1aWxkOiBUb3dlckJ1aWxkSW5mbyk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuX2J1aWxkSW5mb3NbYnVpbGQuaWRdID0gYnVpbGQ7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldEJ1aWxkSW5mbyhpZDogc3RyaW5nKTogVG93ZXJCdWlsZEluZm8ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9idWlsZEluZm9zW2lkXTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0RW5lbXlTaXplKCk6IG51bWJlciB7XHJcbiAgICAgICAgaWYgKCF0aGlzLl9lbmVteUxpc3QpIHtcclxuICAgICAgICAgICAgcmV0dXJuIDA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBPYmplY3Qua2V5cyh0aGlzLl9lbmVteUxpc3QpLmxlbmd0aDtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgYWRkQm9zcyhib3NzOiBCb3NzKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5fYm9zcyA9IGJvc3M7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGFkZFRvd2VyKHRvd2VyOiBUb3dlckNoYXJhY3Rlcik6IHZvaWQge1xyXG4gICAgICAgIGlmICghdG93ZXIgfHwgIXRvd2VyLm5vZGUpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLl90b3dlckxpc3RbdG93ZXIudXVpZF0gPSB0b3dlcjtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgcmVtb3ZlVG93ZXIodG93ZXI6IFRvd2VyQ2hhcmFjdGVyKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKCF0b3dlciB8fCAhdG93ZXIubm9kZSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGRlbGV0ZSB0aGlzLl90b3dlckxpc3RbdG93ZXIudXVpZF07XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIG9uR2FtZVN0YXIobGV2ZWw6bnVtYmVyKTp2b2lke1xyXG4gICAgICAgIC8vIGNvbnN0IG1hcDpUb3dlclNjZW5lTWFwID0gdGhpcy5ub2RlLmdldENvbXBvbmVudChUb3dlclNjZW5lTWFwKTtcclxuICAgICAgICAvLyBpZihtYXApe1xyXG4gICAgICAgIC8vICAgICBtYXAuc2V0TWFwSWQobGV2ZWwsIE1hcExvYWRNb2RlbC5zaW5nbGUpO1xyXG4gICAgICAgIC8vIH1cclxuICAgICAgICAvLyBUb3dlclNjZW5lTWFwLmluc3RhbmNlLnNldE1hcElkKGxldmVsKVxyXG4gICAgfVxyXG5cclxuICAgIHN0YXJ0KCkge1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKFwi5ri45oiP566h55CG6ISa5pysXCIpXHJcbiAgICAgICAgLy8gY29uc3Qgc2l6ZTogU2l6ZSA9IHZpZXcuZ2V0VmlzaWJsZVNpemUoKTtcclxuICAgICAgICAvLyBjb25zdCByZWN0OiBRdWFkVHJlZVJlY3QgPSBuZXcgUXVhZFRyZWVSZWN0KDAsIDAsIHNpemUud2lkdGgsIHNpemUuaGVpZ2h0KTtcclxuICAgICAgICAvLyB0aGlzLnF1YWRUcmVlID0gbmV3IFF1YWRUcmVlPEJlaGF2aW91cj4ocmVjdCwgMTAsIDUsIEFuY2hvclBvaW50VHlwZS5MZWZ0RG93bik7XHJcblxyXG4gICAgICAgIC8vIHRoaXMub25HYW1lU3RhcigxKVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBpbml0UXVhZFRyZWUod2lkdGg6bnVtYmVyLGhlaWdodDpudW1iZXIpOiB2b2lkIHtcclxuICAgICAgICBjb25zdCByZWN0OiBRdWFkVHJlZVJlY3QgPSBuZXcgUXVhZFRyZWVSZWN0KDAsIDAsIHdpZHRoLCBoZWlnaHQpO1xyXG4gICAgICAgIHRoaXMucXVhZFRyZWUgPSBuZXcgUXVhZFRyZWU8QmVoYXZpb3VyPihyZWN0LCAxMCwgNSwgQW5jaG9yUG9pbnRUeXBlLkxlZnREb3duKTtcclxuICAgIH1cclxuXHJcbiAgICB1cGRhdGUoZGVsdGFUaW1lOiBudW1iZXIpIHtcclxuICAgICAgICBpZiAoIXRoaXMuaXNJbml0IHx8IHRoaXMuZ2FtZU92ZXIgfHwgdGhpcy5wYXVzZSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMucXVhZFRyZWUuY2xlYXIoKTtcclxuXHJcbiAgICAgICAgY29uc3QgYnVsbGV0czogQnVsbGV0W10gPSBCdWxsZXRNYW5hZ2VyLmluc3RhbmNlLmJ1bGxldExpc3Q7XHJcbiAgICAgICAgaWYgKGJ1bGxldHMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGJ1bGxldHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGJ1bGxldCA9IGJ1bGxldHNbaV07XHJcbiAgICAgICAgICAgICAgICB0aGlzLnF1YWRUcmVlLmluc2VydChidWxsZXQpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gdGhpcy5fdG93ZXJMaXN0KSB7XHJcbiAgICAgICAgICAgIHRoaXMucXVhZFRyZWUuaW5zZXJ0KHRoaXMuX3Rvd2VyTGlzdFtrZXldKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gdGhpcy5fZW5lbXlMaXN0KSB7XHJcbiAgICAgICAgICAgIHRoaXMucXVhZFRyZWUuaW5zZXJ0KHRoaXMuX2VuZW15TGlzdFtrZXldKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMucXVhZFRyZWUuaW5zZXJ0KHRoaXMuX2Jvc3MpO1xyXG5cclxuXHJcblxyXG4gICAgICAgIGlmIChidWxsZXRzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBidWxsZXRzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBidWxsZXQgPSBidWxsZXRzW2ldO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgY2hpbGQ6IEJlaGF2aW91cltdID0gW107XHJcbiAgICAgICAgICAgICAgICB0aGlzLnF1YWRUcmVlLnF1ZXJ5KGJ1bGxldC5yZWN0LCBjaGlsZCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoY2hpbGQubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgY2hpbGQubGVuZ3RoOyBqKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZSA9IGNoaWxkW2pdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZSBpbnN0YW5jZW9mIEVuZW15KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIuWtkOW8uVwiLCBidWxsZXQsIFwi5omT5Lit5LqGXCIsIGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZS5kYW1hZ2UoYnVsbGV0Lmhhcm0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1bGxldC5ub2RlLnJlbW92ZUZyb21QYXJlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEJ1bGxldE1hbmFnZXIuaW5zdGFuY2UucmVsZWFzZShidWxsZXQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaS0tO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX2Jvc3MpIHtcclxuICAgICAgICAgICAgY29uc3QgY29sbGlkZUJvc3NFbGVtZW50czogQmVoYXZpb3VyW10gPSBbXTtcclxuICAgICAgICAgICAgdGhpcy5xdWFkVHJlZS5xdWVyeSh0aGlzLl9ib3NzLnJlY3QsIGNvbGxpZGVCb3NzRWxlbWVudHMpO1xyXG4gICAgICAgICAgICBpZiAoY29sbGlkZUJvc3NFbGVtZW50cy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvbGxpZGVCb3NzRWxlbWVudHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBlbGVtZW50ID0gY29sbGlkZUJvc3NFbGVtZW50c1tpXTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZWxlbWVudCBpbnN0YW5jZW9mIEVuZW15KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwi5pWM5Lq6XCIsIGVsZW1lbnQsIFwi6LefYm9zc+eisOaSnuS6hlwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fYm9zcy5ibGVlZGluZygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50LmRpZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgbWFwRGF0YTpUb3dlck1hcERUTyA9IFRvd2VyQ29uZmlnLmluc3RhbmNlLmdldE1hcERhdGEoKTtcclxuICAgICAgICBpZihtYXBEYXRhKXtcclxuICAgICAgICAgICAgY29uc3QgbWF4RW5lbXk6bnVtYmVyID0gbWFwRGF0YS5lbmVteUNvdW50O1xyXG4gICAgICAgICAgICBpZih0aGlzLnBvcEVuZW15Q291bnQgPj0gbWF4RW5lbXkpe1xyXG4gICAgICAgICAgICAgICAgdGhpcy5nYW1lT3ZlciA9dHJ1ZTtcclxuICAgICAgICAgICAgICAgIHRoaXMuZG9HYW1lT3Zlcih0cnVlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuaXNEZWJ1Zykge1xyXG4gICAgICAgICAgICBsZXQgcXRMaXN0OiBRdWFkVHJlZTxCZWhhdmlvdXI+W10gPSBbXTtcclxuICAgICAgICAgICAgdGhpcy5xdWFkVHJlZS5nZXRBbGxDaGlsZE5vZGVzKHF0TGlzdClcclxuICAgICAgICAgICAgY29uc3QgcmVjdHMgPSBxdExpc3QubWFwKGUgPT4ge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGUucmVjdDtcclxuICAgICAgICAgICAgfSwgdGhpcyk7XHJcbiAgICAgICAgICAgIHRoaXMuZHJhd1JlY3QocmVjdHMpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcblxyXG4gICAgcHJpdmF0ZSBkcmF3UmVjdChyZWN0OiBRdWFkVHJlZVJlY3RbXSk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuZ3JhcGhpY3MuY2xlYXIoKTtcclxuXHJcbiAgICAgICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IHJlY3QubGVuZ3RoOyBpbmRleCsrKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGVsZW1lbnQgPSByZWN0W2luZGV4XTtcclxuICAgICAgICAgICAgdGhpcy5ncmFwaGljcy5maWxsQ29sb3IgPSBDb2xvci5SRUQ7XHJcbiAgICAgICAgICAgIHRoaXMuZ3JhcGhpY3Muc3Ryb2tlQ29sb3IgPSBDb2xvci5ZRUxMT1c7XHJcbiAgICAgICAgICAgIHRoaXMuZ3JhcGhpY3MubGluZVdpZHRoID0gNTtcclxuICAgICAgICAgICAgY29uc3QgeDogbnVtYmVyID0gZWxlbWVudC54O1xyXG4gICAgICAgICAgICBjb25zdCB5OiBudW1iZXIgPSBlbGVtZW50Lnk7XHJcblxyXG5cclxuICAgICAgICAgICAgdGhpcy5ncmFwaGljcy5jaXJjbGUoZWxlbWVudC54LCBlbGVtZW50LnksIDEwKTtcclxuICAgICAgICAgICAgdGhpcy5ncmFwaGljcy5maWxsKCk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLmdyYXBoaWNzLnJlY3QoeCwgeSwgZWxlbWVudC53aWR0aCwgZWxlbWVudC5oZWlnaHQpO1xyXG4gICAgICAgICAgICB0aGlzLmdyYXBoaWNzLnN0cm9rZSgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZHJhd1BvaW50KHBvaW50OlZlYzMscmFkaXVzOm51bWJlciA9IDEwKTp2b2lke1xyXG4gICAgICAgIHRoaXMuZ3JhcGhpY3MubGluZVdpZHRoID0gNTtcclxuICAgICAgICB0aGlzLmdyYXBoaWNzLmZpbGxDb2xvciA9IENvbG9yLlJFRDtcclxuICAgICAgICB0aGlzLmdyYXBoaWNzLmNpcmNsZShwb2ludC54LCBwb2ludC55LCByYWRpdXMpO1xyXG4gICAgICAgIHRoaXMuZ3JhcGhpY3MuZmlsbCgpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBkb0dhbWVPdmVyKGlzV2luOmJvb2xlYW4gPSBmYWxzZSk6IHZvaWQge1xyXG4gICAgICAgIGlmIChPYmplY3Qua2V5cyh0aGlzLl9lbmVteUxpc3QpLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gdGhpcy5fZW5lbXlMaXN0KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHRoaXMuX2VuZW15TGlzdCwga2V5KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGVsZW1lbnQgPSB0aGlzLl9lbmVteUxpc3Rba2V5XTtcclxuICAgICAgICAgICAgICAgICAgICBlbGVtZW50Lm5vZGUucmVtb3ZlRnJvbVBhcmVudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlRW5lbXkoZWxlbWVudCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5fZW5lbXlMaXN0ID0ge307XHJcbiAgICAgICAgfVxyXG4gICAgICAgIEJ1bGxldE1hbmFnZXIuaW5zdGFuY2UucmVsZWFzZUFsbCgpO1xyXG4gICAgICAgIHZpZXdNYW5hZ2VyLm9wZW4oUGFuZWxUeXBlLkdhbWVPdmVyT3JXaW4saXNXaW4pO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyByZXN0YXJ0KCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuZ2FtZU92ZXIgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLnBhdXNlID0gZmFsc2U7XHJcbiAgICB9XHJcbn1cclxuXHJcbndpbmRvd1tcIlRvd2VyTGF1bmNoZXJcIl0gPSBUb3dlckxhdW5jaGVyXHJcblxyXG4iLCJcclxuZXhwb3J0IGNsYXNzIFRvd2VyTWFwRFRPIHtcclxuICAgIHB1YmxpYyBjYW5CdWlsZFRvd2VySWRzOm51bWJlcltdO1xyXG4gICAgcHVibGljIHN0YXJ0VmFsdWU6bnVtYmVyO1xyXG4gICAgcHVibGljIGVuZW15Q291bnQ6bnVtYmVyO1xyXG59XHJcbiIsImltcG9ydCB7X2RlY29yYXRvciwgQ29tcG9uZW50LCBOb2RlLCByZXNvdXJjZXMsIFNwcml0ZSwgU3ByaXRlRnJhbWUsIFRleHR1cmUyRCwgVUlUcmFuc2Zvcm19IGZyb20gJ2NjJztcclxuaW1wb3J0IE1hcExheWVyIGZyb20gXCJkYjovL2Fzc2V0cy9TY3JpcHQvbW9kdWxlcy9SUEcvbGF5ZXIvTWFwTGF5ZXJcIjtcclxuaW1wb3J0IE1hcFBhcmFtcyBmcm9tIFwiZGI6Ly9hc3NldHMvU2NyaXB0L21vZHVsZXMvUlBHL2luZm8vTWFwUGFyYW1zXCI7XHJcbmltcG9ydCB7VG93ZXJMYXVuY2hlcn0gZnJvbSBcImRiOi8vYXNzZXRzL1NjcmlwdC9tb2R1bGVzL1Rvd2VyRGVmZW5zZS9Ub3dlckxhdW5jaGVyXCI7XHJcbmltcG9ydCB7IEFuaW1hdGlvblBhdGggfSBmcm9tICcuL0FuaW1hdGlvblBhdGgnO1xyXG5jb25zdCB7IGNjY2xhc3MsIHByb3BlcnR5IH0gPSBfZGVjb3JhdG9yO1xyXG5cclxuQGNjY2xhc3MoJ1Rvd2VyTWFwTGF5ZXInKVxyXG5leHBvcnQgY2xhc3MgVG93ZXJNYXBMYXllciBleHRlbmRzIE1hcExheWVyIHtcclxuICAgIEBwcm9wZXJ0eShTcHJpdGUpXHJcbiAgICBwcml2YXRlIGJhc2VJbWFnZTogU3ByaXRlID0gbnVsbDtcclxuICAgIEBwcm9wZXJ0eShBbmltYXRpb25QYXRoKVxyXG4gICAgcHVibGljIGFuaW1hdGlvblBhdGg6IEFuaW1hdGlvblBhdGggPSBudWxsO1xyXG4gICAgQHByb3BlcnR5KE5vZGUpXHJcbiAgICBwdWJsaWMgcm9hZE5vZGU6IE5vZGUgPSBudWxsO1xyXG4gICAgcHJvdGVjdGVkIG9uTG9hZCgpOiB2b2lkIHtcclxuICAgICAgICBpZiAoIXRoaXMuYW5pbWF0aW9uUGF0aCkge1xyXG4gICAgICAgICAgICB0aGlzLmFuaW1hdGlvblBhdGggPSB0aGlzLm5vZGUuZ2V0Q29tcG9uZW50SW5DaGlsZHJlbihBbmltYXRpb25QYXRoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgaW5pdChtYXBQYXJhbXM6IE1hcFBhcmFtcykge1xyXG4gICAgICAgIHN1cGVyLmluaXQobWFwUGFyYW1zKTtcclxuICAgICAgICBpZighdGhpcy5iYXNlSW1hZ2Upe1xyXG4gICAgICAgICAgICBjb25zdCBiZ05vZGU6IE5vZGUgPSBuZXcgTm9kZSgpO1xyXG4gICAgICAgICAgICB0aGlzLm5vZGUuYWRkQ2hpbGQoYmdOb2RlKTtcclxuICAgICAgICAgICAgYmdOb2RlLmxheWVyID0gdGhpcy5ub2RlLmxheWVyO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5iYXNlSW1hZ2UgPSBiZ05vZGUuYWRkQ29tcG9uZW50KFNwcml0ZSk7XHJcbiAgICAgICAgICAgIHRoaXMuYmFzZUltYWdlLnNpemVNb2RlID0gU3ByaXRlLlNpemVNb2RlLlJBVztcclxuICAgICAgICAgICAgYmdOb2RlLmdldENvbXBvbmVudChVSVRyYW5zZm9ybSkuYW5jaG9yWCA9IDA7XHJcbiAgICAgICAgICAgIGJnTm9kZS5nZXRDb21wb25lbnQoVUlUcmFuc2Zvcm0pLmFuY2hvclkgPSAwO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5sb2FkQmcoKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgbG9hZEJnKCk6dm9pZHtcclxuICAgICAgICBjb25zdCB0aGVtZUlkOm51bWJlciA9IFRvd2VyTGF1bmNoZXIuaW5zdGFuY2UudGhlbWU7XHJcbiAgICAgICAgY29uc3QgcGF0aDpzdHJpbmcgPSBgdG93ZXIvbWFwL3RoZW1lJHt0aGVtZUlkfS9CRyR7dGhlbWVJZH0vdGV4dHVyZWBcclxuXHJcbiAgICAgICAgcmVzb3VyY2VzLmxvYWQocGF0aCwgVGV4dHVyZTJELCAoZXJyb3I6IEVycm9yLCB0ZXg6IFRleHR1cmUyRCkgPT4ge1xyXG4gICAgICAgICAgICBpZiAoZXJyb3IgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCLliqDovb3lnLDlm77og4zmma/lpLHotKUgcGF0aCA9IFwiLCBwYXRoLCBcImVycm9yXCIsIGVycm9yKTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb25zdCBzcHJpdGVGcmFtZTpTcHJpdGVGcmFtZSA9IG5ldyBTcHJpdGVGcmFtZSgpO1xyXG4gICAgICAgICAgICBzcHJpdGVGcmFtZS50ZXh0dXJlID0gdGV4O1xyXG4gICAgICAgICAgICB0aGlzLmJhc2VJbWFnZS5zcHJpdGVGcmFtZSA9IHNwcml0ZUZyYW1lO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5nZXRDb21wb25lbnQoVUlUcmFuc2Zvcm0pLndpZHRoID0gdGhpcy53aWR0aDtcclxuICAgICAgICAgICAgdGhpcy5nZXRDb21wb25lbnQoVUlUcmFuc2Zvcm0pLmhlaWdodCA9IHRoaXMuaGVpZ2h0O1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXQgd2lkdGgoKTogbnVtYmVyIHtcclxuICAgICAgICBpZiAodGhpcy5iYXNlSW1hZ2UpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuYmFzZUltYWdlLmdldENvbXBvbmVudChVSVRyYW5zZm9ybSkud2lkdGg7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy5fbWFwUGFyYW1zLnZpZXdXaWR0aDtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0IGhlaWdodCgpOiBudW1iZXIge1xyXG4gICAgICAgIGlmICh0aGlzLmJhc2VJbWFnZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5iYXNlSW1hZ2UuZ2V0Q29tcG9uZW50KFVJVHJhbnNmb3JtKS5oZWlnaHQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy5fbWFwUGFyYW1zLnZpZXdIZWlnaHQ7XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHtcclxuICAgIF9kZWNvcmF0b3IsIEV2ZW50VG91Y2gsXHJcbiAgICBpbnN0YW50aWF0ZSwgbWF0aCxcclxuICAgIE5vZGUsXHJcbiAgICBOb2RlRXZlbnRUeXBlLFxyXG4gICAgUHJlZmFiLFxyXG4gICAgcmVzb3VyY2VzLFxyXG4gICAgU3ByaXRlLFxyXG4gICAgU3ByaXRlRnJhbWUsXHJcbiAgICBUZXh0dXJlMkQsXHJcbiAgICBVSVRyYW5zZm9ybSxcclxuICAgIFZlYzIsIFZlYzMsIHZpZXdcclxufSBmcm9tICdjYyc7XHJcbmltcG9ydCB7IFNjZW5lQmFzZSB9IGZyb20gXCJkYjovL2Fzc2V0cy9TY3JpcHQvbW9kdWxlcy9TY2VuZUJhc2VcIjtcclxuaW1wb3J0IHsgTWFwSXRlbVR5cGUsIE1hcExvYWRNb2RlbCwgUGF0aE9wdGltaXplLCBQYXRoUXVhZFNlZWsgfSBmcm9tIFwiZGI6Ly9hc3NldHMvU2NyaXB0L21vZHVsZXMvUlBHL0VudW1cIjtcclxuaW1wb3J0IE1hcERhdGEgZnJvbSBcImRiOi8vYXNzZXRzL1NjcmlwdC9tb2R1bGVzL1JQRy9tYXAvTWFwRGF0YVwiO1xyXG5pbXBvcnQgUGF0aEZpbmRpbmdBZ2VudCBmcm9tIFwiZGI6Ly9hc3NldHMvU2NyaXB0L21vZHVsZXMvUlBHL21hcC9QYXRoRmluZGluZ0FnZW50XCI7XHJcbmltcG9ydCBSb2FkTm9kZSBmcm9tIFwiZGI6Ly9hc3NldHMvU2NyaXB0L21vZHVsZXMvUlBHL21hcC9Sb2FkTm9kZVwiO1xyXG5pbXBvcnQgeyBFZGl0TnBjRGF0YSwgRWRpdFNwYXduUG9pbnREYXRhIH0gZnJvbSBcImRiOi8vYXNzZXRzL1NjcmlwdC9tb2R1bGVzL1JQRy9FZGl0T2JqRGF0YVwiO1xyXG5pbXBvcnQgeyBCb3NzIH0gZnJvbSBcImRiOi8vYXNzZXRzL1NjcmlwdC9tb2R1bGVzL1Rvd2VyRGVmZW5zZS9Cb3NzXCI7XHJcbmltcG9ydCB7IEVuZW15IH0gZnJvbSBcImRiOi8vYXNzZXRzL1NjcmlwdC9tb2R1bGVzL1Rvd2VyRGVmZW5zZS9FbmVteVwiO1xyXG5pbXBvcnQgeyBUb3dlckNoYXJhY3RlciB9IGZyb20gXCJkYjovL2Fzc2V0cy9TY3JpcHQvbW9kdWxlcy9Ub3dlckRlZmVuc2UvVG93ZXJDaGFyYWN0ZXJcIjtcclxuaW1wb3J0IHsgVG93ZXJMYXVuY2hlciB9IGZyb20gXCJkYjovL2Fzc2V0cy9TY3JpcHQvbW9kdWxlcy9Ub3dlckRlZmVuc2UvVG93ZXJMYXVuY2hlclwiO1xyXG5pbXBvcnQgeyBUb3dlckNvbnN0IH0gZnJvbSBcImRiOi8vYXNzZXRzL1NjcmlwdC9tb2R1bGVzL1Rvd2VyRGVmZW5zZS9Ub3dlckNvbnN0XCI7XHJcbmltcG9ydCB7IFRvd2VyQnVpbGRJbmZvIH0gZnJvbSBcImRiOi8vYXNzZXRzL1NjcmlwdC9tb2R1bGVzL1Rvd2VyRGVmZW5zZS9pbmZvL1Rvd2VyQnVpbGRJbmZvXCI7XHJcbmltcG9ydCB7IFRvd2VyTWFwTGF5ZXIgfSBmcm9tICcuL1Rvd2VyTWFwTGF5ZXInO1xyXG5pbXBvcnQgeyBUb3dlckNvbmZpZyB9IGZyb20gXCJkYjovL2Fzc2V0cy9TY3JpcHQvbW9kdWxlcy9Ub3dlckRlZmVuc2UvVG93ZXJDb25maWdcIjtcclxuaW1wb3J0IHsgVG93ZXJHYW1lVUlNYW5hZ2VyIH0gZnJvbSBcImRiOi8vYXNzZXRzL1NjcmlwdC9tb2R1bGVzL1Rvd2VyRGVmZW5zZS9Ub3dlckdhbWVVSU1hbmFnZXJcIjtcclxuaW1wb3J0IHsgRWZmZWN0TWFuYWdlciB9IGZyb20gXCJkYjovL2Fzc2V0cy9TY3JpcHQvbW9kdWxlcy9Ub3dlckRlZmVuc2UvRWZmZWN0TWFuYWdlclwiO1xyXG5pbXBvcnQgTWFwTGF5ZXIgZnJvbSBcImRiOi8vYXNzZXRzL1NjcmlwdC9tb2R1bGVzL1JQRy9sYXllci9NYXBMYXllclwiO1xyXG5cclxuY29uc3QgeyBjY2NsYXNzLCBwcm9wZXJ0eSB9ID0gX2RlY29yYXRvcjtcclxuXHJcbkBjY2NsYXNzKCdUb3dlclNjZW5lTWFwJylcclxuZXhwb3J0IGNsYXNzIFRvd2VyU2NlbmVNYXAgZXh0ZW5kcyBTY2VuZUJhc2Uge1xyXG5cclxuICAgIHByaXZhdGUgc3RhdGljIF9pbnN0YW5jZTpUb3dlclNjZW5lTWFwID0gbnVsbDtcclxuICAgIHB1YmxpYyBzdGF0aWMgZ2V0IGluc3RhbmNlKCk6VG93ZXJTY2VuZU1hcCB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2luc3RhbmNlO1xyXG4gICAgfVxyXG4gICAgQHByb3BlcnR5KFByZWZhYilcclxuICAgIHB1YmxpYyBib3NzUHJlZmFiOiBQcmVmYWIgPSBudWxsO1xyXG5cclxuICAgIEBwcm9wZXJ0eShUb3dlck1hcExheWVyKVxyXG4gICAgcHVibGljIG1hcExheWVyOiBUb3dlck1hcExheWVyID0gbnVsbDtcclxuXHJcblxyXG4gICAgQHByb3BlcnR5KFByZWZhYilcclxuICAgIHB1YmxpYyBlbmVteVByZWZhYjogUHJlZmFiID0gbnVsbDtcclxuXHJcbiAgICBAcHJvcGVydHkoW1ByZWZhYl0pXHJcbiAgICBwdWJsaWMgdG93ZXJQcmVmYWI6IFByZWZhYltdID0gW107XHJcblxyXG4gICAgQHByb3BlcnR5KE5vZGUpXHJcbiAgICBwdWJsaWMgZWZmZWN0TGF5ZXI6IE5vZGUgPSBudWxsO1xyXG5cclxuICAgIHByaXZhdGUgc3Bhd25Qb2ludERhdGFzOiBFZGl0U3Bhd25Qb2ludERhdGFbXSA9IFtdO1xyXG5cclxuICAgIHByaXZhdGUgbWF4RW5lbXk6IG51bWJlciA9IDEwO1xyXG5cclxuICAgIHByaXZhdGUgYm9zczogQm9zcyA9IG51bGw7XHJcblxyXG4gICAgcHJvdGVjdGVkIG9uTG9hZCgpIHtcclxuICAgICAgIC8vIHRoaXMubWFwTGF5ZXIgPVxyXG4gICAgICAgIFRvd2VyU2NlbmVNYXAuX2luc3RhbmNlID0gdGhpcztcclxuICAgIH1cclxuXHJcbiAgICAvLyBwcml2YXRlIG1hcFBhdGg6IFZlYzJbXSA9IFtdO1xyXG4gICAgc3RhcnQoKSB7XHJcbiAgICAgICAgc3VwZXIuc3RhcnQoKTtcclxuXHJcblxyXG4gICAgICAgIC8vIHRoaXMud2luU2l6ZSA9IHZpZXcuZ2V0VmlzaWJsZVNpemUoKTtcclxuXHJcblxyXG4gICAgfVxyXG5cclxuXHJcbiAgICBwcm90ZWN0ZWQgZ2V0TWFwUGF0aChtYXBJZDogbnVtYmVyKTogc3RyaW5nIHtcclxuICAgICAgICBjb25zdCB0aGVtZUlkOiBudW1iZXIgPSBUb3dlckxhdW5jaGVyLmluc3RhbmNlLnRoZW1lO1xyXG4gICAgICAgIHJldHVybiBgdG93ZXIvbWFwL3RoZW1lJHt0aGVtZUlkfS9sZXZlbCR7bWFwSWR9L2xldmVsXyR7dGhlbWVJZH1fJHttYXBJZH1gXHJcbiAgICB9XHJcblxyXG5cclxuICAgIHByaXZhdGUgaW5pdE1hcEVsZW1lbnQoKTogdm9pZCB7XHJcbiAgICAgICAgY29uc3QgbWFwSXRlbXM6IGFueVtdID0gdGhpcy5tYXBEYXRhLm1hcEl0ZW1zO1xyXG4gICAgICAgIGlmICghbWFwSXRlbXMpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBUb3dlckxhdW5jaGVyLmluc3RhbmNlLmluaXQodGhpcy5lbnRpdHlMYXllciwgdGhpcy5tYXBMYXllciBhcyBUb3dlck1hcExheWVyKTtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG1hcEl0ZW1zLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG1hcEl0ZW0gPSBtYXBJdGVtc1tpXTtcclxuICAgICAgICAgICAgY29uc3QgbWFwSXRlbVR5cGUgPSBtYXBJdGVtLnR5cGU7XHJcbiAgICAgICAgICAgIGlmIChtYXBJdGVtVHlwZSA9PSBNYXBJdGVtVHlwZS5OcGMpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuaW5pdEJvc3MobWFwSXRlbSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobWFwSXRlbVR5cGUgPT0gTWFwSXRlbVR5cGUuTW9uc3Rlcikge1xyXG4gICAgICAgICAgICAgICAgLy8gdGhpcy5pbml0TW9uc3RlcihtYXBJdGVtKTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmIChtYXBJdGVtVHlwZSA9PSBNYXBJdGVtVHlwZS5UcmFuc2Zlcikge1xyXG4gICAgICAgICAgICAgICAgLy8gdGhpcy5pbml0VHJhbnNmZXJEb29yKG1hcEl0ZW0pO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKG1hcEl0ZW1UeXBlID09IE1hcEl0ZW1UeXBlLlNwYXduUG9pbnQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuaW5pdFNwYXduUG9pbnQobWFwSXRlbSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBpbml0U3Bhd25Qb2ludChtYXBJdGVtOiBFZGl0U3Bhd25Qb2ludERhdGEpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLnNwYXduUG9pbnREYXRhcy5wdXNoKG1hcEl0ZW0pXHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBpbml0Qm9zcyhtYXBJdGVtOiBFZGl0TnBjRGF0YSk6IHZvaWQge1xyXG4gICAgICAgIGNvbnN0IG5vZGUgPSBpbnN0YW50aWF0ZSh0aGlzLmJvc3NQcmVmYWIpO1xyXG4gICAgICAgIGNvbnN0IGJvc3MgPSBub2RlLmdldENvbXBvbmVudChCb3NzKTtcclxuICAgICAgICB0aGlzLmJvc3MgPSBib3NzO1xyXG4gICAgICAgIG5vZGUuYWN0aXZlID0gdHJ1ZTtcclxuICAgICAgICBub2RlLnBhcmVudCA9IHRoaXMuZW50aXR5TGF5ZXIubm9kZTtcclxuICAgICAgICBib3NzLmluaXRFZGl0RGF0YShtYXBJdGVtKTtcclxuICAgICAgICBib3NzLmluaXQoKTtcclxuICAgICAgICBUb3dlckxhdW5jaGVyLmluc3RhbmNlLmFkZEJvc3MoYm9zcyk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJvdGVjdGVkIGluaXRNYXBEYXRhKG1hcERhdGE6IE1hcERhdGEpIHtcclxuICAgICAgICB0aGlzLmlzSW5pdCA9IGZhbHNlO1xyXG4gICAgICAgIGxldCBsZW46IG51bWJlciA9IG1hcERhdGEucm9hZERhdGFBcnIubGVuZ3RoO1xyXG4gICAgICAgIGxldCBsZW4yOiBudW1iZXIgPSBtYXBEYXRhLnJvYWREYXRhQXJyWzBdLmxlbmd0aDtcclxuICAgICAgICBsZXQgdmFsdWU6IG51bWJlciA9IDA7XHJcbiAgICAgICAgbGV0IGR4OiBudW1iZXIgPSAwO1xyXG4gICAgICAgIGxldCBkeTogbnVtYmVyID0gMDtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgbGVuMjsgaisrKSB7XHJcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IG1hcERhdGEucm9hZERhdGFBcnJbaV1bal07XHJcbiAgICAgICAgICAgICAgICBkeCA9IGo7XHJcbiAgICAgICAgICAgICAgICBkeSA9IGk7XHJcbiAgICAgICAgICAgICAgICBsZXQgbm9kZSA9IFBhdGhGaW5kaW5nQWdlbnQuaW5zdGFuY2UuZ2V0Um9hZE5vZGUoZHgsIGR5KTtcclxuICAgICAgICAgICAgICAgIHRoaXMuY3JlYXRlUm9hZChub2RlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgdWlUcmFuc2Zvcm06VUlUcmFuc2Zvcm0gPSB0aGlzLm5vZGUuZ2V0Q29tcG9uZW50KFVJVHJhbnNmb3JtKTtcclxuICAgICAgICBjb25zdCB3aWR0aDpudW1iZXIgPSB1aVRyYW5zZm9ybSA/IHVpVHJhbnNmb3JtLndpZHRoIDogMDtcclxuICAgICAgICBjb25zdCBoZWlnaHQ6bnVtYmVyID0gdWlUcmFuc2Zvcm0gPyB1aVRyYW5zZm9ybS5oZWlnaHQgOiAwO1xyXG4gICAgICAgIHRoaXMubm9kZS5zZXRQb3NpdGlvbihtYXRoLnYzKC13aWR0aCAvIDIsIC1oZWlnaHQgLyAyKSk7XHJcblxyXG4gICAgICAgIFRvd2VyTGF1bmNoZXIuaW5zdGFuY2UuaW5pdFF1YWRUcmVlKHdpZHRoLGhlaWdodCk7XHJcblxyXG4gICAgICAgIHRoaXMuc3Bhd25Qb2ludERhdGFzID0gW107XHJcbiAgICAgICAgdGhpcy5lbnRpdHlMYXllci5ub2RlLnJlbW92ZUFsbENoaWxkcmVuKCk7XHJcbiAgICAgICAgdGhpcy5tYXBMYXllci5yb2FkTm9kZS5yZW1vdmVBbGxDaGlsZHJlbigpO1xyXG4gICAgICAgIFBhdGhGaW5kaW5nQWdlbnQuaW5zdGFuY2Uuc2V0Um9hZFNlZWtlclBhc3NDb25kaXRpb24odGhpcy5vblJvYWRTZWVrZXJQYXNzQ29uZGl0aW9uLmJpbmQodGhpcykpO1xyXG5cclxuICAgICAgICBFZmZlY3RNYW5hZ2VyLmluc3RhbmNlLmluaXRFZmZlY3RMYXllcih0aGlzLmVmZmVjdExheWVyKTtcclxuICAgICAgICB0aGlzLmluaXRNYXBFbGVtZW50KCk7XHJcblxyXG4gICAgICAgIFRvd2VyQ29uZmlnLmluc3RhbmNlLmxvYWRDb25maWcoKS50aGVuKChjb25maWc6IGFueSkgPT4ge1xyXG4gICAgICAgICAgICBUb3dlckNvbmZpZy5pbnN0YW5jZS5pbml0Q29uZmlnKGNvbmZpZyk7XHJcbiAgICAgICAgICAgIFRvd2VyTGF1bmNoZXIuaW5zdGFuY2UuaXNJbml0ID0gdHJ1ZTtcclxuICAgICAgICB9KS5jYXRjaChlcnIgPT4ge1xyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGVycik7XHJcbiAgICAgICAgfSlcclxuXHJcbiAgICAgICAgLy8gVG93ZXJMYXVuY2hlci5pbnN0YW5jZS5nZXRXb3JsZFBhdGgoKS50aGVuKChwYXRoczogVmVjMltdKSA9PiB7XHJcbiAgICAgICAgLy8gICAgIC8vIHRoaXMubWFwUGF0aCA9IHBhdGhzO1xyXG4gICAgICAgIC8vXHJcbiAgICAgICAgLy8gICAgIFRvd2VyQ29uZmlnLmluc3RhbmNlLmxvYWRDb25maWcoKS50aGVuKChjb25maWc6IGFueSkgPT4ge1xyXG4gICAgICAgIC8vICAgICAgICAgVG93ZXJDb25maWcuaW5zdGFuY2UuaW5pdENvbmZpZyhjb25maWcpO1xyXG4gICAgICAgIC8vICAgICAgICAgVG93ZXJMYXVuY2hlci5pbnN0YW5jZS5pc0luaXQgPSB0cnVlO1xyXG4gICAgICAgIC8vICAgICB9KS5jYXRjaChlcnIgPT4ge1xyXG4gICAgICAgIC8vICAgICAgICAgY29uc29sZS5lcnJvcihlcnIpO1xyXG4gICAgICAgIC8vICAgICB9KVxyXG4gICAgICAgIC8vIH0pLmNhdGNoKGVyciA9PiB7XHJcbiAgICAgICAgLy9cclxuICAgICAgICAvLyB9KTtcclxuXHJcbiAgICAgICAgLy8gdGhpcy5jcmVhdGVFbmVteSgpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgY3JlYXRlUm9hZChyb2FkOiBSb2FkTm9kZSk6IHZvaWQge1xyXG4gICAgICAgIGlmICghcm9hZCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChyb2FkLnZhbHVlID09IDEpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAocm9hZC52YWx1ZSA9PSAwKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgbGV0IGdyZWVuUm9hZFBhdGg6IHN0cmluZyA9IGB0b3dlci9yZXMvTm9ybWFsTW9yZGVsL0dhbWUvR3JpZC90ZXh0dXJlYFxyXG4gICAgICAgIGxldCBibHVlUm9hZFBhdGg6IHN0cmluZyA9IGB0b3dlci9yZXMvTm9ybWFsTW9yZGVsL0dhbWUvR3JpZC90ZXh0dXJlYFxyXG4gICAgICAgIGxldCBwYXRoID0gZ3JlZW5Sb2FkUGF0aDtcclxuICAgICAgICBpZiAocm9hZC52YWx1ZSA9PSAzKSB7XHJcbiAgICAgICAgICAgIHBhdGggPSBibHVlUm9hZFBhdGg7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJlc291cmNlcy5sb2FkKHBhdGgsIChlcnJvcjogRXJyb3IsIHRleDogVGV4dHVyZTJEKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IGJnTm9kZTogTm9kZSA9IG5ldyBOb2RlKCk7XHJcbiAgICAgICAgICAgIHRoaXMubm9kZS5hZGRDaGlsZChiZ05vZGUpO1xyXG4gICAgICAgICAgICBiZ05vZGUubGF5ZXIgPSB0aGlzLm5vZGUubGF5ZXI7XHJcblxyXG4gICAgICAgICAgICBsZXQgc3ByaXRlID0gYmdOb2RlLmFkZENvbXBvbmVudChTcHJpdGUpO1xyXG4gICAgICAgICAgICBzcHJpdGUuc2l6ZU1vZGUgPSBTcHJpdGUuU2l6ZU1vZGUuQ1VTVE9NO1xyXG4gICAgICAgICAgICBiZ05vZGUuZ2V0Q29tcG9uZW50KFVJVHJhbnNmb3JtKS53aWR0aCA9IHRoaXMubWFwRGF0YS5ub2RlV2lkdGg7XHJcbiAgICAgICAgICAgIGJnTm9kZS5nZXRDb21wb25lbnQoVUlUcmFuc2Zvcm0pLmhlaWdodCA9IHRoaXMubWFwRGF0YS5ub2RlSGVpZ2h0O1xyXG4gICAgICAgICAgICBiZ05vZGUuZ2V0Q29tcG9uZW50KFVJVHJhbnNmb3JtKS5hbmNob3JYID0gMC41O1xyXG4gICAgICAgICAgICBiZ05vZGUuZ2V0Q29tcG9uZW50KFVJVHJhbnNmb3JtKS5hbmNob3JZID0gMC41O1xyXG4gICAgICAgICAgICBjb25zdCBzcCA9IG5ldyBTcHJpdGVGcmFtZSgpO1xyXG4gICAgICAgICAgICBzcC50ZXh0dXJlID0gdGV4O1xyXG4gICAgICAgICAgICBzcHJpdGUuc3ByaXRlRnJhbWUgPSBzcDtcclxuXHJcbiAgICAgICAgICAgIGJnTm9kZS5zZXRQb3NpdGlvbihyb2FkLnB4LCByb2FkLnB5KTtcclxuICAgICAgICAgICAgYmdOb2RlLnBhcmVudCA9IHRoaXMubWFwTGF5ZXIucm9hZE5vZGU7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBidWlsZEluZm86IFRvd2VyQnVpbGRJbmZvID0gYmdOb2RlLmFkZENvbXBvbmVudChUb3dlckJ1aWxkSW5mbyk7XHJcbiAgICAgICAgICAgIGJ1aWxkSW5mby5yb2FkID0gcm9hZDtcclxuICAgICAgICAgICAgYmdOb2RlLm9uKE5vZGVFdmVudFR5cGUuVE9VQ0hfU1RBUlQsIHRoaXMub25DbGlja1Rvd2VyUm9hZCwgdGhpcylcclxuICAgICAgICAgICAgVG93ZXJMYXVuY2hlci5pbnN0YW5jZS5hZGRCdWlsZEluZm8oYnVpbGRJbmZvKTtcclxuICAgICAgICB9KVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgb25DbGlja1Rvd2VyUm9hZChldmVudDogRXZlbnRUb3VjaCk6IHZvaWQge1xyXG4gICAgICAgIGlmIChUb3dlckxhdW5jaGVyLmluc3RhbmNlLmdhbWVPdmVyIHx8IFRvd2VyTGF1bmNoZXIuaW5zdGFuY2UucGF1c2UgfHwgIVRvd2VyTGF1bmNoZXIuaW5zdGFuY2UuaXNJbml0KSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3Qgbm9kZTogTm9kZSA9IGV2ZW50LnRhcmdldDtcclxuICAgICAgICBjb25zdCBidWlsZEluZm86IFRvd2VyQnVpbGRJbmZvID0gbm9kZS5nZXRDb21wb25lbnQoVG93ZXJCdWlsZEluZm8pO1xyXG4gICAgICAgIGlmICghYnVpbGRJbmZvKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGJ1aWxkSW5mby50b3dlcikge1xyXG4gICAgICAgICAgICAvL2NvbnNvbGUubG9nKFwi5pyJ54Ku5aGU5LqGIOmAieaLqeenu+mZpOi/mOaYr+WNh+e6p1wiKTtcclxuICAgICAgICAgICAgLy90aGlzLnJlbW92ZVRvd2VyKGJ1aWxkSW5mbylcclxuICAgICAgICAgICAgaWYgKFRvd2VyR2FtZVVJTWFuYWdlci5pbnN0YW5jZS5yZW9tb3ZlVXBkYXRlU3RhdGUpIHtcclxuICAgICAgICAgICAgICAgIFRvd2VyR2FtZVVJTWFuYWdlci5pbnN0YW5jZS5yZW9tb3ZlVXBkYXRlU3RhdGUgPSBmYWxzZTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIFRvd2VyR2FtZVVJTWFuYWdlci5pbnN0YW5jZS5zaG93UmVtb3ZlT3JVcGRhdGUodHJ1ZSwgYnVpbGRJbmZvLCB0aGlzLnJlb212ZU9yVXBkYXRlVG93ZXIsIHRoaXMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgLy8gdGhpcy5jcmVhdGVUb3dlcihidWlsZEluZm8pO1xyXG4gICAgICAgICAgICBpZiAoVG93ZXJHYW1lVUlNYW5hZ2VyLmluc3RhbmNlLnNlbGVjdGVkVG93ZXJTdGF0ZSkge1xyXG4gICAgICAgICAgICAgICAgVG93ZXJHYW1lVUlNYW5hZ2VyLmluc3RhbmNlLnNlbGVjdGVkVG93ZXJTdGF0ZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgVG93ZXJHYW1lVUlNYW5hZ2VyLmluc3RhbmNlLnNob3dTZWxlY3RUb3dlcih0cnVlLCBidWlsZEluZm8sIHRoaXMuY3JlYXRlVG93ZXIsIHRoaXMpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgcmVvbXZlT3JVcGRhdGVUb3dlcih0eXBlOiBudW1iZXIsIGJ1aWxkSW5mbzogVG93ZXJCdWlsZEluZm8pOiB2b2lkIHtcclxuICAgICAgICBpZiAodHlwZSA9PSAxKSB7IC8vIOWNh+e6p1xyXG4gICAgICAgICAgICBpZiAoYnVpbGRJbmZvICYmIGJ1aWxkSW5mby50b3dlcikge1xyXG4gICAgICAgICAgICAgICAgYnVpbGRJbmZvLnRvd2VyLnVwZGF0ZUxldmVsKGJ1aWxkSW5mby50b3dlci5sZXZlbCArIDEpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2UgaWYgKHR5cGUgPT0gMikgeyAvLyDnp7vpmaRcclxuICAgICAgICAgICAgdGhpcy5yZW1vdmVUb3dlcihidWlsZEluZm8pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBUb3dlckdhbWVVSU1hbmFnZXIuaW5zdGFuY2Uuc2hvd1JlbW92ZU9yVXBkYXRlKGZhbHNlKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBwcml2YXRlIGJ1aWxkVG93ZXIodG93ZXJJZDpudW1iZXIscG9zOlZlYzMpOnZvaWR7XHJcbiAgICAvLyAgICAgY29uc29sZS5sb2coXCLpgInmi6nlu7rpgKBcIix0b3dlcklkKTtcclxuICAgIC8vXHJcbiAgICAvL1xyXG4gICAgLy8gfVxyXG5cclxuICAgIHByaXZhdGUgYXN5bmMgY3JlYXRlRW5lbXkoKSB7XHJcbiAgICAgICAgY29uc3Qgbm9kZSA9IGluc3RhbnRpYXRlKHRoaXMuZW5lbXlQcmVmYWIpO1xyXG4gICAgICAgIG5vZGUuYWN0aXZlID0gdHJ1ZTtcclxuICAgICAgICBjb25zdCBlbmVteSA9IG5vZGUuZ2V0Q29tcG9uZW50KEVuZW15KTtcclxuICAgICAgICBjb25zdCBzcGF3blBvaW50OiBFZGl0U3Bhd25Qb2ludERhdGEgPSB0aGlzLnNwYXduUG9pbnREYXRhc1swXTtcclxuICAgICAgICBub2RlLnNldFBvc2l0aW9uKHNwYXduUG9pbnQueCwgc3Bhd25Qb2ludC55KTtcclxuICAgICAgICBub2RlLnBhcmVudCA9IHRoaXMuZW50aXR5TGF5ZXIubm9kZTtcclxuICAgICAgICBQYXRoRmluZGluZ0FnZW50Lmluc3RhbmNlLnVwZGF0ZVJvYWRTZWVrZXJJbmZvKFBhdGhPcHRpbWl6ZS5ub25lLCBQYXRoUXVhZFNlZWsucGF0aF9kaXJlXzQpO1xyXG5cclxuICAgICAgICAvLyB2YXIgcm9hZE5vZGVBcnI6IFJvYWROb2RlW10gPSBQYXRoRmluZGluZ0FnZW50Lmluc3RhbmNlLnNlZWtQYXRoKG1hdGgudjIobm9kZS5wb3NpdGlvbi54LCBub2RlLnBvc2l0aW9uLnkpLCBtYXRoLnYyKHRoaXMuYm9zcy54LCB0aGlzLmJvc3MueSkpO1xyXG5cclxuICAgICAgICBlbmVteS5uYXZUbyh0aGlzLmJvc3MueCx0aGlzLmJvc3MueSk7XHJcbiAgICAgICAgLy8gdGhpcy5lbmVteUxpc3QucHVzaChlbmVteSk7XHJcblxyXG5cclxuICAgICAgICAvLyBlbmVteS5uYXZpZ2F0aW9uQnlQYXRoKHRoaXMubWFwUGF0aCk7XHJcbiAgICAgICAgVG93ZXJMYXVuY2hlci5pbnN0YW5jZS5hZGRFbmVteShlbmVteSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBjcmVhdGVUb3dlcihidWlsZEluZm86IFRvd2VyQnVpbGRJbmZvKTogdm9pZCB7XHJcbiAgICAgICAgY29uc29sZS5sb2coXCLpgInmi6nlu7rpgKBcIiwgYnVpbGRJbmZvLnNlbGVjdGVkVG93ZXJJZCk7XHJcbiAgICAgICAgY29uc3Qgbm9kZTogTm9kZSA9IGluc3RhbnRpYXRlKHRoaXMudG93ZXJQcmVmYWJbTWF0aC5tYXgoMCwgYnVpbGRJbmZvLnNlbGVjdGVkVG93ZXJJZCAtIDEpXSk7XHJcbiAgICAgICAgbm9kZS5hY3RpdmUgPSB0cnVlO1xyXG4gICAgICAgIGNvbnN0IHRvd2VyOiBUb3dlckNoYXJhY3RlciA9IG5vZGUuZ2V0Q29tcG9uZW50KFRvd2VyQ2hhcmFjdGVyKTtcclxuICAgICAgICB0b3dlci50b3dlcklkID0gYnVpbGRJbmZvLnNlbGVjdGVkVG93ZXJJZDtcclxuICAgICAgICB0b3dlci51cGRhdGVMZXZlbCgxKTtcclxuICAgICAgICBub2RlLnBhcmVudCA9IHRoaXMuZW50aXR5TGF5ZXIubm9kZTtcclxuICAgICAgICBub2RlLnNldFBvc2l0aW9uKGJ1aWxkSW5mby5ub2RlLnBvc2l0aW9uLngsIGJ1aWxkSW5mby5ub2RlLnBvc2l0aW9uLnkpO1xyXG4gICAgICAgIGJ1aWxkSW5mby50b3dlciA9IHRvd2VyO1xyXG4gICAgICAgIFRvd2VyTGF1bmNoZXIuaW5zdGFuY2UuYWRkVG93ZXIodG93ZXIpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgcmVtb3ZlVG93ZXIoYnVpbGRJbmZvOiBUb3dlckJ1aWxkSW5mbyk6IHZvaWQge1xyXG4gICAgICAgIGlmICghYnVpbGRJbmZvLnRvd2VyKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgYnVpbGRJbmZvLnRvd2VyLm5vZGUucmVtb3ZlRnJvbVBhcmVudCgpO1xyXG4gICAgICAgIFRvd2VyTGF1bmNoZXIuaW5zdGFuY2UucmVtb3ZlVG93ZXIoYnVpbGRJbmZvLnRvd2VyKTtcclxuICAgICAgICBidWlsZEluZm8udG93ZXIgPSBudWxsO1xyXG4gICAgICAgIGlmIChidWlsZEluZm8ucmVtb3ZlQmFja0Nvc3QgIT0gMCkge1xyXG4gICAgICAgICAgICBUb3dlckxhdW5jaGVyLmluc3RhbmNlLnZhbHVlICs9IGJ1aWxkSW5mby5yZW1vdmVCYWNrQ29zdDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDmo4DmtYvloZTpmLLlnLDlm77ot6/lvoTngrnmmK/lkKbpgJrov4fnmoTmnaHku7ZcclxuICAgICAqIEBwYXJhbSByb2FkXHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIG9uUm9hZFNlZWtlclBhc3NDb25kaXRpb24ocm9hZDogUm9hZE5vZGUpOiBib29sZWFuIHtcclxuICAgICAgICBpZiAoIXJvYWQgfHwgcm9hZC52YWx1ZSA9PSAxIHx8IHJvYWQudmFsdWUgPT0gMykge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgY3JlYXRlRW5lbXlEZWxheTogbnVtYmVyID0gMjtcclxuICAgIHByaXZhdGUgX3RpbWU6IG51bWJlciA9IDA7XHJcblxyXG5cclxuXHJcbiAgICB1cGRhdGUoZGVsdGFUaW1lOiBudW1iZXIpIHtcclxuICAgICAgICBpZiAoVG93ZXJMYXVuY2hlci5pbnN0YW5jZS5nYW1lT3ZlciB8fCBUb3dlckxhdW5jaGVyLmluc3RhbmNlLnBhdXNlIHx8ICFUb3dlckxhdW5jaGVyLmluc3RhbmNlLmlzSW5pdCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuX3RpbWUgKz0gZGVsdGFUaW1lO1xyXG4gICAgICAgIGlmICh0aGlzLl90aW1lID49IHRoaXMuY3JlYXRlRW5lbXlEZWxheSkge1xyXG4gICAgICAgICAgICBjb25zdCBjb3VudDogbnVtYmVyID0gVG93ZXJMYXVuY2hlci5pbnN0YW5jZS5nZXRFbmVteVNpemUoKTtcclxuICAgICAgICAgICAgaWYgKGNvdW50IDwgdGhpcy5tYXhFbmVteSkge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCLliJvlu7rkuIDkuKrmlYzkurpcIilcclxuICAgICAgICAgICAgICAgIHRoaXMuY3JlYXRlRW5lbXkoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLl90aW1lID0gMDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG4iLCJcclxuaW1wb3J0IHtOb2RlLCBDQ0ludGVnZXIsIENDU3RyaW5nLCBDb21wb25lbnQsIExhYmVsLCBfZGVjb3JhdG9yLCBWZWMzIH0gZnJvbSBcImNjXCI7XHJcbmltcG9ydCBQbGF5ZXIgZnJvbSBcIi4uL2NoYXJhY3Rlci9QbGF5ZXJcIjtcclxuaW1wb3J0IHsgRWRpdFRyYW5zZmVyRGF0YSB9IGZyb20gXCIuLi9FZGl0T2JqRGF0YVwiO1xyXG5cclxuXHJcbmNvbnN0IHsgY2NjbGFzcywgcHJvcGVydHkgfSA9IF9kZWNvcmF0b3I7XHJcblxyXG4vKipcclxuICog5Lyg6YCB6ZeoXHJcbiAqL1xyXG5AY2NjbGFzcygnVHJhbnNmZXJEb29yJylcclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVHJhbnNmZXJEb29yIGV4dGVuZHMgQ29tcG9uZW50IHtcclxuXHJcbiAgICAvKipcclxuICAgICAqIOS8oOmAgeWIsOebruagh+WcsOWbvklkXHJcbiAgICAgKi9cclxuICAgIEBwcm9wZXJ0eShDQ1N0cmluZylcclxuICAgIHB1YmxpYyB0YXJnZXRNYXBJZDogc3RyaW5nID0gXCJcIjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIOS8oOmAgeWIsOebruagh+WcsOWbvueahOWHuueUn+eCuUlkXHJcbiAgICAgKi9cclxuXHJcbiAgICBAcHJvcGVydHkoQ0NJbnRlZ2VyKVxyXG4gICAgcHVibGljIHRhcmdldE1hcFNwYXduSWQ6IG51bWJlciA9IDA7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDprZTms5XlgLxcclxuICAgICAqL1xyXG4gICAgQHByb3BlcnR5KExhYmVsKVxyXG4gICAgcHVibGljIG5hbWVUeHQ6TGFiZWwgPSBudWxsO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICog55So5LqO5pi+56S66KeS6Imy5ZCN5a2X55qE5o6l5Y+jXHJcbiAgICAgKi9cclxuICAgICBwcml2YXRlIF9vYmpOYW1lOiBzdHJpbmcgPSBcIlwiO1xyXG4gICAgIHB1YmxpYyBnZXQgb2JqTmFtZSgpOiBzdHJpbmcge1xyXG4gICAgICAgICByZXR1cm4gdGhpcy5fb2JqTmFtZTtcclxuICAgICB9XHJcbiAgICAgcHVibGljIHNldCBvYmpOYW1lKHZhbHVlOiBzdHJpbmcpIHtcclxuICAgICAgICAgdGhpcy5fb2JqTmFtZSA9IHZhbHVlO1xyXG4gXHJcbiAgICAgICAgIGlmKHRoaXMubmFtZVR4dCA9PSBudWxsKVxyXG4gICAgICAgICB7XHJcbiAgICAgICAgICAgICB0aGlzLm5hbWVUeHQgPSB0aGlzLm5vZGUuZ2V0Q2hpbGRCeU5hbWUoXCJOYW1lVHh0XCIpPy5nZXRDb21wb25lbnQoTGFiZWwpO1xyXG4gICAgICAgICB9XHJcbiBcclxuICAgICAgICAgaWYodGhpcy5uYW1lVHh0KVxyXG4gICAgICAgICB7XHJcbiAgICAgICAgICAgICB0aGlzLm5hbWVUeHQuc3RyaW5nID0gdGhpcy5fb2JqTmFtZTtcclxuICAgICAgICAgfVxyXG4gICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOe8lui+keeahOaVsOaNrlxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIGVkaXREYXRhOkVkaXRUcmFuc2ZlckRhdGEgPSBudWxsO1xyXG5cclxuICAgIFxyXG5cclxuICAgIC8vIExJRkUtQ1lDTEUgQ0FMTEJBQ0tTOlxyXG5cclxuICAgIC8vIG9uTG9hZCAoKSB7fVxyXG5cclxuICAgIHN0YXJ0ICgpIHtcclxuXHJcbiAgICAgICAgLy90aGlzLm5vZGUub3BhY2l0eSA9IDA7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDliJ3lp4vljJZcclxuICAgICAqL1xyXG4gICAgcHVibGljIGluaXQoKVxyXG4gICAge1xyXG5cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOWIneWni+WMlue8lui+keaVsOaNrlxyXG4gICAgICogQHBhcmFtIGVkaXREYXRhIFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgaW5pdEVkaXREYXRhKGVkaXREYXRhOkVkaXRUcmFuc2ZlckRhdGEpXHJcbiAgICB7XHJcbiAgICAgICAgdGhpcy5lZGl0RGF0YSA9IGVkaXREYXRhO1xyXG5cclxuICAgICAgICB0aGlzLm9iak5hbWUgPSBlZGl0RGF0YS5vYmpOYW1lO1xyXG4gICAgICAgIHRoaXMubm9kZS5wb3NpdGlvbiA9IG5ldyBWZWMzKGVkaXREYXRhLngsZWRpdERhdGEueSk7XHJcblxyXG4gICAgICAgIHRoaXMudGFyZ2V0TWFwSWQgPSBlZGl0RGF0YS50YXJnZXRNYXBJZDtcclxuICAgICAgICB0aGlzLnRhcmdldE1hcFNwYXduSWQgPSBlZGl0RGF0YS50YXJnZXRNYXBTcGF3bklkO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIHVwZGF0ZSAoZHQpIHt9XHJcblxyXG4gICAgcHVibGljIHRvU3RyaW5nKClcclxuICAgIHtcclxuICAgICAgICByZXR1cm4gdGhpcy50YXJnZXRNYXBJZCArIFwiLFwiICsgdGhpcy50YXJnZXRNYXBTcGF3bklkO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog6KeS6Imy6L+b5YWl5Lyg6YCB6ZeoXHJcbiAgICAgKiBAcGFyYW0gY2FsbGJhY2sgXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBvblRyaWdnZXJFbnRlcihwbGF5ZXI6UGxheWVyKVxyXG4gICAge1xyXG4gICAgICAgIGlmKHBsYXllciAhPSBudWxsKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coXCLot7PovazliLDlnLDlm75cIix0aGlzLnRhcmdldE1hcElkLCB0aGlzLnRhcmdldE1hcFNwYXduSWQpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOinkuiJsuS7juS8oOmAgeS7rOWHuuadpVxyXG4gICAgICogQHBhcmFtIGNhbGxiYWNrIFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgb25UcmlnZ2VyRXhpdChwbGF5ZXI6UGxheWVyKVxyXG4gICAge1xyXG4gICAgICAgIC8vXHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgX2RlY29yYXRvciwgQ29tcG9uZW50LCBOb2RlLCBtYXRoLCBWZWMzLCBRdWF0IH0gZnJvbSBcImNjXCI7XHJcbmltcG9ydCB7IEdhbWVPYmplY3QgfSBmcm9tIFwiLi9HYW1lT2JqZWN0XCI7XHJcbmNvbnN0IHsgY2NjbGFzcywgcHJvcGVydHkgfSA9IF9kZWNvcmF0b3I7XHJcblxyXG5AY2NjbGFzcygnVHJhbnNmb3JtJylcclxuZXhwb3J0IGNsYXNzIFRyYW5zZm9ybSBleHRlbmRzIE5vZGVcclxue1xyXG5cclxuICBwdWJsaWMgZ2V0IHRyYW5zZm9ybSgpOlRyYW5zZm9ybVxyXG4gIHtcclxuICAgICAgdmFyIG5vZGU6Tm9kZSA9IHRoaXM7XHJcbiAgICAgIHJldHVybiBub2RlIGFzIFRyYW5zZm9ybTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBnZXQgZ2FtZU9iamVjdCgpOkdhbWVPYmplY3RcclxuICB7XHJcbiAgICAgIHZhciBub2RlOk5vZGUgPSB0aGlzO1xyXG4gICAgICByZXR1cm4gbm9kZSBhcyBHYW1lT2JqZWN0O1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5Lul6IqC54K555qE5q2jWui9tOS4uuaWueWQkeacneWQkeebruagh1xyXG4gICAqIEBwYXJhbSBwb3MgXHJcbiAgICogQHBhcmFtIHVwIFxyXG4gICAqL1xyXG4gIHB1YmxpYyBsb29rQXRaKHBvczogbWF0aC5WZWMzLCB1cD86IG1hdGguVmVjMylcclxuICB7XHJcbiAgICAvL3N1cGVyLmxvb2tBdChwb3MsIHVwKTtcclxuICAgIFxyXG4gICAgdmFyIG91dERpcjpWZWMzID0gbmV3IFZlYzMoKTtcclxuICAgIFZlYzMuc3VidHJhY3Qob3V0RGlyLHBvcyx0aGlzLndvcmxkUG9zaXRpb24pO1xyXG4gICAgb3V0RGlyLm5vcm1hbGl6ZSgpO1xyXG5cclxuICAgIHZhciBxdWF0OlF1YXQgPSBuZXcgUXVhdCgpXHJcbiAgICBRdWF0LmZyb21WaWV3VXAocXVhdCxvdXREaXIubm9ybWFsaXplKCksdXApO1xyXG4gICAgdGhpcy5yb3RhdGlvbiA9IHF1YXQ7XHJcbiAgfVxyXG4gIFxyXG4gIHB1YmxpYyBmaW5kKHBhdGg6c3RyaW5nKTpOb2RlXHJcbiAge1xyXG4gICAgcmV0dXJuIHRoaXMuZ2V0Q2hpbGRCeVBhdGgocGF0aCk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZ2V0Q29tcG9uZW50SW5QYXJlbnQ8VCBleHRlbmRzIENvbXBvbmVudD4odHlwZToge3Byb3RvdHlwZTogVH0pOlRcclxuICB7XHJcbiAgICAgIHZhciB0OmFueSA9IHR5cGU7XHJcblxyXG4gICAgICB2YXIgY29tcG9uZW50OlQgfCBudWxsID0gdGhpcy5nZXRDb21wb25lbnQodCk7XHJcblxyXG4gICAgICBpZighY29tcG9uZW50KVxyXG4gICAgICB7XHJcbiAgICAgICAgY29tcG9uZW50ID0gdGhpcy5zZWFyY2hQYXJlbnRDb21wb25lbnQodGhpcyx0KTtcclxuICAgICAgfVxyXG5cclxuICAgICAgLy90aGlzLmdldENvbXBvbmVudFxyXG4gICAgICByZXR1cm4gY29tcG9uZW50O1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHNlYXJjaFBhcmVudENvbXBvbmVudDxUIGV4dGVuZHMgQ29tcG9uZW50Pihub2RlOk5vZGUsIHR5cGU6IHtwcm90b3R5cGU6VH0pOlRcclxuICB7XHJcbiAgICB2YXIgdDphbnkgPSB0eXBlO1xyXG4gICAgdmFyIGNvbXBvbmVudDpUIHwgbnVsbCA9IG51bGw7XHJcbiAgICBcclxuICAgIGlmKG5vZGUucGFyZW50KVxyXG4gICAge1xyXG4gICAgICBjb21wb25lbnQgPSBub2RlLnBhcmVudC5nZXRDb21wb25lbnQodCk7XHJcblxyXG4gICAgICBpZihjb21wb25lbnQpXHJcbiAgICAgIHtcclxuICAgICAgICAgIHJldHVybiBjb21wb25lbnQ7XHJcbiAgICAgIH1lbHNlXHJcbiAgICAgIHtcclxuICAgICAgICAgIGNvbXBvbmVudCA9IHRoaXMuc2VhcmNoUGFyZW50Q29tcG9uZW50KG5vZGUucGFyZW50LHR5cGUpO1xyXG4gICAgICAgICAgaWYoY29tcG9uZW50KVxyXG4gICAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm4gY29tcG9uZW50O1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgfVxyXG4gICAgICBcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gY29tcG9uZW50O1xyXG4gIH1cclxuXHJcbn1cclxuXHJcbk5vZGUucHJvdG90eXBlW1wibG9va0F0WlwiXSA9IFRyYW5zZm9ybS5wcm90b3R5cGUubG9va0F0WjtcclxuTm9kZS5wcm90b3R5cGVbXCJmaW5kXCJdID0gVHJhbnNmb3JtLnByb3RvdHlwZS5maW5kO1xyXG5Ob2RlLnByb3RvdHlwZVtcImdldENvbXBvbmVudEluUGFyZW50XCJdID0gVHJhbnNmb3JtLnByb3RvdHlwZS5nZXRDb21wb25lbnRJblBhcmVudDtcclxuTm9kZS5wcm90b3R5cGVbXCJzZWFyY2hQYXJlbnRDb21wb25lbnRcIl0gPSBUcmFuc2Zvcm0ucHJvdG90eXBlLnNlYXJjaFBhcmVudENvbXBvbmVudDtcclxuLy9Ob2RlLnByb3RvdHlwZVtcImdhbWVPYmplY3RcIl0gPSBHYW1lT2JqZWN0LnByb3RvdHlwZS5nYW1lT2JqZWN0OyAvL0dhbWVPYmplY3Tlt7Lnu4/orr7nva7ov4fkuobvvIzkuI3nlKjlho3orr7nva5cclxuLy9Ob2RlLnByb3RvdHlwZVtcInRyYW5zZm9ybVwiXSA9IEdhbWVPYmplY3QucHJvdG90eXBlLnRyYW5zZm9ybTsgLy9HYW1lT2JqZWN05bey57uP6K6+572u6L+H5LqG77yM5LiN55So5YaN6K6+572uXHJcbi8vVHJhbnNmb3JtLnByb3RvdHlwZSA9IE5vZGUucHJvdG90eXBlO1xyXG4iLCJpbXBvcnQgeyBfZGVjb3JhdG9yLCBDb21wb25lbnQsIE5vZGUgfSBmcm9tICdjYyc7XHJcbmltcG9ydCBMYXllck1hbmFnZXIgZnJvbSAnLi9MYXllck1hbmFnZXInO1xyXG5pbXBvcnQgeyB2aWV3TWFuYWdlciB9IGZyb20gJy4vVmlld01hbmFnZXInO1xyXG5pbXBvcnQgeyBGYWlyeWJpcmRNYWluUGFuZWwgfSBmcm9tICcuLi9tb2R1bGVzL2ZhaXJ5YmlyZC9GYWlyeWJpcmRNYWluUGFuZWwnO1xyXG5pbXBvcnQgeyBSUEdQYW5lbCB9IGZyb20gJy4uL21vZHVsZXMvUlBHL1JQR1BhbmVsJztcclxuaW1wb3J0IHsgTWFpblBhbmVsIH0gZnJvbSBcImRiOi8vYXNzZXRzL1NjcmlwdC9tb2R1bGVzL21haW4vTWFpblBhbmVsXCI7XHJcbmltcG9ydCB7IEFGS0dhbWUgfSBmcm9tICcuLi9tb2R1bGVzL0FGSy9BRktHYW1lJztcclxuY29uc3QgeyBjY2NsYXNzLCBwcm9wZXJ0eSB9ID0gX2RlY29yYXRvcjtcclxuXHJcbkBjY2NsYXNzKCdVSUV4YW1wbGUnKVxyXG5leHBvcnQgY2xhc3MgVUlFeGFtcGxlIGV4dGVuZHMgQ29tcG9uZW50IHtcclxuICAgIHN0YXJ0KCkge1xyXG4gICAgICAgIExheWVyTWFuYWdlci5pbml0KHRoaXMubm9kZSk7XHJcbiAgICAgICAgdmlld01hbmFnZXIub3BlbihNYWluUGFuZWwsIFwi5rWL6K+V5rWL6K+VXCIpO1xyXG4gICAgfVxyXG5cclxuICAgIHVwZGF0ZShkZWx0YVRpbWU6IG51bWJlcikge1xyXG5cclxuICAgIH1cclxufVxyXG5cclxuXHJcbiIsImltcG9ydCB7IF9kZWNvcmF0b3IsIENvbXBvbmVudCwgTm9kZSwgUmVmbGVjdGlvblByb2JlVHlwZSwgVUlUcmFuc2Zvcm0sIFZlYzIsIFZlYzMgfSBmcm9tICdjYyc7XHJcbmltcG9ydCB7IENvbnRhaW5lcnMgfSBmcm9tICcuL0NvbnRhaW5lcnMnO1xyXG5pbXBvcnQgeyBTY2VuZSB9IGZyb20gJy4vU2NlbmUnO1xyXG5jb25zdCB7IGNjY2xhc3MsIHByb3BlcnR5IH0gPSBfZGVjb3JhdG9yO1xyXG5cclxuLyoqXHJcbiAqIEBmaWxlTmFtZSBVbml0LnRzXHJcbiAqIEBhdXRob3IgemhhbmdxaW9uZ1xyXG4gKiBAZGF0ZSAyMDI0LzEyLzE4IDE2OjI3OjQ2XCJcclxuICogQGRlc2NyaXB0aW9uXHJcbiAqL1xyXG5AY2NjbGFzcygnVW5pdCcpXHJcbmV4cG9ydCBjbGFzcyBVbml0IGV4dGVuZHMgQ29udGFpbmVycyB7XHJcbiAgICBwdWJsaWMgdHlwZTogbnVtYmVyID0gMDtcclxuICAgIHByaXZhdGUgbUlkOiBzdHJpbmc7XHJcbiAgICBwcml2YXRlIG1UeXBlOiBudW1iZXI7XHJcbiAgICBwcml2YXRlIG1MYXllcjogc3RyaW5nO1xyXG5cclxuICAgIHB1YmxpYyBtU2NlbmU6IFNjZW5lO1xyXG4gICAgaXNEZXN0cm95OiBib29sZWFuID0gZmFsc2U7XHJcblxyXG4gICAgbUxvY2F0aW9uOiBWZWMyO1xyXG5cclxuICAgIHByaXZhdGUgX3NjYWxlWDogbnVtYmVyO1xyXG4gICAgcHJpdmF0ZSBfc2NhbGVZOiBudW1iZXI7XHJcbiAgICBwcm90ZWN0ZWQgb25Mb2FkKCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMubUxvY2F0aW9uID0gbmV3IFZlYzIoKTtcclxuICAgIH1cclxuICAgIHN0YXJ0KCkge1xyXG5cclxuICAgIH1cclxuXHJcbiAgICB1cGRhdGUoZGVsdGFUaW1lOiBudW1iZXIpIHtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNldElkKGlkOiBzdHJpbmcpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLm1JZCA9IGlkO1xyXG4gICAgfVxyXG4gICAgcHVibGljIGdldElkKCk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMubUlkO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzZXROYW1lKG5hbWU6IHN0cmluZyk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMubmFtZSA9IG5hbWU7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldE5hbWUoKTogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5uYW1lO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzZXRTY2VuZShzY2VuZTogU2NlbmUpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLm1TY2VuZSA9IHNjZW5lO1xyXG4gICAgfVxyXG4gICAgcHVibGljIGdldFNjZW5lKCk6IFNjZW5lIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5tU2NlbmU7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIHB1YmxpYyBzZXRUeXBlKHR5cGU6IG51bWJlcik6IHZvaWQge1xyXG4gICAgICAgIHRoaXMubVR5cGUgPSB0eXBlO1xyXG4gICAgfVxyXG4gICAgcHVibGljIGdldFR5cGUoKTogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5tVHlwZTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc2V0TGF5ZXIobGF5ZXI6IHN0cmluZyk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMubUxheWVyID0gbGF5ZXI7XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgZ2V0TGF5ZXIoKTogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5tTGF5ZXI7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHJlbW92ZShpc0Rpc3Bvc2U6IGJvb2xlYW4gPSB0cnVlKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKHRoaXMuc2NlbmUpIHtcclxuICAgICAgICAgICAgdGhpcy5tU2NlbmUucmVtb3ZlXHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgc3VwZXIucmVtb3ZlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGRlc3Ryb3koKTogYm9vbGVhbiB7XHJcbiAgICAgICAgdGhpcy5tSWQgPSBudWxsO1xyXG4gICAgICAgIHRoaXMubUxheWVyID0gbnVsbDtcclxuICAgICAgICB0aGlzLm1TY2VuZSA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5pc0Rlc3Ryb3kgPSBudWxsO1xyXG4gICAgICAgIHRoaXMub25EZXN0cm95KCk7XHJcbiAgICAgICAgcmV0dXJuIHN1cGVyLmRlc3Ryb3koKTtcclxuICAgIH1cclxuXHJcbiAgICBvbkRlc3Ryb3koKTogdm9pZCB7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIHNldExvY2F0aW9uKHg6IG51bWJlciwgeTogbnVtYmVyKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5zZXRQb3NpdGlvbih4LCB5KTtcclxuICAgIH1cclxuICAgIGdldExvY2F0aW9uKCk6IFZlYzMge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnBvc2l0aW9uLmNsb25lKCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNldExvY2F0aW9uU2NhbGUoeDogbnVtYmVyLCB5OiBudW1iZXIpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLl9zY2FsZVggPSB4O1xyXG4gICAgICAgIHRoaXMuX3NjYWxlWSA9IHk7XHJcbiAgICAgICAgdGhpcy5zZXRTY2FsZSh4LCB5KTtcclxuICAgIH1cclxuXHJcbiAgICBnZXREaXNwbGF5KCk6IE5vZGUge1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG5cclxuICAgIG9uQWRkKCk6IHZvaWQge1xyXG5cclxuICAgIH1cclxuICAgIG9uUmVtb3ZlKCk6IHZvaWQge1xyXG5cclxuICAgIH1cclxuICAgIHB1YmxpYyBnZXRCb3VuZHMoKTogbnVtYmVyW10ge1xyXG4gICAgICAgIGNvbnN0IHVpVHJhbnNmb3JtOiBVSVRyYW5zZm9ybSA9IHRoaXMuZ2V0Q29tcG9uZW50KFVJVHJhbnNmb3JtKTtcclxuICAgICAgICBsZXQgd2lkdGg6IG51bWJlciA9IHVpVHJhbnNmb3JtID8gdWlUcmFuc2Zvcm0ud2lkdGggOiAwO1xyXG4gICAgICAgIGxldCBoZWlnaHQ6IG51bWJlciA9IHVpVHJhbnNmb3JtID8gdWlUcmFuc2Zvcm0uaGVpZ2h0IDogMDtcclxuICAgICAgICBsZXQgc2NhbGU6IFZlYzMgPSBuZXcgVmVjMygpO1xyXG4gICAgICAgIHRoaXMuZ2V0U2NhbGUoc2NhbGUpO1xyXG4gICAgICAgIHdpZHRoID0gTWF0aC5hYnMod2lkdGggKiBzY2FsZS54KTtcclxuICAgICAgICBoZWlnaHQgPSBNYXRoLmFicyhoZWlnaHQgKiBzY2FsZS55KTtcclxuICAgICAgICByZXR1cm4gWzAsIHdpZHRoLCAwLCBoZWlnaHRdO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBjaGVja0luKGxlZnQ6IG51bWJlciwgcmlnaHQ6IG51bWJlciwgdG9wOiBudW1iZXIsIGJvdHRvbTogbnVtYmVyKTogYm9vbGVhbiB7XHJcbiAgICAgICAgaWYgKCF0aGlzLm1TY2VuZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IGI6IG51bWJlcltdID0gdGhpcy5nZXRDaGVja0luQm91bmRzKCk7XHJcbiAgICAgICAgY29uc3QgZTogYm9vbGVhbiA9IGJbMF0gPiBsZWZ0ICYmIGJbMF0gPCByaWdodCAmJiBiWzFdID4gdG9wICYmIGJbMV0gPCBib3R0b207XHJcbiAgICAgICAgcmV0dXJuIGU7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBfY2liczogbnVtYmVyW107XHJcbiAgICBwcml2YXRlIGdldENoZWNrSW5Cb3VuZHMoKTogbnVtYmVyW10ge1xyXG4gICAgICAgIGlmICghdGhpcy5fY2licykge1xyXG4gICAgICAgICAgICB0aGlzLl9jaWJzID0gW107XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IHBvczogVmVjMyA9IHRoaXMuZ2V0TG9jYXRpb24oKTtcclxuICAgICAgICBjb25zdCBzY2VuZVNjYWxlOiBWZWMzID0gdGhpcy5tU2NlbmUuZ2V0TG9jYXRpb25TY2FsZSgpO1xyXG4gICAgICAgIGNvbnN0IHNjZW5lUG9zOiBWZWMzID0gdGhpcy5tU2NlbmUuZ2V0TG9jYXRpb24oKTtcclxuICAgICAgICB0aGlzLl9jaWJzWzBdID0gcG9zLnggKiBzY2VuZVNjYWxlLnggKyBzY2VuZVBvcy54O1xyXG4gICAgICAgIHRoaXMuX2NpYnNbMV0gPSBwb3MueSAqIHNjZW5lU2NhbGUueSArIHNjZW5lUG9zLnk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NpYnM7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNldElzU2hvdyh2OiBib29sZWFuKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKHRoaXMuYWN0aXZlICYmIHYpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmFjdGl2ZSA9IHY7XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgQmxvY2tJbnB1dEV2ZW50cywgQnV0dG9uLCBDb21wb25lbnQsIGpzLCBOb2RlIH0gZnJvbSBcImNjXCI7XHJcblxyXG4vKipcclxuICogQGNsYXNzIG5hbWUgOiBVdGlsc1xyXG4gKiBAZGVzY3JpcHRpb24gOiDln7rmnKzlt6XlhbfnsbtcclxuICogQGF1dGhvciA6IFJhblxyXG4gKiBAdGltZSA6IDIwMjIuMDUuMTBcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFV0aWxzIHtcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDku47lrZDlrZnoioLngrnkuK3mib7liLDnrKzkuIDkuKrlkI3lrZfnrKblkIjnmoToioLngrnvvIzkuI3ljIXmi6znm67moIfoioLngrnmnKzouqvjgIJcclxuICAgICAqIOS9v+eUqCDmt7HluqbkvJjlhYjnmoTmlrnlvI/jgIJcclxuICAgICAqIOiLpeayoeacieaJvuWIsO+8jOWImei/lOWbnm51bGxcclxuICAgICAqIEBwYXJhbSB0YXJnZXROb2RlIFxyXG4gICAgICogQHBhcmFtIG5hbWUgXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBzdGF0aWMgRmluZENoaWxkQnlOYW1lKHRhcmdldE5vZGU6IE5vZGUsIG5hbWU6IHVua25vd24pOiBOb2RlIHtcclxuICAgICAgICBpZiAoIXRhcmdldE5vZGUuY2hpbGRyZW4gfHwgdGFyZ2V0Tm9kZS5jaGlsZHJlbi5sZW5ndGggPD0gMCkgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0YXJnZXROb2RlLmNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGNoaWxkID0gdGFyZ2V0Tm9kZS5jaGlsZHJlbltpXTtcclxuICAgICAgICAgICAgaWYgKGNoaWxkLm5hbWUgPT0gbmFtZSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGNoaWxkO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBsZXQgcmVzdWx0ID0gdGhpcy5GaW5kQ2hpbGRCeU5hbWUoY2hpbGQsIG5hbWUpO1xyXG4gICAgICAgICAgICBpZiAocmVzdWx0ICE9IG51bGwpXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDojrflj5bmmL7npLrlr7nosaFoYXNo5YC8XHJcbiAgICAgKiBAcGFyYW0gb2JqIOaYvuekuuWvueixoVxyXG4gICAgICogQHJldHVybnMgaGFzaOWAvOaIlm51bGxcclxuICAgICAqL1xyXG4gICAgcHVibGljIHN0YXRpYyBnZXRIYXNoQ29kZShvYmo6IGFueSkge1xyXG4gICAgICAgIC8vIHJldHVybiBvYmouX29iakZsYWdzICE9IG51bGwgPyBvYmouX29iakZsYWdzIDogbnVsbDtcclxuICAgICAgICByZXR1cm4gb2JqLl9pZCAhPSBudWxsID8gb2JqLl9pZCA6IG51bGw7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5re75Yqg5oyJ6ZKu54K55Ye75LqL5Lu2XHJcbiAgICAgKiBAcGFyYW0gdGFyZ2V0IC0g55uu5qCH6IqC54K55oiW5oyJ6ZKu57uE5Lu2XHJcbiAgICAgKiBAcGFyYW0gc2NyaXB0Tm9kZSAtIOWTjeW6lOWHveaVsHNjcmlwdOe7hOS7tuaJgOWxnuiKgueCuVxyXG4gICAgICogQHBhcmFtIHNjcmlwdE5hbWUgLSDlk43lupTlh73mlbBzY3JpcHTnu4Tku7blkI3np7BcclxuICAgICAqIEBwYXJhbSBmdW5jdGlvbk5hbWUgLSDlk43lupTlh73mlbDlkI3np7BcclxuICAgICAqIEBwYXJhbSBkYXRhIC0g6Ieq5a6a5LmJ5Y+C5pWwXHJcbiAgICAgKiBAcmV0dXJucyB0cnVlIG9yIGZhbHNlXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBzdGF0aWMgYWRkQnV0dG9uQ2xpY2tIYW5kbGVyKHRhcmdldDogTm9kZSB8IEJ1dHRvbiwgc2NyaXB0Tm9kZTogTm9kZSwgc2NyaXB0TmFtZTogc3RyaW5nLCBmdW5jdGlvbk5hbWU6IHN0cmluZywgZGF0YT86IGFueSkge1xyXG4gICAgICAgIGxldCBidXR0b246IEJ1dHRvbjtcclxuICAgICAgICBpZiAodGFyZ2V0IGluc3RhbmNlb2YgQnV0dG9uKSBidXR0b24gPSB0YXJnZXQ7XHJcbiAgICAgICAgZWxzZSBpZiAodGFyZ2V0IGluc3RhbmNlb2YgTm9kZSkgYnV0dG9uID0gdGFyZ2V0LmdldENvbXBvbmVudChCdXR0b24pO1xyXG4gICAgICAgIGlmICghYnV0dG9uKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihcImFkZEJ1dHRvbkNsaWNrSGFuZGxlcjogdGFyZ2V0IG5vZGUgaGFzIG5vIGJ1dHRvbiBjb21wb25lbnRcIik7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgbGV0IGggPSBuZXcgQ29tcG9uZW50LkV2ZW50SGFuZGxlcigpO1xyXG4gICAgICAgIGgudGFyZ2V0ID0gc2NyaXB0Tm9kZTtcclxuICAgICAgICBoLmNvbXBvbmVudCA9IHNjcmlwdE5hbWU7XHJcbiAgICAgICAgaC5oYW5kbGVyID0gZnVuY3Rpb25OYW1lO1xyXG4gICAgICAgIGguY3VzdG9tRXZlbnREYXRhID0gZGF0YTtcclxuICAgICAgICBidXR0b24uY2xpY2tFdmVudHMgPSBbXTtcclxuICAgICAgICBidXR0b24uY2xpY2tFdmVudHMucHVzaChoKTtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDoioLngrnmt7vliqDkuovku7bvvIzov5nkuKrmlrnms5Xpu5jorqTkvJrnu5noioLngrnmt7vliqDlsY/olL3ngrnlh7vnqb/pgI/nu4Tku7ZcclxuICAgICAqIEBwYXJhbSB0YXJnZXQgLSDkuovku7boioLngrlcclxuICAgICAqIEBwYXJhbSBldmVudFR5cGUgLSDkuovku7bnsbvlnotcclxuICAgICAqIEBwYXJhbSBjYWxsYmFjayAtIOWbnuiwg+WHveaVsFxyXG4gICAgICogQHBhcmFtIGNhbGxiYWNrT2JqIC0g5Zue6LCD5Ye95pWw5omA5bGe5a+56LGhXHJcbiAgICAgKiBAcGFyYW0gb25jZSAtIOaYr+WQpuWPquebkeWQrOS4gOasoVxyXG4gICAgICogQHBhcmFtIHRvdWNoVGhvdWdoIC0g5piv5ZCm56m/6YCPXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBzdGF0aWMgYWRkTm9kZUV2ZW50KHRhcmdldDogTm9kZSwgZXZlbnRUeXBlLCBjYWxsYmFjazogRnVuY3Rpb24sIGNhbGxiYWNrT2JqOiBhbnksIG9uY2U6IGJvb2xlYW4gPSBmYWxzZSwgdG91Y2hUaG91Z2g6IGJvb2xlYW4gPSBmYWxzZSkge1xyXG4gICAgICAgIGlmIChvbmNlKSB7XHJcbiAgICAgICAgICAgIHRhcmdldC5vbmNlKGV2ZW50VHlwZSwgY2FsbGJhY2ssIGNhbGxiYWNrT2JqKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0YXJnZXQub24oZXZlbnRUeXBlLCBjYWxsYmFjaywgY2FsbGJhY2tPYmopO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoIXRvdWNoVGhvdWdoKSB7XHJcbiAgICAgICAgICAgIGlmICghdGFyZ2V0LmdldENvbXBvbmVudChCbG9ja0lucHV0RXZlbnRzKSkge1xyXG4gICAgICAgICAgICAgICAgdGFyZ2V0LmFkZENvbXBvbmVudChCbG9ja0lucHV0RXZlbnRzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDmn6XnnIvnsbvmmK/lkKbooqtjY2NsYXNz5L+u6aWwXHJcbiAgICAgKiBAcGFyYW0gY29uc3RydWN0b3IgLSBcclxuICAgICAqIEByZXR1cm5zIFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgc3RhdGljIGlzQ0NDbGFzcyhjb25zdHJ1Y3RvcjogdW5rbm93bik6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiBjb25zdHJ1Y3RvciAmJiBjb25zdHJ1Y3Rvci5oYXNPd25Qcm9wZXJ0eShcIl9fY3RvcnNfX1wiKTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDoioLngrnmjqfliLbohJrmnKzmjILovb1cclxuICAgICAqIEBwYXJhbSBub2RlIC0gXHJcbiAgICAgKiBAcGFyYW0gc2NyaXB0IC0gXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBzdGF0aWMgYWRkTm9kZVNjcmlwdChub2RlOiBOb2RlLCBzY3JpcHQ6IHN0cmluZyk6IHZvaWQ7XHJcbiAgICBwdWJsaWMgc3RhdGljIGFkZE5vZGVTY3JpcHQobm9kZTogTm9kZSwgc2NyaXB0OiB1bmtub3duKTogdm9pZDtcclxuICAgIHB1YmxpYyBzdGF0aWMgYWRkTm9kZVNjcmlwdChub2RlOiBOb2RlLCBzY3JpcHQ6IHVua25vd24pOiB2b2lkIHtcclxuICAgICAgICBpZiAodHlwZW9mIHNjcmlwdCA9PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgIGxldCBoYXNDbHMgPSBqcy5nZXRDbGFzc0J5TmFtZShzY3JpcHQpO1xyXG4gICAgICAgICAgICBpZiAoaGFzQ2xzID09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYCAqKioqKiAke3NjcmlwdH0gZG9lcyBub3QgZGVjb3JhdGVkIGJ5IGNjY2xhc3MgKioqKiogYCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgbGV0IGhhcyA9IG5vZGUuZ2V0Q29tcG9uZW50KHNjcmlwdCkgIT0gbnVsbDtcclxuICAgICAgICAgICAgaWYgKCFoYXMpIG5vZGUuYWRkQ29tcG9uZW50KHNjcmlwdCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKHR5cGVvZiBzY3JpcHQgPT0gXCJmdW5jdGlvblwiKSB7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5pc0NDQ2xhc3Moc2NyaXB0KSkge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihgICoqKioqICR7c2NyaXB0fSBkb2VzIG5vdCBkZWNvcmF0ZWQgYnkgY2NjbGFzcyAqKioqKiBgKTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBsZXQgaGFzID0gbm9kZS5nZXRDb21wb25lbnQoc2NyaXB0IGFzIChuZXcgKCkgPT4gQ29tcG9uZW50KSkgIT0gbnVsbDtcclxuICAgICAgICAgICAgaWYgKCFoYXMpIG5vZGUuYWRkQ29tcG9uZW50KHNjcmlwdCBhcyAobmV3ICgpID0+IENvbXBvbmVudCkpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcblxyXG5cclxuICAgIC8vIGNsYXNzIGVuZFxyXG59XHJcbiIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIFZpZXdDb25zdCB7XHJcbiAgICAvKiog6buY6K6k6aKE5Yi25L2T6Lev5b6EICovXHJcbiAgICBwdWJsaWMgc3RhdGljIGRlZmF1bHRQcmVmYWJQYXRoUHJlZml4ID0gXCJyZXNvdXJjZXM6Ly9wcmVmYWJzL1wiO1xyXG59IiwiaW1wb3J0IHsgQmxvY2tJbnB1dEV2ZW50cywgZGlyZWN0b3IsIGpzIH0gZnJvbSBcImNjXCI7XHJcbmltcG9ydCB7IGxvZyB9IGZyb20gXCJjY1wiO1xyXG5pbXBvcnQgeyBpc1ZhbGlkIH0gZnJvbSBcImNjXCI7XHJcbmltcG9ydCB7IHZpZXcgfSBmcm9tIFwiY2NcIjtcclxuaW1wb3J0IHsgVUlUcmFuc2Zvcm0gfSBmcm9tIFwiY2NcIjtcclxuaW1wb3J0IHsgaW5zdGFudGlhdGUgfSBmcm9tIFwiY2NcIjtcclxuaW1wb3J0IHsgTm9kZSB9IGZyb20gXCJjY1wiO1xyXG5pbXBvcnQgeyBWaWV3U2hvd1R5cGVzIH0gZnJvbSBcIi4uL0NvbW1vbi9FbnVtXCI7XHJcbmltcG9ydCBWaWV3UmVnaXN0ZXJWbyBmcm9tIFwiLi9WaWV3UmVnaXN0ZXJWb1wiO1xyXG5pbXBvcnQgeyBnZXRWaWV3UmVnaXN0ZXJWbyB9IGZyb20gXCIuL1ZpZXdSZWdpc3Rlck1nclwiO1xyXG5pbXBvcnQgTGF5ZXJNYW5hZ2VyLCB7IExheWVyVHlwZSB9IGZyb20gXCIuL0xheWVyTWFuYWdlclwiO1xyXG5pbXBvcnQgU3RyaW5nVXRpbHMgZnJvbSBcIi4uL0NvbW1vbi9TdHJpbmdVdGlsc1wiO1xyXG5pbXBvcnQgVmlld0NvbnN0IGZyb20gXCIuL1ZpZXdDb25zdFwiO1xyXG5pbXBvcnQgQXNzZXRNZ3IgZnJvbSBcIi4uL0NvbW1vbi9Bc3NldE1nclwiO1xyXG5pbXBvcnQgVXRpbHMgZnJvbSBcIi4uL0NvbW1vbi9VdGlsc1wiO1xyXG5pbXBvcnQgQmFzZVZpZXcgZnJvbSBcIi4vQmFzZVZpZXdcIjtcclxuXHJcbi8qKlxyXG4gKiBWaWV3TWFuYWdlcueVjOmdoueuoeeQhuexu1xyXG4gKiBcclxuICogMS7miZPlvIDnlYzpnaLvvIzmoLnmja7phY3nva7oh6rliqjliqDovb3nlYzpnaLjgIHosIPnlKjliJ3lp4vljJbjgIHmkq3mlL7miZPlvIDliqjnlLvjgIHpmpDol4/lhbbku5bnlYzpnaLjgIHlsY/olL3kuIvmlrnnlYzpnaLngrnlh7tcclxuICogMi7lhbPpl63nlYzpnaLvvIzmoLnmja7phY3nva7oh6rliqjlhbPpl63nlYzpnaLjgIHmkq3mlL7lhbPpl63liqjnlLvjgIHmgaLlpI3lhbbku5bnlYzpnaJcclxuICogMy7liIfmjaLnlYzpnaLvvIzkuI7miZPlvIDnlYzpnaLnsbvkvLzvvIzkvYbmmK/mmK/lsIblvZPliY3moIjpobbnmoTnlYzpnaLliIfmjaLmiJDmlrDnmoTnlYzpnaLvvIjlhYjlhbPpl63lho3miZPlvIDvvIlcclxuICogNC7mj5DkvpvnlYzpnaLnvJPlrZjlip/og71cclxuICogXHJcbiAqL1xyXG5cclxuLyoqIFVJ5qCI57uT5p6E5L2TICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgVUlJbmZvIHtcclxuICAgIHVpSWQ6IG51bWJlciB8IHN0cmluZztcclxuICAgIHVpVmlldzogQmFzZVZpZXcgfCBudWxsO1xyXG4gICAgdWlBcmdzOiBhbnk7XHJcbiAgICBwcmV2ZW50Tm9kZT86IE5vZGUgfCBudWxsO1xyXG4gICAgek9yZGVyPzogbnVtYmVyO1xyXG4gICAgb3BlblR5cGU/OiAncXVpZXQnIHwgJ290aGVyJztcclxuICAgIGlzQ2xvc2U/OiBib29sZWFuO1xyXG4gICAgcmVzVG9DbGVhcj86IHN0cmluZ1tdO1xyXG4gICAgcmVzQ2FjaGU/OiBzdHJpbmdbXTtcclxufVxyXG5cclxuXHJcbmV4cG9ydCB0eXBlIFVJT3BlbkJlZm9yZUNhbGxiYWNrID0gKHVpSWQ6IG51bWJlciwgcHJlVUlJZDogbnVtYmVyKSA9PiB2b2lkO1xyXG5leHBvcnQgdHlwZSBVSU9wZW5DYWxsYmFjayA9ICh1aUlkOiBudW1iZXIsIHByZVVJSWQ6IG51bWJlcikgPT4gdm9pZDtcclxuZXhwb3J0IHR5cGUgVUlDbG9zZUNhbGxiYWNrID0gKHVpSWQ6IG51bWJlcikgPT4gdm9pZDtcclxuXHJcbmV4cG9ydCBjbGFzcyBWaWV3TWFuYWdlciB7XHJcbiAgICAvKiog6LWE5rqQ5Yqg6L296K6h5pWw5Zmo77yM55So5LqO55Sf5oiQ5ZSv5LiA55qE6LWE5rqQ5Y2g55Soa2V5ICovXHJcbiAgICBwcml2YXRlIHVzZUNvdW50ID0gMDtcclxuICAgIC8qKiDog4zmma9VSe+8iOacieiLpeW5suWxglVJ5piv5L2c5Li66IOM5pmvVUnvvIzogIzkuI3lj5fliIfmjaLnrYnlvbHlk43vvIkqL1xyXG4gICAgcHJpdmF0ZSBCYWNrR3JvdW5kVUkgPSAwO1xyXG4gICAgLyoqIOaYr+WQpuato+WcqOWFs+mXrVVJICovXHJcbiAgICBwcml2YXRlIGlzQ2xvc2luZyA9IGZhbHNlO1xyXG4gICAgLyoqIOaYr+WQpuato+WcqOaJk+W8gFVJICovXHJcbiAgICBwcml2YXRlIGlzT3BlbmluZyA9IGZhbHNlO1xyXG5cclxuICAgIC8qKiBVSeeVjOmdoue8k+WtmO+8iGtleeS4ulVJSWTvvIx2YWx1ZeS4ulVJVmlld+iKgueCue+8iSovXHJcbiAgICBwcml2YXRlIFZpZXdDYWNoZTogeyBbVUlJZDogbnVtYmVyIHwgc3RyaW5nXTogQmFzZVZpZXcgfSA9IHt9O1xyXG4gICAgLyoqIFVJ55WM6Z2i5qCI77yIe1VJSUQgKyBVSVZpZXcgKyBVSUFyZ3N95pWw57uE77yJKi9cclxuICAgIHByaXZhdGUgVmlld1N0YWNrOiBVSUluZm9bXSA9IFtdO1xyXG4gICAgLyoqIFVJ5b6F5omT5byA5YiX6KGoICovXHJcbiAgICBwcml2YXRlIFZpZXdPcGVuUXVldWU6IFVJSW5mb1tdID0gW107XHJcbiAgICAvKiogVUnlvoXlhbPpl63liJfooaggKi9cclxuICAgIHByaXZhdGUgVmlld0Nsb3NlUXVldWU6IEJhc2VWaWV3W10gPSBbXTtcclxuXHJcbiAgICAvKiogVUnmiZPlvIDliY3lm57osIMgKi9cclxuICAgIHB1YmxpYyB1aU9wZW5CZWZvcmVEZWxlZ2F0ZTogVUlPcGVuQmVmb3JlQ2FsbGJhY2sgfCBudWxsID0gbnVsbDtcclxuICAgIC8qKiBVSeaJk+W8gOWbnuiwgyAqL1xyXG4gICAgcHVibGljIHVpT3BlbkRlbGVnYXRlOiBVSU9wZW5DYWxsYmFjayB8IG51bGwgPSBudWxsO1xyXG4gICAgLyoqIFVJ5YWz6Zet5Zue6LCDICovXHJcbiAgICBwdWJsaWMgdWlDbG9zZURlbGVnYXRlOiBVSUNsb3NlQ2FsbGJhY2sgfCBudWxsID0gbnVsbDtcclxuXHJcblxyXG5cclxuICAgIC8qKioqKioqKioqKioqKioqKiog56eB5pyJ5pa55rOV77yMVUlNYW5hZ2Vy5YaF6YOo55qE5Yqf6IO95ZKM5Z+656GA6KeE5YiZICoqKioqKioqKioqKioqKioqKiovXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDmt7vliqDpmLLop6bmkbjlsYJcclxuICAgICAqIEBwYXJhbSB6T3JkZXIg5bGP6JS95bGC55qE5bGC57qnXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgcHJldmVudFRvdWNoKGxheWVyOiBMYXllclR5cGUsIHpPcmRlcjogbnVtYmVyKSB7XHJcbiAgICAgICAgbGV0IHZpZXdDb250YWluZXIgPSBMYXllck1hbmFnZXIuZ2V0TGF5ZXIobGF5ZXIpO1xyXG4gICAgICAgIGlmICghdmlld0NvbnRhaW5lcikge1xyXG4gICAgICAgICAgICBjb25zb2xlLndhcm4oYCAtLS0tLSAgJHtsYXllcn0gbGF5ZXIgY29udGFpbmVyIGlzIG51bGwgLS0tLS0gYClcclxuICAgICAgICAgICAgcmV0dXJuXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxldCBub2RlID0gbmV3IE5vZGUoKVxyXG4gICAgICAgIG5vZGUubmFtZSA9ICdwcmV2ZW50VG91Y2gnO1xyXG5cclxuICAgICAgICBsZXQgdWlDb20gPSBub2RlLmFkZENvbXBvbmVudChVSVRyYW5zZm9ybSk7XHJcbiAgICAgICAgdWlDb20uc2V0Q29udGVudFNpemUodmlldy5nZXRWaXNpYmxlU2l6ZSgpKTtcclxuXHJcbiAgICAgICAgbm9kZS5vbihOb2RlLkV2ZW50VHlwZS5UT1VDSF9TVEFSVCwgZnVuY3Rpb24gKGV2ZW50OiBhbnkpIHtcclxuICAgICAgICAgICAgZXZlbnQucHJvcGFnYXRpb25TdG9wcGVkID0gdHJ1ZTtcclxuICAgICAgICB9LCBub2RlKTtcclxuICAgICAgICB2aWV3Q29udGFpbmVyIS5hZGRDaGlsZChub2RlKTtcclxuICAgICAgICB1aUNvbS5wcmlvcml0eSA9IHpPcmRlciAtIDAuMDE7XHJcbiAgICAgICAgcmV0dXJuIG5vZGU7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIOiHquWKqOaJp+ihjOS4i+S4gOS4quW+heWFs+mXreaIluW+heaJk+W8gOeahOeVjOmdoiAqL1xyXG4gICAgcHJpdmF0ZSBhdXRvRXhlY05leHRVSSgpIHtcclxuICAgICAgICAvLyDpgLvovpHkuIrmmK/lhYjlhbPlkI7lvIBcclxuICAgICAgICBpZiAodGhpcy5WaWV3Q2xvc2VRdWV1ZS5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIGxldCB1aVF1ZXVlSW5mbyA9IHRoaXMuVmlld0Nsb3NlUXVldWUuc2hpZnQoKVxyXG4gICAgICAgICAgICB0aGlzLmNsb3NlKHVpUXVldWVJbmZvKTtcclxuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuVmlld09wZW5RdWV1ZS5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIGxldCB1aVF1ZXVlSW5mbyA9IHRoaXMuVmlld09wZW5RdWV1ZS5zaGlmdCgpO1xyXG4gICAgICAgICAgICB0aGlzLm9wZW4odWlRdWV1ZUluZm8udWlJZCwgdWlRdWV1ZUluZm8udWlBcmdzKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDoh6rliqjmo4DmtYvliqjnlLvnu4Tku7bku6Xlj4rnibnlrprliqjnlLvvvIzlpoLlrZjlnKjliJnmkq3mlL7liqjnlLvvvIzml6DorrrliqjnlLvmmK/lkKbmkq3mlL7vvIzpg73miafooYzlm57osINcclxuICAgICAqIEBwYXJhbSBhbmlOYW1lIOWKqOeUu+WQjVxyXG4gICAgICogQHBhcmFtIGFuaU92ZXJDYWxsYmFjayDliqjnlLvmkq3mlL7lrozmiJDlm57osINcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBhdXRvRXhlY0FuaW1hdGlvbih1aVZpZXc6IEJhc2VWaWV3LCBhbmlOYW1lOiBzdHJpbmcsIGFuaU92ZXJDYWxsYmFjazogKCkgPT4gdm9pZCkge1xyXG4gICAgICAgIC8vIOaaguaXtuWFiOecgeeVpeWKqOeUu+aSreaUvueahOmAu+i+kVxyXG4gICAgICAgIGFuaU92ZXJDYWxsYmFjaygpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog6Ieq5Yqo5qOA5rWL6LWE5rqQ6aKE5Yqg6L2957uE5Lu277yM5aaC5p6c5a2Y5Zyo5YiZ5Yqg6L295a6M5oiQ5ZCO6LCD55SoY29tcGxldGVDYWxsYmFja++8jOWQpuWImeebtOaOpeiwg+eUqFxyXG4gICAgICogQHBhcmFtIGNvbXBsZXRlQ2FsbGJhY2sg6LWE5rqQ5Yqg6L295a6M5oiQ5Zue6LCDXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgYXV0b0xvYWRSZXModWlWaWV3OiBCYXNlVmlldywgY29tcGxldGVDYWxsYmFjazogKCkgPT4gdm9pZCkge1xyXG4gICAgICAgIC8vIOaaguaXtuWFiOecgeeVpVxyXG4gICAgICAgIGNvbXBsZXRlQ2FsbGJhY2soKTtcclxuICAgIH1cclxuXHJcbiAgICAvKiog5qC55o2u55WM6Z2i5pi+56S657G75Z6L5Yi35paw5pi+56S6ICovXHJcbiAgICBwcml2YXRlIHVwZGF0ZVVJKCkge1xyXG4gICAgICAgIGxldCBoaWRlSW5kZXg6IG51bWJlciA9IDA7XHJcbiAgICAgICAgbGV0IHNob3dJbmRleDogbnVtYmVyID0gdGhpcy5WaWV3U3RhY2subGVuZ3RoIC0gMTtcclxuICAgICAgICBmb3IgKDsgc2hvd0luZGV4ID49IDA7IC0tc2hvd0luZGV4KSB7XHJcbiAgICAgICAgICAgIGxldCBtb2RlID0gdGhpcy5WaWV3U3RhY2tbc2hvd0luZGV4XS51aVZpZXchLnNob3dUeXBlO1xyXG4gICAgICAgICAgICAvLyDml6DorrrkvZXnp43mqKHlvI/vvIzmnIDpobbpg6jnmoRVSemDveaYr+W6lOivpeaYvuekuueahFxyXG4gICAgICAgICAgICB0aGlzLlZpZXdTdGFja1tzaG93SW5kZXhdLnVpVmlldyEubm9kZS5hY3RpdmUgPSB0cnVlO1xyXG4gICAgICAgICAgICBpZiAoVmlld1Nob3dUeXBlcy5WaWV3RnVsbFNjcmVlbiA9PSBtb2RlKSB7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfSBlbHNlIGlmIChWaWV3U2hvd1R5cGVzLlZpZXdTaW5nbGUgPT0gbW9kZSkge1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLkJhY2tHcm91bmRVSTsgKytpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuVmlld1N0YWNrW2ldKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuVmlld1N0YWNrW2ldLnVpVmlldyEubm9kZS5hY3RpdmUgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGhpZGVJbmRleCA9IHRoaXMuQmFja0dyb3VuZFVJO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgLy8g6ZqQ6JeP5LiN5bqU6K+l5pi+56S655qE6YOo5YiGVUlcclxuICAgICAgICBmb3IgKGxldCBoaWRlOiBudW1iZXIgPSBoaWRlSW5kZXg7IGhpZGUgPCBzaG93SW5kZXg7ICsraGlkZSkge1xyXG4gICAgICAgICAgICB0aGlzLlZpZXdTdGFja1toaWRlXS51aVZpZXchLm5vZGUuYWN0aXZlID0gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqIFVJ6KKr5omT5byA5pe25Zue6LCD77yM5a+5VUnov5vooYzliJ3lp4vljJborr7nva7vvIzliLfmlrDlhbbku5bnlYzpnaLnmoTmmL7npLrvvIzlubbmoLnmja5cclxuICAgICAqIEBwYXJhbSB2aWV3Vm8g55WM6Z2i5rOo5YaM57uT5p6EXHJcbiAgICAgKiBAcGFyYW0gdWlWaWV3IOeVjOmdouWvueixoVxyXG4gICAgICogQHBhcmFtIHVpSW5mbyDnlYzpnaLmoIjlr7nlupTnmoTkv6Hmga/nu5PmnoRcclxuICAgICAqIEBwYXJhbSB1aUFyZ3Mg55WM6Z2i5Yid5aeL5YyW5Y+C5pWwXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgb25WaWV3T3Blbih2aWV3Vm86IFZpZXdSZWdpc3RlclZvLCB1aVZpZXc6IEJhc2VWaWV3LCB1aUluZm86IFVJSW5mbywgdWlBcmdzOiBhbnkpIHtcclxuICAgICAgICBpZiAobnVsbCA9PSB1aVZpZXcpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyDmv4DmtLvnlYzpnaJcclxuICAgICAgICB1aUluZm8udWlWaWV3ID0gdWlWaWV3O1xyXG4gICAgICAgIHVpVmlldy5ub2RlLmFjdGl2ZSA9IHRydWU7XHJcbiAgICAgICAgbGV0IHVpQ29tID0gdWlWaWV3LmdldENvbXBvbmVudChVSVRyYW5zZm9ybSk7XHJcbiAgICAgICAgaWYgKCF1aUNvbSkge1xyXG4gICAgICAgICAgICB1aUNvbSA9IHVpVmlldy5hZGRDb21wb25lbnQoVUlUcmFuc2Zvcm0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8g5b+r6YCf5YWz6Zet55WM6Z2i55qE6K6+572u77yM57uR5a6a55WM6Z2i5Lit55qEYmFja2dyb3VuZO+8jOWunueOsOW/q+mAn+WFs+mXrVxyXG4gICAgICAgIGlmICh1aVZpZXcucXVpY2tDbG9zZSkge1xyXG4gICAgICAgICAgICBsZXQgYmFja0dyb3VuZCA9IHVpVmlldy5ub2RlLmdldENoaWxkQnlOYW1lKCdiYWNrZ3JvdW5kJyk7XHJcbiAgICAgICAgICAgIGlmICghYmFja0dyb3VuZCkge1xyXG4gICAgICAgICAgICAgICAgYmFja0dyb3VuZCA9IG5ldyBOb2RlKClcclxuICAgICAgICAgICAgICAgIGJhY2tHcm91bmQubmFtZSA9ICdiYWNrZ3JvdW5kJztcclxuICAgICAgICAgICAgICAgIGxldCB1aUNvbSA9IGJhY2tHcm91bmQuYWRkQ29tcG9uZW50KFVJVHJhbnNmb3JtKTtcclxuICAgICAgICAgICAgICAgIHVpQ29tLnNldENvbnRlbnRTaXplKHZpZXcuZ2V0VmlzaWJsZVNpemUoKSk7XHJcbiAgICAgICAgICAgICAgICB1aVZpZXcubm9kZS5hZGRDaGlsZChiYWNrR3JvdW5kKTtcclxuICAgICAgICAgICAgICAgIHVpQ29tLnByaW9yaXR5ID0gLTE7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgYmFja0dyb3VuZC50YXJnZXRPZmYoTm9kZS5FdmVudFR5cGUuVE9VQ0hfU1RBUlQpO1xyXG4gICAgICAgICAgICBiYWNrR3JvdW5kLm9uKE5vZGUuRXZlbnRUeXBlLlRPVUNIX1NUQVJULCAoZXZlbnQ6IGFueSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgZXZlbnQucHJvcGFnYXRpb25TdG9wcGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIHRoaXMuY2xvc2UodWlWaWV3KTtcclxuICAgICAgICAgICAgfSwgYmFja0dyb3VuZCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IGNsYXNzTmFtZTogc3RyaW5nID0gdGhpcy5nZXRWaWV3Q2xhc3NOYW1lKHZpZXdWby52aWV3Q2xzKTtcclxuICAgICAgICAvLyDmt7vliqDliLDniLboioLngrlcclxuICAgICAgICBsZXQgdmlld0NvbnRhaW5lciA9IExheWVyTWFuYWdlci5nZXRMYXllcih2aWV3Vm8ubGF5ZXIpO1xyXG4gICAgICAgIGlmICh2aWV3Q29udGFpbmVyID09IG51bGwpIHtcclxuICAgICAgICAgICAgY29uc29sZS53YXJuKGAgLS0tLS0gb3BlbiAke2NsYXNzTmFtZX0gZmllbGQgY29udGFpbmVyIGlzIG51bGwgLS0tLS0gYClcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2aWV3Q29udGFpbmVyLmFkZENoaWxkKHVpVmlldy5ub2RlKVxyXG5cclxuICAgICAgICB1aUNvbS5wcmlvcml0eSA9IHVpSW5mby56T3JkZXIgfHwgdGhpcy5WaWV3U3RhY2subGVuZ3RoO1xyXG5cclxuICAgICAgICAvLyDliLfmlrDlhbbku5ZVSVxyXG4gICAgICAgIHRoaXMudXBkYXRlVUkoKTtcclxuXHJcbiAgICAgICAgLy8g5LuO6YKj5Liq55WM6Z2i5omT5byA55qEXHJcbiAgICAgICAgbGV0IGZyb21VSUlEOiBudW1iZXIgfCBzdHJpbmcgPSAwO1xyXG4gICAgICAgIGlmICh0aGlzLlZpZXdTdGFjay5sZW5ndGggPiAxKSB7XHJcbiAgICAgICAgICAgIGZyb21VSUlEID0gdGhpcy5WaWV3U3RhY2tbdGhpcy5WaWV3U3RhY2subGVuZ3RoIC0gMl0udWlJZFxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8g5omT5byA55WM6Z2i5LmL5YmN5Zue6LCDXHJcbiAgICAgICAgLy8gaWYgKHRoaXMudWlPcGVuQmVmb3JlRGVsZWdhdGUpIHtcclxuICAgICAgICAvLyAgICAgdGhpcy51aU9wZW5CZWZvcmVEZWxlZ2F0ZSh1aUlkLCBmcm9tVUlJRCk7XHJcbiAgICAgICAgLy8gfVxyXG5cclxuICAgICAgICAvLyDmiafooYxvbk9wZW7lm57osINcclxuICAgICAgICB1aVZpZXcub25PcGVuKGZyb21VSUlELCB1aUFyZ3MpO1xyXG4gICAgICAgIHRoaXMuYXV0b0V4ZWNBbmltYXRpb24odWlWaWV3LCBcInVpT3BlblwiLCAoKSA9PiB7XHJcbiAgICAgICAgICAgIHVpVmlldy5vbk9wZW5BbmlPdmVyKCk7XHJcbiAgICAgICAgICAgIC8vIGlmICh0aGlzLnVpT3BlbkRlbGVnYXRlKSB7XHJcbiAgICAgICAgICAgIC8vICAgICB0aGlzLnVpT3BlbkRlbGVnYXRlKHVpSWQsIGZyb21VSUlEKTtcclxuICAgICAgICAgICAgLy8gfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBhc3luYyBvcGVuPFQgZXh0ZW5kcyBOb2RlID0gTm9kZT4oY2xzOiB1bmtub3duLCBwYXJhbXM/OiB1bmtub3duKTogUHJvbWlzZTxUPjtcclxuICAgIHB1YmxpYyBhc3luYyBvcGVuPFQgZXh0ZW5kcyBOb2RlID0gTm9kZT4odmlld05hbWU6IHN0cmluZywgcGFyYW1zPzogdW5rbm93bik6IFByb21pc2U8VD47XHJcbiAgICBwdWJsaWMgYXN5bmMgb3BlbjxUIGV4dGVuZHMgTm9kZSA9IE5vZGU+KGlkOiBudW1iZXIsIHBhcmFtcz86IHVua25vd24pOiBQcm9taXNlPFQ+O1xyXG5cclxuICAgIC8qKiDmiZPlvIDnlYzpnaLlubbmt7vliqDliLDnlYzpnaLmoIjkuK0gKi9cclxuICAgIHB1YmxpYyBhc3luYyBvcGVuPFQgZXh0ZW5kcyBOb2RlID0gTm9kZT4odjogdW5rbm93biwgcGFyYW1zPzogdW5rbm93bik6IFByb21pc2U8VD4ge1xyXG5cclxuICAgICAgICBjb25zdCB2aWV3Vm86IFZpZXdSZWdpc3RlclZvID0gZ2V0Vmlld1JlZ2lzdGVyVm8odik7XHJcbiAgICAgICAgaWYgKCF2aWV3Vm8pIHtcclxuICAgICAgICAgICAgY29uc29sZS5lcnJvcihgICoqKioqIHZpZXcgJHt2fSBoYXMgbm90IHJlZ2lzdGVyZWQgKioqKiogYCk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCB1aUluZm86IFVJSW5mbyA9IHtcclxuICAgICAgICAgICAgdWlJZDogdmlld1ZvLmlkLFxyXG4gICAgICAgICAgICB1aUFyZ3M6IHBhcmFtcyxcclxuICAgICAgICAgICAgdWlWaWV3OiBudWxsXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuaXNPcGVuaW5nIHx8IHRoaXMuaXNDbG9zaW5nKSB7XHJcbiAgICAgICAgICAgIC8vIOaPkuWFpeW+heaJk+W8gOmYn+WIl1xyXG4gICAgICAgICAgICB0aGlzLlZpZXdPcGVuUXVldWUucHVzaCh1aUluZm8pO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgdWlJbmRleCA9IHRoaXMuZ2V0Vmlld0luZGV4KHZpZXdWby5pZCk7XHJcbiAgICAgICAgaWYgKC0xICE9IHVpSW5kZXgpIHtcclxuICAgICAgICAgICAgLy8g6YeN5aSN5omT5byA5LqG5ZCM5LiA5Liq55WM6Z2i77yM55u05o6l5Zue5Yiw6K+l55WM6Z2iXHJcbiAgICAgICAgICAgIHRoaXMuY2xvc2VUb1ZpZXcodiwgcGFyYW1zKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8g6K6+572uVUnnmoR6T3JkZXJcclxuICAgICAgICB1aUluZm8uek9yZGVyID0gdGhpcy5WaWV3U3RhY2subGVuZ3RoICsgMTtcclxuICAgICAgICB0aGlzLlZpZXdTdGFjay5wdXNoKHVpSW5mbyk7XHJcblxyXG4gICAgICAgIC8vIOWFiOWxj+iUveeCueWHu1xyXG4gICAgICAgIGlmICh2aWV3Vm8ucHJldmVudFRvdWNoKSB7XHJcbiAgICAgICAgICAgIHVpSW5mby5wcmV2ZW50Tm9kZSA9IHRoaXMucHJldmVudFRvdWNoKHZpZXdWby5sYXllciwgdWlJbmZvLnpPcmRlcik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmlzT3BlbmluZyA9IHRydWU7XHJcblxyXG4gICAgICAgIHRoaXMuZ2V0T3JDcmVhdGVVSSh2aWV3Vm8pLnRoZW4oKHZpZXdOb2RlOiBCYXNlVmlldykgPT4ge1xyXG4gICAgICAgICAgICBpZiAodWlJbmZvLmlzQ2xvc2UgfHwgdmlldyA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oYGdldE9yQ3JlYXRlVUkgJHt2aWV3Vm8uaWR9IGZhaWxlIVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjbG9zZSBzdGF0ZSA6ICR7dWlJbmZvLmlzQ2xvc2V9ICwgdWlWaWV3IDogJHt2aWV3fWApXHJcbiAgICAgICAgICAgICAgICB0aGlzLmlzT3BlbmluZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgaWYgKHVpSW5mby5wcmV2ZW50Tm9kZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHVpSW5mby5wcmV2ZW50Tm9kZS5kZXN0cm95KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdWlJbmZvLnByZXZlbnROb2RlID0gbnVsbDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLm9uVmlld09wZW4odmlld1ZvLCB2aWV3Tm9kZSwgdWlJbmZvLCBwYXJhbXMpO1xyXG4gICAgICAgICAgICB0aGlzLmlzT3BlbmluZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICB0aGlzLmF1dG9FeGVjTmV4dFVJKCk7XHJcbiAgICAgICAgfSlcclxuXHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5re75Yqg6Zi75q2i6L6T5YWl5LqL5Lu257uE5Lu2XHJcbiAgICAgKiBAcGFyYW0gbm9kZSAtIFxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIGFkZEJsb2NrSW5wdXRFdmVudChub2RlOiBOb2RlKSB7XHJcbiAgICAgICAgaWYgKCFub2RlKSByZXR1cm47XHJcbiAgICAgICAgaWYgKCFub2RlLmdldENvbXBvbmVudChCbG9ja0lucHV0RXZlbnRzKSkgbm9kZS5hZGRDb21wb25lbnQoQmxvY2tJbnB1dEV2ZW50cyk7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIHByaXZhdGUgZ2V0T3JDcmVhdGVVSSh2aWV3Vm86IFZpZXdSZWdpc3RlclZvLCBwYXJhbXM/OiBhbnkpOiBQcm9taXNlPEJhc2VWaWV3PiB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGFzeW5jIChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgICAgICAgaWYgKCF2aWV3Vm8pIHtcclxuICAgICAgICAgICAgICAgIHJlc29sdmUobnVsbCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8g5aaC5p6c5om+5Yiw57yT5a2Y5a+56LGh77yM5YiZ55u05o6l6L+U5ZueXHJcbiAgICAgICAgICAgIGxldCB1aVZpZXc6IEJhc2VWaWV3IHwgbnVsbCA9IHRoaXMuVmlld0NhY2hlW3ZpZXdWby5pZF07XHJcbiAgICAgICAgICAgIGlmICh1aVZpZXcpIHtcclxuICAgICAgICAgICAgICAgIHJlc29sdmUodWlWaWV3KTtcclxuICAgICAgICAgICAgICAgIHJldHVyblxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGxldCBjbGFzc05hbWUgPSB0aGlzLmdldFZpZXdDbGFzc05hbWUodmlld1ZvLnZpZXdDbHMpO1xyXG4gICAgICAgICAgICBsZXQgcHJlZmFiUGF0aFByZWZpeCA9IHZpZXdWby5wcmVmYWJQYXRoUHJlZml4O1xyXG4gICAgICAgICAgICBpZiAoU3RyaW5nVXRpbHMuZW1wdHkocHJlZmFiUGF0aFByZWZpeCkpIHtcclxuICAgICAgICAgICAgICAgIHByZWZhYlBhdGhQcmVmaXggPSBWaWV3Q29uc3QuZGVmYXVsdFByZWZhYlBhdGhQcmVmaXg7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgbGV0IHByZWZhYk5hbWUgPSB2aWV3Vm8ucHJlZmFiTmFtZTtcclxuICAgICAgICAgICAgaWYgKHByZWZhYk5hbWUgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgcHJlZmFiTmFtZSA9IGNsYXNzTmFtZTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgbGV0IHByZWZhYlBhdGggPSBwcmVmYWJQYXRoUHJlZml4ICsgcHJlZmFiTmFtZTtcclxuICAgICAgICAgICAgbGV0IG5vZGUgPSBhd2FpdCBBc3NldE1nci5pbnN0YW5jZS5jcmVhdGVQcmVmYWIocHJlZmFiUGF0aCk7XHJcbiAgICAgICAgICAgIGlmICghbm9kZSkge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihgICoqKioqIG9wZW4gJHtjbGFzc05hbWV9IGZhaWxlZCAke3ByZWZhYk5hbWV9IGlzIG5vdCBleGlzdCAqKioqKiBgKTtcclxuICAgICAgICAgICAgICAgIHJlc29sdmUobnVsbCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgbm9kZS5uYW1lID0gY2xhc3NOYW1lO1xyXG5cclxuICAgICAgICAgICAgVXRpbHMuYWRkTm9kZVNjcmlwdChub2RlLCB2aWV3Vm8udmlld0Nscyk7XHJcbiAgICAgICAgICAgIGNvbnN0IHZpZXc6IEJhc2VWaWV3ID0gdGhpcy5nZXRWaWV3U2NyaXB0KGNsYXNzTmFtZSwgbm9kZSk7XHJcbiAgICAgICAgICAgIGlmICh2aWV3KSB7XHJcbiAgICAgICAgICAgICAgICB2aWV3LmluaXQocGFyYW1zKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZih2aWV3LmNhY2hlKXtcclxuICAgICAgICAgICAgICAgIHRoaXMuVmlld0NhY2hlW3ZpZXdWby5pZF0gPSB2aWV3O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJlc29sdmUodmlldyk7XHJcbiAgICAgICAgfSlcclxuXHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDmm7/mjaLmoIjpobbnlYzpnaJcclxuICAgICAqIEBwYXJhbSBjbHMg6ZyA6KaB5omT5byA55qE55WM6Z2i57G7XHJcbiAgICAgKiBAcGFyYW0gdWlBcmdzIOeVjOmdouWPguaVsFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgcmVwbGFjZShjbHM6IHVua25vd24sIHVpQXJncz86IHVua25vd24pOiB2b2lkO1xyXG4gICAgLyoqXHJcbiAgICAgKiDmm7/mjaLmoIjpobbnlYzpnaJcclxuICAgICAqIEBwYXJhbSBjbGFzc05hbWUg57G75ZCNXHJcbiAgICAgKiBAcGFyYW0gdWlBcmdzIOeVjOmdouWPguaVsFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgcmVwbGFjZShjbGFzc05hbWU6IHN0cmluZywgdWlBcmdzPzogdW5rbm93bik6IHZvaWQ7XHJcbiAgICAvKipcclxuICAgICAqIOabv+aNouagiOmhtueVjOmdolxyXG4gICAgICogQHBhcmFtIGlkIOeVjOmdomlkXHJcbiAgICAgKiBAcGFyYW0gdWlBcmdzIOeVjOmdouWPguaVsFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgcmVwbGFjZShpZDogbnVtYmVyLCB1aUFyZ3M/OiB1bmtub3duKTogdm9pZDtcclxuICAgIC8qKiDmm7/mjaLmoIjpobbnlYzpnaIgKi9cclxuICAgIHB1YmxpYyByZXBsYWNlKHY6IHVua25vd24sIHVpQXJnczogYW55ID0gbnVsbCkge1xyXG4gICAgICAgIGxldCB1aUlkOiBudW1iZXIgfCBzdHJpbmcgPSB0aGlzLmdldFVuaWZ5UGFyYW0odik7XHJcbiAgICAgICAgdGhpcy5jbG9zZSh0aGlzLlZpZXdTdGFja1t0aGlzLlZpZXdTdGFjay5sZW5ndGggLSAxXS51aVZpZXchKTtcclxuICAgICAgICB0aGlzLm9wZW4odWlJZCwgdWlBcmdzKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOWFs+mXreW9k+WJjeeVjOmdolxyXG4gICAgICogQHBhcmFtIGNsb3NlVUkg6KaB5YWz6Zet55qE55WM6Z2iXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBjbG9zZShjbG9zZVVJPzogQmFzZVZpZXcpIHtcclxuICAgICAgICBsZXQgdWlDb3VudCA9IHRoaXMuVmlld1N0YWNrLmxlbmd0aDtcclxuICAgICAgICBpZiAodWlDb3VudCA8IDEgfHwgdGhpcy5pc0Nsb3NpbmcgfHwgdGhpcy5pc09wZW5pbmcpIHtcclxuICAgICAgICAgICAgaWYgKGNsb3NlVUkpIHtcclxuICAgICAgICAgICAgICAgIC8vIOaPkuWFpeW+heWFs+mXremYn+WIl1xyXG4gICAgICAgICAgICAgICAgdGhpcy5WaWV3Q2xvc2VRdWV1ZS5wdXNoKGNsb3NlVUkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCB1aUluZm86IFVJSW5mbyB8IHVuZGVmaW5lZDtcclxuICAgICAgICBpZiAoY2xvc2VVSSkge1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpbmRleCA9IHRoaXMuVmlld1N0YWNrLmxlbmd0aCAtIDE7IGluZGV4ID49IDA7IGluZGV4LS0pIHtcclxuICAgICAgICAgICAgICAgIGxldCB1aSA9IHRoaXMuVmlld1N0YWNrW2luZGV4XTtcclxuICAgICAgICAgICAgICAgIGlmICh1aS51aVZpZXcgPT09IGNsb3NlVUkpIHtcclxuICAgICAgICAgICAgICAgICAgICB1aUluZm8gPSB1aTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLlZpZXdTdGFjay5zcGxpY2UoaW5kZXgsIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHVpSW5mbyA9IHRoaXMuVmlld1N0YWNrLnBvcCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyDmib7kuI3liLDov5nkuKpVSVxyXG4gICAgICAgIGlmICh1aUluZm8gPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyDlhbPpl63lvZPliY3nlYzpnaJcclxuICAgICAgICBsZXQgdWlJZCA9IHVpSW5mby51aUlkO1xyXG4gICAgICAgIGxldCB1aVZpZXcgPSB1aUluZm8udWlWaWV3O1xyXG4gICAgICAgIHVpSW5mby5pc0Nsb3NlID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgLy8g5Zue5pS26YGu572p5bGCXHJcbiAgICAgICAgaWYgKHVpSW5mby5wcmV2ZW50Tm9kZSkge1xyXG4gICAgICAgICAgICB1aUluZm8ucHJldmVudE5vZGUuZGVzdHJveSgpO1xyXG4gICAgICAgICAgICB1aUluZm8ucHJldmVudE5vZGUgPSBudWxsO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKCF1aVZpZXcpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IHByZVVJSW5mbyA9IHRoaXMuVmlld1N0YWNrW3VpQ291bnQgLSAyXTtcclxuICAgICAgICAvLyDlpITnkIbmmL7npLrmqKHlvI9cclxuICAgICAgICB0aGlzLnVwZGF0ZVVJKCk7XHJcbiAgICAgICAgbGV0IGNsb3NlID0gKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLmlzQ2xvc2luZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAvLyDmmL7npLrkuYvliY3nmoTnlYzpnaJcclxuICAgICAgICAgICAgaWYgKHByZVVJSW5mbyAmJiBwcmVVSUluZm8udWlWaWV3ICYmIHRoaXMuaXNUb3BWaWV3KHByZVVJSW5mby51aUlkKSkge1xyXG4gICAgICAgICAgICAgICAgLy8g5aaC5p6c5LmL5YmN55qE55WM6Z2i5by55Yiw5LqG5pyA5LiK5pa577yI5Lit6Ze05pyJ6IKv6IO95omT5byA5LqG5YW25LuW55WM6Z2i77yJXHJcbiAgICAgICAgICAgICAgICBwcmVVSUluZm8udWlWaWV3Lm5vZGUuYWN0aXZlID0gdHJ1ZVxyXG4gICAgICAgICAgICAgICAgLy8g5Zue6LCDb25Ub3BcclxuICAgICAgICAgICAgICAgIHByZVVJSW5mby51aVZpZXcub25Ub3AodWlJZCwgdWlWaWV3IS5vbkNsb3NlKCkpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdWlWaWV3IS5vbkNsb3NlKCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIGlmICh0aGlzLnVpQ2xvc2VEZWxlZ2F0ZSkge1xyXG4gICAgICAgICAgICAvLyAgICAgdGhpcy51aUNsb3NlRGVsZWdhdGUodWlJZCk7XHJcbiAgICAgICAgICAgIC8vIH1cclxuICAgICAgICAgICAgaWYgKHVpVmlldyEuY2FjaGUpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuVmlld0NhY2hlW3VpSWRdID0gdWlWaWV3ITtcclxuICAgICAgICAgICAgICAgIHVpVmlldyEubm9kZS5yZW1vdmVGcm9tUGFyZW50KCk7XHJcbiAgICAgICAgICAgICAgICBsb2coYHVpVmlldyByZW1vdmVGcm9tUGFyZW50ICR7dWlJbmZvIS51aUlkfWApO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgLy8gdWlWaWV3IS5yZWxlYXNlQXNzZXRzKCk7XHJcbiAgICAgICAgICAgICAgICB1aVZpZXchLm5vZGUuZGVzdHJveSgpO1xyXG4gICAgICAgICAgICAgICAgbG9nKGB1aVZpZXcgZGVzdHJveSAke3VpSW5mbyEudWlJZH1gKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLmF1dG9FeGVjTmV4dFVJKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIOaJp+ihjOWFs+mXreWKqOeUu1xyXG4gICAgICAgIHRoaXMuYXV0b0V4ZWNBbmltYXRpb24odWlWaWV3LCBcInVpQ2xvc2VcIiwgY2xvc2UpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiDlhbPpl63miYDmnInnlYzpnaIgKi9cclxuICAgIHB1YmxpYyBjbG9zZUFsbCgpIHtcclxuICAgICAgICAvLyDkuI3mkq3mlL7liqjnlLvvvIzkuZ/kuI3muIXnkIbnvJPlrZhcclxuICAgICAgICBmb3IgKGNvbnN0IHVpSW5mbyBvZiB0aGlzLlZpZXdTdGFjaykge1xyXG4gICAgICAgICAgICB1aUluZm8uaXNDbG9zZSA9IHRydWU7XHJcbiAgICAgICAgICAgIGlmICh1aUluZm8ucHJldmVudE5vZGUpIHtcclxuICAgICAgICAgICAgICAgIHVpSW5mby5wcmV2ZW50Tm9kZS5kZXN0cm95KCk7XHJcbiAgICAgICAgICAgICAgICB1aUluZm8ucHJldmVudE5vZGUgPSBudWxsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh1aUluZm8udWlWaWV3KSB7XHJcbiAgICAgICAgICAgICAgICB1aUluZm8udWlWaWV3Lm9uQ2xvc2UoKTtcclxuICAgICAgICAgICAgICAgIC8vIHVpSW5mby51aVZpZXcucmVsZWFzZUFzc2V0cygpO1xyXG4gICAgICAgICAgICAgICAgdWlJbmZvLnVpVmlldy5ub2RlLmRlc3Ryb3koKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLlZpZXdPcGVuUXVldWUgPSBbXTtcclxuICAgICAgICB0aGlzLlZpZXdDbG9zZVF1ZXVlID0gW107XHJcbiAgICAgICAgdGhpcy5WaWV3U3RhY2sgPSBbXTtcclxuICAgICAgICB0aGlzLmlzT3BlbmluZyA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuaXNDbG9zaW5nID0gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGNsb3NlVG9WaWV3KGNsczogdW5rbm93biwgcGFyYW1zPzogdW5rbm93biwgYk9wZW5TZWxmPzogYm9vbGVhbik6IHZvaWQ7XHJcbiAgICBwdWJsaWMgY2xvc2VUb1ZpZXcodmlld05hbWU6IHN0cmluZywgcGFyYW1zPzogdW5rbm93biwgYk9wZW5TZWxmPzogYm9vbGVhbik6IHZvaWQ7XHJcbiAgICBwdWJsaWMgY2xvc2VUb1ZpZXcoaWQ6IG51bWJlciwgcGFyYW1zPzogdW5rbm93biwgYk9wZW5TZWxmPzogYm9vbGVhbik6IHZvaWQ7XHJcbiAgICAvKipcclxuICAgICAqIOWFs+mXreeVjOmdou+8jOS4gOebtOWFs+mXreWIsOmhtumDqOS4unVpSWTnmoTnlYzpnaLvvIzkuLrpgb/lhY3lvqrnjq/miZPlvIBVSeWvvOiHtFVJ5qCI5rqi5Ye6XHJcbiAgICAgKiBAcGFyYW0gdWlJZCDopoHlhbPpl63liLDnmoR1aUlk77yI5YWz6Zet5YW26aG26YOo55qEdWnvvIlcclxuICAgICAqIEBwYXJhbSB1aUFyZ3Mg5omT5byA55qE5Y+C5pWwXHJcbiAgICAgKiBAcGFyYW0gYk9wZW5TZWxmIFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgY2xvc2VUb1ZpZXcodjogdW5rbm93biwgdWlBcmdzOiBhbnksIGJPcGVuU2VsZiA9IHRydWUpOiB2b2lkIHtcclxuICAgICAgICBsZXQgaWR4ID0gdGhpcy5nZXRWaWV3SW5kZXgodik7XHJcbiAgICAgICAgaWYgKC0xID09IGlkeCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZHggPSBiT3BlblNlbGYgPyBpZHggOiBpZHggKyAxO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSB0aGlzLlZpZXdTdGFjay5sZW5ndGggLSAxOyBpID49IGlkeDsgLS1pKSB7XHJcbiAgICAgICAgICAgIGxldCB1aUluZm8gPSB0aGlzLlZpZXdTdGFjay5wb3AoKTtcclxuICAgICAgICAgICAgaWYgKCF1aUluZm8pIHtcclxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBsZXQgdWlJZCA9IHVpSW5mby51aUlkO1xyXG4gICAgICAgICAgICBsZXQgdWlWaWV3ID0gdWlJbmZvLnVpVmlldztcclxuICAgICAgICAgICAgdWlJbmZvLmlzQ2xvc2UgPSB0cnVlXHJcblxyXG4gICAgICAgICAgICAvLyDlm57mlLblsY/olL3lsYJcclxuICAgICAgICAgICAgaWYgKHVpSW5mby5wcmV2ZW50Tm9kZSkge1xyXG4gICAgICAgICAgICAgICAgdWlJbmZvLnByZXZlbnROb2RlLmRlc3Ryb3koKTtcclxuICAgICAgICAgICAgICAgIHVpSW5mby5wcmV2ZW50Tm9kZSA9IG51bGw7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIGlmICh0aGlzLnVpQ2xvc2VEZWxlZ2F0ZSkge1xyXG4gICAgICAgICAgICAvLyAgICAgdGhpcy51aUNsb3NlRGVsZWdhdGUodWlJZCk7XHJcbiAgICAgICAgICAgIC8vIH1cclxuXHJcbiAgICAgICAgICAgIGlmICh1aVZpZXcpIHtcclxuICAgICAgICAgICAgICAgIHVpVmlldy5vbkNsb3NlKClcclxuICAgICAgICAgICAgICAgIGlmICh1aVZpZXcuY2FjaGUpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLlZpZXdDYWNoZVt1aUlkXSA9IHVpVmlldztcclxuICAgICAgICAgICAgICAgICAgICB1aVZpZXcubm9kZS5yZW1vdmVGcm9tUGFyZW50KCk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIHVpVmlldy5yZWxlYXNlQXNzZXRzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdWlWaWV3Lm5vZGUuZGVzdHJveSgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLnVwZGF0ZVVJKCk7XHJcbiAgICAgICAgdGhpcy5WaWV3T3BlblF1ZXVlID0gW107XHJcbiAgICAgICAgdGhpcy5WaWV3Q2xvc2VRdWV1ZSA9IFtdO1xyXG4gICAgICAgIGJPcGVuU2VsZiAmJiB0aGlzLm9wZW4odiwgdWlBcmdzKTtcclxuICAgIH1cclxuXHJcbiAgICAvKiog5riF55CG55WM6Z2i57yT5a2YICovXHJcbiAgICBwdWJsaWMgY2xlYXJDYWNoZSgpOiB2b2lkIHtcclxuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiB0aGlzLlZpZXdDYWNoZSkge1xyXG4gICAgICAgICAgICBsZXQgdWkgPSB0aGlzLlZpZXdDYWNoZVtrZXldO1xyXG4gICAgICAgICAgICBpZiAoaXNWYWxpZCh1aS5ub2RlKSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGlzVmFsaWQodWkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gdWkucmVsZWFzZUFzc2V0cygpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdWkubm9kZS5kZXN0cm95KCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5WaWV3Q2FjaGUgPSB7fTtcclxuICAgIH1cclxuXHJcbiAgICAvKioqKioqKioqKioqKioqKioqKiogVUnnmoTkvr/mjbfmjqXlj6MgKioqKioqKioqKioqKioqKioqKi9cclxuICAgIHB1YmxpYyBpc1RvcFZpZXcodWlJZDogbnVtYmVyIHwgc3RyaW5nKTogYm9vbGVhbiB7XHJcbiAgICAgICAgaWYgKHRoaXMuVmlld1N0YWNrLmxlbmd0aCA9PSAwKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuVmlld1N0YWNrW3RoaXMuVmlld1N0YWNrLmxlbmd0aCAtIDFdLnVpSWQgPT0gdWlJZDtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0Vmlldyh1aUlkOiBudW1iZXIpOiBCYXNlVmlldyB8IG51bGwge1xyXG4gICAgICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCB0aGlzLlZpZXdTdGFjay5sZW5ndGg7IGluZGV4KyspIHtcclxuICAgICAgICAgICAgY29uc3QgZWxlbWVudCA9IHRoaXMuVmlld1N0YWNrW2luZGV4XTtcclxuICAgICAgICAgICAgaWYgKHVpSWQgPT0gZWxlbWVudC51aUlkKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZWxlbWVudC51aVZpZXc7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldFRvcFZpZXcoKTogQmFzZVZpZXcgfCBudWxsIHtcclxuICAgICAgICBpZiAodGhpcy5WaWV3U3RhY2subGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5WaWV3U3RhY2tbdGhpcy5WaWV3U3RhY2subGVuZ3RoIC0gMV0udWlWaWV3O1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGdldFZpZXdTY3JpcHQ8VCBleHRlbmRzIEJhc2VWaWV3ID0gQmFzZVZpZXc+KGNsYXNzTmFtZTogc3RyaW5nLCBub2RlOiBOb2RlKTogVCB7XHJcbiAgICAgICAgcmV0dXJuIG5vZGUuZ2V0Q29tcG9uZW50KGNsYXNzTmFtZSkgYXMgVDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOiOt+WPlueVjOmdouexu+WQjVxyXG4gICAgICogQHBhcmFtIGNscyAtIOeVjOmdouexu1xyXG4gICAgICogQHJldHVybnMg55WM6Z2i57G75ZCN56ew5a2X56ym5LiyXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgZ2V0Vmlld0NsYXNzTmFtZShjbHM6IHVua25vd24pOiBzdHJpbmcge1xyXG4gICAgICAgIGxldCBjbGFzc05hbWUgPSBcIlwiO1xyXG4gICAgICAgIGlmICh0eXBlb2YgY2xzID09PSBcInN0cmluZ1wiKSBjbGFzc05hbWUgPSBjbHM7XHJcbiAgICAgICAgZWxzZSBpZiAodHlwZW9mIGNscyA9PT0gXCJmdW5jdGlvblwiKSBjbGFzc05hbWUgPSBqcy5nZXRDbGFzc05hbWUoY2xzKTtcclxuICAgICAgICBlbHNlIGlmICh0eXBlb2YgY2xzID09PSBcIm9iamVjdFwiKSBjbGFzc05hbWUgPSBqcy5nZXRDbGFzc05hbWUoY2xzLmNvbnN0cnVjdG9yKTtcclxuICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJWaWV3TWFuYWdlci5nZXRWaWV3Q2xhc3NOYW1lOiBjbHMgaXMgbm90IHN0cmluZyBvciBmdW5jdGlvblwiKTtcclxuICAgICAgICByZXR1cm4gY2xhc3NOYW1lO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqIOWPguaVsOW9kuS4gOWMllxyXG4gICAgICogQHBhcmFtIHYgXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBnZXRVbmlmeVBhcmFtKHY6IHVua25vd24pOiBudW1iZXIgfCBzdHJpbmcge1xyXG4gICAgICAgIGxldCBpZDogbnVtYmVyIHwgc3RyaW5nID0gbnVsbDtcclxuICAgICAgICBpZiAodHlwZW9mIHYgPT0gXCJudW1iZXJcIiB8fCB0eXBlb2YgdiA9PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgIGlkID0gdjtcclxuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiB2ID09IFwiZnVuY3Rpb25cIikge1xyXG4gICAgICAgICAgICBpZCA9IHRoaXMuZ2V0Vmlld0NsYXNzTmFtZSh2KTtcclxuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiB2ID09IFwib2JqZWN0XCIpIHtcclxuICAgICAgICAgICAgaWQgPSAodiBhcyBWaWV3UmVnaXN0ZXJWbykuaWQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBpZDtcclxuICAgIH1cclxuXHJcblxyXG4gICAgcHVibGljIGdldFZpZXdJbmRleChjbHM6IHVua25vd24pOiBudW1iZXI7XHJcbiAgICBwdWJsaWMgZ2V0Vmlld0luZGV4KGNsYXNzTmFtZTogc3RyaW5nKTogbnVtYmVyO1xyXG4gICAgcHVibGljIGdldFZpZXdJbmRleChpZDogbnVtYmVyKTogbnVtYmVyO1xyXG4gICAgcHVibGljIGdldFZpZXdJbmRleCh2bzogVmlld1JlZ2lzdGVyVm8pOiBudW1iZXI7XHJcbiAgICBwdWJsaWMgZ2V0Vmlld0luZGV4KHY6IHVua25vd24pOiBudW1iZXIge1xyXG4gICAgICAgIGxldCBpZDogbnVtYmVyIHwgc3RyaW5nID0gdGhpcy5nZXRVbmlmeVBhcmFtKHYpO1xyXG4gICAgICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCB0aGlzLlZpZXdTdGFjay5sZW5ndGg7IGluZGV4KyspIHtcclxuICAgICAgICAgICAgY29uc3QgZWxlbWVudCA9IHRoaXMuVmlld1N0YWNrW2luZGV4XTtcclxuICAgICAgICAgICAgaWYgKGlkID09IGVsZW1lbnQudWlJZCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGluZGV4O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiAtMTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0SXNPcGVuKGNsYXM6IHVua25vd24pOiBib29sZWFuO1xyXG4gICAgcHVibGljIGdldElzT3BlbihjbGFzc05hbWU6IHN0cmluZyk6IGJvb2xlYW47XHJcbiAgICBwdWJsaWMgZ2V0SXNPcGVuKGlkOiBudW1iZXIpOiBib29sZWFuO1xyXG4gICAgcHVibGljIGdldElzT3Blbih2OiB1bmtub3duKTogYm9vbGVhbiB7XHJcbiAgICAgICAgbGV0IGluZGV4OiBudW1iZXIgPSB0aGlzLmdldFZpZXdJbmRleCh2KTtcclxuICAgICAgICByZXR1cm4gaW5kZXggIT0gLTE7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBsZXQgdmlld01hbmFnZXI6IFZpZXdNYW5hZ2VyID0gbmV3IFZpZXdNYW5hZ2VyKCk7XHJcbndpbmRvd1tcInZpZXdNYW5hZ2VyXCJdID0gdmlld01hbmFnZXI7XHJcbiIsImltcG9ydCB7IGpzIH0gZnJvbSBcImNjXCI7XHJcbmltcG9ydCBWaWV3UmVnaXN0ZXJWbyBmcm9tIFwiLi9WaWV3UmVnaXN0ZXJWb1wiO1xyXG5cclxuY29uc3QgcmVnaXN0ZXJWaWV3czogVmlld1JlZ2lzdGVyVm9bXSA9IFtdO1xyXG5jb25zdCByZWdpc3RlclZpZXdEaWN0aW9uYXJ5OiB7IFtrZXk6IG51bWJlciB8IHN0cmluZ106IFZpZXdSZWdpc3RlclZvIH0gPSB7fTtcclxuY29uc3QgcmVnaXN0ZXJWaWV3RGljdGlvbmFyeUJ5VmlldzogeyBba2V5OiBzdHJpbmddOiBWaWV3UmVnaXN0ZXJWbyB9ID0ge307XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gcmVnaXN0ZXJWaWV3KHZvOiBWaWV3UmVnaXN0ZXJWbyk6IHZvaWQge1xyXG4gICAgY29uc3QgY2xhc3NOYW1lOiBzdHJpbmcgPSBqcy5nZXRDbGFzc05hbWUodm8udmlld0Nscyk7XHJcbiAgICBpZiAodm8uaWQgPT0gbnVsbCkge1xyXG4gICAgICAgIHZvLmlkID0gY2xhc3NOYW1lO1xyXG4gICAgfVxyXG4gICAgcmVnaXN0ZXJWaWV3cy5wdXNoKHZvKTtcclxuICAgIHJlZ2lzdGVyVmlld0RpY3Rpb25hcnlbdm8uaWRdID0gdm87XHJcbiAgICByZWdpc3RlclZpZXdEaWN0aW9uYXJ5QnlWaWV3W2NsYXNzTmFtZV0gPSB2bztcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldFJlZ2lzdGVyZWRWaWV3cygpOiBWaWV3UmVnaXN0ZXJWb1tdIHtcclxuICAgIHJldHVybiByZWdpc3RlclZpZXdzO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0Vmlld1JlZ2lzdGVyVm8oY2xzOiB1bmtub3duKTogVmlld1JlZ2lzdGVyVm87XHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRWaWV3UmVnaXN0ZXJWbyh2aWV3TmFtZTogc3RyaW5nKTogVmlld1JlZ2lzdGVyVm87XHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRWaWV3UmVnaXN0ZXJWbyhpZDogbnVtYmVyKTogVmlld1JlZ2lzdGVyVm87XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0Vmlld1JlZ2lzdGVyVm8odmFsdWU6IHVua25vd24pOiBWaWV3UmVnaXN0ZXJWbyB7XHJcbiAgICBsZXQgdm86IFZpZXdSZWdpc3RlclZvID0gbnVsbDtcclxuICAgIGlmICh0eXBlb2YgdmFsdWUgPT0gXCJudW1iZXJcIiB8fCB0eXBlb2YgdmFsdWUgPT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgIHZvID0gcmVnaXN0ZXJWaWV3RGljdGlvbmFyeVt2YWx1ZV07XHJcbiAgICAgICAgaWYgKHZvICE9IG51bGwpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHZvO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2byA9IHJlZ2lzdGVyVmlld0RpY3Rpb25hcnlCeVZpZXdbdmFsdWVdO1xyXG4gICAgfSBlbHNlIGlmICh0eXBlb2YgdmFsdWUgPT0gXCJmdW5jdGlvblwiKSB7XHJcbiAgICAgICAgbGV0IGNsYXNzTmFtZTogc3RyaW5nID0ganMuZ2V0Q2xhc3NOYW1lKHZhbHVlKTtcclxuICAgICAgICB2byA9IHJlZ2lzdGVyVmlld0RpY3Rpb25hcnlCeVZpZXdbY2xhc3NOYW1lXTtcclxuICAgIH1cclxuICAgIHJldHVybiB2bztcclxufSIsImltcG9ydCB7IENvbXBvbmVudCB9IGZyb20gXCJjY1wiO1xyXG5pbXBvcnQgeyBQYW5lbFR5cGUgfSBmcm9tIFwiLi9QYW5lbEVudW1cIjtcclxuaW1wb3J0IHsgTGF5ZXJUeXBlIH0gZnJvbSBcIi4vTGF5ZXJNYW5hZ2VyXCI7XHJcblxyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVmlld1JlZ2lzdGVyVm8ge1xyXG4gICAgcHVibGljIGlkOiBQYW5lbFR5cGUgfCBzdHJpbmc7XHJcbiAgICAvKiog54i257qnaWTvvIznvLrnnIHliJnmjILliLByb2905LiLICovXHJcbiAgICBwdWJsaWMgcGFyZW50PzogbnVtYmVyIHwgc3RyaW5nIHwgdW5rbm93bjtcclxuICAgIC8qKiDnlYzpnaLnsbsgKi9cclxuICAgIHB1YmxpYyB2aWV3Q2xzOiB7IHByb3RvdHlwZTogQ29tcG9uZW50IH07XHJcbiAgICAvKiog55WM6Z2i5bGC57qnICovXHJcbiAgICBwdWJsaWMgbGF5ZXI6IExheWVyVHlwZTtcclxuICAgIC8qKiDpooTliLbkvZPot6/lvoTliY3nvIDvvIznvLrnnIHluLjph48gKi9cclxuICAgIHB1YmxpYyBwcmVmYWJQYXRoUHJlZml4Pzogc3RyaW5nO1xyXG4gICAgLyoqIOmihOWItuS9k+WQjeensO+8jOmcgOimgeW4puS4iumZpOWJjee8gOi3r+W+hOWklueahOi3r+W+hO+8jOe8uuecgeexu+WQjSAqL1xyXG4gICAgcHVibGljIHByZWZhYk5hbWU/OiBzdHJpbmc7XHJcblxyXG4gICAgcHVibGljIHByZXZlbnRUb3VjaD86IGJvb2xlYW4gPSBmYWxzZTtcclxufSJdfQ==